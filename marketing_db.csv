"TABLE_NAME","VIEW_DEFINITION"
"V_ALL_AUDIENCES","create or replace view MARKETING_DATABASE.COHORTPOC.V_ALL_AUDIENCES as (
select*
from ""MARKETING_DATABASE"".""COHORTPOC"".""TWO_A""
union all 
select*
from ""MARKETING_DATABASE"".""COHORTPOC"".""TWO_B""
union all 
select * 
from ""MARKETING_DATABASE"".""COHORTPOC"".""TWO_C""
union all 
SELECT*
from ""MARKETING_DATABASE"".""COHORTPOC"".""SIX_A""

);"
"SHIPPING_SKU_INFO","create or replace view MARKETING_DATABASE.DBT_PRODUCTION.SHIPPING_SKU_INFO (
	ORDER_NUMBER,
	ORDER_DATE,
	ORDER_SHIPPED_DATE,
	DELIVERED_DATE,
	INTL_DOMESTIC,
	COUNTRY,
	CITY,
	STATE,
	ZIP_CODE,
	SHIP_SERVICE_CODE,
	SHIPPING_COST,
	SHIPPING_WEIGHT,
	FULFILLMENT_PARTNER,
	SYN_WK,
	SYN_RF,
	SYN_RF_2MO,
	SYN_RF_3MO,
	SYN_RF_6MO,
	PDS_WK,
	PDS_RF,
	PDS_RF_2MO
) as (

WITH updated_invoices as 
(   select 
      *
    , CONCAT('SEED-',invoice_number) as updated_invoice_number
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY""
    where billed_date > '2021-12-15'
    )

, updated_sku_adjustments as 
(    
    select 
      i.updated_invoice_number as order_number
    , a.ADJUSTMENT_PLAN_CODE as SKU
    , a.ADJUSTMENT_QUANTITY as quantity
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a 
    left join updated_invoices as i on a.invoice_id = i.id
    where adjustment_created_at > '2021-12-31'
    and adjustment_description not ilike '%shipping%' 
    and a.adjustment_plan_code 
        in ('syn-wk','syn-rf','syn-rf-2mo','syn-rf-3mo','syn-rf-6mo','pds-wk','pds-rf','pds-rf-2mo')
     )

, finalized_sku as 
(
     select 
      *
     from updated_sku_adjustments 
        pivot(sum(quantity) for SKU 
            in ('syn-wk','syn-rf','syn-rf-2mo','syn-rf-3mo','syn-rf-6mo','pds-wk','pds-rf','pds-rf-2mo'))
        as p 
        order by order_number
      )
    
, shipping_wcd_domestic as 
(
        select 
          shipment_guid
        , max(shipping_cost) as shipping_cost 
        , max(shipping_weight) as shipping_weight
        , max(to_date(delivered_date)) as delivered_date
        from 
        
        (select order_number as shipment_guid,shipping_cost,weight as shipping_weight,to_date(delivered_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_MISSING""  ---- ADDED BY CP ON 6/9

        UNION ALL
        
        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_JAN_2022""

        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_FEB_22""

        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_MAR_2022""

        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_APR_2022""

        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_MAY_2022""

        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_JUN_2022""

        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_JUL_2022""

        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_AUG_2022""
      
        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_SEPT_22""
      
        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_OCT_22""
      
        UNION ALL 
      
        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_NOV_2022""
      
        UNION ALL 
      
        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_DEC_2022""
      
        UNION ALL 
      
        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_JAN_2023""

        UNION ALL 
      
        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_FEB_2023"" ---- ADDED BY CP ON 6/8

        UNION ALL 
      
        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_MAR_2023""---- ADDED BY CP ON 6/8
        )
        group by 1
        )
  
        
, shipping_wcd_international as 
(

/*with passport_google as 
(    select 
          order_id
        , total_shipping_cost as shipping_cost
        , BILLABLE_WEIGHT_OZ_ as shipping_weight
        , DELIVERY_DATE_GMT as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""PASSPORT_SHIPPING"" where DELIVERY_DATE_GMT is not null )
        
    , passport_google_clean as
    (     
         select 
           order_id
         , shipping_cost
         , shipping_weight
         , to_date(delivered_date) as delivered_date 
         from passport_google
         ) */
   -- with passport_pipeline as 
   -- (
          select 
           order_id
         , max(shipping_cost) as shipping_cost
         , max(shipping_weight) as shipping_weight
         , max(to_date(delivered_date)) as delivered_date
         from 
        (
        select 
          case when order_id like 'SEED-%' THEN order_id 
               else CONCAT('SEED-',ltrim(order_id, 'SEED'))
               end as order_id 
        , total_shipping_cost as shipping_cost
        , BILLABLE_WEIGHT_OZ_ as shipping_weight
        , left(DELIVERY_DATE_GMT,10) as delivered_date 
        from ""MARKETING_DATABASE"".""PASSPORT"".""SHIPPING_COSTS"" 
        where DELIVERY_DATE_GMT is not null 
          and LENGTH(order_id) in (11,12)
          and _file in ('seed_passport_1Jan23_1May23_invoiced_data.csv','seed_passport_1Jan22_31Dec22_invoiced_data .csv'))
        WHERE delivered_date <> 'NULL'
        group by 1
 --       )
        
   /* , passport_pipeline_clean as
    (     
         select 
           order_id
         , shipping_cost
         , shipping_weight
         , to_date(delivered_date) as delivered_date 
         from passport_google
         ) */
                    
        --select * from passport_google_clean
        --union
 --       select * from passport_pipeline_clean
        
        )

, oceanx_stord as 
  (  
  select 
   distinct
     order_number
   , order_date
   , order_shipped_date
   , upper(shipto_city) as shipto_city
   , upper(shipto_state) as shipto_state
   , upper(shipto_country_code) as shipto_country_code
   , shipto_zip
   , ship_service_code
   , 'oceanx' as fulfillment_partner
   from ""MARKETING_DATABASE"".""OCEANX_DATALAKE"".""VW_DATA_SHIPMENT""
             
   UNION ALL
   
   select
     distinct
      o.order_number as order_number
    , o.ORDER_CREATED_DATETIME as order_date
    , s.SHIP_DATE as order_shipped_date
    , upper(dest_city) as shipto_city
    , upper(dest_state) as shipto_state
    , upper(dest_country) as shipto_country_code
    , DESTINATION_POSTAL_CODE as shipto_zip
    , service_method as ship_service_code
    , 'stord' as fulfillment_partner
    from ""MARKETING_DATABASE"".""STORD"".""ORDERS"" as o 
    left join ""MARKETING_DATABASE"".""STORD"".""SHIPMENTS"" as s on o.order_number = s.order_number
    where o.order_type = 'sales'
)    
  
, final_us as 
       (
        select 
          ship.order_number
        , order_date
        , order_shipped_date
        , to_date(delivered_date) as delivered_date
        , 'Domestic' as Intl_domestic
        , SHIPTO_COUNTRY_CODE as country
        , SHIPTO_CITY as city
        , SHIPTO_STATE as state
        , SHIPTO_ZIP as zip_code
        , ship_service_code
        , shipping_cost
        , shipping_weight
        , fulfillment_partner
        , finalized_sku.""'syn-wk'"" as syn_wk
        , finalized_sku.""'syn-rf'"" as syn_rf
        , finalized_sku.""'syn-rf-2mo'"" as syn_rf_2mo
        , finalized_sku.""'syn-rf-3mo'"" as syn_rf_3mo
        , finalized_sku.""'syn-rf-6mo'"" as syn_rf_6mo
        , finalized_sku.""'pds-wk'"" as pds_wk
        , finalized_sku.""'pds-rf'"" as pds_rf
        , finalized_sku.""'pds-rf-2mo'"" as pds_rf_2mo

      from oceanx_stord as ship 
      left join finalized_sku on ship.order_number = finalized_sku.order_number
      left join shipping_wcd_domestic on ship.order_number = shipping_wcd_domestic.shipment_guid
      where ship.order_date > '2021-12-31' and (shipto_country_code ilike '%US%' and shipto_country_code ilike '%us%')
        )
  
, final_international as 
        (
          select 
            ship.order_number as order_number
          , order_date
          , order_shipped_date
          , to_date(delivered_date) as delivered_date
          , 'International' as Intl_domestic
          , SHIPTO_COUNTRY_CODE as country
          , SHIPTO_CITY as city
          , SHIPTO_STATE as state
          , SHIPTO_ZIP as zip_code
          , ship_service_code
          , shipping_cost
          , shipping_weight
          , fulfillment_partner
          , finalized_sku.""'syn-wk'"" as syn_wk
          , finalized_sku.""'syn-rf'"" as syn_rf
          , finalized_sku.""'syn-rf-2mo'"" as syn_rf_2mo
          , finalized_sku.""'syn-rf-3mo'"" as syn_rf_3mo
          , finalized_sku.""'syn-rf-6mo'"" as syn_rf_6mo
          , finalized_sku.""'pds-wk'"" as pds_wk
          , finalized_sku.""'pds-rf'"" as pds_rf
          , finalized_sku.""'pds-rf-2mo'"" as pds_rf_2mo

      from oceanx_stord as ship 
      left join finalized_sku on ship.order_number = finalized_sku.order_number
      left join shipping_wcd_international on ship.order_number = shipping_wcd_international.order_id
      where ship.order_date > '2021-12-31' 
      and (shipto_country_code not ilike '%US%' and shipto_country_code not ilike '%us%')
        )
      
, final_data as
      (
      select * from final_us
      UNION ALL 
      select * from final_international
      )
   select * from final_data where order_number like 'SEED-%' and to_date(order_date) <= to_date(current_date())
  );"
"RETENTION2021OCT_12B","CREATE VIEW ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".RETENTION2021OCT_12B AS with all_gain_loss as
    (
        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RET_2021_OCT_12_B"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
       
    )

    --select count(*) from all_gain_loss -- 14354 versus 187687
    --select count(*)
    --from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort -- 195,693
    --where CUSTOMER_EMAIL in (select email from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTION_2021_OCTOBER_LOYALTY_A"") -- 14,545
    -- select initial_gain.*
    
    
    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )

        ) as _cohort
        group by cohort_id

    ) as initial_gain    
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"RETENTION2021OCT_18A","CREATE VIEW ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".RETENTION2021OCT_18A AS with all_gain_loss as
    (
        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RET_2021_OCT_18_A"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
       
    )

    --select count(*) from all_gain_loss -- 14354 versus 187687
    --select count(*)
    --from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort -- 195,693
    --where CUSTOMER_EMAIL in (select email from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTION_2021_OCTOBER_LOYALTY_A"") -- 14,545
    -- select initial_gain.*
    
    
    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )

        ) as _cohort
        group by cohort_id

    ) as initial_gain    
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"RETENTION2021OCT_18B","CREATE VIEW ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".RETENTION2021OCT_18B AS with all_gain_loss as
    (
        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RET_2021_OCT_18_B"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
       
    )

    --select count(*) from all_gain_loss -- 14354 versus 187687
    --select count(*)
    --from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort -- 195,693
    --where CUSTOMER_EMAIL in (select email from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTION_2021_OCTOBER_LOYALTY_A"") -- 14,545
    -- select initial_gain.*
    
    
    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )

        ) as _cohort
        group by cohort_id

    ) as initial_gain    
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"RETENTION2021OCT_24A","CREATE VIEW ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".RETENTION2021OCT_24A AS with all_gain_loss as
    (
        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RET_2021_OCT_24_A"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
       
    )

    --select count(*) from all_gain_loss -- 14354 versus 187687
    --select count(*)
    --from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort -- 195,693
    --where CUSTOMER_EMAIL in (select email from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTION_2021_OCTOBER_LOYALTY_A"") -- 14,545
    -- select initial_gain.*
    
    
    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )

        ) as _cohort
        group by cohort_id

    ) as initial_gain    
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"RETENTION2021OCT_24B","CREATE VIEW ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".RETENTION2021OCT_24B AS with all_gain_loss as
    (
        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RET_2021_OCT_24_B"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
       
    )

    --select count(*) from all_gain_loss -- 14354 versus 187687
    --select count(*)
    --from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort -- 195,693
    --where CUSTOMER_EMAIL in (select email from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTION_2021_OCTOBER_LOYALTY_A"") -- 14,545
    -- select initial_gain.*
    
    
    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )

        ) as _cohort
        group by cohort_id

    ) as initial_gain    
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"RETENTION2021OCT_3A","CREATE VIEW ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".RETENTION2021OCT_3A AS with all_gain_loss as
    (
        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RET_2021_OCT_3_A"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
       
    )

    --select count(*) from all_gain_loss -- 14354 versus 187687
    --select count(*)
    --from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort -- 195,693
    --where CUSTOMER_EMAIL in (select email from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTION_2021_OCTOBER_LOYALTY_A"") -- 14,545
    -- select initial_gain.*
    
    
    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )

        ) as _cohort
        group by cohort_id

    ) as initial_gain    
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"RETENTION2021OCT_3B","CREATE VIEW ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".RETENTION2021OCT_3B AS with all_gain_loss as
    (
        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RET_2021_OCT_3_B"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
       
    )

    --select count(*) from all_gain_loss -- 14354 versus 187687
    --select count(*)
    --from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort -- 195,693
    --where CUSTOMER_EMAIL in (select email from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTION_2021_OCTOBER_LOYALTY_A"") -- 14,545
    -- select initial_gain.*
    
    
    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )

        ) as _cohort
        group by cohort_id

    ) as initial_gain    
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"RETENTION2021OCT_3C","CREATE VIEW ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".RETENTION2021OCT_3C AS with all_gain_loss as
    (
        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RET_2021_OCT_3_C"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
       
    )

    --select count(*) from all_gain_loss -- 14354 versus 187687
    --select count(*)
    --from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort -- 195,693
    --where CUSTOMER_EMAIL in (select email from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTION_2021_OCTOBER_LOYALTY_A"") -- 14,545
    -- select initial_gain.*
    
    
    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )

        ) as _cohort
        group by cohort_id

    ) as initial_gain    
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"RETENTION2021OCT_6A","CREATE VIEW ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".RETENTION2021OCT_6A AS with all_gain_loss as
    (
        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RET_2021_OCT_6_A"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
       
    )

    --select count(*) from all_gain_loss -- 14354 versus 187687
    --select count(*)
    --from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort -- 195,693
    --where CUSTOMER_EMAIL in (select email from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTION_2021_OCTOBER_LOYALTY_A"") -- 14,545
    -- select initial_gain.*
    
    
    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )

        ) as _cohort
        group by cohort_id

    ) as initial_gain    
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"RETENTION2021OCT_6B","CREATE VIEW ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".RETENTION2021OCT_6B AS with all_gain_loss as
    (
        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RET_2021_OCT_6_B"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
       
    )

    --select count(*) from all_gain_loss -- 14354 versus 187687
    --select count(*)
    --from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort -- 195,693
    --where CUSTOMER_EMAIL in (select email from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTION_2021_OCTOBER_LOYALTY_A"") -- 14,545
    -- select initial_gain.*
    
    
    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )

        ) as _cohort
        group by cohort_id

    ) as initial_gain    
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"RETENTIONANALYSIS_WATERFALL_LATTICE_V01","create or replace view MARKETING_DATABASE.DOH_GOOGLE_SHEETS_TEST.RETENTIONANALYSIS_WATERFALL_LATTICE_V01 as

    with all_gain_loss as
    (

        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTIONANALYSIS"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
       
    )

    --select count(*) from all_gain_loss -- 14354 versus 187687
    --select count(*)
    --from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort -- 195,693
    --where CUSTOMER_EMAIL in (select email from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTIONANALYSIS"") -- 14,545
    -- select initial_gain.*
    
    
    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )

        ) as _cohort
        group by cohort_id

    ) as initial_gain    
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"V_SHIPMENT_SUPPRESION_EMAIL_TEST","create or replace view MARKETING_DATABASE.GOOGLE_SHEETS.V_SHIPMENT_SUPPRESION_EMAIL_TEST(
	EMAIL,
    SUPPRESED_FLAG,
    CREATED_AT,
    CANCELLED_AT,
    SKU,
    BILLING_COUNTRY,
    PRODUCT
) as

with ds01 as
(
select lower(customer_email) as email_clean,created_at,cancelled_at,sku,billing_country, 'DS01' as product
from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01""
where cancelled_at is null or cancelled_at >= '2022-12-23'
),

pds08 as 
(select lower(customer_email) as email_clean,created_at,cancelled_at,sku,billing_country, 'PDS08' as product
from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_PDS_08""
where cancelled_at is null or cancelled_at >= '2022-12-23'),

all_subs as 
(
select * from ds01
UNION ALL
select * from pds08
)

select email,suppressed_flag, created_at, cancelled_at, SKU, Billing_country,product
from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPMENT_EMAIL_TEST"" as t left join all_subs
on t.email = all_subs.email_clean"
"VW_RPT_INVENTORY_v1.0","create or replace view ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""VW_RPT_INVENTORY_v1.0""
as

  select *
  from ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""EXPORT_VW_RPT_INVENTORY""
  order by INVENTORY_LOCATION_ID, SNAPSHOT_DATE"
"VW_RPT_ORDER_v1.0","create or replace view ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""VW_RPT_ORDER_v1.0""
as

  select *
  from ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""EXPORT_VW_RPT_ORDER""
  order by order_item_id"
"V_AUDIENCE_PROFILING_01","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.V_AUDIENCE_PROFILING_01(
	RECURLY_SUBSCRIPTION_ID,
	CUSTOMER_EMAIL,
	FIRST_NAME,
	LAST_NAME,
	CURRENT_STATUS,
	CREATED_AT,
	ACTIVATED_AT,
	CANCELLED_AT,
	BILLING_COUNTRY,
	BILLING_CITY,
	BILLING_STATE,
	IS_INTERNATIONAL,
	SKU,
	DATE_FLAG,
	TOTAL_NO_OF_TRANSACTION,
	TOTAL_TRANSACTION_BEFORE_3MO,
	TOTAL_TRANSACTION_BEFORE_6MO,
	TOTAL_TRANSACTION_BEFORE_12MO,
	TOTAL_MONTHLY_SUPPLIES,
	TOTAL_MONTHLY_SUPPLIES_BEFORE_3MO,
	TOTAL_MONTHLY_SUPPLIES_BEFORE_6MO,
	TOTAL_MONTHLY_SUPPLIES_BEFORE_12MO,
	ACTIVE_DAYS,
	ACTIVE_MONTHS,
	ORDER_RATE,
	ORDER_RATE_BEFORE_3MO,
	ORDER_RATE_BEFORE_6MO,
	ORDER_RATE_BEFORE_12MO,
	SUPPLY_RATE,
	SUPPLY_RATE_BEFORE_3MO,
	SUPPLY_RATE_BEFORE_6MO,
	SUPPLY_RATE_BEFORE_12MO,
	SKIP_SHIPMENT,
	SKIP_SHIPMENT_BEFORE3MO,
	SKIP_SHIPMENT_BEFORE6MO,
	SKIP_SHIPMENT_BEFORE12MO,
	CHURN_FLAG,
	SRP_ADOPTATION,
    LAST_LOGIN,
    LOGIN_COUNT,
    COUPON_CODE,
    DISCOUNT_AMOUNT,
    DISCOUNT_PERCENT,
    COUPON_TYPE,
    DISCOUNT_TYPE
) as


      with DS_01_Map as 
      (
      select RECURLY_SUBSCRIPTION_ID,CUSTOMER_EMAIL,FIRST_NAME,LAST_NAME,CURRENT_STATUS,CREATED_AT,ACTIVATED_AT,CANCELLED_AT,
        BILLING_COUNTRY,BILLING_CITY,BILLING_STATE,IS_INTERNATIONAL,SKU
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01""
        where RECHARGE_SUBSCRIPTION_ID is null
      ),

      all_transactions as 
      (
      select s.UUID as subscription_id , t.date as transaction_date,adjustment_quantity as quantity,ADJUSTMENT_PRODUCT_CODE as SKU, activated_at as subscription_start_date, 
        case when sku ilike '%3mo' then 3 
             when sku ilike '%6mo%' then 6
             else 1 end as sku_month_count,
        case when transaction_date <= dateadd(month,3,activated_at) then 1 else 0 end as transaction_before3mo,
        case when transaction_date <= dateadd(month,6,activated_at) then 1 else 0 end as transaction_before6mo,
        case when transaction_date <= dateadd(month,12,activated_at) then 1 else 0 end as transaction_before12mo--,d.activated_at 
      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                              join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                              left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
                              where t.type = 'purchase'
                                  and t.status = 'success'
                                  and adjustment_description not ilike '%shipping%' 
                                  and adjustment_description not ilike '%Replacement%'
                                  and adjustment_description not ilike '%preorder%'
                                  and (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
      ),

      transaction_summary as 
      (
      select subscription_id, count(*) as total_no_of_transaction, sum(TRANSACTION_BEFORE3MO) as total_transaction_before_3mo,
            sum(TRANSACTION_BEFORE6MO) as total_transaction_before_6mo,sum(TRANSACTION_BEFORE12MO) as total_transaction_before_12mo,
            sum(sku_month_count) as total_monthly_supplies, sum(sku_month_count*TRANSACTION_BEFORE3MO) as total_monthly_supplies_before_3mo,
            sum(sku_month_count*TRANSACTION_BEFORE6MO) as total_monthly_supplies_before_6mo,sum(sku_month_count*TRANSACTION_BEFORE12MO) as total_monthly_supplies_before_12mo

      from all_transactions 
      group by subscription_id
      ),

      order_rate_skip as
      (
      select d.*,ifnull(cancelled_at,current_date()) as date_flag,total_no_of_transaction, total_transaction_before_3mo,total_transaction_before_6mo,total_transaction_before_12mo,
                 total_monthly_supplies,total_monthly_supplies_before_3mo,total_monthly_supplies_before_6mo,total_monthly_supplies_before_12mo,
                 case when datediff(days,ACTIVATED_AT,date_flag) = 0 then 1
                      else datediff(days,ACTIVATED_AT,date_flag) end as active_days, 
                 ceil(active_days/30) as active_months,
                 round(TOTAL_NO_OF_TRANSACTION/active_months,2) as order_rate, case when active_months >= 3 then round(TOTAL_TRANSACTION_BEFORE_3MO/active_months,2) else null end as order_rate_before_3mo,
                  case when active_months >= 6 then round(TOTAL_TRANSACTION_BEFORE_6MO/active_months,2) else null end as order_rate_before_6mo,
                  case when active_months >= 12 then round(TOTAL_TRANSACTION_BEFORE_12MO/active_months,2) else null end as order_rate_before_12mo,
                 round(TOTAL_MONTHLY_SUPPLIES/active_months,2) as supply_rate, case when active_months >= 3 then round(TOTAL_MONTHLY_SUPPLIES_BEFORE_3MO/active_months,2) else null end as supply_rate_before_3mo,
                  case when active_months >= 6 then round(TOTAL_MONTHLY_SUPPLIES_BEFORE_6MO/active_months,2) else null end as supply_rate_before_6mo,
                  case when active_months >= 12 then round(TOTAL_MONTHLY_SUPPLIES_BEFORE_12MO/active_months,2) else null end as supply_rate_before_12mo,
                  case when supply_rate < 1 then 1 else 0 end as skip_shipment, 
                  case when supply_rate_before_3mo is not null and supply_rate_before_3mo < 1 then 1
                       when supply_rate_before_3mo is not null and supply_rate_before_3mo >= 1 then 0
                       else null end as skip_shipment_before3mo,
                  case when supply_rate_before_6mo is not null and supply_rate_before_6mo < 1 then 1
                       when supply_rate_before_6mo is not null and supply_rate_before_6mo >= 1 then 0
                       else null end as skip_shipment_before6mo,
                  case when supply_rate_before_12mo is not null and supply_rate_before_12mo < 1 then 1
                       when supply_rate_before_12mo is not null and supply_rate_before_12mo >= 1 then 0
                       else null end as skip_shipment_before12mo

      from DS_01_Map as d left join transaction_summary as trn on d.recurly_subscription_id = trn.subscription_id
      ),

      churn_before as 
      (
      select distinct customer_email,1 as churn_flag
      from ds_01_map
      where cancelled_at is not null
      ),

      srp_adoptation as 
      (
      select distinct subscription_id, 1 as SRP_adoptation
      from all_transactions 
      where sku_month_count > 1
      ),
      
      customer_login as 
      (
      select email, max(to_date(original_timestamp)) as last_login, count(original_timestamp) as login_count
      from ""SEGMENT_EVENTS"".""SEED_COM"".""USERS"" as u left join ""SEGMENT_EVENTS"".""SEED_COM"".""LOGIN"" as l on u.ID = l.user_id
      group by email
      ),
      
      coupons as 
      (
        with first_row as 
        (
        select row_number() over(partition by subscription_id order by INVOICE_BILLED_DATE asc) as row_number,
          subscription_id, invoice_billed_date,ADJUSTMENT_COUPON_CODE 
          from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
          where adjustment_description not ilike '%shipping%'
        )

        select subscription_id, adjustment_coupon_code, discount, discount_percent,coupon_type,discount_type
        from first_row as fr left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""COUPONS"" as c on fr.adjustment_coupon_code = c.coupon_code
        where row_number = 1 
      )
      
      select o.*,ifnull(c.churn_flag,0) as churn_flag, ifnull(SRP_adoptation,0) as SRP_adoptation, cl.last_login, cl.login_count, 
             cp.adjustment_coupon_code as coupon_code, cp.discount as discount_amount, cp.discount_percent as discount_percent, cp.coupon_type,cp.discount_type
      from order_rate_skip as o 
          left join churn_before as c on o.customer_email = c.customer_email
          left join srp_adoptation as s on o.recurly_subscription_id = s.subscription_id
          left join customer_login as cl on o.customer_email = cl.email
          left join coupons as cp on o.recurly_subscription_id = cp.subscription_id;"
"V_DAILYGROWTHTRACKER_LTVCAC","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.V_DAILYGROWTHTRACKER_LTVCAC
as

    -- REVENUE UNION
    with revenue as
    (

      select rev.day,
            sum(total_tax) as tax_amount,
            sum(shipping_amount) as shipping_amount,
            sum(total_discount_amount) as total_discount_amount,
            count(total_charge_quantity) as total_charge_quantity,
            sum(total_subscription_quantity) as total_subscription_quantity,
            sum(price_total) / count(total_charge_quantity) as aov,
            sum(price_total) as price_total,
            sum(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
            sum(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity,  
            sum(zeroifnull(manual.refill_cogs)) as refill_cogs,
            sum(zeroifnull(manual.welcome_kit_cogs)) as welcome_kit_cogs,
            sum(rev.price_total) - sum(rev.total_tax) - sum(rev.shipping_amount) + sum(rev.total_discount_amount) as gross_revenue,
            gross_revenue - sum(zeroifnull(welcome_kit_cogs)) as net_revenue

        from 
        (

              -- ***** START - RECHARGE Daily Revenue ***** --      
              select charges.day,
                      charges.total_price as price_total, 
                      charges.total_discounts as total_discount_amount, 
                      charges.total_charge_quantity as total_charge_quantity,
                      charge_lines.total_subscription_quantity as total_subscription_quantity, 
                      charge_lines.total_tax as total_tax,
                      zeroifnull(charge_shipping.shipping_amount) as shipping_amount,
                      zeroifnull(charge_giftcredit.total_subscription_quantity) as total_giftcredit_subscription_quantity,
                      zeroifnull(charge_giftkit.total_subscription_quantity) as total_giftkit_subscription_quantity         
              from
              (
                  select to_date(dateadd(hour, -4, c.processed_at)) as day,
                          sum(c.total_price) as total_price, sum(c.total_discounts) as total_discounts, count(*) as total_charge_quantity
                  from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                  --where c.status = 'SUCCESS'
                  group by day
              ) as charges
              join 
              (
                  select to_date(dateadd(hour, -4, c.processed_at)) as day,
                          sum(cli.quantity) as total_subscription_quantity,
                          sum(c.total_tax) as total_tax
                  from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                  join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                  --where c.status = 'SUCCESS'
                  group by day
              ) as charge_lines on charge_lines.day = charges.day
              left join
              (
                  select to_date(dateadd(hour, -4, c.processed_at)) as day,
                          sum(csl.price) as shipping_amount
                  from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c                
                  left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
                  --where c.status = 'SUCCESS'            
                  group by day
              ) as charge_shipping on charge_shipping.day = charges.day
              left join
              (
                  select to_date(dateadd(hour, -4, c.processed_at)) as day,
                          sum(cli.quantity) as total_subscription_quantity
                  from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                  join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                  --where c.status = 'SUCCESS'
                  where cli.title ilike '%gift kit%'
                  group by day
              ) as charge_giftkit on charge_giftkit.day = charges.day
              left join
              (
                  select to_date(dateadd(hour, -4, c.processed_at)) as day,
                          sum(cli.quantity) as total_subscription_quantity
                  from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                  join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                  --where c.status = 'SUCCESS'
                  where cli.title ilike '%Gift Credit%'
                  group by day
              ) as charge_giftcredit on charge_giftcredit.day = charges.day
              -- where charges.day between '2020-07-01' and '2020-07-31'
              --order by charges.day
              -- ***** END - RECHARGE Daily Revenue ***** --      

              union all 

              -- ***** START - RECURLY Daily Revenue ***** --  
              select charge_level_revenue.day, 
                      price_total as price_total, 
                      total_discount_amount as total_discount_amount, 
                      total_charge_quantity as total_charge_quantity,      
                      total_subscription_quantity as total_subscription_quantity,    
                      tax_amount as total_tax,
                      zeroifnull(shipping_amount) as shipping_amount,
                      zeroifnull(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
                      zeroifnull(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity
              from
              (
                  select  charge_level_revenue.day, 
                          sum(tax_amount) as tax_amount,
                          sum(shipping_amount) as shipping_amount,
                          sum(discount_amount) as total_discount_amount,
                          count(*) as total_charge_quantity, 
                          sum(total_subscription_quantity) as total_subscription_quantity,
                          avg(price_total) as aov,
                          sum(price_total) as price_total,
                          sum(price_subtotal) as price_subtotal
                  from 
                  (
                            select day, id,
                                      sum(tax_amount) as tax_amount,
                                      sum(shipping_amount) as shipping_amount,
                                      sum(discount_amount) as discount_amount,
                                      count(id) as total_charge_quantity,
                                      sum(total_subscription_quantity) as total_subscription_quantity,
                                      sum(price_total) as price_total,
                                      sum(price_subtotal) as price_subtotal         
                            from
                            (

                                -- Non-Shipping Adjustments
                                select to_date(i.closed_at) as day, 
                                       i.id,
                                      sum(a.adjustment_tax) as tax_amount,
                                      0 as shipping_amount,
                                      sum(a.adjustment_discount) as discount_amount,
                                      count(distinct i.id) as total_charge_quantity,
                                      sum(a.adjustment_quantity) as total_subscription_quantity,
                                      sum(a.adjustment_amount) as price_total,
                                      sum(a.adjustment_total) as price_subtotal
                                from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                                join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                                where i.status in ('paid')
                                and i.invoice_doc_type in ('charge') 
                                and adjustment_description not ilike '%shipping%'
                                group by i.id, day

                                union all

                                -- Shipping Adjustments            
                                select to_date(i.closed_at) as day, 
                                      i.id,
                                      0 as tax_amount,
                                      sum(a.adjustment_total) as shipping_amount,
                                      0 as discount_amount,
                                      0 as total_charge_quantity,
                                      0 as total_subscription_quantity,
                                      0 as price_total,            
                                      0 as price_subtotal                  
                                from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                                join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                                where i.status in ('paid')
                                and i.invoice_doc_type in ('charge')
                                and adjustment_description ilike '%shipping%'
                                group by i.id, day

                            ) as rev
                            group by id, day


                  ) as charge_level_revenue
                  group by charge_level_revenue.day
                  --order by charge_level_revenue.day

              ) as charge_level_revenue
              left join 
              (
                  select to_date(i.closed_at) as day, 
                        sum(a.adjustment_quantity) as total_giftkit_subscription_quantity
                  from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                  join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                  where i.status in ('paid')
                  and i.invoice_doc_type in ('charge') 
                  and adjustment_description = 'Gift Kit Holiday 2020'
                  group by day 
              ) as charge_level_revenue_giftkit 
                on charge_level_revenue_giftkit.day = charge_level_revenue.day
              left join 
              (
                  select to_date(i.closed_at) as day, 
                        sum(a.adjustment_quantity) as total_giftcredit_subscription_quantity
                  from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                  join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                  where i.status in ('paid')
                  and i.invoice_doc_type in ('charge') 
                  and adjustment_description = 'GIFT_CREDIT_PLACEHOLDER'            
                  group by day 
              ) as charge_level_revenue_giftcredit
                on charge_level_revenue_giftcredit.day = charge_level_revenue.day
              --order by charge_level_revenue.day
              -- ***** END - RECURLY Daily Revenue ***** --  

        ) as rev
        left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = rev.day
        group by rev.day
        order by rev.day    
    ), 
      gainlossnet as -- GAIN LOSS JOIN
      (

          select gain.dt as day, 
                  zeroifnull(gain.total_subscribers_gained) as total_subscribers_gained, 
                  zeroifnull(loss.total_subscribers_lost) total_subscribers_lost,   
                  zeroifnull(gain.total_subscriptions_gained) as gain,
                  zeroifnull(loss.total_subscriptions_lost) as loss,
                  zeroifnull(gain.total_subscriptions_gained) - zeroifnull(loss.total_subscriptions_lost) as net,

                  -- _international
                  zeroifnull(gain.total_subscriptions_gained_international) as gain_international,
                  zeroifnull(loss.total_subscriptions_lost_international) as loss_international,
                  zeroifnull(gain.total_subscriptions_gained_international) - zeroifnull(loss.total_subscriptions_lost_international) as net_international,

                  -- _international_3mo_refill
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) as gain_international_3mo_refill,
                  zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as loss_international_3mo_refill,
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) - zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as net_international_3mo_refill,

                  -- _giftkits
                  zeroifnull(gain.total_subscriptions_gained_giftkits) as gain_giftkits,
                  zeroifnull(loss.total_subscriptions_lost_giftkits) as loss_giftkits,
                  zeroifnull(gain.total_subscriptions_gained_giftkits) - zeroifnull(loss.total_subscriptions_lost_giftkits) as net_giftkits,

                  -- _giftcredits
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) as gain_giftcredits,
                  zeroifnull(loss.total_subscriptions_lost_giftcredits) as loss_giftcredits,
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) - zeroifnull(loss.total_subscriptions_lost_giftcredits) as net_giftcredits,

                  -- _preorders
                  zeroifnull(gain.total_subscriptions_gained_preorders) as gain_preorders,
                  zeroifnull(loss.total_subscriptions_lost_preorders) as loss_preorders,
                  zeroifnull(gain.total_subscriptions_gained_preorders) - zeroifnull(loss.total_subscriptions_lost_preorders) as net_preorders

          from
          (

                with subscription_breakdowns as 
                (

                    select 
                        -- only perform timezone offset subscriptions created within recharge
                        case 
                          when is_recharge_native = 1 then to_date(dateadd(hour, -4, map.created_at))
                          when is_imported = 1 then to_date(dateadd(hour, -4, map.created_at))
                          else to_date(map.created_at) end
                        as dt,
                        count(*) as total_subscribers_gained, 
                        sum(quantity) as total_subscriptions_gained,
                        is_international,
                        sku,
                        is_preorder
                    from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_SUBSCRIPTION_MAPPING"" as map
                    group by dt, is_international, sku, is_preorder
                    order by dt
                )            
            

                -- **************************************************
                -- BREAKDOWNS: Create aggregation + join for each breakdown
                -- **************************************************      
                select total.dt, total_subscribers_gained, total_subscriptions_gained, 
                        total_subscribers_gained_international, total_subscriptions_gained_international,
                        total_subscribers_gained_international_3mo_refill, total_subscriptions_gained_international_3mo_refill,
                        total_subscribers_gained_giftkits, total_subscriptions_gained_giftkits,
                        total_subscribers_gained_giftcredits, total_subscriptions_gained_giftcredits,
                        total_subscribers_gained_preorders, total_subscriptions_gained_preorders
                from
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained, sum(total_subscriptions_gained) as total_subscriptions_gained
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international, sum(total_subscriptions_gained) as total_subscriptions_gained_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international_3mo_refill, sum(total_subscriptions_gained) as total_subscriptions_gained_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftkits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftcredits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_preorders, sum(total_subscriptions_gained) as total_subscriptions_gained_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt


          ) as gain
          left join
          (

                with subscription_breakdowns as 
                (
                    select 
                          -- only perform timezone offset on subscriptions cancelled within recharge, not on recurly
                          case
                            when is_recharge_native = 1 and is_imported = 0 then to_date(dateadd(hour, -4, map.cancelled_at))
                            when is_imported = 1 then to_date(map.cancelled_at)
                            else to_date(map.cancelled_at)
                          end as dt,
                          count(*) as total_subscribers_lost, 
                          sum(quantity) as total_subscriptions_lost,
                          is_international,
                          sku,
                          is_preorder
                    from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_SUBSCRIPTION_MAPPING"" as map
                    where map.cancelled_at is not null
                    group by dt, is_international, sku, is_preorder
                    order by dt           
                )             
            
                -- **************************************************
                -- BREAKDOWNS: Create aggregation for each breakdown
                -- **************************************************    
                select total.dt, total_subscribers_lost, total_subscriptions_lost, 
                        total_subscribers_lost_international, total_subscriptions_lost_international,
                        total_subscribers_lost_international_3mo_refill, total_subscriptions_lost_international_3mo_refill,
                        total_subscribers_lost_giftkits, total_subscriptions_lost_giftkits,
                        total_subscribers_lost_giftcredits, total_subscriptions_lost_giftcredits,
                        total_subscribers_lost_preorders, total_subscriptions_lost_preorders
                from
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost, sum(total_subscriptions_lost) as total_subscriptions_lost
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international, sum(total_subscriptions_lost) as total_subscriptions_lost_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt          
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international_3mo_refill, sum(total_subscriptions_lost) as total_subscriptions_lost_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftkits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftcredits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_preorders, sum(total_subscriptions_lost) as total_subscriptions_lost_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt


          ) as loss 
          on gain.dt = loss.dt
          order by gain.dt  

      ),
    spend as
    (

        with facebook as
        (

                select distinct fb.date as day, fb.spend as fb_spend, fba.value as fb_conversions, fb_spend/fb_conversions as fb_cpa
                from
                (
                    select date, sum(spend) as spend
                    from ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS""
                    group by date
                ) as fb
                left join
                (
                    select date, sum(value) as value
                    from ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS_ACTIONS""
                    where action_type in ('offsite_conversion.fb_pixel_purchase')
                    group by date
                ) as fba on fba.date = fb.date
                --order by fb.date desc
                   
          
        ),
        adwords as
        (
            select date as day, sum(cost_micros) * 0.000001 as gaw_spend
            from ""MARKETING_DATABASE"".""ADWORDS_CUSTOM_NEW_API"".""ADWORDS_CAMPAIGN_PERFORMANCE_REPORTS"" as gaw
            group by day    
        )

        select case when fb.day is null then aw.day else fb.day end as day, 
          fb_spend as fb_spend,
          fb_conversions as fb_conversions,
          gaw_spend as gaw_spend,
          UNIFORM(1, 10, random()) as gaw_conversions
        from facebook as fb
        left join adwords as aw on fb.day = aw.day
        -- where day between '2020-12-09' and '2020-12-12'
        order by day

    )


-- =============================

    -- Final ratios, calcs, and aggregations
    
    
    select 
        gainlossnet_agg.day as day_gainlossagg,
        revenue.day as day_revenue,
        spend.day as day_media,
    
    
        gainlossnet_agg.day as agg_day,  -- ** come back to this column and deduplicate DAY in a different way
        revenue.*,
        sum(revenue.total_subscription_quantity) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_total_orders,
        sum(revenue.net_revenue) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_net_revenue,
        sum(revenue.total_discount_amount) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_discounts,
        trailing_30_discounts / gainlossnet_agg.trailing_30_day_gain as trailing_30_avg_discount_per_checkout,

        gainlossnet_agg.total_active_international / gainlossnet_agg.total_active as percent_international,
        gainlossnet_agg.total_active_international_3mo_refill / gainlossnet_agg.total_active as percent_stp_3mo_refill,    
        sum(gainlossnet_agg.total_active) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_active_subs,
        avg(gainlossnet_agg.total_active) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_average_active_subs,
        gainlossnet_agg.trailing_30_day_loss / trailing_30_day_average_active_subs as trailing_30_day_churn,
        gainlossnet_agg.trailing_30_day_gain / trailing_30_day_active_subs as trailing_30_day_percent_recurring_subscriptions,

        spend.fb_spend,
        spend.fb_conversions,
        sum(spend.fb_conversions) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_fb_conversions,
        spend.gaw_spend,
        spend.gaw_conversions,
        sum(spend.gaw_conversions) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_gaw_conversions,
        
        (zeroifnull(spend.fb_spend) + 
            zeroifnull(spend.gaw_spend) +     
            zeroifnull(manual.Other_Ads) +
            zeroifnull(manual.Partnerships) +
            zeroifnull(manual.Affiliates) +
            zeroifnull(manual.Share_a_Sale) +
            zeroifnull(manual.Growth_Agencies) +
            zeroifnull(manual.Growth_Consultants) +
            zeroifnull(manual.Partnerships_Agencies) +
            zeroifnull(manual.Partnerships_Consultants) +
            zeroifnull(manual.Brand_Expenses)) as total_spend,
        sum(total_spend) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_spend,
        
        (zeroifnull(spend.fb_spend) + 
            zeroifnull(spend.gaw_spend) +     
            zeroifnull(manual.Other_Ads) +
            zeroifnull(manual.Partnerships) +
            zeroifnull(manual.Affiliates)) /  gainlossnet_agg.gain as cpa,
            
        sum(cpa) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_cpa,
        div0(total_spend, trailing_30_net_revenue) as spend_as_percent_of_trailing_30_net_revenue,
        div0((total_spend + total_discount_amount), gain) as cac,
        sum(cac) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_cac,
        div0((trailing_30_net_revenue - trailing_30_discounts), trailing_30_day_average_active_subs) as trailing_30_day_grps,
        
        case when zeroifnull(trailing_30_day_churn) = 0 then null else trailing_30_day_grps / trailing_30_day_churn end as trailing_30_day_ltr,
        case when manual.refill_cogs is not null then manual.refill_cogs else lag(manual.refill_cogs) ignore nulls over (order by gainlossnet_agg.day asc) end as refill_cogs_last,
        case when manual.welcome_kit_cogs is not null then manual.welcome_kit_cogs else lag(manual.welcome_kit_cogs) ignore nulls over (order by gainlossnet_agg.day asc) end as welcome_kit_cogs_last,    
        case when zeroifnull(trailing_30_day_cpa) = 0 then -999 else trailing_30_day_LTR / trailing_30_day_cpa end as trailing_30_day_LTR_to_CPA,
        case when zeroifnull(trailing_30_day_cac) = 0 then -999 else trailing_30_day_LTR / trailing_30_day_cac end as trailing_30_day_LTR_to_CAC,
        div0((net_revenue - total_discount_amount), total_active) as arpu,
        sum(arpu) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_arpu,


        case when zeroifnull(trailing_30_day_churn) = 0 then -999 else
            ( 
                trailing_30_day_arpu
                * 
                (
                    (
                          (49.99 / (trailing_30_day_churn * -1.0)) 
                          - 
                          (
                              (refill_cogs_last) / (trailing_30_day_churn * -1.0)
                          )
                          + 
                          (refill_cogs_last) - (welcome_kit_cogs_last)
                    )
                    / 
                    (
                       49.99
                       /
                       (trailing_30_day_churn * -1.0)
                    )
                )
            )
            /
            (trailing_30_day_churn * -1.0) 
        end as trailing_30_day_ltv,
        case when zeroifnull(trailing_30_day_cpa) = 0 then -999 else trailing_30_day_ltv / trailing_30_day_cpa end as trailing_30_day_ltv_to_cpa,
        case when zeroifnull(trailing_30_day_cac) = 0 then -999 else trailing_30_day_ltv / trailing_30_day_cac end as trailing_30_day_ltv_to_cac
        -- sum(arpu) over (order by gainlossnet_agg.day asc rows between 60 preceding and 30 preceding) as trailing_30_60_day_arpu,
        -- sum(net_revenue) over (order by date asc rows between 59 preceding and 30 preceding) as trailing_30to60_revenue,
        --manual.*
        --*/

    from
    (
        select day, gain, loss, net,
                sum(net) over (order by day asc rows between unbounded preceding and current row) as total_active,
                sum(net_international) over (order by day asc rows between unbounded preceding and current row) as total_active_international,
                sum(net_international_3mo_refill) over (order by day asc rows between unbounded preceding and current row) as total_active_international_3mo_refill,
                sum(net_giftkits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftkits,
                sum(net_giftcredits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftcredits,  
                sum(net_preorders) over (order by day asc rows between unbounded preceding and current row) as total_active_preorders,  

                sum(gain) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_gain,        
                sum(loss) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_loss,

                gain_international,
                loss_international,
                net_international,
                gain_international_3mo_refill,
                loss_international_3mo_refill,
                net_international_3mo_refill,
                gain_giftkits,
                loss_giftkits,
                net_giftkits,
                gain_giftcredits,
                loss_giftcredits,
                net_giftcredits,
                gain_preorders,
                loss_preorders,
                net_preorders

        from gainlossnet

    ) as gainlossnet_agg
    left join revenue on revenue.day = gainlossnet_agg.day
    left join spend on spend.day = gainlossnet_agg.day
    left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = gainlossnet_agg.day
    order by gainlossnet_agg.day desc;"
"V_FIRST_RECURLY_ADJUSTMENT","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.""V_FIRST_RECURLY_ADJUSTMENT""(
	SUBSCRIPTION_ID,
	FIRST_ADJUSTMENT_START_AT,
	FIRST_ADJUSTMENT_PRODUCT_CODE,
	FIRST_ADJUSTMENT_QUANTITY,
	FIRST_ADJUSTMENT_TOTAL,
	FIRST_ADJUSTMENT_TOTAL_TAX,
	FIRST_ADJUSTMENT_TOTAL_DISCOUNT
) as
    select adj_first_sku.subscription_id, 
            adj_first_sku.adjustment_start_at as first_adjustment_start_at, 
            adj_first_sku.adjustment_product_code as first_adjustment_product_code,
            adj_first_sku.adjustment_quantity as first_adjustment_quantity,
            adj_first_sku.adjustment_total as first_adjustment_total,
            adj_first_sku.adjustment_tax as first_adjustment_total_tax,
            adj_first_sku.adjustment_discount as first_adjustment_total_discount

    from
    (
      select min(adjustment_start_at) as adjustment_start_at, subscription_id
      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
      where adjustment_description not ilike 'Shipping%' 
      and adjustment_type = 'charge' 
      and subscription_id is not null
      group by subscription_id
    ) as adj_first
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as adj_first_sku 
        on adj_first_sku.adjustment_start_at = adj_first.adjustment_start_at
        and adj_first_sku.subscription_id = adj_first.subscription_id
    where adj_first_sku.adjustment_description not ilike 'Shipping%' 
    and adj_first_sku.adjustment_type = 'charge' 
    and adj_first_sku.subscription_id is not null    
    order by adj_first_sku.adjustment_start_at, adj_first_sku.subscription_id;"
"FILTERVIEW","create or replace view marketing_database.public.filterview as 

  select plan_name as plan_type, 
  sub_plan.email as email, 
  sub_plan.uuid as subscription_id, 
  quantity as subscription_quantity,
  credits.credits_used as credits_used, 
  zeroifnull(cx_activity.cx_conversations) as cx_conversations,
  zeroifnull(first_discount.first_adjustment_discount) as discounts_at_signup,
  campaigns.campaign_names as campaign_names
  from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as sub_plan
  left join (
   select account_code, count(adjustment_description) as credits_used
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
    where adjustment_description ilike '%credit%'
    group by account_code
  ) as credits on credits.account_code = sub_plan.account_code
  left join (
  select c.CONVERSATION_COUNTS_ALL as cx_conversations,
  e.email as email
  from ""MARKETING_DATABASE"".""KUSTOMER"".""CUSTOMER"" as c
  join ""MARKETING_DATABASE"".""KUSTOMER"".""CUSTOMER_EMAIL"" as e on c.id = e.customer_id
) as cx_activity on cx_activity.email = sub_plan.email left join (

   select 
   adj_first.adjustment_created_at as adjustment_created_at,
   adj_first.account_code as account_code,
   details.adjustment_discount as first_adjustment_discount
   from (
   select min(to_date(adjustment_created_at)) as adjustment_created_at, 
   account_code
      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
      where adjustment_description not ilike 'Shipping%' 
      and adjustment_type = 'charge' 
      and subscription_id is not null
      group by account_code
    ) as adj_first join (
    select to_date(adjustment_created_at) as adjustment_created_at,
      adjustment_discount, 
      account_code
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
    where adjustment_description not ilike '%shipping%'
    and adjustment_discount > 0
    ) as details on adj_first.account_code = details.account_code
    and adj_first.adjustment_created_at = details.adjustment_created_at
    order by account_code desc

) as first_discount on first_discount.account_code = credits.account_code left join (

select lists.email as email, listagg(lists.campaign_name, ', ') as campaign_names
from (
  select p.email as email, c.name as campaign_name
  from ""MARKETING_DATABASE"".""KLAVIYO"".""CAMPAIGN"" as c
  left join ""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" as e on c.id = e.campaign_id
  left join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" as p on e.person_id = p.id
  where e.type = 'Received Email'
  order by p.email
) as lists group by lists.email


) as campaigns on campaigns.email = cx_activity.email"
"FILTERVIEW_TWO","create or replace view MARKETING_DATABASE.PUBLIC.FILTERVIEW_TWO as 


select
  e.plan_name as plan_name, 
  e.email as email, 
  e.subscription_id as subscription_id, 
  e.subscription_quantity as subscription_quantity,
  e.credits_used as credits_used,
  e.account_code as account_code,
  e.cx_conversations,
  e.first_adjustment_discount as first_adjustment_discount,
  f.campaign_names as campaign_names

from (
select 

  c.plan_name as plan_name, 
  c.email as email, 
  c.subscription_id as subscription_id, 
  c.subscription_quantity as subscription_quantity,
  c.credits_used as credits_used,
  c.account_code as account_code,
  c.cx_conversations,
  d.first_adjustment_discount as first_adjustment_discount


from (

    select 
    a.plan_name as plan_name, 
    a.email as email, 
    a.subscription_id as subscription_id, 
    a.subscription_quantity as subscription_quantity,
    zeroifnull(a.credits_used) as credits_used,
    a.account_code as account_code,
    b.cx_conversations as cx_conversations

  from (

    select 
    plan_name as plan_name, 
    sub_plan.email as email, 
    sub_plan.uuid as subscription_id,
    sub_plan.account_code,
    quantity as subscription_quantity,
    credits.credits_used as credits_used
  //  zeroifnull(cx_activity.cx_conversations) as cx_conversations,
  //  zeroifnull(first_discount.first_adjustment_discount) as discounts_at_signup,
  //  campaigns.campaign_names as campaign_names
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as sub_plan
     left join (
     select account_code, count(adjustment_description) as credits_used
      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
      where adjustment_description ilike '%credit%'
      group by account_code
    ) as credits on credits.account_code = sub_plan.account_code

  ) as a left join (


select c.CONVERSATION_COUNTS_ALL as cx_conversations,
  e.email as email
  from ""MARKETING_DATABASE"".""KUSTOMER"".""CUSTOMER"" as c
  join ""MARKETING_DATABASE"".""KUSTOMER"".""CUSTOMER_EMAIL"" as e on c.id = e.customer_id



) as b on a. email = b.email
  
  
) as c left join (

  select 
   adj_first.adjustment_created_at as adjustment_created_at,
   adj_first.subscription_id as subscription_id,
   details.adjustment_discount as first_adjustment_discount
   from (
   select min(to_date(adjustment_created_at)) as adjustment_created_at, 
   subscription_id
      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
      where adjustment_description not ilike 'Shipping%' 
      and adjustment_type = 'charge' 
      and subscription_id is not null
      group by subscription_id
    ) as adj_first join (
    select to_date(adjustment_created_at) as adjustment_created_at,
      adjustment_discount, 
      subscription_id
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
    where adjustment_description not ilike '%shipping%'
    and adjustment_discount > 0
    ) as details on adj_first.subscription_id = details.subscription_id
    and adj_first.adjustment_created_at = details.adjustment_created_at
    order by subscription_id desc  
  
) as d on c.subscription_id = d.subscription_id

  ) as e left join (

  select lists.email as email, listagg(lists.campaign_name, ', ') as campaign_names
from (
  select p.email as email, c.name as campaign_name
  from ""MARKETING_DATABASE"".""KLAVIYO"".""CAMPAIGN"" as c
  left join ""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" as e on c.id = e.campaign_id
  left join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" as p on e.person_id = p.id
  where e.type = 'Received Email'
  order by p.email
) as lists group by lists.email
  
  
  
  ) as f on e.email = f.email;"
"NEWTESTVIEWTWO","create or replace view MARKETING_DATABASE.PUBLIC.NEWTESTVIEWTWO as 

select *
/*got rid of the distinct to account for proliferation of records*/
from ""MARKETING_DATABASE"".""PUBLIC"".""TEST_VIEW_THREE"" as tv
left join (

select 
*
/*debugged the joins here*/
from ""MARKETING_DATABASE"".""PUBLIC"".""FILTERVIEW_TWO"" ) as fv on tv.customer_email = fv.email and fv.subscription_id = tv.RECURLY_SUBSCRIPTION_ID;"
"OCX_CUSTOMER_VIEW","create view ocx_customer_view as (

select 

a.order_item_id as ID,
a.email_address as Email,
a.order_status as Delivery,
a.shipto_address_1 as Delivery_address,
a.shipto_city as Delivery_address_city,
a.shipto_state as Delivery_address_State,
a.shipto_country as Delivery_address_country,
min(a.ship_date) as first_ship_date,
max(a.ship_date) as last_ship_date,
a.order_status as current_delivery_status,
a.product_name as product_name,
a.tracking_number as tracking_number,
avg(a.order_ship_amt) as shipping_cost,
count(order_returned_date) as packages_returned

from ""MARKETING_DATABASE"".""OCEANX"".""VW_RPT_ORDER"" as a
group by a.order_item_id,
a.email_address,
a.order_status,
a.shipto_address_1,
a.shipto_city,
a.shipto_state,
a.shipto_country,
a.order_status,
a.product_name,
a.tracking_number
  
  )"
"ORDER_REPORT_1_0","create or replace view MARKETING_DATABASE.PUBLIC.ORDER_REPORT_1_0
as

    select quantities.day,
          zeroifnull(""'Daily Synbiotic'"") as WK,
          dgt_gains.dgt_gain,
          zeroifnull(""'Daily Synbiotic—Refill'"") as RF,
          zeroifnull(""'Daily Synbiotic—Refill (3 month)'"") as three_mo,
          zeroifnull(""'Daily Synbiotic—Refill (2 month)'"") as two_mo,
          zeroifnull(""'(Replacement) Vial)'"") as replacement_vial,
          zeroifnull(""'(Replacement) Jar + Vial'"") as replacement_jar_and_vial,
          zeroifnull(""'(Replacement) Daily Synbiotic'"") as replacement_wk,
          zeroifnull(""'(Replacement) Jar'"") as replacement_jar,
          zeroifnull(""'(Replacement) Daily Synbiotic—Refill'"") as replacement_rf,
          zeroifnull(""'(Replacement) Jar Lid'"") as replacement_jar_lid,
          wk_refunds.wk_refund_amount,
          wk_refunds.wk_refund_quantity,
          rf_refunds.rf_refund_amount,
          rf_refunds.rf_refund_quantity
    from
    (

        select *
        from
        (
            select to_date(t.date) as day, 
                  sum(adjustment_quantity) as quantity,
                  adjustment_description as sku
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
            where t.type = 'purchase'
            and t.status = 'success'
            and sku not ilike '%shipping%'
            group by day, sku
        ) as new_entry

            pivot (
                sum(quantity) for sku in 
                    ('Daily Synbiotic',
                    'Daily Synbiotic—Refill', 
                    'Daily Synbiotic—Refill (3 month)', 
                    'Daily Synbiotic—Refill (2 month)',
                    '(Replacement) Vial)',
                    '(Replacement) Jar + Vial',
                    '(Replacement) Daily Synbiotic',
                    '(Replacement) Jar',
                    '(Replacement) Daily Synbiotic—Refill',
                    '(Replacement) Jar Lid')
               )  order by day


    ) as quantities
    right join
    (
        select to_date(map.created_at) as day, 
            sum(quantity) as dgt_gain
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map
        where map.created_at is not null
        group by day
    ) as dgt_gains on dgt_gains.day = quantities.day
    left join -- just in case there are days with no refunds
    (
       select to_date(t.date) as day, 
           sum(amount) as wk_refund_amount, 
           sum(adjustment_quantity) as wk_refund_quantity
       from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
       join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
       where t.type = 'refund'
       and t.status = 'success'
       and adjustment_description not ilike '%shipping%'
       and adjustment_description  = 'Daily Synbiotic'
       group by day, adjustment_description
    ) as wk_refunds on dgt_gains.day = wk_refunds.day
    left join
    (
         select to_date(t.date) as day, 
             sum(amount) as rf_refund_amount, 
             sum(adjustment_quantity) as rf_refund_quantity
         from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
         join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
         where t.type = 'refund'
         and t.status = 'success'
         and adjustment_description not ilike '%shipping%'
         and adjustment_description  = 'Daily Synbiotic—Refill'
         group by day, adjustment_description
    ) as rf_refunds on dgt_gains.day = rf_refunds.day
    where dgt_gains.day > '2021-01-31'
    order by dgt_gains.day;"
"ORDER_REPORT_2_0","create or replace view MARKETING_DATABASE.PUBLIC.ORDER_REPORT_2_0
as 

select 
non_replacement_quantities.day as day,
dgt_gains.dgt_gain as dgt_gains,
zeroifnull(""'Daily Synbiotic'"") as WK,
zeroifnull(""'Daily Synbiotic—Refill'"") as RF,
zeroifnull(""'Daily Synbiotic—Refill (3 month)'"") as three_mo,
zeroifnull(""'Daily Synbiotic—Refill (2 month)'"") as two_mo,
zeroifnull(""'(Replacement) Vial)'"") as replacement_vial,
zeroifnull(""'(Replacement) Jar + Vial'"") as replacement_jar_and_vial,
zeroifnull(""'(Replacement) Daily Synbiotic'"") as replacement_wk,
zeroifnull(""'(Replacement) Jar'"") as replacement_jar,
zeroifnull(""'(Replacement) Daily Synbiotic—Refill'"") as replacement_rf,
zeroifnull(""'(Replacement) Jar Lid'"") as replacement_jar_lid,
zeroifnull(wk_refunds.wk_refund_amount) as wk_refund_amount,
zeroifnull(wk_refunds.wk_refund_quantity) as wk_refund_quantity,
zeroifnull(rf_refunds.rf_refund_amount) as rf_refund_amount,
zeroifnull(rf_refunds.rf_refund_quantity) as rf_refund_quantity

from (
    
    
    
    select*

      from(
          select to_date(t.date) as day, 
          sum(adjustment_quantity) as quantity,
          adjustment_description as sku
          from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
          join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
          where t.type = 'purchase'
          and t.status = 'success'
          and sku not ilike '%shipping%'
          group by day, sku) as non_replacement

              pivot (sum(quantity) for sku in 
                     ('Daily Synbiotic',
                      'Daily Synbiotic—Refill', 
                      'Daily Synbiotic—Refill (3 month)', 
                      'Daily Synbiotic—Refill (2 month)'
                     )
                    )

          order by day 
  
  ) as non_replacement_quantities left join (
  
      select*

        from(
        select to_date(a.adjustment_created_at) as day, 
        sum(adjustment_quantity) as quantity,
        adjustment_description as sku
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a 
        where sku ilike '%replacement%'
        group by day, sku) as replacement
        
            pivot (sum(quantity) for sku in 
                   ('(Replacement) Vial)',
                    '(Replacement) Jar + Vial',
                    '(Replacement) Daily Synbiotic',
                    '(Replacement) Jar',
                    '(Replacement) Daily Synbiotic—Refill',
                    '(Replacement) Jar Lid'
                   )
                  )

         order by day 
  
  ) as replacement_quants on replacement_quants.day = non_replacement_quantities.day   
  
      right join
    (
        select to_date(map.created_at) as day, 
            sum(quantity) as dgt_gain
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map
        where map.created_at is not null
        and to_date(map.created_at) > '2021-01-31'
        group by day
    ) as dgt_gains on dgt_gains.day = non_replacement_quantities.day
  
   left join -- just in case there are days with no refunds
    (
       select to_date(t.date) as day, 
           sum(amount) as wk_refund_amount, 
           sum(adjustment_quantity) as wk_refund_quantity
       from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
       join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
       where t.type = 'refund'
       and t.status = 'success'
       and adjustment_description not ilike '%shipping%'
       and adjustment_description  = 'Daily Synbiotic'
       group by day, adjustment_description
    ) as wk_refunds on dgt_gains.day = wk_refunds.day

    left join (
    
       select to_date(t.date) as day, 
             sum(amount) as rf_refund_amount, 
             sum(adjustment_quantity) as rf_refund_quantity
         from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
         join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
         where t.type = 'refund'
         and t.status = 'success'
         and adjustment_description not ilike '%shipping%'
         and adjustment_description  = 'Daily Synbiotic—Refill'
         group by day, adjustment_description
    ) as rf_refunds on dgt_gains.day = rf_refunds.day  
order by non_replacement_quantities.day desc;"
"ORDER_REPORT_DOH","create or replace view MARKETING_DATABASE.PUBLIC.ORDER_REPORT_DOH
as

    select quantities.day,
          zeroifnull(""'Daily Synbiotic'"") as WK,
          dgt_gains.dgt_gain,
          zeroifnull(""'Daily Synbiotic—Refill'"") as RF,
          zeroifnull(""'Daily Synbiotic—Refill (3 month)'"") as three_mo,
          zeroifnull(""'Daily Synbiotic—Refill (2 month)'"") as two_mo,
          zeroifnull(""'(Replacement) Vial)'"") as replacement_vial,
          zeroifnull(""'(Replacement) Jar + Vial'"") as replacement_jar_and_vial,
          zeroifnull(""'(Replacement) Daily Synbiotic'"") as replacement_wk,
          zeroifnull(""'(Replacement) Jar'"") as replacement_jar,
          zeroifnull(""'(Replacement) Daily Synbiotic—Refill'"") as replacement_rf,
          zeroifnull(""'(Replacement) Jar Lid'"") as replacement_jar_lid,
          wk_refunds.wk_refund_amount,
          wk_refunds.wk_refund_quantity,
          rf_refunds.rf_refund_amount,
          rf_refunds.rf_refund_quantity
    from
    (

        select *
        from
        (
            select to_date(t.date) as day, 
                  sum(adjustment_quantity) as quantity,
                  adjustment_description as sku
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
            where t.type = 'purchase'
            and t.status = 'success'
            and sku not ilike '%shipping%'
            group by day, sku
        ) as new_entry

            pivot (
                sum(quantity) for sku in 
                    ('Daily Synbiotic',
                    'Daily Synbiotic—Refill', 
                    'Daily Synbiotic—Refill (3 month)', 
                    'Daily Synbiotic—Refill (2 month)',
                    '(Replacement) Vial)',
                    '(Replacement) Jar + Vial',
                    '(Replacement) Daily Synbiotic',
                    '(Replacement) Jar',
                    '(Replacement) Daily Synbiotic—Refill',
                    '(Replacement) Jar Lid')
               )  order by day


    ) as quantities
    right join
    (
        select to_date(map.created_at) as day, 
            sum(quantity) as dgt_gain
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map
        where map.created_at is not null
        group by day
    ) as dgt_gains on dgt_gains.day = quantities.day
    left join -- just in case there are days with no refunds
    (
       select to_date(t.date) as day, 
           sum(amount) as wk_refund_amount, 
           sum(adjustment_quantity) as wk_refund_quantity
       from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
       join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
       where t.type = 'refund'
       and t.status = 'success'
       and adjustment_description not ilike '%shipping%'
       and adjustment_description  = 'Daily Synbiotic'
       group by day, adjustment_description
    ) as wk_refunds on dgt_gains.day = wk_refunds.day
    left join
    (
         select to_date(t.date) as day, 
             sum(amount) as rf_refund_amount, 
             sum(adjustment_quantity) as rf_refund_quantity
         from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
         join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
         where t.type = 'refund'
         and t.status = 'success'
         and adjustment_description not ilike '%shipping%'
         and adjustment_description  = 'Daily Synbiotic—Refill'
         group by day, adjustment_description
    ) as rf_refunds on dgt_gains.day = rf_refunds.day
    where dgt_gains.day > '2021-01-01'
    order by dgt_gains.day;"
"ORDER_REPORT_SC_V1","create or replace view MARKETING_DATABASE.PUBLIC.ORDER_REPORT_SC_V1(
	DAY,
	DS_WK,
	DS_RF,
	DS_RF_3MO,
	DS_RF_6MO,
	DS_RF_2MO,
	PDS_WK,
	PDS_RF,
	PDS_RF_3MO,
	PDS_RF_6MO,
	REPLACEMENT_VIAL,
	REPLACEMENT_JAR_AND_VIAL,
	REPLACEMENT_JAR,
	REPLACEMENT_JAR_LID,
	REPLACEMENT_DS_WK,
	REPLACEMENT_DS_RF,
	REPLACEMENT_DS_RF_3MO,
	REPLACEMENT_PDS_WK_EMPTY,
	REPLACEMENT_PDS_WK_FULL,
	REPLACEMENT_PDS_RF,
	REPLACEMENT_PDS_RF_3MO
) as

with sku as 
    ( 
      select*
      from(
          //select to_date(t.date) as day, 
          select to_date(t.date) as day, //lets make it PDT
          sum(adjustment_quantity) as quantity,
          adjustment_plan_code as sku
          from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
          join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
          where t.type = 'purchase'
          and t.status = 'success'
          and adjustment_description not ilike '%shipping%'
          group by day, sku) as non_replacement

              pivot (sum(quantity) for sku in 
                     ('syn-wk',
                      'syn-rf',
                      'syn-rf-2mo',
                      'syn-rf-3mo', 
                      'syn-rf-6mo',
                      'pds-wk',
                      'pds-rf',
                      'pds-rf-2mo',
                      'pds-rf-3mo'
                     )
                    )

          order by day 
      ),
      
 replacement_sku as 
     ( 
       select *
       from(
        select to_date(a.adjustment_created_at) as day, 
        sum(adjustment_quantity) as quantity,
        adjustment_description as sku
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a 
        where sku ilike '%replacement%'
        group by day, sku) as replacement
        
            pivot (sum(quantity) for sku in 
                   ('(Replacement) Vial',
                    '(Replacement) Jar + Vial',
                    '(Replacement) Jar',
                    '(Replacement) Jar Lid',
                    '(Replacement) Daily Synbiotic',
                    '(Replacement) Daily Synbiotic—Refill',
                    '(Replacement) Daily Synbiotic—Refill (3 month)',
                    '(PDS08 Replacement) Welcome Kit, Empty',
                    '(PDS08 Replacement) Welcome Kit, Full',
                    '(PDS08 Replacement) Replacement, Refill, Monthly' ,
                    '(PDS08 Replacement) Refill, 3 Month'
                   )
                  )

         order by day 
  
     )/*,
     
     subs as 
     (
            select 
            case 
              when is_recharge_native = 1 then to_date(dateadd(hour, -4, map.created_at))
              when is_imported = 1 then to_date(dateadd(hour, -4, map.created_at))
              else to_date(map.created_at) end
              as day,
            sum(quantity) as total_subs_gained
            from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as map
            group by day
            order by day
     
     )*/
     
     select sku.day as day,
            zeroifnull(""'syn-wk'"") as DS_WK,
            zeroifnull(""'syn-rf'"") as DS_RF,
            zeroifnull(""'syn-rf-3mo'"") as DS_RF_3mo,
            zeroifnull(""'syn-rf-6mo'"") as DS_RF_6mo,
            zeroifnull(""'syn-rf-2mo'"") as DS_RF_2mo,
            zeroifnull(""'pds-wk'"") as PDS_WK,
            zeroifnull(""'pds-rf'"") as PDS_RF,
            zeroifnull(""'pds-rf-3mo'"") as PDS_RF_3mo,
            zeroifnull(""'pds-rf-2mo'"") as PDS_RF_6mo,
            zeroifnull(""'(Replacement) Vial'"") as replacement_vial,
            zeroifnull(""'(Replacement) Jar + Vial'"") as replacement_jar_and_vial,
            zeroifnull(""'(Replacement) Jar'"") as replacement_jar,
            zeroifnull(""'(Replacement) Jar Lid'"") as replacement_jar_lid,
            zeroifnull(""'(Replacement) Daily Synbiotic'"") as replacement_DS_WK,
            zeroifnull(""'(Replacement) Daily Synbiotic—Refill'"") as replacement_DS_RF,
            zeroifnull(""'(Replacement) Daily Synbiotic—Refill (3 month)'"") as replacement_DS_RF_3mo,
            zeroifnull(""'(PDS08 Replacement) Welcome Kit, Empty'"") as replacement_PDS_WK_empty,
            zeroifnull(""'(PDS08 Replacement) Welcome Kit, Full'"") as replacement_PDS_WK_full,
            zeroifnull(""'(PDS08 Replacement) Replacement, Refill, Monthly'"") as replacement_PDS_RF,
            zeroifnull(""'(PDS08 Replacement) Refill, 3 Month'"") as replacement_PDS_RF_3mo
            from sku 
            left join replacement_sku on sku.day = replacement_sku.day;"
"ORDER_REPORT_SUPPLY_CHAIN_1_DOH","create or replace view ""MARKETING_DATABASE"".""PUBLIC"".""ORDER_REPORT_SUPPLY_CHAIN_1_DOH"" as 

--create or replace view MARKETING_DATABASE.PUBLIC.ORDER_REPORT_SUPPLY_CHAIN_1_DOH as

select 
non_replacement_quantities.day as day,
zeroifnull(""'syn-wk'"") as DS_WK,
zeroifnull(""'syn-rf'"") as DS_RF,
zeroifnull(""'syn-rf-3mo'"") as DS_RF_3mo,
zeroifnull(""'syn-rf-6mo'"") as DS_RF_6mo,
zeroifnull(""'syn-rf-2mo'"") as DS_RF_2mo,
zeroifnull(""'pds-wk'"") as PDS_WK,
zeroifnull(""'pds-rf'"") as PDS_RF,
zeroifnull(""'pds-rf-3mo'"") as PDS_RF_3mo,
zeroifnull(""'pds-rf-2mo'"") as PDS_RF_2mo,


zeroifnull(""'(Replacement) Vial'"") as replacement_vial,
zeroifnull(""'(Replacement) Jar + Vial'"") as replacement_jar_and_vial,
zeroifnull(""'(Replacement) Jar'"") as replacement_jar,
zeroifnull(""'(Replacement) Jar Lid'"") as replacement_jar_lid,

zeroifnull(""'(Replacement) Daily Synbiotic'"") as replacement_DS_WK,
zeroifnull(""'(Replacement) Daily Synbiotic—Refill'"") as replacement_DS_RF,
zeroifnull(""'(Replacement) Daily Synbiotic—Refill (3 month)'"") as replacement_DS_RF_3mo,


zeroifnull(""'(PDS08 Replacement) Welcome Kit, Empty'"") as replacement_PDS_WK_empty,
zeroifnull(""'(PDS08 Replacement) Welcome Kit, Full'"") as replacement_PDS_WK_full,
zeroifnull(""'(PDS08 Replacement) Replacement, Refill, Monthly'"") as replacement_PDS_RF,
zeroifnull(""'(PDS08 Replacement) Refill, 3 Month'"") as replacement_PDS_RF_3mo,
zeroifnull(total_subscriptions_gained) as new_subscriptions_DS01,
zeroifnull(""'syn-wk-3mo'"") as DS_WK_3mo,
zeroifnull(""'syn-wk-6mo'"") as DS_WK_6mo

from (
    
    
    
    select*

      from(
          //select to_date(t.date) as day, 
          select to_date(t.date) as day, //lets make it PDT
          sum(adjustment_quantity) as quantity,
          adjustment_plan_code as sku
          from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
          join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
          where t.type = 'purchase'
          and t.status = 'success'
          and adjustment_description not ilike '%shipping%'
          group by day, sku) as non_replacement

              pivot (sum(quantity) for sku in 
                     ('syn-wk',
                      'syn-rf',
                      'syn-rf-2mo',
                      'syn-rf-3mo', 
                      'syn-rf-6mo',
                      'pds-wk',
                      'pds-rf',
                      'pds-rf-2mo',
                      'pds-rf-3mo',
                      'syn-wk-3mo', 
                      'syn-wk-6mo'
                      
                     )
                    )

          order by day 
  
  ) as non_replacement_quantities left join (
  
      select*

        from(
        select to_date(a.adjustment_created_at) as day, 
        sum(adjustment_quantity) as quantity,
        adjustment_description as sku
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a 
        where sku ilike '%replacement%'
        group by day, sku) as replacement
        
            pivot (sum(quantity) for sku in 
                   ('(Replacement) Vial',
                    '(Replacement) Jar + Vial',
                    '(Replacement) Jar',
                    '(Replacement) Jar Lid',
                    '(Replacement) Daily Synbiotic',
                    '(Replacement) Daily Synbiotic—Refill',
                    '(Replacement) Daily Synbiotic—Refill (3 month)',
                    '(PDS08 Replacement) Welcome Kit, Empty',
                    '(PDS08 Replacement) Welcome Kit, Full',
                    '(PDS08 Replacement) Replacement, Refill, Monthly',
                    '(PDS08 Replacement) Refill, 3 Month'  
                   )
                  )

         order by day 
  
  ) as replacement_quants on replacement_quants.day = non_replacement_quantities.day   
  left join
  (
                       select 
                        -- only perform timezone offset subscriptions created within recharge
                        case 
                          when is_recharge_native = 1 then to_date(dateadd(hour, -4, map.created_at))
                          when is_imported = 1 then to_date(dateadd(hour, -4, map.created_at))
                          else to_date(map.created_at) end
                        as day,
                        sum(quantity) as total_subscriptions_gained
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as map
                    group by day
   ) as subs on subs.day = non_replacement_quantities.day order by 1 desc
            
 ;"
"RETENTION_DISCOUNT","create or replace view MARKETING_DATABASE.PUBLIC.RETENTION_DISCOUNT(
	RECURLY_SUBSCRIPTION_ID,
	CUSTOMER_ID,
	CUSTOMER_EMAIL,
	FIRST_NAME,
	LAST_NAME,
	CURRENT_STATUS,
	CREATED_AT,
	CANCELLED_AT,
	PRICE,
	QUANTITY,
	BILLING_COUNTRY,
	IS_INTERNATIONAL,
	SKU,
	IS_PREORDER,
    first_plan_code_discount,
    coupon_code,
    coupon_name,
    first_discount_percent
) as

with all_transactions_ordered as 
(select *, row_number () over(partition by t.subscription_id order by date) as sub_order_rnk,t.subscription_id as final_sub_id
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
 where t.type = 'purchase' and t.status = 'success' and adjustment_description not ilike '%shipping%' and ADJUSTMENT_AMOUNT > 0
),

first_transaction_discount as (
select FINAL_SUB_ID as subscription_id,ADJUSTMENT_PLAN_CODE as first_plan_code_discount,ato.ADJUSTMENT_COUPON_CODE as coupon_code,
       c.name as coupon_name, round((ADJUSTMENT_DISCOUNT*100/ADJUSTMENT_AMOUNT),2) as first_discount_percent
from all_transactions_ordered as ato left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""COUPONS"" as c on ato.ADJUSTMENT_COUPON_CODE = c.COUPON_CODE
where sub_order_rnk = 1
 ),
 
 all_sub_info as (
 select RECURLY_SUBSCRIPTION_ID,CUSTOMER_ID,CUSTOMER_EMAIL,FIRST_NAME,LAST_NAME,CURRENT_STATUS,
        created_at,cancelled_at,price,quantity,billing_country,is_international,SKU,is_preorder
 from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as ds 
 union all 
 select RECURLY_SUBSCRIPTION_ID,CUSTOMER_ID,CUSTOMER_EMAIL,FIRST_NAME,LAST_NAME,CURRENT_STATUS,
        created_at,cancelled_at,price,quantity,billing_country,is_international,SKU,is_preorder
 from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_PDS_08"" as pds 
 where recurly_subscription_id is not null
 )
 
 select a.*,fd.first_plan_code_discount,fd.coupon_code,fd.coupon_name,fd.first_discount_percent
 from all_sub_info as a left join first_transaction_discount as fd on a.recurly_subscription_id=fd.subscription_id"
"RETENTION_PLAN","create or replace view MARKETING_DATABASE.PUBLIC.RETENTION_PLAN(
	SUBSCRIPTION_UUID,
	VERSION_1_PLAN_CODE,
	VERSION_1_START_DATE,
	VERSION_1_END_DATE,
	VERSION_2_PLAN_CODE,
	VERSION_2_START_DATE,
	VERSION_2_END_DATE,
	VERSION_3_PLAN_CODE,
	VERSION_3_START_DATE,
	VERSION_3_END_DATE,
	VERSION_4_PLAN_CODE,
	VERSION_4_START_DATE,
	VERSION_4_END_DATE,
	SUBSCRIPTION_START_DATE,
	SUBSCRIPTION_END_DATE,
	SHIP_ADDRESS_COUNTRY,
	TOTAL_CAPSULES_ORDERED_BY_USER,
	TOTAL_CAPSULES_ORDERED_ON_BASELINE_BY_USER,
	TOTAL_CAPSULES_ORDERED_ON_STP_BY_USER,
	MEDIAN_INCOME,
	MEAN_INCOME
) as
      
      with updated_table as 
      (select *,case when plan_code like 'syn-rf-6mo' then 'syn-rf-6mo'
                  when plan_code like 'syn-rf-3mo' then 'syn-rf-3mo'
                  when plan_code like 'syn-rf-2mo' then 'syn-rf-2mo'
                  else 'syn-rf' end as updated_plan_code 
     from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTION_HISTORY""
      where plan_code not ilike '%pds%'and plan_code not ilike '%ds01-trial%'
      ),
      
      --Updating the switch as the next plan version instead of how it is in the dataset
      tags as
      (
      select *, row_number() over(partition by subscription_uuid order by version_started_at) as rank_sub,
                row_number() over(partition by subscription_uuid, updated_plan_code order by version_started_at) rank_plan,
                (rank_sub - rank_plan) as final_rank 

      from updated_table
      --where subscription_state != 'expired'
      order by subscription_uuid, version_started_at

        ),

        agg_rank_table as (
        select subscription_uuid, updated_plan_code, final_rank, min(version_started_at) as version_start_date, max(version_ended_at) as version_end_date from tags
        group by subscription_uuid, updated_plan_code, final_rank
        ),

      final_table as(
      select subscription_uuid,updated_plan_code as plan_code_final,version_start_date,version_end_date, row_number() over(partition by subscription_uuid order by version_start_date) as row_number from agg_rank_table
      order by subscription_uuid, version_start_date
        ),

      transpose_data as(
        with sub_1 as
        (
          select subscription_uuid, plan_code_final as version_1_plan_code, version_start_date as version_1_start_date, version_end_date as version_1_end_date from final_table
          where row_number = 1
        ),
        sub_2 as
        (
          select subscription_uuid, plan_code_final as version_2_plan_code, version_start_date as version_2_start_date, version_end_date as version_2_end_date from final_table
          where row_number = 2
        ),
        sub_3 as
        (
          select subscription_uuid, plan_code_final as version_3_plan_code, version_start_date as version_3_start_date, version_end_date as version_3_end_date from final_table
          where row_number = 3
        ),
        sub_4 as
        (
          select subscription_uuid, plan_code_final as version_4_plan_code, version_start_date as version_4_start_date, version_end_date as version_4_end_date from final_table
          where row_number = 4
        )
        select sub_1.subscription_uuid, version_1_plan_code, version_1_start_date, version_1_end_date, version_2_plan_code, version_2_start_date, 
               version_2_end_date,version_3_plan_code, version_3_start_date, version_3_end_date, version_4_plan_code, version_4_start_date, version_4_end_date
        from sub_1 left join sub_2 on sub_2.subscription_uuid = sub_1.subscription_uuid left join sub_3 on sub_3.subscription_uuid = sub_1.subscription_uuid left join sub_4 on sub_4.subscription_uuid = sub_1.subscription_uuid
      ),
      
      -- Add subscription information with country
     retention as(
      select transpose_data.*,s.created_at as subscription_start_date, s.canceled_at as subscription_end_date,s.ship_address_country 
      from transpose_data left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" s on s.uuid = transpose_data.subscription_uuid
      ),
      -- Adding quantity
      
     all_orders as (
                select s.uuid as subscription_uuid, to_date(t.date) as transaction_date, adjustment_quantity as quantity_ordered, 
                     case when adjustment_description ilike '%2 month%' then 2
                          when adjustment_description ilike '%3 month%' then 3
                          when adjustment_description ilike '%6 month%' then 6
                          else 1 end as description_order,
                    case when description_order = 3 then quantity_ordered*60*3
                         when description_order = 6 then quantity_ordered*60*6
                          else quantity_ordered*60 end as total_capsules_ordered,
                     row_number() over(partition by subscription_uuid order by transaction_date) as rank_order,
                     lag(transaction_date) over(partition by subscription_uuid order by transaction_date) as previous_order_date,
                     datediff(day,previous_order_date,transaction_date) as days_between_order,
                     round(days_between_order/30) as months_between_orders,
                     case when months_between_orders is null then 1
                          else months_between_orders end as cycle_flag
                from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
                where t.type = 'purchase'
                and t.status = 'success'
                and adjustment_description not ilike '%shipping%' 
                and adjustment_description not like '%Replacement%'
                and (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
                order by subscription_uuid, transaction_date 
      ),
      total as(
      select subscription_uuid,sum(total_capsules_ordered) as total_capsules_orderd_by_user      
      from all_orders
      group by subscription_uuid
        ),
      baseline as(
      select subscription_uuid,sum(total_capsules_ordered) as total_capsules_ordered_on_baseline_by_user      
      from all_orders
      where description_order = 1
      group by subscription_uuid
      ),
      stp as (
      select subscription_uuid,sum(total_capsules_ordered) as total_capsules_ordered_on_STP_by_user      
      from all_orders
      where description_order = 3 or description_order = 6
      group by subscription_uuid
      ),
      final_table_stp as(
      select total.*,baseline.total_capsules_ordered_on_baseline_by_user,stp.total_capsules_ordered_on_STP_by_user
      from total left join baseline on total.subscription_uuid = baseline.subscription_uuid left join stp on total.subscription_uuid = stp.subscription_uuid
       ),
       
      zip_code as(
      select s.uuid as subscription_id, left(s.SHIP_ADDRESS_ZIP,5) as zip_code
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s 
        --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""CENSUS_2020"" as cen on s.zip_code = cen.zip_code
        where s.SHIP_ADDRESS_COUNTRY = 'US'),
        
      zip_code_merge as (
      
      select zc.*,cen.ESTIMATE_HOUSEHOLDS_MEDIAN_INCOME_DOLLARS_ as median_income, cen.ESTIMATE_HOUSEHOLDS_MEAN_INCOME_DOLLARS_ as mean_income
      from zip_code as zc left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""CENSUS_2020"" as cen on zc.zip_code = cen.zip_code)
      
       
       select ret.*,ftl.total_capsules_orderd_by_user,ftl.total_capsules_ordered_on_baseline_by_user,ftl.total_capsules_ordered_on_STP_by_user, zcm.median_income, zcm.mean_income
       from retention as ret left join final_table_stp as ftl on ret.subscription_uuid = ftl.subscription_uuid
       left join zip_code_merge as zcm on zcm.subscription_id = ret.subscription_uuid;"
"TEST_VIEW_TWO","create or replace view marketing_database.public.test_view_two as 

select 
recurly.transaction_date,
recurly.subscription_id, 
recurly.total_quantity,
recurly.email,
recurly.adjustment_id,
to_date(testview.first_charged_date) as first_charged,
to_date(testview.cancelled_at) as cancelled,
testview.total_quantity as original_quantity
from (
      select 
      to_date(t.date) as transaction_date,
      ac.account_email as email,
      to_varchar(a.subscription_id) as subscription_id, 
      uuid as adjustment_id,
      a.adjustment_quantity as total_quantity
      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
      join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
      join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS"" as ac on a.account_code = ac.account_code
      where t.type = 'purchase'
      and t.status = 'success'
      and adjustment_description not ilike '%shipping%'
  ) as recurly join ""MARKETING_DATABASE"".""PUBLIC"".""TEST_VIEW"" as testview on testview.recurly_subscription_id = recurly.subscription_id
  order by recurly.subscription_id, transaction_date"
"V_ACCOUNT_COUPON_RETENTION_V_01","create or replace view MARKETING_DATABASE.PUBLIC.V_ACCOUNT_COUPON_RETENTION_V_01(
    COUPON_NAME,
	CYCLE,
	ACCOUNT_COUNT,
	ACCOUNT_QUANTITY,
	DS01_QUANTITY,
	PDS08_QUANTITY,
	FLAG
) as

with coupon_redemption as 
(select *, row_number() over (PARTITION BY account_email order by applied_at desc) as rn
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""COUPON_REDEMPTIONS"" as cr 
left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""COUPONS"" as c on cr.coupon_id = c.id
left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS"" as a on cr.account_code = a.account_code
),

account_coupon as 
(
select account_email, name, case when name ilike 'sid%' or name ilike '%sheer%' then 'Sheer_ID' else 'Other' end as coupon_name
from coupon_redemption
where rn = 1
  ),
  
 /* select ar.*,ac.coupon_name as coupon_name from ""MARKETING_DATABASE"".""PUBLIC"".""V_ACCOUNT_DAILY_RETENTION_V_01"" as ar 
  left join account_coupon as ac on ar.customer_email = ac.account_email */
/*  
  create or replace view MARKETING_DATABASE.PUBLIC.V_ACCOUNT_MONTHLY_RETENTION_V_01(
	COHORT_ID,
	CYCLE,
	ACCOUNT_COUNT,
	ACCOUNT_QUANTITY,
	DS01_QUANTITY,
	PDS08_QUANTITY,
	FLAG
) as
*/

account_monthly_retention as 
(select customer_email,account_active_flag,account_start_date,account_active_date,account_quantity,DS01_quantity,
 pds08_Quantity, datediff(day,account_start_date,account_active_date) as active_day, ac.coupon_name as coupon_name
from ""MARKETING_DATABASE"".""PUBLIC"".""V_ACCOUNT_DAILY_RETENTION_V_01"" as ar left join account_coupon as ac on ar.customer_email = ac.account_email
where mod(active_day,30) = 0
order by account_start_date,active_day
),

account_coupon_agg as
(
select coupon_name,Active_day as cycle, 
    count(distinct customer_email) as account_count, sum(account_quantity) as account_quantity_agg,
    sum(ds01_quantity) as ds01_quantity_agg,sum(pds08_quantity) as pds08_quantity_agg,
    row_number() over(partition by coupon_name order by cycle desc) as rn
from account_monthly_retention
group by coupon_name,cycle
order by coupon_name,cycle
)

select coupon_name,cycle,account_count,account_quantity_agg as account_quantity,
    ds01_quantity_agg as ds01_quantity,pds08_quantity_agg as pds08_quantity,
    case when rn = 1 then 'running_cohort' end as flag
from account_coupon_agg;"
"V_ACCOUNT_DAILY_RETENTION_COUPON_V_01","create or replace view MARKETING_DATABASE.PUBLIC.V_ACCOUNT_DAILY_RETENTION_COUPON_V_01(
	CUSTOMER_EMAIL,
	DS01_ACTIVE_FLAG,
	DS_01_START_DATE,
	DS01_ACTIVE_DATE,
	DS01_QUANTITY,
	PDS08_ACTIVE_FLAG,
	PDS_08_START_DATE,
	PDS08_ACTIVE_DATE,
	PDS08_QUANTITY,
	ACCOUNT_ACTIVE_FLAG,
	ACCOUNT_START_DATE,
	ACCOUNT_ACTIVE_DATE,
	ACCOUNT_QUANTITY,
    COUPON_NAME
) as

with coupon_redemption as 
(select *, row_number() over (PARTITION BY account_email order by applied_at desc) as rn
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""COUPON_REDEMPTIONS"" as cr 
left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""COUPONS"" as c on cr.coupon_id = c.id
left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS"" as a on cr.account_code = a.account_code
),

account_coupon as 
(
select account_email, name as coupon_name
from coupon_redemption
where rn = 1
  )
  
  select ar.*,ac.coupon_name as coupon_name from ""MARKETING_DATABASE"".""PUBLIC"".""V_ACCOUNT_DAILY_RETENTION_V_01"" as ar 
  left join account_coupon as ac on ar.customer_email = ac.account_email"
"V_ACCOUNT_DAILY_RETENTION_V_01","create or replace view MARKETING_DATABASE.PUBLIC.V_ACCOUNT_DAILY_RETENTION_V_01(
	CUSTOMER_EMAIL,
	DS01_ACTIVE_FLAG,
	DS_01_START_DATE,
	DS01_ACTIVE_DATE,
    DS01_QUANTITY,
    PDS08_ACTIVE_FLAG,
    PDS_08_START_DATE,
    PDS08_ACTIVE_DATE,
    PDS08_QUANTITY,
    ACCOUNT_ACTIVE_FLAG,
    ACCOUNT_START_DATE,
    ACCOUNT_ACTIVE_DATE,
    ACCOUNT_QUANTITY
) as


    with ds_01_sub_table as 
    (select customer_email,case when lower(current_status) = 'canceled' then 'cancelled'
                          else lower(current_status)
                          end as current_status,
           to_date(created_at) as created_at ,coalesce(to_date(cancelled_at),current_date()) as cancelled_at, quantity,
           case when current_status = 'active' then 1
                else 0 end as active_flag
    from MARKETING_DATABASE.PUBLIC.V_SUBSCRIPTION_MAPPING_DS_01
    where current_status not in ('future','pending') and customer_email is not null and customer_email != ''
    ),

    pds_08_sub_table as
    (
    select customer_email,case when lower(current_status) = 'canceled' then 'cancelled'
                          else lower(current_status)
                          end as current_status,
           to_date(created_at) as created_at ,coalesce(to_date(cancelled_at),current_date()) as cancelled_at, quantity,
           case when current_status = 'active' then 1
                else 0 end as active_flag from 
    ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_PDS_08""
    where current_status not in ('future','pending') and customer_email is not null and customer_email != ''
    ),

    date_explode_ds_01 as 
    (
          select customer_email,quantity, created_at as active_dt, cancelled_at  
          from ds_01_sub_table
          union all
          select customer_email, quantity, dateadd(day, 1, active_dt), cancelled_at  
          from date_explode_ds_01
          where active_dt <= cancelled_at
         ),

     date_explode_pds_08 as 
    (
          select customer_email,quantity, created_at as active_dt, cancelled_at  
          from pds_08_sub_table
          union all
          select customer_email, quantity, dateadd(day, 1, active_dt), cancelled_at  
          from date_explode_pds_08
          where active_dt <= cancelled_at
         ),   


    cus_info_ds_01 as
    (
        select customer_email, min(created_at) as first_charge_dt_ds_01, max(active_flag) as active_flag_ds_01
        from ds_01_sub_table
        group by customer_email 
    ),

    cus_info_pds_08 as
    (
        select customer_email, min(created_at) as first_charge_dt_pds_08, max(active_flag) as active_flag_pds_08
        from pds_08_sub_table
        group by customer_email 
    ),

    all_raw_data_pds_08 as(

    select de.customer_email,cus_info_pds_08.first_charge_dt_pds_08 as pds_08_start_date,active_flag_pds_08,quantity as quantity_pds08,active_dt as pds08_active_date,datediff(day,first_charge_dt_pds_08,active_dt) as active_day_pds08
    from date_explode_pds_08 as de left join cus_info_pds_08 on de.customer_email = cus_info_pds_08.customer_email
    ),

    all_raw_data_ds_01 as(

    select de.customer_email,cus_info_ds_01.first_charge_dt_ds_01 as ds_01_start_date,active_flag_ds_01,quantity as quantity_ds01,active_dt as ds01_active_date,datediff(day,first_charge_dt_ds_01,active_dt) as active_day_ds01
    from date_explode_ds_01 as de left join cus_info_ds_01 on de.customer_email = cus_info_ds_01.customer_email
    ),


    ds_01_final_table as(
    select customer_email as ds01_customer_email,active_flag_ds_01 ,ds_01_start_date,ds01_active_date, sum(quantity_ds01) as ds_01_quantity 
    from all_raw_data_ds_01
    group by customer_email,active_flag_ds_01,ds_01_start_date,ds01_active_date
    order by customer_email,active_flag_ds_01,ds_01_start_date,ds01_active_date
    ),

    pds_08_final_table as(
    select customer_email as pds08_customer_email,active_flag_pds_08 ,pds_08_start_date,pds08_active_date, sum(quantity_pds08) as pds_08_quantity 
    from all_raw_data_pds_08
    group by customer_email,active_flag_pds_08,pds_08_start_date,pds08_active_date
    order by customer_email,active_flag_pds_08,pds_08_start_date,pds08_active_date
    )

    select coalesce(ds01_customer_email,pds08_customer_email) as customer_email,
           coalesce(active_flag_ds_01,0) as ds01_active_flag,ds_01_start_date,ds01_active_date,coalesce(ds_01_quantity,0) as ds01_quantity,
           coalesce(active_flag_pds_08,0) as pds08_active_flag,pds_08_start_date,pds08_active_date,coalesce(pds_08_quantity,0) as pds08_quantity,
           case 
                when active_flag_ds_01 = 1 or active_flag_pds_08 = 1 then 1
                 else 0 
                 end as account_active_flag,
           least(coalesce(ds_01_start_date,'2050-01-01'),coalesce(pds_08_start_date,'2051-01-01')) as account_start_date, 
           coalesce(ds01_active_date,pds08_active_date) as account_active_date,
           (ds01_quantity + pds08_quantity) as account_quantity       

    from ds_01_final_table as ds full join pds_08_final_table as pds on ds.ds01_customer_email = pds.pds08_customer_email and ds.ds01_active_date = pds.pds08_active_date
    order by customer_email,account_active_date"
"V_ACCOUNT_MONTHLY_RETENTION_DS01_MAR_30_2023","create or replace view MARKETING_DATABASE.PUBLIC.V_ACCOUNT_MONTHLY_RETENTION_DS01_Mar_30_2023(
	CUSTOMER_EMAIL,
	START_MONTH_YEAR,
    START_QUANTITY,
	CUSTOMER_EMAIL_RETENTION,
	ACTIVE_AT_EOMY,
    DS_01_QUANTITY
) as



with ds_01_sub_table as 
    (select distinct coalesce(RECURLY_SUBSCRIPTION_ID,RECHARGE_SUBSCRIPTION_ID) as subscription_id,  customer_email,case when lower(current_status) = 'canceled' then 'cancelled'
                          else lower(current_status)
                          end as current_status,
           to_date(created_at) as created_at ,coalesce(to_date(cancelled_at),current_date()) as cancelled_at, quantity,
           case when current_status = 'active' then 1
                else 0 end as active_flag
    from MARKETING_DATABASE.PUBLIC.V_SUBSCRIPTION_MAPPING_DS_01
    where current_status not in ('future','pending') and customer_email is not null and customer_email != ''
    ),
    
    cus_info_ds_01 as
    ( 
      -- Cleaning for multiple DS_01 subs started on the same day
     with ds_01_sub_agg as 
      (
        select customer_email,created_at,sum(quantity) as quantity
        from ds_01_sub_table
        group by customer_email,created_at
      ),
     
     ds_01_first_sub as
      (
        select *,row_number() over(partition by customer_email order by created_at) as rw_no
        from ds_01_sub_agg
      )
     
     select customer_email,left(created_at,7) as start_month_year, quantity
     from ds_01_first_sub
     where rw_no = 1
    ),
    
-- Adding all active month_year for each subscription
    date_explode_ds_01 as 
    (
          select subscription_id,customer_email,quantity,created_at ,created_at as active_dt, cancelled_at  
          from ds_01_sub_table
          union all
          select subscription_id,customer_email, quantity,created_at ,dateadd(month, 1, active_dt), cancelled_at  
          from date_explode_ds_01
          where (month(active_dt) < month(cancelled_at)) or (year(active_dt) < year(cancelled_at))
    ),

    active_dates_ds_01 as
    (

    select *, left(lag(active_dt,1) over(partition by subscription_id order by active_dt),7) as active_at_eomy
    from date_explode_ds_01 as de
    ),
    
    retention_data_ds_01 as (
    select customer_email as customer_email_retention,active_at_eomy, sum(quantity) as ds_01_quantity
    from active_dates_ds_01
    where active_at_eomy is not null
    group by customer_email,active_at_eomy
    order by customer_email,active_at_eomy
    ),/*,
    
    retention_pivot_ds_01 as(
    select * from retention_data_ds_01
    pivot (
                          sum(ds_01_quantity) for active_at_eomy in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03','2022-04','2022-05','2022-06','2022-07','2022-08','2022-09','2022-10','2022-11','2022-12','2023-01','2023-02')
                      )
    ),*/
   
    acc_ds01_ret_cust as 
    (
    select ds_start.customer_email,ds_start.start_month_year,ds_start.quantity as start_quantity, ds_ret.*
    from cus_info_ds_01 as ds_start
    left join retention_data_ds_01 as ds_ret on ds_ret.customer_email_retention = ds_start.customer_email
    order by start_month_year
    )
    
    select * from acc_ds01_ret_cust;"
"V_ACCOUNT_MONTHLY_RETENTION_OVERALL_MAR_31_2023","create or replace view MARKETING_DATABASE.PUBLIC.V_ACCOUNT_MONTHLY_RETENTION_OVERALL_MAR_31_2023(
	CUSTOMER_EMAIL,
	START_MONTH_YEAR,
	START_QUANTITY,
	CUSTOMER_EMAIL_RETENTION,
	ACTIVE_AT_EOMY,
	ALL_QUANTITY
) as


with all_sub_table as 
    (
       
      
      with ds_01_sub_table as 
            (select distinct coalesce(RECURLY_SUBSCRIPTION_ID,RECHARGE_SUBSCRIPTION_ID) as subscription_id,  customer_email,case when lower(current_status) = 'canceled' then 'cancelled'
                                  else lower(current_status)
                                  end as current_status,
                   to_date(created_at) as created_at ,coalesce(to_date(cancelled_at),current_date()) as cancelled_at, quantity,
                   case when current_status = 'active' then 1
                        else 0 end as active_flag
            from MARKETING_DATABASE.PUBLIC.V_SUBSCRIPTION_MAPPING_DS_01
            where current_status not in ('future','pending') and customer_email is not null and customer_email != ''
            ),

            pds_08_sub_table as
              (
              select RECURLY_SUBSCRIPTION_ID as subscription_id, customer_email,case when lower(current_status) = 'canceled' then 'cancelled'
                                    else lower(current_status)
                                    end as current_status,
                     to_date(created_at) as created_at ,coalesce(to_date(cancelled_at),current_date()) as cancelled_at, quantity,
                     case when current_status = 'active' then 1
                          else 0 end as active_flag from 
              ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_PDS_08""

              where current_status not in ('future','pending') and customer_email is not null and customer_email != ''
              )
               
       select * from ds_01_sub_table
       union all 
       select * from pds_08_sub_table
    ),
    
    
    cus_info_all_sub as
    ( 
      -- Cleaning for multiple DS_01 subs started on the same day
     with all_sub_agg as 
      (
        select customer_email,created_at,sum(quantity) as quantity
        from all_sub_table
        group by customer_email,created_at
      ),
     
     all_first_sub as
      (
        select *,row_number() over(partition by customer_email order by created_at) as rw_no
        from all_sub_agg
      )
     
     select customer_email,left(created_at,7) as start_month_year, quantity
     from all_first_sub
     where rw_no = 1
    ),
    
-- Adding all active month_year for each subscription
    date_explode_all_sub as 
    (
          select subscription_id,customer_email,quantity,created_at ,created_at as active_dt, cancelled_at  
          from all_sub_table
          union all
          select subscription_id,customer_email, quantity,created_at ,dateadd(month, 1, active_dt), cancelled_at  
          from date_explode_all_sub
          where (month(active_dt) < month(cancelled_at)) or (year(active_dt) < year(cancelled_at))
    ),

    active_dates_all_sub as
    (

    select *, left(lag(active_dt,1) over(partition by subscription_id order by active_dt),7) as active_at_eomy
    from date_explode_all_sub as de
    ),
    
    retention_data_all_sub as (
    select customer_email as customer_email_retention,active_at_eomy, sum(quantity) as all_quantity
    from active_dates_all_sub
    where active_at_eomy is not null
    group by customer_email,active_at_eomy
    order by customer_email,active_at_eomy
    ),/*,
    
    retention_pivot_ds_01 as(
    select * from retention_data_ds_01
    pivot (
                          sum(ds_01_quantity) for active_at_eomy in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03','2022-04','2022-05','2022-06','2022-07','2022-08','2022-09','2022-10','2022-11','2022-12','2023-01','2023-02')
                      )
    ),*/
   
    acc_ret_cust as 
    (
    select all_start.customer_email,all_start.start_month_year,all_start.quantity as start_quantity, all_ret.*
    from cus_info_all_sub as all_start
    left join retention_data_all_sub as all_ret on all_ret.customer_email_retention = all_start.customer_email
    order by start_month_year
    )
    
    select * from acc_ret_cust;"
"V_ALLAUDIENCE","create view ""MARKETING_DATABASE"".""PUBLIC"".V_AllAudience
    as
				WITH credit_final AS (
    SELECT
        i.account_code,
       CASE
            WHEN adjustment_plan_code ILIKE '%3%' then 'DS-01-SRP3'
            WHEN adjustment_plan_code ILIKE '%6%' then 'DS-01-SRP6'
            WHEN adjustment_plan_code ILIKE '%pds%' THEN 'PDS-08'
            ELSE 'DS-01'
        END AS product,
        sum(cp.amount) AS credit_amount
    FROM
        ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""CREDIT_PAYMENTS"" AS CP
        LEFT JOIN ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" AS i ON i.invoice_number = cp.applied_to_invoice_number
        LEFT JOIN ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" AS a ON a.invoice_id = i.id
    WHERE
        action != 'write_off'
    GROUP BY
        i.account_code,
        product
    ORDER BY
        credit_amount DESC
),
nonship_adj AS (
    SELECT
        t.account_code,
        CASE
            WHEN adjustment_plan_code ILIKE '%3%' then 'DS-01-SRP3'
            WHEN adjustment_plan_code ILIKE '%6%' then 'DS-01-SRP6'
            WHEN adjustment_plan_code ILIKE '%pds%' THEN 'PDS-08'
            ELSE 'DS-01'
        END AS product,
        sum(adjustment_discount) AS total_discount_amount,
        sum(adjustment_tax) AS total_tax,
        sum(t.amount) AS total_price,
        sum(adjustment_quantity) AS quantity
    FROM
        ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" AS t
        JOIN ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" AS a ON t.invoice_id = a.invoice_id
    WHERE
        t.type = 'purchase'
        AND t.status = 'success'
        AND adjustment_description NOT ILIKE '%shipping%'
        AND adjustment_description NOT ILIKE '%(Replacement)%'
        AND adjustment_description NOT ILIKE '%preorder%'
    GROUP BY
        t.account_code,
        product
    ORDER BY
        total_price,
        account_code,
        product DESC
),
shipping_adj AS (
    SELECT
        t.account_code,
       CASE
            WHEN adjustment_plan_code ILIKE '%3%' then 'DS-01-SRP3'
            WHEN adjustment_plan_code ILIKE '%6%' then 'DS-01-SRP6'
            WHEN adjustment_plan_code ILIKE '%pds%' THEN 'PDS-08'
            ELSE 'DS-01'
        END AS product,
        sum(adjustment_amount) AS total_shipping,
        sum(adjustment_tax) AS total_shipping_tax
    FROM
        ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" AS t
        JOIN ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" AS a ON t.invoice_id = a.invoice_id
    WHERE
        t.type = 'purchase'
        AND t.status = 'success'
        AND adjustment_description ILIKE '%shipping%'
    GROUP BY
        t.account_code,
        product
    ORDER BY
        account_code,
        product DESC
),
refunds AS (
    SELECT
        t.account_code,
         CASE
            WHEN adjustment_plan_code ILIKE '%3%' then 'DS-01-SRP3'
            WHEN adjustment_plan_code ILIKE '%6%' then 'DS-01-SRP6'
            WHEN adjustment_plan_code ILIKE '%pds%' THEN 'PDS-08'
            ELSE 'DS-01'
        END AS product,
        sum(t.amount) AS refund_amount
    FROM
        ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" AS t
        JOIN ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" AS a ON t.invoice_id = a.invoice_id
    WHERE
        t.type = 'refund'
        AND t.status = 'success'
        AND adjustment_description NOT ILIKE '%shipping%'
    GROUP BY
        t.account_code,
        product
),
max_account AS (
    SELECT
        account_code,
        CASE
            WHEN plan_code ILIKE '%3%' THEN 'DS-01-SRP3'
            WHEN plan_code ILIKE '%6%' THEN 'DS-01-SRP6'
            WHEN plan_code ILIKE '%pds%' THEN 'PDS-08'
            ELSE 'DS-01'
        END AS product,
        min(activated_at) AS first_active_date,
        max(canceled_at) AS canceled_date
    FROM
        ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS""
    GROUP BY
        account_code,
        product
),
account_info AS (
    SELECT
        DISTINCT s.account_code,
        s.EMAIL AS email,
        s.ship_address_phone as phone_ship,
        s.STATE AS status,
        s.SHIP_ADDRESS_NICKNAME AS name,
        s.SHIP_ADDRESS_FIRSTNAME AS fname,
        s.SHIP_ADDRESS_LASTNAME AS lname,
        s.SHIP_ADDRESS_STREET1 AS address,
        SHIP_ADDRESS_CITY AS city,
        SHIP_ADDRESS_STATE AS STATE,
        SHIP_ADDRESS_ZIP AS postal,
        SHIP_ADDRESS_COUNTRY AS country,
        row_number() over(
            partition BY s.account_code
            ORDER BY
                country
        ) AS row_number
    FROM
        ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" AS s
        JOIN max_account AS ma ON s.account_code = ma.account_code
        AND s.activated_at = ma.first_active_date
),
account_final AS (
    SELECT
        a.account_code,
        product,
        status,
        first_active_date,
        LEFT(first_active_date, 10) as sdc_date_start,
        LEFT(canceled_date, 10) as sdc_cancel_date,
        (datediff(day, sdc_date_start, sdc_cancel_date) + 1) as sdc_number_of_days,
        (datediff(day, sdc_cancel_date, CURRENT_DATE()) + 1) as sdc_number_of_days_since_cancel,
        email,
    phone_ship,
        name,
        fname,
        lname,
        address,
        city,
        postal,
        STATE,
        country
    FROM
        account_info AS a
        LEFT JOIN max_account AS ma ON a.account_code = ma.account_code
    WHERE
        row_number = 1
        AND country LIKE 'US'
        AND email NOT LIKE '%seed.com%'
        AND email <> ''
)
SELECT
    af.*,
    coalesce(total_price, 0) AS total_price,
    coalesce(quantity, 0) AS total_quantity,
    coalesce(total_tax, 0) AS total_tax,
    coalesce(total_discount_amount, 0) AS total_discount,
    coalesce(s.total_shipping, 0) AS total_shipping,
    coalesce(s.total_shipping_tax, 0) AS total_shipping_tax,
    coalesce(cf.credit_amount, 0) AS total_credit,
    coalesce(r.refund_amount, 0) AS total_refunds,
    (total_price - total_refunds - total_credit) AS sdc_final_price,
    round((div0(sdc_final_price, total_quantity)), 1) as sdc_price_per,
    round((div0(sdc_final_price, sdc_number_of_days)), 1) as sdc_spend_per_day,
    round((div0(sdc_number_of_days, 30)), 1) as sdc_billing_periods
FROM
    account_final AS af
    LEFT JOIN nonship_adj AS ns ON ns.account_code = af.account_code
    AND ns.product = af.product
    LEFT JOIN shipping_adj AS s ON af.account_code = s.account_code
    AND af.product = s.product
    LEFT JOIN credit_final AS cf ON af.account_code = cf.account_code
    AND af.product = cf.product
    LEFT JOIN refunds AS r ON af.account_code = r.account_code
    AND af.product = r.product"
"V_COHORT_DAVEADJUSTMENT_REMOVEZEROLTR_APRIL_01_2021","create or replace view V_COHORT_DAVEADJUSTMENT_REMOVEZEROLTR_APRIL_01_2021(
	COHORT_ID,
	TOTAL_QUANTITY,
	COHORT_ID_LOSSES,
	""'2018-06'"",
	""'2018-07'"",
	""'2018-08'"",
	""'2018-09'"",
	""'2018-10'"",
	""'2018-11'"",
	""'2018-12'"",
	""'2019-01'"",
	""'2019-02'"",
	""'2019-03'"",
	""'2019-04'"",
	""'2019-05'"",
	""'2019-06'"",
	""'2019-07'"",
	""'2019-08'"",
	""'2019-09'"",
	""'2019-10'"",
	""'2019-11'"",
	""'2019-12'"",
	""'2020-01'"",
	""'2020-02'"",
	""'2020-03'"",
	""'2020-04'"",
	""'2020-05'"",
	""'2020-06'"",
	""'2020-07'"",
	""'2020-08'"",
	""'2020-09'"",
	""'2020-10'"",
	""'2020-11'"",
	""'2020-12'"",
	""'2021-01'"",
	""'2021-02'"",
	""'2021-03'"",
	""'2021-04'"",
	""'2021-05'"",
	""'2021-06'"",
	""'2021-07'"",
	""'2021-08'"",
	""'2021-09'"",
	""'2021-10'"",
	""'2021-11'"",
	""'2021-12'"",
	""'2022-01'"",
	""'2022-02'"",
    ""'2022-03'""
) as

    with all_gain_loss as
    (

        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))

    )

    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )
              




        ) as _cohort
        group by cohort_id

    ) as initial_gain
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"V_COHORT_DAVEADJUSTMENT_REMOVEZEROLTR_DS01_APR_26_2022","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_DAVEADJUSTMENT_REMOVEZEROLTR_DS01_APR_26_2022(
	COHORT_ID,
	TOTAL_QUANTITY,
	COHORT_ID_LOSSES,
	""'2018-06'"",
	""'2018-07'"",
	""'2018-08'"",
	""'2018-09'"",
	""'2018-10'"",
	""'2018-11'"",
	""'2018-12'"",
	""'2019-01'"",
	""'2019-02'"",
	""'2019-03'"",
	""'2019-04'"",
	""'2019-05'"",
	""'2019-06'"",
	""'2019-07'"",
	""'2019-08'"",
	""'2019-09'"",
	""'2019-10'"",
	""'2019-11'"",
	""'2019-12'"",
	""'2020-01'"",
	""'2020-02'"",
	""'2020-03'"",
	""'2020-04'"",
	""'2020-05'"",
	""'2020-06'"",
	""'2020-07'"",
	""'2020-08'"",
	""'2020-09'"",
	""'2020-10'"",
	""'2020-11'"",
	""'2020-12'"",
	""'2021-01'"",
	""'2021-02'"",
	""'2021-03'"",
	""'2021-04'"",
	""'2021-05'"",
	""'2021-06'"",
	""'2021-07'"",
	""'2021-08'"",
	""'2021-09'"",
	""'2021-10'"",
	""'2021-11'"",
	""'2021-12'"",
	""'2022-01'"",
	""'2022-02'"",
	""'2022-03'""
) as

   with all_gain_loss as
    (

        select distinct
            recharge_subscription_id,
            recurly_subscription_id,
            cohort.created_at as first_charged_date,
            cohort.cancelled_at as cancelled_at,
            cohort.quantity as total_quantity 
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as cohort
        )

    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
              )
              




        ) as _cohort
        group by cohort_id

    ) as initial_gain
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx
                    

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"V_COHORT_GAINLOSS_1_0","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_GAINLOSS_1_0
as

with all_gain_loss as
(
  
    select distinct
        /*cohort.is_recharge_native,
        cohort.is_imported,
        cohort.is_recurly_native,
        cohort.RECHARGE_SUBSCRIPTION_ID,
        cohort.RECURLY_SUBSCRIPTION_ID,*/

        recharge.subscription_id as recharge_subscription_id,
        recurly.subscription_id as recurly_subscription_id,
  
        -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
        case when recharge.subscription_id is not null then
            recharge.first_charged_date
        else
            recurly.first_charged_date
        end as first_charged_date,

        -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
        case when recurly.subscription_id is not null then
            recurly.canceled_at
        else
            recharge.cancelled_at
        end as cancelled_at,

        -- if RECURLY ID exists, default to RECURLY QUANTITY
        case when recurly.subscription_id is not null then
            recurly.total_quantity
        else
            recharge.total_quantity
        end as total_quantity,  
        recurly.total_quantity as recurly_total_quantity,
        recharge.total_quantity as recharge_total_quantity

    from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort

    left join
    (
        select to_varchar(s.id) as subscription_id, 
                min(c.processed_at) as first_charged_date, 
                s.quantity as total_quantity,
                s.cancelled_at
        from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
        join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
        left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
        join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
        where c.status = 'SUCCESS'
        and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
        group by to_varchar(s.id), s.quantity, s.cancelled_at
        order by to_varchar(s.id)

    ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

    left join 
    (
        select to_varchar(s.uuid) as subscription_id, 
                min(t.date) as first_charged_date, 
                s.quantity as total_quantity,
                s.canceled_at
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
        where a.invoice_type in ('purchase', 'renewal')
        and i.status in ('closed', 'paid')
        and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
        and a.adjustment_product_code != 'free_shipping'
        and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
        group by to_varchar(s.uuid), s.quantity, s.canceled_at
        order by to_varchar(s.uuid)          

    ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))

)

select losses.cohort_id, initial_gain.total_quantity, 
 ""'2018-06'"" as ""2018-06"", ""'2018-07'"" as ""2018-07"", ""'2018-08'"" as ""2018-08"", ""'2018-09'"" as ""2018-09"", ""'2018-10'"" as ""2018-10"", ""'2018-11'"" as ""2018-11"", ""'2018-12'"" as ""2018-12"", ""'2019-01'"" as ""2019-01"", ""'2019-02'"" as ""2019-02"", ""'2019-03'"" as ""2019-03"", ""'2019-04'"" as ""2019-04"", ""'2019-05'"" as ""2019-05"", ""'2019-06'"" as ""2019-06"", ""'2019-07'"" as ""2019-07"", ""'2019-08'"" as ""2019-08"", ""'2019-09'"" as ""2019-09"", ""'2019-10'"" as ""2019-10"", ""'2019-11'"" as ""2019-11"", ""'2019-12'"" as ""2019-12"", ""'2020-01'"" as ""2020-01"", ""'2020-02'"" as ""2020-02"", ""'2020-03'"" as ""2020-03"", ""'2020-04'"" as ""2020-04"", ""'2020-05'"" as ""2020-05"", ""'2020-06'"" as ""2020-06"", ""'2020-07'"" as ""2020-07"", ""'2020-08'"" as ""2020-08"", ""'2020-09'"" as ""2020-09"", ""'2020-10'"" as ""2020-10"", ""'2020-11'"" as ""2020-11"", ""'2020-12'"" as ""2020-12"", ""'2021-01'"" as ""2021-01"", ""'2021-02'"" as ""2021-02"", ""'2021-03'"" as ""2021-03"", ""'2021-04'"" as ""2021-04"", ""'2021-05'"" as ""2021-05"", ""'2021-06'"" as ""2021-06""
from
(
    select left(first_charged_date, 7) as cohort_id, sum(total_quantity) as total_quantity
    from all_gain_loss
    group by cohort_id
) as initial_gain
join 
(
  select *
  from 
  (
      select left(first_charged_date, 7) as cohort_id, total_quantity, left(cancelled_at, 7) as cancelled_at_month
      from all_gain_loss
  ) as agg
                  pivot (
                      sum(total_quantity) for cancelled_at_month in 
                      ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06')
                  )
) as losses on initial_gain.cohort_id  = losses.cohort_id
order by losses.cohort_id;"
"V_COHORT_RETENTION_DS01_APR_26_2022_SRP3MO","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_RETENTION_DS01_APR_26_2022_SRP3MO(
	COHORT_ID,
	TOTAL_QUANTITY,
	COHORT_ID_LOSSES,
	""'2018-06'"",
	""'2018-07'"",
	""'2018-08'"",
	""'2018-09'"",
	""'2018-10'"",
	""'2018-11'"",
	""'2018-12'"",
	""'2019-01'"",
	""'2019-02'"",
	""'2019-03'"",
	""'2019-04'"",
	""'2019-05'"",
	""'2019-06'"",
	""'2019-07'"",
	""'2019-08'"",
	""'2019-09'"",
	""'2019-10'"",
	""'2019-11'"",
	""'2019-12'"",
	""'2020-01'"",
	""'2020-02'"",
	""'2020-03'"",
	""'2020-04'"",
	""'2020-05'"",
	""'2020-06'"",
	""'2020-07'"",
	""'2020-08'"",
	""'2020-09'"",
	""'2020-10'"",
	""'2020-11'"",
	""'2020-12'"",
	""'2021-01'"",
	""'2021-02'"",
	""'2021-03'"",
	""'2021-04'"",
	""'2021-05'"",
	""'2021-06'"",
	""'2021-07'"",
	""'2021-08'"",
	""'2021-09'"",
	""'2021-10'"",
	""'2021-11'"",
	""'2021-12'"",
	""'2022-01'"",
	""'2022-02'"",
	""'2022-03'"",
	""'2022-04'"",
	""'2022-05'"",
	""'2022-06'"",
	""'2022-07'"",
	""'2022-08'"",
	""'2022-09'"",
	""'2022-10'"",
	""'2022-11'"",
	""'2022-12'"",
	""'2023-01'"",
	""'2023-02'"",
	""'2023-03'"",
	""'2023-04'"",
	""'2023-05'"",
    ""'2023-06'""
) as

   with all_gain_loss as
    (

        select distinct
            recharge_subscription_id,
            recurly_subscription_id,
            cohort.created_at as first_charged_date,
            cohort.cancelled_at as cancelled_at,
            cohort.quantity as total_quantity,
            cohort.sku as sku
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as cohort
        where sku ilike '%3mo%'
        )
        

    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                   

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
              )
              




        ) as _cohort
        group by cohort_id
        

    ) as initial_gain
    
   
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                    

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12',
                           '2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12',
                           '2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12',
                           '2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12',
                           '2022-01','2022-02','2022-03','2022-04','2022-05','2022-06','2022-07','2022-08','2022-09','2022-10','2022-11','2022-12',
                           '2023-01','2023-02','2023-03','2023-04','2023-05','2023-06')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"V_COHORT_REVENUE_4_1_GROSS","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_REVENUE_4_1_gross(
	COHORT_ID,
	""2018-10"",
	""2018-11"",
	""2018-12"",
	""2019-01"",
	""2019-02"",
	""2019-03"",
	""2019-04"",
	""2019-05"",
	""2019-06"",
	""2019-07"",
	""2019-08"",
	""2019-09"",
	""2019-10"",
	""2019-11"",
	""2019-12"",
	""2020-01"",
	""2020-02"",
	""2020-03"",
	""2020-04"",
	""2020-05"",
	""2020-06"",
	""2020-07"",
	""2020-08"",
	""2020-09"",
	""2020-10"",
	""2020-11"",
	""2020-12"",
	""2021-01"",
	""2021-02"",
	""2021-03"",
	""2021-04"",
	""2021-05"",
	""2021-06"",
	""2021-07"",
	""2021-08"",
	""2021-09"",
	""2021-10"",
	""2021-11"",
	""2021-12"",
	""2022-01"",
	""2022-02"",
	""2022-03"",
    ""2022-04"",
    ""2022-05""
) as

with all_revenue as
(
    select RECHARGE_SUBSCRIPTION_ID,
            RECURLY_SUBSCRIPTION_ID,
  
            case when RECHARGE_SUBSCRIPTION_ID is null then
                RECURLY_SUBSCRIPTION_ID
            else
                RECHARGE_SUBSCRIPTION_ID
            end as _subscription_id,

            min(charged_date) over (partition by _subscription_id) as first_charged_at,
            charged_date as charged_at,
            charged_amount,

            is_recharge_native,
            is_imported,
            is_recurly_native

    from
    (

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort
        -- left join
        join 
                  (with all_tran as (
          select to_varchar(s.uuid) as final_subscription_id,
                              to_date(t.date) as charged_date,sum(t.amount) as total_price, sum(a.adjustment_tax) as tax, sum(a.adjustment_discount) as discount
          from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                      join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
                      join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
                      join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
                      where a.invoice_type in ('purchase', 'renewal')
                      and i.status in ('closed', 'paid')
                      and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
                      and a.adjustment_product_code != 'free_shipping'

           group by final_subscription_id,charged_date
                      ),
          shipping as (            
          select to_varchar(s.uuid) as final_subscription_id,to_date(t.date) as charged_date,sum(a.adjustment_total) as shipping
                                  from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                                  join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                                  left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
                                  where t.type = 'purchase'
                                      and t.status = 'success'
                                      and  adjustment_description ilike '%shipping%'
                                      and ifnull(adjustment_total,0) > 0
                                      and final_subscription_id is not null
           group by final_subscription_id,charged_date                           
          ),         

          credit as (
          select to_varchar(s.uuid) as final_subscription_id,to_date(t.date) as charged_date,
                                  sum(c.amount) as credit_amount
                                    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""CREDIT_PAYMENTS"" as c 
                                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on c.applied_to_invoice_number = i.invoice_number 
                                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t on t.invoice_id = i.id
                                    left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
                                    where action != 'write_off' 
          group by final_subscription_id,charged_date
          )	 

          select all_tran.final_subscription_id as subscription_id, all_tran.charged_date, (ifnull(total_price,0) - ifnull(tax,0) - ifnull(shipping,0) + ifnull(discount,0) + ifnull(credit_amount,0)) as charged_amount 
          from all_tran 
          left join shipping on all_tran.final_subscription_id = shipping.final_subscription_id and all_tran.charged_date = shipping.charged_date
          left join credit on all_tran.final_subscription_id = credit.final_subscription_id and all_tran.charged_date = credit.charged_date) 
      as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))

        union all

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort
        -- left join 
        join
        (
             select to_varchar(s.id) as subscription_id, 
                    to_date(c.processed_at) as charged_date, 
                    (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0)+ifnull(c.total_discounts,0)) as charged_amount
                    
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and ifnull(charged_amount,0) > 0
        
        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        order by charged_date

    ) as a

)

-- fix names
select cohort_id, ""'2018-10'"" as ""2018-10"", ""'2018-11'"" as ""2018-11"", ""'2018-12'"" as ""2018-12"", ""'2019-01'"" as ""2019-01"", ""'2019-02'"" as ""2019-02"", ""'2019-03'"" as ""2019-03"", ""'2019-04'"" as ""2019-04"", ""'2019-05'"" as ""2019-05"", ""'2019-06'"" as ""2019-06"", ""'2019-07'"" as ""2019-07"", ""'2019-08'"" as ""2019-08"", ""'2019-09'"" as ""2019-09"", ""'2019-10'"" as ""2019-10"", ""'2019-11'"" as ""2019-11"", ""'2019-12'"" as ""2019-12"", ""'2020-01'"" as ""2020-01"", ""'2020-02'"" as ""2020-02"", ""'2020-03'"" as ""2020-03"", ""'2020-04'"" as ""2020-04"", ""'2020-05'"" as ""2020-05"", ""'2020-06'"" as ""2020-06"", ""'2020-07'"" as ""2020-07"", ""'2020-08'"" as ""2020-08"", ""'2020-09'"" as ""2020-09"", ""'2020-10'"" as ""2020-10"", ""'2020-11'"" as ""2020-11"", ""'2020-12'"" as ""2020-12"",
""'2021-01'"" as ""2021-01"", ""'2021-02'"" as ""2021-02"", ""'2021-03'"" as ""2021-03"", ""'2021-04'"" as ""2021-04"", ""'2021-05'"" as ""2021-05"", ""'2021-06'"" as ""2021-06"",""'2021-07'"" as ""2021-07"", ""'2021-08'"" as ""2021-08"", ""'2021-09'"" as ""2021-09"",""'2021-10'"" as ""2021-10"", ""'2021-11'"" as ""2021-11"", ""'2021-12'"" as ""2021-12"", ""'2022-01'"" as ""2022-01"", ""'2022-02'"" as ""2022-02"",""'2022-03'"" as ""2022-03"", ""'2022-04'"" as ""2022-04"",""'2022-05'"" as ""2022-05""
from
(

    select *
    from 
    (
        select left(first_charged_at, 7) as cohort_id, charged_amount, left(charged_at, 7) as charged_at_month
        from all_revenue
    ) as all_revenue_agg 
                    pivot (
                        sum(charged_amount) for charged_at_month in 
                        ('2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03','2022-04','2022-05')      
                    )
    order by cohort_id
);"
"V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS","create view ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS""
as

    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
    select to_varchar(recharge_s.id) as recharge_subscription_id, null as recurly_subscription_id, 
        1 as is_recharge_native, 0 as is_recurly_native, 0 as is_imported,
        to_varchar(recharge_c.id) as customer_id, recharge_c.email as customer_email,
        recharge_s.status as current_status, recharge_s.created_at as created_at, null as activated_at, recharge_s.cancelled_at as cancelled_at, recharge_s.price as price, recharge_s.quantity as quantity
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    where to_varchar(recharge_s.id) not in (
        select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null
        union all
        select distinct to_varchar(RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null
    )

    union all

    -- Get all (IMPORTED & MAPPED) Subscriptions
    select to_varchar(mapping._recharge_subscription_id) as recharge_subscription_id, to_varchar(mapping._recurly_subscription_id) as recurly_subscription_id, 
        1 as is_recharge_native, 0 as is_recurly_native, 1 as is_imported,
        to_varchar(recharge_c.id) as customer_id, recharge_c.email as customer_email,
        recurly.state as current_status, recharge_c.created_at as created_at, recurly.activated_at as activated_at, recurly.canceled_at as cancelled_at, recurly.total_recurring_amount as price, recurly.quantity as quantity
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    join
    (
        select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null and to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) is not null
        union all
        select distinct to_varchar(RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID
        from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null and to_varchar(RECURLY_SUBSCRIPTION_ID) is not null      
    ) as mapping on to_varchar(mapping._recharge_subscription_id) = to_varchar(recharge_s.id)
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping._recurly_subscription_id = recurly.uuid
  
    union all 

    -- Get all (UNIMPORTED) Recurly-Only Subscriptions
    select null as recharge_subscription_id, to_varchar(uuid) as recurly_subscription_id, 
        0 as is_recharge_native, 1 as is_recurly_native, 0 as is_imported,
        to_varchar(account_code) as customer_id, email as customer_email,
        state as current_status, created_at as created_at, activated_at as activated_at, canceled_at as cancelled_at, total_recurring_amount as price, quantity as quantity
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS""
    where uuid not in (
        select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _MAPPED_RECURLY_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) is not null
        union all
        select distinct to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(RECURLY_SUBSCRIPTION_ID) is not null      
    )"
"d_first_recurly_adjustment","create view ""MARKETING_DATABASE"".""PUBLIC"".""d_first_recurly_adjustment""
as
    select adj_first_sku.subscription_id, 
            adj_first_sku.adjustment_start_at as first_adjustment_start_at, 
            adj_first_sku.adjustment_product_code as first_adjustment_product_code,
            adj_first_sku.adjustment_quantity as first_adjustment_quantity,
            adj_first_sku.adjustment_total as first_adjustment_total,
            adj_first_sku.adjustment_tax as first_adjustment_total_tax,
            adj_first_sku.adjustment_discount as first_adjustment_total_discount

    from
    (
      select min(adjustment_start_at) as adjustment_start_at, subscription_id
      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
      where adjustment_description not ilike 'Shipping%' 
      and adjustment_type = 'charge' 
      and subscription_id is not null
      group by subscription_id
    ) as adj_first
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as adj_first_sku 
        on adj_first_sku.adjustment_start_at = adj_first.adjustment_start_at
        and adj_first_sku.subscription_id = adj_first.subscription_id
    where adj_first_sku.adjustment_description not ilike 'Shipping%' 
    and adj_first_sku.adjustment_type = 'charge' 
    and adj_first_sku.subscription_id is not null    
    order by adj_first_sku.adjustment_start_at, adj_first_sku.subscription_id"
"NEWTESTVIEWTHREE","create or replace view marketing_database.cohortpoc.newtestviewthree as (
//select count(customer_email) as ct, customer_email from (
//select*
//  from (
select v.*, a.audience_name, a.audience_id, test_group
FROM ""MARKETING_DATABASE"".""PUBLIC"".""NEWTESTVIEW"" as v
left join ""MARKETING_DATABASE"".""COHORTPOC"".""ALL_EXPERIMENT_GROUPS"" as a on a.email = v.email
)"
"RETENTION2021OCT_12A","CREATE VIEW ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".RETENTION2021OCT_12A AS with all_gain_loss as
    (
        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RET_2021_OCT_12_A"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
       
    )

    --select count(*) from all_gain_loss -- 14354 versus 187687
    --select count(*)
    --from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort -- 195,693
    --where CUSTOMER_EMAIL in (select email from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTION_2021_OCTOBER_LOYALTY_A"") -- 14,545
    -- select initial_gain.*
    
    
    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )

        ) as _cohort
        group by cohort_id

    ) as initial_gain    
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"RETENTION2021OCT_12C","CREATE VIEW ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".RETENTION2021OCT_12C AS with all_gain_loss as
    (
        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RET_2021_OCT_12_C"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
       
    )

    --select count(*) from all_gain_loss -- 14354 versus 187687
    --select count(*)
    --from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort -- 195,693
    --where CUSTOMER_EMAIL in (select email from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTION_2021_OCTOBER_LOYALTY_A"") -- 14,545
    -- select initial_gain.*
    
    
    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )

        ) as _cohort
        group by cohort_id

    ) as initial_gain    
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"RETENTION2021OCT_6C","CREATE VIEW ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".RETENTION2021OCT_6C AS with all_gain_loss as
    (
        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RET_2021_OCT_6_C"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
       
    )

    --select count(*) from all_gain_loss -- 14354 versus 187687
    --select count(*)
    --from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort -- 195,693
    --where CUSTOMER_EMAIL in (select email from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTION_2021_OCTOBER_LOYALTY_A"") -- 14,545
    -- select initial_gain.*
    
    
    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )

        ) as _cohort
        group by cohort_id

    ) as initial_gain    
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"RETENTION_202101_RAF","CREATE VIEW ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".RETENTION_202101_RAF AS 
    with all_gain_loss as
    (

        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTION_21_JAN_RAF"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
       
    )

    --select count(*) from all_gain_loss -- 14354 versus 187687
    --select count(*)
    --from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort -- 195,693
    --where CUSTOMER_EMAIL in (select email from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTION_21_JAN_RAF"") -- 14,545
    -- select initial_gain.*
    
    
    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )

        ) as _cohort
        group by cohort_id

    ) as initial_gain    
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"RETENTION_202101_SURVEY_GROUPA","CREATE VIEW ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".RETENTION_202101_SURVEY_GROUPA AS 

    with all_gain_loss as
    (

        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTIONANALYSIS_202101_GROUPA"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
       
    )

    --select count(*) from all_gain_loss -- 14354 versus 187687
    --select count(*)
    --from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort -- 195,693
    --where CUSTOMER_EMAIL in (select email from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTIONANALYSIS_202101_GROUPA"") -- 14,545
    -- select initial_gain.*
    
    
    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )

        ) as _cohort
        group by cohort_id

    ) as initial_gain    
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"GOOGLE_ANALYTICS_ECOMMERCE_TRANSACTIONS","CREATE or replace VIEW MARKETING_DATABASE.GOOGLE_ANALYTICS_WEB_METRICS.GOOGLE_ANALYTICS_ECOMMERCE_TRANSACTIONS as 
  select date, 
  source_medium, 
  sum(transaction_revenue) as Revenue, 
  sum(transaction_tax) as Tax, 
  sum(transaction_shipping) as Shipping, 
  sum(refund_amount) as Refund,
  sum(item_quantity) as Quantity
  from ""MARKETING_DATABASE"".""GOOGLE_ANALYTICS_ECOMMERCE_CONVERSIONS"".""GOOGLE_ANALYTICS_ECOMMERCE_CONVERSIONS"" 
  -- where date = '2021-01-26'
  group by date, source_medium
  order by date desc;"
"GOOGLE_ANALYTICS_WEB_METRICS","CREATE VIEW google_analytics_web_metrics as 
select date,
avg(avg_session_duration) as Session_Duration,
avg(pageviews_per_session) as Pageviews_per_Session,
avg(avg_page_load_time) as Page_Load_Time,
avg(bounce_rate) as Bounce_Rate
from ""MARKETING_DATABASE"".""GOOGLE_ANALYTICS_WEB_METRICS"".""GOOGLE_ANALYTIS_WEB_METRICS""
group by date
order by date desc"
"VW_RPT_INVENTORYPHYSICALINBOUNDS_v1.0","create or replace view ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""VW_RPT_INVENTORYPHYSICALINBOUNDS_v1.0""
as

  select *
  from ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""EXPORT_VW_RPT_INVENTORYPHYSICALINBOUNDS""
  order by INVENTORY_PHYSICAL_ID, TRANSACTIONDATETIME"
"VW_RPT_INVENTORY_TRANSACTION_v1.0","create or replace view ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""VW_RPT_INVENTORY_TRANSACTION_v1.0""
as

  select *
  from ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""EXPORT_VW_RPT_INVENTORY_TRANSACTION""
  order by INVENTORY_TRANSACTION_ID, TRANSACTION_DATETIME"
"V_COHORT_GAINLOSS","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.V_COHORT_GAINLOSS(
  COHORT_ID,
  TOTAL_QUANTITY,
  COHORT_ID_LOSSES,
  ""'2018-06'"",
  ""'2018-07'"",
  ""'2018-08'"",
  ""'2018-09'"",
  ""'2018-10'"",
  ""'2018-11'"",
  ""'2018-12'"",
  ""'2019-01'"",
  ""'2019-02'"",
  ""'2019-03'"",
  ""'2019-04'"",
  ""'2019-05'"",
  ""'2019-06'"",
  ""'2019-07'"",
  ""'2019-08'"",
  ""'2019-09'"",
  ""'2019-10'"",
  ""'2019-11'"",
  ""'2019-12'"",
  ""'2020-01'"",
  ""'2020-02'"",
  ""'2020-03'"",
  ""'2020-04'"",
  ""'2020-05'"",
  ""'2020-06'"",
  ""'2020-07'"",
  ""'2020-08'"",
  ""'2020-09'"",
  ""'2020-10'"",
  ""'2020-11'"",
  ""'2020-12'"",
  ""'2021-01'"",
  ""'2021-02'"",
  ""'2021-03'"",
  ""'2021-04'"",
  ""'2021-05'"",
  ""'2021-06'"",
  ""'2021-07'"",
  ""'2021-08'"",
  ""'2021-09'"",
  ""'2021-10'"",
  ""'2021-11'"",
  ""'2021-12'"",
  ""'2022-01'"",
  ""'2022-02'"",
  ""'2022-03'""
) as

    with adjusted_gain_loss as
    (

        select *
        from
        (

            -- ADJUST: Edit V_SUBSCRIPTION_MAPPING with Dave Sylvia's manual edits.  If Dave has no adjustment, leave the original result
            select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                to_date(map.cancelled_at) as cancelled_at,
                map.total_quantity
            from
            (
                select distinct
                    recharge_subscription_id,
                    recurly_subscription_id,
                    created_at as first_charged_date,
                    cancelled_at as cancelled_at,
                    quantity as total_quantity 
                from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_SUBSCRIPTION_MAPPING""
            ) as map
            left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

            union all

            -- IMPORT: Manual data from Recharge
            select to_varchar(rec.customer_id) as recurly_id, 
                    to_date(rec.REVISED_CREATED_AT) as created_at,
                    to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                    rec.quantity
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

            union all

            -- IMPORT: Manual data from OceanX
            select to_varchar(ocx.Membership_ID) as recurly_id, 
                    to_date(ocx.Membership_Start_Date) as created_at,
                    to_date(ocx.Membership_End_Date) as cancelled_at,
                    ocx.Membership_Count
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx
        )
        where to_varchar(recurly_id) not in 
        (
            select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
            union all
            select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
        )

    )
    
    -- Join Cohort Month + Total Initial Subscriptions + Total Losses for each Month in history
    select *
    from
    (
        -- Calculate: Total initial subscriptions for each cohort
        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from adjusted_gain_loss
        group by cohort_id

    ) as initial_gain
    join 
    (
        -- Calculate: Total losses for each cohort, for every month in history.  PIVOT() accounts for each month explicitly and must be updated manually each month
        select *
        from 
        (
            select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
            from adjusted_gain_loss
        ) as agg
        pivot (
            sum(total_quantity) for cancelled_at_month in 
            ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03')
        )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses

;"
"V_COHORT_REVENUE","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.V_COHORT_REVENUE(
	COHORT_ID,
	""2018-06"",
	""2018-07"",
	""2018-08"",
	""2018-09"",
	""2018-10"",
	""2018-11"",
	""2018-12"",
	""2019-01"",
	""2019-02"",
	""2019-03"",
	""2019-04"",
	""2019-05"",
	""2019-06"",
	""2019-07"",
	""2019-08"",
	""2019-09"",
	""2019-10"",
	""2019-11"",
	""2019-12"",
	""2020-01"",
	""2020-02"",
	""2020-03"",
	""2020-04"",
	""2020-05"",
	""2020-06"",
	""2020-07"",
	""2020-08"",
	""2020-09"",
	""2020-10"",
	""2020-11"",
	""2020-12"",
	""2021-01"",
	""2021-02"",
	""2021-03"",
	""2021-04"",
	""2021-05"",
	""2021-06"",
	""2021-07"",
	""2021-08"",
	""2021-09"",
	""2021-10"",
	""2021-11"",
	""2021-12"",
	""2022-01"",
	""2022-02"",
	""2022-03""
) as

with all_revenue as
(
    select RECHARGE_SUBSCRIPTION_ID,
            RECURLY_SUBSCRIPTION_ID,
  
            case when RECHARGE_SUBSCRIPTION_ID is null then
                RECURLY_SUBSCRIPTION_ID
            else
                RECHARGE_SUBSCRIPTION_ID
            end as _subscription_id,

            min(charged_date) over (partition by _subscription_id) as first_charged_at,
            charged_date as charged_at,
            charged_amount,

            is_recharge_native,
            is_imported,
            is_recurly_native

    from
    (

        select *
        from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_SUBSCRIPTION_MAPPING"" as cohort
        join 
        (
            select to_varchar(s.uuid) as subscription_id,
                    t.date as charged_date,
                    (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) as charged_amount
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and ifnull(charged_amount,0) > 0
        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))

        union all

        select *
        from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_SUBSCRIPTION_MAPPING"" as cohort
        join
        (
            select to_varchar(s.id) as subscription_id, 
                    c.processed_at as charged_date, 
                    (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) as charged_amount
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and ifnull(charged_amount,0) > 0
        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        order by charged_date

    ) as a

)

-- fix names
select cohort_id, ""'2018-06'"" as ""2018-06"", ""'2018-07'"" as ""2018-07"", ""'2018-08'"" as ""2018-08"", ""'2018-09'"" as ""2018-09"", ""'2018-10'"" as ""2018-10"", ""'2018-11'"" as ""2018-11"", ""'2018-12'"" as ""2018-12"", ""'2019-01'"" as ""2019-01"", ""'2019-02'"" as ""2019-02"", ""'2019-03'"" as ""2019-03"", ""'2019-04'"" as ""2019-04"", ""'2019-05'"" as ""2019-05"", ""'2019-06'"" as ""2019-06"", ""'2019-07'"" as ""2019-07"", ""'2019-08'"" as ""2019-08"", ""'2019-09'"" as ""2019-09"", ""'2019-10'"" as ""2019-10"", ""'2019-11'"" as ""2019-11"", ""'2019-12'"" as ""2019-12"", ""'2020-01'"" as ""2020-01"", ""'2020-02'"" as ""2020-02"", ""'2020-03'"" as ""2020-03"", ""'2020-04'"" as ""2020-04"", ""'2020-05'"" as ""2020-05"", ""'2020-06'"" as ""2020-06"", ""'2020-07'"" as ""2020-07"", ""'2020-08'"" as ""2020-08"", ""'2020-09'"" as ""2020-09"", ""'2020-10'"" as ""2020-10"", ""'2020-11'"" as ""2020-11"", ""'2020-12'"" as ""2020-12"", ""'2021-01'"" as ""2021-01"", ""'2021-02'"" as ""2021-02"", ""'2021-03'"" as ""2021-03"", ""'2021-04'"" as ""2021-04"", ""'2021-05'"" as ""2021-05"", ""'2021-06'"" as ""2021-06"",""'2021-07'"" as ""2021-07"", ""'2021-08'"" as ""2021-08"", ""'2021-09'"" as ""2021-09"",""'2021-10'"" as ""2021-10"", ""'2021-11'"" as ""2021-11"", ""'2021-12'"" as ""2021-12"", ""'2022-01'"" as ""2022-01"", ""'2022-02'"" as ""2022-02"",""'2022-03'"" as ""2022-03""
from
(

    select *
    from 
    (
        select left(first_charged_at, 7) as cohort_id, charged_amount, left(charged_at, 7) as charged_at_month
        from all_revenue
    ) as all_revenue_agg 
                    pivot (
                        sum(charged_amount) for charged_at_month in 
                        ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03')      
                    )
    order by cohort_id
);"
"V_CREDIT_GRANTED_01","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.V_CREDIT_GRANTED_01(
	INVOICE_ID,
    INVOICE_NUMBER,
    CREDIT_GRANTED_DATE,
    CREDIT_AMOUNT
) as

select ID as invoice_ID,Invoice_number,to_date(billed_date) AS credit_granted_date,abs(invoice_total) AS credit_amount
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY""
    where invoice_type = 'credit'"
"V_DAILYGROWTHTRACKER","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.V_DAILYGROWTHTRACKER(
	DAY,
	GAIN,
	LOSS,
	NET,
	TOTAL_ACTIVE,
	TOTAL_ACTIVE_INTERNATIONAL,
	TOTAL_ACTIVE_INTERNATIONAL_3MO_REFILL,
	TOTAL_ACTIVE_GIFTKITS,
	TOTAL_ACTIVE_GIFTCREDITS,
	TOTAL_ACTIVE_PREORDERS,
	TRAILING_30_DAY_GAIN,
	TRAILING_30_DAY_LOSS,
	GAIN_INTERNATIONAL,
	LOSS_INTERNATIONAL,
	NET_INTERNATIONAL,
	GAIN_INTERNATIONAL_3MO_REFILL,
	LOSS_INTERNATIONAL_3MO_REFILL,
	NET_INTERNATIONAL_3MO_REFILL,
	GAIN_GIFTKITS,
	LOSS_GIFTKITS,
	NET_GIFTKITS,
	GAIN_GIFTCREDITS,
	LOSS_GIFTCREDITS,
	NET_GIFTCREDITS,
	GAIN_PREORDERS,
	LOSS_PREORDERS,
	NET_PREORDERS,
	TAX_AMOUNT,
	SHIPPING_AMOUNT,
	TOTAL_DISCOUNT_AMOUNT,
	TOTAL_CHARGE_QUANTITY,
	TOTAL_SUBSCRIPTION_QUANTITY,
	AOV,
	PRICE_TOTAL,
	TOTAL_GIFTKIT_SUBSCRIPTION_QUANTITY,
	TOTAL_GIFTCREDIT_SUBSCRIPTION_QUANTITY,
	REFILL_COGS,
	WELCOME_KIT_COGS,
	GROSS_REVENUE,
	NET_REVENUE
) as

      -- REVENUE UNION
      with revenue as
      (

        select rev.day,
              sum(total_tax) as tax_amount,
              sum(shipping_amount) as shipping_amount,
              sum(total_discount_amount) as total_discount_amount,
              count(total_charge_quantity) as total_charge_quantity,
              sum(total_subscription_quantity) as total_subscription_quantity,
              sum(price_total) / count(total_charge_quantity) as aov,
              sum(price_total) as price_total,
              sum(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
              sum(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity,  
              sum(zeroifnull(manual.refill_cogs)) as refill_cogs,
              sum(zeroifnull(manual.welcome_kit_cogs)) as welcome_kit_cogs,
              sum(rev.price_total) - sum(rev.total_tax) - sum(rev.shipping_amount) + sum(rev.total_discount_amount) as gross_revenue,
              gross_revenue - sum(zeroifnull(welcome_kit_cogs)) as net_revenue

          from 
          (

                -- ***** START - RECHARGE Daily Revenue ***** --      
                select charges.day,
                        charges.total_price as price_total, 
                        charges.total_discounts as total_discount_amount, 
                        charges.total_charge_quantity as total_charge_quantity,
                        charge_lines.total_subscription_quantity as total_subscription_quantity, 
                        charge_lines.total_tax as total_tax,
                        zeroifnull(charge_shipping.shipping_amount) as shipping_amount,
                        zeroifnull(charge_giftcredit.total_subscription_quantity) as total_giftcredit_subscription_quantity,
                        zeroifnull(charge_giftkit.total_subscription_quantity) as total_giftkit_subscription_quantity         
                from
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(c.total_price) as total_price, sum(c.total_discounts) as total_discounts, count(*) as total_charge_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    -- Do not exclude charges where status != SUCCESS  (where c.status = 'SUCCESS')
                    group by day
                ) as charges
                join 
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity,
                            sum(c.total_tax) as total_tax
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    group by day
                ) as charge_lines on charge_lines.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(csl.price) as shipping_amount
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c                
                    left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id        
                    group by day
                ) as charge_shipping on charge_shipping.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    where cli.title ilike '%gift kit%'
                    group by day
                ) as charge_giftkit on charge_giftkit.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    where cli.title ilike '%Gift Credit%'
                    group by day
                ) as charge_giftcredit on charge_giftcredit.day = charges.day
                -- ***** END - RECHARGE Daily Revenue ***** --      

                union all 
            
                -- ***** START - RECURLY Daily Revenue ***** --  
                select charge_level_revenue.day, 
                        price_total as price_total, 
                        total_discount_amount as total_discount_amount, 
                        total_charge_quantity as total_charge_quantity,      
                        total_subscription_quantity as total_subscription_quantity,    
                        tax_amount as total_tax,
                        zeroifnull(shipping_amount) as shipping_amount,
                        zeroifnull(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
                        zeroifnull(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity
                from
                (
                  
                    select nonship_adj.day as day,
                        nonship_adj.tax as tax_amount,
                        shipping_adj.shipping as shipping_amount,
                        nonship_adj.discount_amount as total_discount_amount,
                        nonship_adj.total_charges as total_charge_quantity,
                        nonship_adj.quantity as total_subscription_quantity,
                        nonship_adj.total_price as price_total,
                        nonship_adj.total_price - nonship_adj.tax - shipping_adj.shipping + nonship_adj.discount_amount as gross_revenue
                    from
                    (
                        select to_date(t.date) as day,
                                sum(adjustment_discount) as discount_amount,
                                sum(t.tax_amount) as tax,
                                sum(adjustment_total) as adj_total_price,
                                sum(t.amount) as total_price,  
                                sum(adjustment_quantity) as quantity,
                                count(*) as total_charges
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and adjustment_description not ilike '%shipping%'
                        group by day
                        order by day

                    ) as nonship_adj 
                    left join
                    ( 

                        -- Shipping totals will NEVER match up to DGT
                        select to_date(t.date) as day,
                            sum(adjustment_total) as shipping
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and  adjustment_description ilike '%shipping%'
                        group by day
                        order by day  

                    ) as shipping_adj on nonship_adj.day = shipping_adj.day
                    order by nonship_adj.day

                ) as charge_level_revenue
                left join 
                (
                    select to_date(i.closed_at) as day, 
                          sum(a.adjustment_quantity) as total_giftkit_subscription_quantity
                    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                    where i.status in ('paid')
                    and i.invoice_doc_type in ('charge') 
                    and adjustment_description = 'Gift Kit Holiday 2020'
                    group by day 
                ) as charge_level_revenue_giftkit 
                  on charge_level_revenue_giftkit.day = charge_level_revenue.day
                left join 
                (
                    select to_date(i.closed_at) as day, 
                          sum(a.adjustment_quantity) as total_giftcredit_subscription_quantity
                    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                    where i.status in ('paid')
                    and i.invoice_doc_type in ('charge') 
                    and adjustment_description = 'GIFT_CREDIT_PLACEHOLDER'            
                    group by day 
                ) as charge_level_revenue_giftcredit
                  on charge_level_revenue_giftcredit.day = charge_level_revenue.day
                -- ***** END - RECURLY Daily Revenue ***** -- 

          ) as rev
          left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = rev.day
          group by rev.day
          order by rev.day
        
      ), 
      gainlossnet as -- GAIN LOSS JOIN
      (

          select gain.dt as day, 
                  zeroifnull(gain.total_subscribers_gained) as total_subscribers_gained, 
                  zeroifnull(loss.total_subscribers_lost) total_subscribers_lost,   
                  zeroifnull(gain.total_subscriptions_gained) as gain,
                  zeroifnull(loss.total_subscriptions_lost) as loss,
                  zeroifnull(gain.total_subscriptions_gained) - zeroifnull(loss.total_subscriptions_lost) as net,

                  -- _international
                  zeroifnull(gain.total_subscriptions_gained_international) as gain_international,
                  zeroifnull(loss.total_subscriptions_lost_international) as loss_international,
                  zeroifnull(gain.total_subscriptions_gained_international) - zeroifnull(loss.total_subscriptions_lost_international) as net_international,

                  -- _international_3mo_refill
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) as gain_international_3mo_refill,
                  zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as loss_international_3mo_refill,
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) - zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as net_international_3mo_refill,

                  -- _giftkits
                  zeroifnull(gain.total_subscriptions_gained_giftkits) as gain_giftkits,
                  zeroifnull(loss.total_subscriptions_lost_giftkits) as loss_giftkits,
                  zeroifnull(gain.total_subscriptions_gained_giftkits) - zeroifnull(loss.total_subscriptions_lost_giftkits) as net_giftkits,

                  -- _giftcredits
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) as gain_giftcredits,
                  zeroifnull(loss.total_subscriptions_lost_giftcredits) as loss_giftcredits,
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) - zeroifnull(loss.total_subscriptions_lost_giftcredits) as net_giftcredits,

                  -- _preorders
                  zeroifnull(gain.total_subscriptions_gained_preorders) as gain_preorders,
                  zeroifnull(loss.total_subscriptions_lost_preorders) as loss_preorders,
                  zeroifnull(gain.total_subscriptions_gained_preorders) - zeroifnull(loss.total_subscriptions_lost_preorders) as net_preorders

          from
          (

                with subscription_breakdowns as 
                (

                    select 
                        -- only perform timezone offset subscriptions created within recharge
                        case 
                          when is_recharge_native = 1 then to_date(dateadd(hour, -4, map.created_at))
                          when is_imported = 1 then to_date(dateadd(hour, -4, map.created_at))
                          else to_date(map.created_at) end
                        as dt,
                        count(*) as total_subscribers_gained, 
                        sum(quantity) as total_subscriptions_gained,
                        is_international,
                        sku,
                        is_preorder
                    from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_SUBSCRIPTION_MAPPING"" as map
                    group by dt, is_international, sku, is_preorder
                    order by dt
                )            
            

                -- **************************************************
                -- BREAKDOWNS: Create aggregation + join for each breakdown
                -- **************************************************      
                select total.dt, total_subscribers_gained, total_subscriptions_gained, 
                        total_subscribers_gained_international, total_subscriptions_gained_international,
                        total_subscribers_gained_international_3mo_refill, total_subscriptions_gained_international_3mo_refill,
                        total_subscribers_gained_giftkits, total_subscriptions_gained_giftkits,
                        total_subscribers_gained_giftcredits, total_subscriptions_gained_giftcredits,
                        total_subscribers_gained_preorders, total_subscriptions_gained_preorders
                from
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained, sum(total_subscriptions_gained) as total_subscriptions_gained
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international, sum(total_subscriptions_gained) as total_subscriptions_gained_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international_3mo_refill, sum(total_subscriptions_gained) as total_subscriptions_gained_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftkits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftcredits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_preorders, sum(total_subscriptions_gained) as total_subscriptions_gained_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt


          ) as gain
          left join
          (

                with subscription_breakdowns as 
                (
                    select 
                          -- only perform timezone offset on subscriptions cancelled within recharge, not on recurly
                          case
                            when is_recharge_native = 1 and is_imported = 0 then to_date(dateadd(hour, -4, map.cancelled_at))
                            when is_imported = 1 then to_date(map.cancelled_at)
                            else to_date(map.cancelled_at)
                          end as dt,
                          count(*) as total_subscribers_lost, 
                          sum(quantity) as total_subscriptions_lost,
                          is_international,
                          sku,
                          is_preorder
                    from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_SUBSCRIPTION_MAPPING"" as map
                    where map.cancelled_at is not null
                    group by dt, is_international, sku, is_preorder
                    order by dt           
                )             
            
                -- **************************************************
                -- BREAKDOWNS: Create aggregation for each breakdown
                -- **************************************************    
                select total.dt, total_subscribers_lost, total_subscriptions_lost, 
                        total_subscribers_lost_international, total_subscriptions_lost_international,
                        total_subscribers_lost_international_3mo_refill, total_subscriptions_lost_international_3mo_refill,
                        total_subscribers_lost_giftkits, total_subscriptions_lost_giftkits,
                        total_subscribers_lost_giftcredits, total_subscriptions_lost_giftcredits,
                        total_subscribers_lost_preorders, total_subscriptions_lost_preorders
                from
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost, sum(total_subscriptions_lost) as total_subscriptions_lost
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international, sum(total_subscriptions_lost) as total_subscriptions_lost_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt          
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international_3mo_refill, sum(total_subscriptions_lost) as total_subscriptions_lost_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftkits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftcredits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_preorders, sum(total_subscriptions_lost) as total_subscriptions_lost_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt


          ) as loss 
          on gain.dt = loss.dt
          order by gain.dt  

      ),
      spend as
      (

          with facebook as
          (

              select day, sum(spend) as fb_spend
              from
              (
                  select distinct fb.date as day, fb.CAMPAIGN_NAME, fb.spend-- , fba.value as conversions
                  from ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS"" fb
                  -- **** if we need conversions, this is the correct pixel name          
                  -- left join ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS_ACTIONS"" fba on fba.date = fb.date
                  -- where fba.action_type in ('offsite_conversion.fb_pixel_purchase')
              )
              group by day
          ),
          adwords as
          (
              select date as day, sum(cost) as gaw_spend
              from ""MARKETING_DATABASE"".""ADWORDS"".""ADWORDS_CAMPAIGN_STATS"" gaw
              group by day    
          )

          select case when fb.day is null then aw.day else fb.day end as day, 
            fb_spend as fb_spend,
            gaw_spend as gaw_spend
          from facebook as fb
          left join adwords as aw on fb.day = aw.day
          order by day

      )

      select gainlossnet_agg.DAY,
          gainlossnet_agg.GAIN,
          gainlossnet_agg.LOSS,
          gainlossnet_agg.NET,
          gainlossnet_agg.TOTAL_ACTIVE,
          gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL,
          gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.TOTAL_ACTIVE_GIFTKITS,
          gainlossnet_agg.TOTAL_ACTIVE_GIFTCREDITS,
          gainlossnet_agg.TOTAL_ACTIVE_PREORDERS,
          gainlossnet_agg.TRAILING_30_DAY_GAIN,
          gainlossnet_agg.TRAILING_30_DAY_LOSS,
          gainlossnet_agg.GAIN_INTERNATIONAL,
          gainlossnet_agg.LOSS_INTERNATIONAL,
          gainlossnet_agg.NET_INTERNATIONAL,
          gainlossnet_agg.GAIN_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.LOSS_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.NET_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.GAIN_GIFTKITS,
          gainlossnet_agg.LOSS_GIFTKITS,
          gainlossnet_agg.NET_GIFTKITS,
          gainlossnet_agg.GAIN_GIFTCREDITS,
          gainlossnet_agg.LOSS_GIFTCREDITS,
          gainlossnet_agg.NET_GIFTCREDITS,
          gainlossnet_agg.GAIN_PREORDERS,
          gainlossnet_agg.LOSS_PREORDERS,
          gainlossnet_agg.NET_PREORDERS,

          revenue.TAX_AMOUNT,
          revenue.SHIPPING_AMOUNT,
          revenue.TOTAL_DISCOUNT_AMOUNT,
          revenue.TOTAL_CHARGE_QUANTITY,
          revenue.TOTAL_SUBSCRIPTION_QUANTITY,
          revenue.AOV,
          revenue.PRICE_TOTAL,
          revenue.TOTAL_GIFTKIT_SUBSCRIPTION_QUANTITY,
          revenue.TOTAL_GIFTCREDIT_SUBSCRIPTION_QUANTITY,
          revenue.REFILL_COGS,
          revenue.WELCOME_KIT_COGS,
          revenue.GROSS_REVENUE,
          revenue.NET_REVENUE
                  

      from
      (
          select day, gain, loss, net,
                  sum(net) over (order by day asc rows between unbounded preceding and current row) as total_active,
                  sum(net_international) over (order by day asc rows between unbounded preceding and current row) as total_active_international,
                  sum(net_international_3mo_refill) over (order by day asc rows between unbounded preceding and current row) as total_active_international_3mo_refill,
                  sum(net_giftkits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftkits,
                  sum(net_giftcredits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftcredits,  
                  sum(net_preorders) over (order by day asc rows between unbounded preceding and current row) as total_active_preorders,  

                  sum(gain) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_gain,        
                  sum(loss) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_loss,

                  gain_international,
                  loss_international,
                  net_international,
                  gain_international_3mo_refill,
                  loss_international_3mo_refill,
                  net_international_3mo_refill,
                  gain_giftkits,
                  loss_giftkits,
                  net_giftkits,
                  gain_giftcredits,
                  loss_giftcredits,
                  net_giftcredits,
                  gain_preorders,
                  loss_preorders,
                  net_preorders

          from gainlossnet
      ) as gainlossnet_agg
      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = gainlossnet_agg.day
      left join revenue on revenue.day = gainlossnet_agg.day
      left join spend on spend.day = gainlossnet_agg.day
      order by gainlossnet_agg.day asc;"
"V_LAST_RECURLY_ADJUSTMENT","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.V_LAST_RECURLY_ADJUSTMENT(
	SUBSCRIPTION_ID,
	LAST_ADJUSTMENT_START_AT,
	LAST_ADJUSTMENT_PRODUCT_CODE,
	LAST_ADJUSTMENT_QUANTITY,
	LAST_ADJUSTMENT_TOTAL,
	LAST_ADJUSTMENT_TOTAL_TAX,
	LAST_ADJUSTMENT_TOTAL_DISCOUNT
) as
    select adj_LAST_sku.subscription_id, 
            adj_LAST_sku.adjustment_start_at as LAST_adjustment_start_at, 
            adj_LAST_sku.adjustment_product_code as LAST_adjustment_product_code,
            adj_LAST_sku.adjustment_quantity as LAST_adjustment_quantity,
            adj_LAST_sku.adjustment_total as LAST_adjustment_total,
            adj_LAST_sku.adjustment_tax as LAST_adjustment_total_tax,
            adj_LAST_sku.adjustment_discount as LAST_adjustment_total_discount

    from
    (
      select MAX(adjustment_start_at) as adjustment_start_at, subscription_id
      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
      where adjustment_description not ilike 'Shipping%' 
      and adjustment_type = 'charge' 
      and subscription_id is not null
      group by subscription_id
    ) as adj_LAST
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as adj_LAST_sku 
        on adj_LAST_sku.adjustment_start_at = adj_LAST.adjustment_start_at
        and adj_LAST_sku.subscription_id = adj_LAST.subscription_id
    where adj_LAST_sku.adjustment_description not ilike 'Shipping%' 
    and adj_LAST_sku.adjustment_type = 'charge' 
    and adj_LAST_sku.subscription_id is not null    
    order by adj_LAST_sku.adjustment_start_at, adj_LAST_sku.subscription_id;"
"V_MAPPING_CONSOLIDATED","create or replace view ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_MAPPING_CONSOLIDATED""
as
    select *
    from
    (
        select distinct trim(to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID, trim(to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID)) as _RECURLY_SUBSCRIPTION_ID   
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""  

        union all

        select trim(to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID, trim(to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID)) as _RECURLY_SUBSCRIPTION_ID   
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""

        union all

        select trim(to_varchar(RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID, trim(to_varchar(RECURLY_SUBSCRIPTION_ID)) as _RECURLY_SUBSCRIPTION_ID  
        from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
      
    ) as consolidated
    where consolidated._RECHARGE_SUBSCRIPTION_ID not in ('canceled', 'cancel')
    and consolidated._RECURLY_SUBSCRIPTION_ID not in ('no need to map since it''s cancelled', 'expired', 'cancelled', 'canceled', 'cancel')
;"
"V_SUBSCRIPTION_MAPPING","create or replace view V_SUBSCRIPTION_MAPPING(
	RECHARGE_SUBSCRIPTION_ID,
	RECURLY_SUBSCRIPTION_ID,
	IS_RECHARGE_NATIVE,
	IS_RECURLY_NATIVE,
	IS_IMPORTED,
	CUSTOMER_ID,
	CUSTOMER_EMAIL,
    FIRST_NAME,
    LAST_NAME,
	CURRENT_STATUS,
	CREATED_AT,
	ACTIVATED_AT,
	CANCELLED_AT,
	PRICE,
	QUANTITY,
	BILLING_COUNTRY,
	IS_INTERNATIONAL,
	SKU,
	IS_PREORDER
) as

    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
    select to_varchar(recharge_s.id) as recharge_subscription_id, 
            null as recurly_subscription_id, 
            1 as is_recharge_native, 
            0 as is_recurly_native, 
            0 as is_imported,
            to_varchar(recharge_c.id) as customer_id, 
            recharge_c.email as customer_email,
            recharge_c.first_name as first_name,
            recharge_c.last_name as last_name,
            recharge_s.status as current_status, 
            recharge_s.created_at as created_at, 
            null as activated_at, 
            recharge_s.cancelled_at as cancelled_at, 
            recharge_s.price as price, 
            recharge_s.quantity as quantity,
            recharge_c.billing_country,
            case when recharge_c.billing_country in ('United States', 'US') then 0 else 1 end as is_international,            
            recharge_s.sku,
            null as is_preorder
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    where to_varchar(recharge_s.id) not in (
        select distinct _RECHARGE_SUBSCRIPTION_ID
        from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_MAPPING_CONSOLIDATED""
    )

    union all

    -- Get all (IMPORTED & MAPPED) Subscriptions
    select to_varchar(mapping._recharge_subscription_id) as recharge_subscription_id, 
            to_varchar(mapping._recurly_subscription_id) as recurly_subscription_id, 
            1 as is_recharge_native, 
            0 as is_recurly_native, 
            1 as is_imported,
            to_varchar(recharge_c.id) as customer_id, 
            recharge_c.email as customer_email,
            recharge_c.first_name as first_name,
            recharge_c.last_name as last_name,
            recurly.state as current_status, 
            recharge_s.created_at as created_at, 
            null as activated_at, -- precaution: we dont know the exact ""activated at"" for imporated subscriptions
            -- recurly.activated_at as activated_at, 
            recurly.canceled_at as cancelled_at, 
            recurly.total_recurring_amount as price, 
            recurly.quantity as quantity,
            recharge_c.billing_country,
            case when recharge_c.billing_country in ('United States', 'US') then 0 else 1 end as is_international,
            recharge_s.sku,
            null as is_preorder
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s            
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    join
    (
        select distinct _RECHARGE_SUBSCRIPTION_ID, _RECURLY_SUBSCRIPTION_ID
        from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_MAPPING_CONSOLIDATED""       
    ) as mapping on to_varchar(mapping._recharge_subscription_id) = to_varchar(recharge_s.id)
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping._recurly_subscription_id = recurly.uuid
  
    union all 

    -- Get all (UNIMPORTED) Recurly-Only Subscriptions
    select null as recharge_subscription_id, 
            to_varchar(uuid) as recurly_subscription_id, 
            0 as is_recharge_native, 
            1 as is_recurly_native, 
            0 as is_imported,
            to_varchar(s.account_code) as customer_id, 
            email as customer_email,
            a.account_first_name as first_name,
            a.account_last_name as last_name,
            state as current_status, 
            created_at as created_at, 
            activated_at as activated_at, 
            canceled_at as cancelled_at, 
            total_recurring_amount as price, 
            quantity as quantity,            
            ship_address_country,
            case when ship_address_country in ('United States', 'US') then 0 else 1 end as is_international,
            adj_first.first_adjustment_product_code as sku,
            case when adj_first.first_adjustment_total = 0 then 1 else 0 end as is_preorder
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" s LEFT JOIN ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS"" a ON s.account_code = a.account_code 
    left join ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_FIRST_RECURLY_ADJUSTMENT"" adj_first on adj_first.subscription_id = s.uuid
    where uuid not in (

        select distinct _RECURLY_SUBSCRIPTION_ID
        from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_MAPPING_CONSOLIDATED""

    )"
"V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021(
	RECHARGE_SUBSCRIPTION_ID,
	RECURLY_SUBSCRIPTION_ID,
	LTR
) as
    select map.recharge_subscription_id, 
            map.recurly_subscription_id, 
            zeroifnull(LTR_recharge) + zeroifnull(LTR_recurly) as LTR
    from  ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_SUBSCRIPTION_MAPPING"" as map
    left join (

        select s.id as recharge_subscription_id, sum(c.total_price) as LTR_recharge
        from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
        join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
        left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
        left join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on s.customer_id = c.customer_id
        where c.status = 'SUCCESS'
        group by recharge_subscription_id
        order by recharge_subscription_id

    ) as _recharge on map.recharge_subscription_id = _recharge.recharge_subscription_id
    left join (

        select a.subscription_id as recurly_subscription_id, sum(a.ADJUSTMENT_TOTAL) as LTR_recurly
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
        where i.status in ('paid')
        and i.invoice_doc_type in ('charge')
        group by subscription_id
        order by subscription_id

    ) as _recurly on map.recurly_subscription_id = _recurly.recurly_subscription_id
    where LTR <= 0
    -- TIM & SURAJ - Only return Zero LTR Subscriptions before Oct 2020
    and map.created_at < '2021-01-01'
    -- and _recharge.recharge_subscription_id is null AND _recurly.recurly_subscription_id is null
    order by map.recharge_subscription_id, map.recurly_subscription_id;"
"KUSTOMER_CUSTOMER_VIEW","create view kustomer_customer_view as 
(select 
b.Email as pk_email,
sum(a.CONVERSATION_COUNTS_ALL) as ticket_volume,
--list_agg(d.ticket_tag, ',') as ticket_tag,
listagg( distinct e.name, ',') as ticket_channel,
max(c.CREATED_AT) as last_ticket_date,
case when 
  count_if(c.status  = 'open') > 0 then 'unsolved' else 'solved' end as ticket_status,
datediff(minute, MIN(c.FIRST_MESSAGE_IN_SENT_AT),MAX(c.LAST_MESSAGE_OUT_SENT_AT)) as avg_handle_time,
avg(c.Satisfaction) as satisfication
from ""MARKETING_DATABASE"".""KUSTOMER"".""CUSTOMER"" as a
join ""MARKETING_DATABASE"".""KUSTOMER"".""CUSTOMER_EMAIL"" as b on a.ID = b.CUSTOMER_ID
join ""MARKETING_DATABASE"".""KUSTOMER"".""CONVERSATION"" as c on a.ID = c.CUSTOMER_ID
join""MARKETING_DATABASE"".""KUSTOMER"".""CUSTOMER_LAST_CONVERSATION_TAG"" as d on b.CUSTOMER_ID = d.CUSTOMER_ID
join ""MARKETING_DATABASE"".""KUSTOMER"".""CONVERSATION_CHANNEL"" as e on C.ID = e.CONVERSATION_ID
group by b.email, e.name)"
"PRE_ORDERS_JUNE_2021","create or replace view MARKETING_DATABASE.PUBLIC.PRE_ORDERS_JUNE_2021 as


select b.date, a.*, b.invoice_number

from (
select first_adjustment_product_code as first_sku,
s.email, s.uuid
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s
join ""MARKETING_DATABASE"".""PUBLIC"".""d_first_recurly_adjustment"" as a 
on s.uuid = a.subscription_id
where s.created_at > '2021-03-26') as a left join

(
select a.subscription_id as subscription_id,a.invoice_number as invoice_number, to_date(a.adjustment_created_at) as date
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
where i.status in ('paid')
and i.invoice_doc_type in ('charge') 
and adjustment_description not ilike '%shipping%') as b on a.uuid = b.subscription_id

order by uuid;"
"REVENUE_CTE","create or replace view marketing_database.public.revenue_cte as 
 select RECHARGE_SUBSCRIPTION_ID,
            RECURLY_SUBSCRIPTION_ID,
  
            case when RECHARGE_SUBSCRIPTION_ID is null then
                RECURLY_SUBSCRIPTION_ID
            else
                RECHARGE_SUBSCRIPTION_ID
            end as _subscription_id,

            min(charged_date) over (partition by _subscription_id) as first_charged_at,
            charged_date as charged_at,
            charged_amount,

            is_recharge_native,
            is_imported,
            is_recurly_native

    from
    (

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort
        -- left join
        join 
        (
            select to_varchar(s.uuid) as subscription_id,
                    -- a.adjustment_start_at as charged_date,
                    t.date as charged_date,
                    (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) as charged_amount
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and ifnull(charged_amount,0) > 0
        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))

        union all

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort
        -- left join 
        join
        (
            select to_varchar(s.id) as subscription_id, 
                    c.processed_at as charged_date, 
                    (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) as charged_amount
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and ifnull(charged_amount,0) > 0
        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        order by charged_date

    ) as a"
"SDC_CHURN_INPUT","create or replace view MARKETING_DATABASE.PUBLIC.SDC_CHURN_INPUT(
    DAY,
	""'Health situation has changed (pregnancy, illness, medication)'"",
    ""'I’m following a doctor''s recommendation'"",
    ""'Inconsistent product delivery'"",
    ""'Other'"",
    ""'I''ve run into a delivery, billing, account, or technical issue'"",
    ""'I no longer want a subscription to Seed'"",
    ""'Didn’t notice a difference'"",
    ""'I decided to try a different probiotic'"",
    ""'Too expensive'"",
    ""'I am unable to continue, for financial reasons'"",
    ""'I’m not noticing a difference'"",
    ""'I''m no longer taking probiotics'"",
    ""'I’m traveling or moving'"",
    ""'I had technical issues, billing issues, or trouble logging in'"",
    ""'Other - leave a comment on the next page'"",
    ""'I''m experiencing discomfort'"",
    ""'Wasn’t aware this was a subscription'"",
    ""'I’m not noticing any improvement'"",
    ""'My financial situation has changed since I started'"",
    ""'I still have product on hand, and am not ready for a refill'"",
    PRODUCT,
	STP_FLAG
) as

with DS_baseline as 
(
  select left(canceled_form_submitted_date,10) as day, reason,count(distinct subscription_uuid) as counts
  from MARKETING_DATABASE.PUBLIC.SUB_CANCEL_REASONS_ANALYSIS
  where product = 'DS-01' and stp_flag = 'Baseline'
  group by day, reason
  order by day, reason
),

DS_stp as 
(
  select left(canceled_form_submitted_date,10) as day, reason,count(distinct subscription_uuid) as counts
  from MARKETING_DATABASE.PUBLIC.SUB_CANCEL_REASONS_ANALYSIS
  where product = 'DS-01' and stp_flag = 'STP'
  group by day, reason
  order by day, reason
),

PDS as
(
  select left(canceled_form_submitted_date,10) as day, reason,count(distinct subscription_uuid) as counts
  from MARKETING_DATABASE.PUBLIC.SUB_CANCEL_REASONS_ANALYSIS
  where product = 'PDS-08'
  group by day, reason
  order by day, reason
),

final_table as (
select *, 'DS-01' as product,0 as STP_flag
from DS_baseline
    PIVOT (sum(counts) for reason in ('Health situation has changed (pregnancy, illness, medication)',
'I’m following a doctor\'s recommendation',
'Inconsistent product delivery',
'Other',
'I\'ve run into a delivery, billing, account, or technical issue',
'I no longer want a subscription to Seed',
'Didn’t notice a difference',
'I decided to try a different probiotic',
'Too expensive',
'I am unable to continue, for financial reasons',
'I’m not noticing a difference',
'I\'m no longer taking probiotics',
'I’m traveling or moving',
'I had technical issues, billing issues, or trouble logging in',
'Other - leave a comment on the next page',
'I\'m experiencing discomfort',
'Wasn’t aware this was a subscription',
'I’m not noticing any improvement',
'My financial situation has changed since I started',
'I still have product on hand, and am not ready for a refill' ))
                                      
UNION ALL

select *, 'DS-01' as product, 1 as STP_flag
from DS_stp
    PIVOT (sum(counts) for reason in ('Health situation has changed (pregnancy, illness, medication)',
'I’m following a doctor\'s recommendation',
'Inconsistent product delivery',
'Other',
'I\'ve run into a delivery, billing, account, or technical issue',
'I no longer want a subscription to Seed',
'Didn’t notice a difference',
'I decided to try a different probiotic',
'Too expensive',
'I am unable to continue, for financial reasons',
'I’m not noticing a difference',
'I\'m no longer taking probiotics',
'I’m traveling or moving',
'I had technical issues, billing issues, or trouble logging in',
'Other - leave a comment on the next page',
'I\'m experiencing discomfort',
'Wasn’t aware this was a subscription',
'I’m not noticing any improvement',
'My financial situation has changed since I started',
'I still have product on hand, and am not ready for a refill' ))

UNION ALL 

select *, 'PDS-08' as product, 0 as STP_flag
from PDS
    PIVOT (sum(counts) for reason in ('Health situation has changed (pregnancy, illness, medication)',
'I’m following a doctor\'s recommendation',
'Inconsistent product delivery',
'Other',
'I\'ve run into a delivery, billing, account, or technical issue',
'I no longer want a subscription to Seed',
'Didn’t notice a difference',
'I decided to try a different probiotic',
'Too expensive',
'I am unable to continue, for financial reasons',
'I’m not noticing a difference',
'I\'m no longer taking probiotics',
'I’m traveling or moving',
'I had technical issues, billing issues, or trouble logging in',
'Other - leave a comment on the next page',
'I\'m experiencing discomfort',
'Wasn’t aware this was a subscription',
'I’m not noticing any improvement',
'My financial situation has changed since I started',
'I still have product on hand, and am not ready for a refill'))

order by day,product,STP_flag)

select *
 /*DAY,
	""'Health situation has changed (pregnancy, illness, medication)'"",
    ""'I’m following a doctor''s recommendation'"",
    ""'Inconsistent product delivery'"",
    ""'Other'"",
    ""'I''ve run into a delivery, billing, account, or technical issue'"",
    ""'I no longer want a subscription to Seed'"",
    ""'Didn’t notice a difference'"",
    ""'I decided to try a different probiotic'"",
    ""'Too expensive'"",
    ""'I am unable to continue, for financial reasons'"",
    ""'I’m not noticing a difference'"",
    ""'I''m no longer taking probiotics'"",
    ""'I’m traveling or moving'"",
    ""'I had technical issues, billing issues, or trouble logging in'"",
    ""'Other - leave a comment on the next page'"",
    ""'I''m experiencing discomfort'"",
    ""'Wasn’t aware this was a subscription'"",
    ""'I’m not noticing any improvement'"",
    ""'My financial situation has changed since I started'"",
    ""'I still have product on hand, and am not ready for a refill'"",
	PRODUCT,
	STP_FLAG*/
from final_table;"
"SUB_CANCEL_REASONS_SDC_INPUT","create or replace view MARKETING_DATABASE.PUBLIC.SUB_CANCEL_REASONS_SDC_INPUT(
	YEAR_MONTH_CANCELLATION,
    PRODUCT,
    CUSTOER_AGE_MONTH_CATEGORY,
    REASON_CATEGORY,
    SUBSCRIPTION_CANCEL_COUNT
) as

with all_raw_data as (
  select *,case when reason in ('Health situation has changed (pregnancy, illness, medication)',
                              'I\’m following a doctor\'s recommendation',
                              'I’m traveling or moving') then 'Change in Personal Situation'
              when reason in ('I decided to try a different probiotic',
                              'I no longer want a subscription to Seed') then 'Competition'
              when reason in ('Didn’t notice a difference',
                              'I\'m experiencing discomfort',
                              'I’m not noticing a difference',
                               'I’m not noticing any improvement') then 'Efficacy/Discomfort'
              when reason in ('I am unable to continue, for financial reasons',
                              'My financial situation has changed since I started',
                              'Too expensive') then 'Financial'
              when reason in ('I\'m no longer taking probiotics') then 'No longer taking probiotics'
              when reason in ('I still have product on hand, and am not ready for a refill') then 'Not ready for refill'
              when reason in ('Other','Other - leave a comment on the next page') then 'Other'
              when reason in ('I had technical issues, billing issues, or trouble logging in', 
                              'I\'ve run into a delivery, billing, account, or technical issue',
                              'Inconsistent product delivery',
                              'Wasn’t aware this was a subscription') then 'UX'
              else 'UNKNOWN' end as reason_category
        ,datediff('day',activated_at,canceled_at) as customer_age_days, 
        floor(customer_age_days/30) as customer_age_month,
        case when customer_age_month = 0 then '0'
             when customer_age_month = 1 then '1'
             when customer_age_month = 2 then '2'
             when customer_age_month < 6 then '3-5'
             when customer_age_month < 12 then '6-11'
             when customer_age_month < 18 then '12-17'
             when customer_age_month < 24 then '18-23'
             else '24+' end as customer_age_month_category,left(CANCELED_FORM_SUBMITTED_DATE,7) as year_month_cancellation
from ""MARKETING_DATABASE"".""PUBLIC"".""SUB_CANCEL_REASONS_ANALYSIS"")

select year_month_cancellation,product,customer_age_month_category,reason_category,count(SUBSCRIPTION_UUID) as subscription_cancel_count
from all_raw_data
group by year_month_cancellation,product,customer_age_month_category,reason_category
order by year_month_cancellation,product,customer_age_month_category,reason_category;"
"TEST_VIEW","create or replace view marketing_database.public.test_view as
        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))"
"TEST_VIEW_THREE","create or replace view MARKETING_DATABASE.PUBLIC.TEST_VIEW_THREE(
	RECHARGE_SUBSCRIPTION_ID,
	RECURLY_SUBSCRIPTION_ID,
	FIRST_CHARGED_DATE,
	CANCELLED_AT,
	TOTAL_QUANTITY,
	RECURLY_TOTAL_QUANTITY,
	RECHARGE_TOTAL_QUANTITY,
	CUSTOMER_EMAIL,
	PLAN_NAME
) as
        --select distinct
        select 
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity,
            customer_email,
            
            --sku plan name
            case when recurly.subscription_id is not null then
            recurly.sku
            else
                recharge.sku
            end as plan_name 
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at,
                    s.sku as sku
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at, s.sku
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))
       --- The two tables pre_2021 and post_2021 are created to handle 0$ invoices. As they meant pre-orders in 2020 but we have changed on how we handle preorders since 2021
        left join 
        (
           with recurly_pre_2021 as 
        (select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at,
                    s.plan_code as sku
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at,s.plan_code
            having first_charged_date < '2021-01-01'
            order by to_varchar(s.uuid)),
   
            recurly_post_2021 as         
        (select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at,
                    s.plan_code as sku
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            group by to_varchar(s.uuid), s.quantity, s.canceled_at,s.plan_code
            having first_charged_date >= '2021-01-01'
            order by to_varchar(s.uuid))
            
 select * 
 from recurly_pre_2021 union all
 select * from recurly_post_2021          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
where recharge.first_charged_date is not null or recurly.first_charged_date is not null;"
"TEST_VIEW_THREE_OLD","create or replace view TEST_VIEW_THREE_OLD(
	RECHARGE_SUBSCRIPTION_ID,
	RECURLY_SUBSCRIPTION_ID,
	FIRST_CHARGED_DATE,
	CANCELLED_AT,
	TOTAL_QUANTITY,
	RECURLY_TOTAL_QUANTITY,
	RECHARGE_TOTAL_QUANTITY,
	CUSTOMER_EMAIL,
	PLAN_NAME
) as
        --select distinct
        select 
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity,
            customer_email,
            
            --sku plan name
            case when recurly.subscription_id is not null then
            recurly.sku
            else
                recharge.sku
            end as plan_name 
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at,
                    s.sku as sku
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at, s.sku
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at,
                    s.plan_code as sku
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at, s.plan_code
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
where recharge.first_charged_date is not null or recurly.first_charged_date is not null"
"TRANSACTION_HISTORY","create or replace view marketing_database.public.transaction_history as
select
adj.day,
//adj.discount_amount,
//adj.tax,
//adj.total_price,
adj.quantity,
adj.sku,
adj.title,
adj.price,
inv.ship_address_country,
inv.ship_address_state,
//inv.ship_address_city,
adj.account_code
from (
  select to_date(t.date) as day,
          a.adjustment_discount as discount_amount,
          t.tax_amount as tax,
          t.amount as total_price,
          adjustment_quantity as quantity,
          adjustment_product_code as sku,
          adjustment_description as title,
          t.amount-t.tax_amount as price,
          a.invoice_id,
          t.account_code
  from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
  join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
  where t.type = 'purchase'
      and t.status = 'success'
      and a.adjustment_description not ilike '%shipping%'
  order by day
) as adj join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as inv on adj.INVOICE_ID = inv.id

union all 

select 
to_date(dateadd(hour, -4, c.processed_at)) as day,
cli.quantity as total_subscription_quantity,
cli.SKU as sku,
cli.title as title,
cli.price as price_total,
c.shipping_address_country as country,
c.SHIPPING_ADDRESS_PROVINCE as state,
TO_VARCHAR(c.customer_id) as customer_id
from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
where day is not null

order by day asc"
"V_2023_01_07_FORECASTDAILYSUBS","create or replace view MARKETING_DATABASE.PUBLIC.V_2023_01_07_FORECASTDAILYSUBS AS
SELECT ROUND((HOUR(TO_TIME(current_timestamp(1)))*60)/1440,2) AS CURRENTMINUTE,
QUARTER(to_date(ACTIVATED_AT)) as QUARTERJOINED, DAY(to_date(ACTIVATED_AT)) as DAYJOINED,ROUND(((HOUR(TO_TIME(ACTIVATED_AT))*60) + MINUTE(TO_TIME(ACTIVATED_AT)))/1440,2) as MINUTEJOINED, COUNT(UUID) as COUNTSUBS from IO06230_RECURLY_SEED_SHARE.CLASSIC.SUBSCRIPTIONS WHERE  YEAR(to_date(ACTIVATED_AT)) > '2018' group by QUARTERJOINED,DAYJOINED, MINUTEJOINED ORDER BY QUARTERJOINED ASC, DAYJOINED ASC, MINUTEJOINED ASC"
"V_ACCOUNT_MONTHLY_RETENTION_PDS08_MAR_31_2023","create or replace view MARKETING_DATABASE.PUBLIC.V_ACCOUNT_MONTHLY_RETENTION_PDS08_MAR_31_2023(
	CUSTOMER_EMAIL,
	START_MONTH_YEAR,
	START_QUANTITY,
	CUSTOMER_EMAIL_RETENTION,
	ACTIVE_AT_EOMY,
	PDS_08_QUANTITY
) as
    
    with pds_08_sub_table as
        (
        select RECURLY_SUBSCRIPTION_ID as subscription_id, customer_email,case when lower(current_status) = 'canceled' then 'cancelled'
                              else lower(current_status)
                              end as current_status,
               to_date(created_at) as created_at ,coalesce(to_date(cancelled_at),current_date()) as cancelled_at, quantity,
               case when current_status = 'active' then 1
                    else 0 end as active_flag from 
        ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_PDS_08""

        where current_status not in ('future','pending') and customer_email is not null and customer_email != ''
        ),


         cus_info_pds_08 as
        ( 
          -- Cleaning for multiple DS_01 subs started on the same day
         with pds_08_sub_agg as 
          (
            select customer_email,created_at,sum(quantity) as quantity
            from pds_08_sub_table
            group by customer_email,created_at
          ),

          pds_08_first_sub as
          (
            select *,row_number() over(partition by customer_email order by created_at) as rw_no
            from pds_08_sub_agg
          )

         select customer_email,left(created_at,7) as start_month_year, quantity
         from pds_08_first_sub
         where rw_no = 1
        ),


           date_explode_pds_08 as 
        (
              select subscription_id,customer_email,quantity,created_at ,created_at as active_dt, cancelled_at  
              from pds_08_sub_table
              union all
              select subscription_id,customer_email, quantity,created_at ,dateadd(month, 1, active_dt), cancelled_at 
              from date_explode_pds_08
              where (month(active_dt) < month(cancelled_at)) or (year(active_dt) < year(cancelled_at))
             ),   




        active_dates_pds_08 as
        (

        select *, left(lag(active_dt,1) over(partition by subscription_id order by active_dt),7) as active_at_eomy
        from date_explode_pds_08 as de
        ),

        retention_data_pds_08 as (
        select customer_email as customer_email_retention,active_at_eomy, sum(quantity) as pds_08_quantity
        from active_dates_pds_08
        where active_at_eomy is not null
        group by customer_email,active_at_eomy
        order by customer_email,active_at_eomy
        ),/* If you want pivot data for excel in the future

        retention_pivot_ds_01 as(
        select * from retention_data_ds_01
        pivot (
                              sum(ds_01_quantity) for active_at_eomy in 
                              ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03','2022-04','2022-05','2022-06','2022-07','2022-08','2022-09','2022-10','2022-11','2022-12','2023-01','2023-02')
                          )
        ),*/

        acc_pds08_ret_cust as 
        (
        select pds_start.customer_email,pds_start.start_month_year,pds_start.quantity as start_quantity, pds_ret.*
        from cus_info_pds_08 as pds_start
        left join retention_data_pds_08 as pds_ret on pds_ret.customer_email_retention = pds_start.customer_email
        order by start_month_year
        )

        select * from acc_pds08_ret_cust;"
"V_ACCOUNT_MONTHLY_RETENTION_V_01","create or replace view MARKETING_DATABASE.PUBLIC.V_ACCOUNT_MONTHLY_RETENTION_V_01(
	COHORT_ID,
    COUPON_NAME,
	CYCLE,
	ACCOUNT_COUNT,
	ACCOUNT_QUANTITY,
	DS01_QUANTITY,
	PDS08_QUANTITY,
	FLAG
) as

with coupon_redemption as 
(select *, row_number() over (PARTITION BY account_email order by applied_at desc) as rn
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""COUPON_REDEMPTIONS"" as cr 
left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""COUPONS"" as c on cr.coupon_id = c.id
left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS"" as a on cr.account_code = a.account_code
),

account_coupon as 
(
select account_email, name as coupon_name
from coupon_redemption
where rn = 1
  ),
  
 /* select ar.*,ac.coupon_name as coupon_name from ""MARKETING_DATABASE"".""PUBLIC"".""V_ACCOUNT_DAILY_RETENTION_V_01"" as ar 
  left join account_coupon as ac on ar.customer_email = ac.account_email */
/*  
  create or replace view MARKETING_DATABASE.PUBLIC.V_ACCOUNT_MONTHLY_RETENTION_V_01(
	COHORT_ID,
	CYCLE,
	ACCOUNT_COUNT,
	ACCOUNT_QUANTITY,
	DS01_QUANTITY,
	PDS08_QUANTITY,
	FLAG
) as
*/

account_monthly_retention as 
(select customer_email,account_active_flag,account_start_date,account_active_date,account_quantity,DS01_quantity,
 pds08_Quantity, datediff(day,account_start_date,account_active_date) as active_day, ac.coupon_name as coupon_name
from ""MARKETING_DATABASE"".""PUBLIC"".""V_ACCOUNT_DAILY_RETENTION_V_01"" as ar left join account_coupon as ac on ar.customer_email = ac.account_email
where mod(active_day,30) = 0
order by account_start_date,active_day
),

account_monthly_agg as
(
select left(account_start_date,7) as cohort_id,coupon_name,Active_day as cycle, 
    count(distinct customer_email) as account_count, sum(account_quantity) as account_quantity_agg,
    sum(ds01_quantity) as ds01_quantity_agg,sum(pds08_quantity) as pds08_quantity_agg,
    row_number() over(partition by cohort_id,coupon_name order by cycle desc) as rn
from account_monthly_retention
group by cohort_id,coupon_name,cycle
order by cohort_id,coupon_name,cycle
)

select cohort_id,coupon_name,cycle,account_count,account_quantity_agg as account_quantity,
    ds01_quantity_agg as ds01_quantity,pds08_quantity_agg as pds08_quantity,
    case when rn = 1 then 'running_cohort' end as flag
from account_monthly_agg;"
"V_ALLCANCEL","create view ""MARKETING_DATABASE"".""PUBLIC"".V_AllCancel
    as
		WITH credit_final AS (
    SELECT
        i.account_code,
        CASE
            WHEN adjustment_plan_code ILIKE '%pds%' THEN 'PDS-08'
            ELSE 'DS-01'
        END AS product,
        sum(cp.amount) AS credit_amount
    FROM
        ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""CREDIT_PAYMENTS"" AS CP
        LEFT JOIN ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" AS i ON i.invoice_number = cp.applied_to_invoice_number
        LEFT JOIN ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" AS a ON a.invoice_id = i.id
    WHERE
        action != 'write_off'
    GROUP BY
        i.account_code,
        product
    ORDER BY
        credit_amount DESC
),
nonship_adj AS (
    SELECT
        t.account_code,
        CASE
            WHEN adjustment_plan_code ILIKE '%pds%' THEN 'PDS-08'
            ELSE 'DS-01'
        END AS product,
        sum(adjustment_discount) AS total_discount_amount,
        sum(adjustment_tax) AS total_tax,
        sum(t.amount) AS total_price,
        sum(adjustment_quantity) AS quantity
    FROM
        ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" AS t
        JOIN ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" AS a ON t.invoice_id = a.invoice_id
    WHERE
        t.type = 'purchase'
        AND t.status = 'success'
        AND adjustment_description NOT ILIKE '%shipping%'
        AND adjustment_description NOT ILIKE '%(Replacement)%'
        AND adjustment_description NOT ILIKE '%preorder%'
    GROUP BY
        t.account_code,
        product
    ORDER BY
        total_price,
        account_code,
        product DESC
),
shipping_adj AS (
    SELECT
        t.account_code,
        CASE
            WHEN adjustment_plan_code ILIKE '%pds%' THEN 'PDS-08'
            ELSE 'DS-01'
        END AS product,
        sum(adjustment_amount) AS total_shipping,
        sum(adjustment_tax) AS total_shipping_tax
    FROM
        ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" AS t
        JOIN ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" AS a ON t.invoice_id = a.invoice_id
    WHERE
        t.type = 'purchase'
        AND t.status = 'success'
        AND adjustment_description ILIKE '%shipping%'
    GROUP BY
        t.account_code,
        product
    ORDER BY
        account_code,
        product DESC
),
refunds AS (
    SELECT
        t.account_code,
        CASE
            WHEN adjustment_plan_code ILIKE '%pds%' THEN 'PDS-08'
            ELSE 'DS-01'
        END AS product,
        sum(t.amount) AS refund_amount
    FROM
        ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" AS t
        JOIN ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" AS a ON t.invoice_id = a.invoice_id
    WHERE
        t.type = 'refund'
        AND t.status = 'success'
        AND adjustment_description NOT ILIKE '%shipping%'
    GROUP BY
        t.account_code,
        product
),
max_account AS (
    SELECT
        account_code,
        CASE
            WHEN plan_code ILIKE '%pds%' THEN 'PDS-08'
            ELSE 'DS-01'
        END AS product,
        min(activated_at) AS first_active_date,
        max(canceled_at) AS canceled_date
    FROM
        ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS""
    GROUP BY
        account_code,
        product
),
account_info AS (
    SELECT
        DISTINCT s.account_code,
        s.EMAIL AS email,
        s.ship_address_phone as phone_ship,
        s.STATE AS status,
        s.SHIP_ADDRESS_NICKNAME AS name,
        s.SHIP_ADDRESS_FIRSTNAME AS fname,
        s.SHIP_ADDRESS_LASTNAME AS lname,
        s.SHIP_ADDRESS_STREET1 AS address,
        SHIP_ADDRESS_CITY AS city,
        SHIP_ADDRESS_STATE AS STATE,
        SHIP_ADDRESS_ZIP AS postal,
        SHIP_ADDRESS_COUNTRY AS country,
        row_number() over(
            partition BY s.account_code
            ORDER BY
                country
        ) AS row_number
    FROM
        ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" AS s
        JOIN max_account AS ma ON s.account_code = ma.account_code
        AND s.activated_at = ma.first_active_date
),
account_final AS (
    SELECT
        a.account_code,
        product,
        status,
        first_active_date,
        LEFT(first_active_date, 10) as sdc_date_start,
        LEFT(canceled_date, 10) as sdc_cancel_date,
        (datediff(day, sdc_date_start, sdc_cancel_date) + 1) as sdc_number_of_days,
        (datediff(day, sdc_cancel_date, CURRENT_DATE()) + 1) as sdc_number_of_days_since_cancel,
        email,
    phone_ship,
        name,
        fname,
        lname,
        address,
        city,
        postal,
        STATE,
        country
    FROM
        account_info AS a
        LEFT JOIN max_account AS ma ON a.account_code = ma.account_code
    WHERE
        row_number = 1
        AND country LIKE 'US'
        AND email NOT LIKE '%seed.com%'
        AND email <> ''
        AND status <> 'active' AND status <> 'pending' and status <> 'future' and status <> 'failed'
)
SELECT
    af.*,
    coalesce(total_price, 0) AS total_price,
    coalesce(quantity, 0) AS total_quantity,
    coalesce(total_tax, 0) AS total_tax,
    coalesce(total_discount_amount, 0) AS total_discount,
    coalesce(s.total_shipping, 0) AS total_shipping,
    coalesce(s.total_shipping_tax, 0) AS total_shipping_tax,
    coalesce(cf.credit_amount, 0) AS total_credit,
    coalesce(r.refund_amount, 0) AS total_refunds,
    (total_price - total_refunds - total_credit) AS sdc_final_price,
    round((div0(sdc_final_price, total_quantity)), 1) as sdc_price_per,
    round((div0(sdc_final_price, sdc_number_of_days)), 1) as sdc_spend_per_day,
    round((div0(sdc_number_of_days, 30)), 1) as sdc_billing_periods
FROM
    account_final AS af
    LEFT JOIN nonship_adj AS ns ON ns.account_code = af.account_code
    AND ns.product = af.product
    LEFT JOIN shipping_adj AS s ON af.account_code = s.account_code
    AND af.product = s.product
    LEFT JOIN credit_final AS cf ON af.account_code = cf.account_code
    AND af.product = cf.product
    LEFT JOIN refunds AS r ON af.account_code = r.account_code
    AND af.product = r.product"
"V_COHORT_DAVEADJUSTMENT_APRIL_01_2021","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_DAVEADJUSTMENT_APRIL_01_2021
as

    with all_gain_loss as
    (

        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))

    )

    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx

              )  as a
              /*
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )
              */




        ) as _cohort
        group by cohort_id

    ) as initial_gain
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx

              )  as a
              /*where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )*/


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"V_COHORT_DAVEADJUSTMENT_REMOVEZEROLTR_FEB_18_2022","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_DAVEADJUSTMENT_REMOVEZEROLTR_FEB_18_2022(
	COHORT_ID,
	TOTAL_QUANTITY,
	COHORT_ID_LOSSES,
	""'2018-06'"",
	""'2018-07'"",
	""'2018-08'"",
	""'2018-09'"",
	""'2018-10'"",
	""'2018-11'"",
	""'2018-12'"",
	""'2019-01'"",
	""'2019-02'"",
	""'2019-03'"",
	""'2019-04'"",
	""'2019-05'"",
	""'2019-06'"",
	""'2019-07'"",
	""'2019-08'"",
	""'2019-09'"",
	""'2019-10'"",
	""'2019-11'"",
	""'2019-12'"",
	""'2020-01'"",
	""'2020-02'"",
	""'2020-03'"",
	""'2020-04'"",
	""'2020-05'"",
	""'2020-06'"",
	""'2020-07'"",
	""'2020-08'"",
	""'2020-09'"",
	""'2020-10'"",
	""'2020-11'"",
	""'2020-12'"",
	""'2021-01'"",
	""'2021-02'"",
	""'2021-03'"",
	""'2021-04'"",
	""'2021-05'"",
	""'2021-06'"",
	""'2021-07'"",
	""'2021-08'"",
	""'2021-09'"",
	""'2021-10'"",
	""'2021-11'"",
	""'2021-12'"",
	""'2022-01'"",
	""'2022-02'"",
    ""'2022-03'""
) as

    with all_gain_loss as
    (

        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))
      --- The two tables pre_2021 and post_2021 are created to handle 0$ invoices. As they meant pre-orders in 2020 but we have changed on how we handle preorders since 2021
        left join 
        (
           with recurly_pre_2021 as 
        (select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            having first_charged_date < '2021-01-01'
            order by to_varchar(s.uuid)),
   
            recurly_post_2021 as         
        (select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            having first_charged_date >= '2021-01-01'
            order by to_varchar(s.uuid))
            
 select * 
 from recurly_pre_2021 union all
 select * from recurly_post_2021          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
      
        

    )

    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )
              




        ) as _cohort
        group by cohort_id

    ) as initial_gain
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx
                    

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"V_COHORT_DAVEADJUSTMENT_REMOVEZEROLTR_MAR_16_2022","create or replace view V_COHORT_DAVEADJUSTMENT_REMOVEZEROLTR_MAR_16_2022(
	COHORT_ID,
	TOTAL_QUANTITY,
	COHORT_ID_LOSSES,
	""'2018-06'"",
	""'2018-07'"",
	""'2018-08'"",
	""'2018-09'"",
	""'2018-10'"",
	""'2018-11'"",
	""'2018-12'"",
	""'2019-01'"",
	""'2019-02'"",
	""'2019-03'"",
	""'2019-04'"",
	""'2019-05'"",
	""'2019-06'"",
	""'2019-07'"",
	""'2019-08'"",
	""'2019-09'"",
	""'2019-10'"",
	""'2019-11'"",
	""'2019-12'"",
	""'2020-01'"",
	""'2020-02'"",
	""'2020-03'"",
	""'2020-04'"",
	""'2020-05'"",
	""'2020-06'"",
	""'2020-07'"",
	""'2020-08'"",
	""'2020-09'"",
	""'2020-10'"",
	""'2020-11'"",
	""'2020-12'"",
	""'2021-01'"",
	""'2021-02'"",
	""'2021-03'"",
	""'2021-04'"",
	""'2021-05'"",
	""'2021-06'"",
	""'2021-07'"",
	""'2021-08'"",
	""'2021-09'"",
	""'2021-10'"",
	""'2021-11'"",
	""'2021-12'"",
	""'2022-01'"",
	""'2022-02'"",
	""'2022-03'""
) as

   with all_gain_loss as
    (

        select distinct
            recharge_subscription_id,
            recurly_subscription_id,
            cohort.created_at as first_charged_date,
            cohort.cancelled_at as cancelled_at,
            cohort.quantity as total_quantity 
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort
        )

    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
              )
              




        ) as _cohort
        group by cohort_id

    ) as initial_gain
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx
                    

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses"
"V_COHORT_DS01_REVENUE_QTY_APR_12_2023","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_DS01_REVENUE_QTY_APR_12_2023(
	COHORT_ID,
	""2018-10"",
	""2018-11"",
	""2018-12"",
	""2019-01"",
	""2019-02"",
	""2019-03"",
	""2019-04"",
	""2019-05"",
	""2019-06"",
	""2019-07"",
	""2019-08"",
	""2019-09"",
	""2019-10"",
	""2019-11"",
	""2019-12"",
	""2020-01"",
	""2020-02"",
	""2020-03"",
	""2020-04"",
	""2020-05"",
	""2020-06"",
	""2020-07"",
	""2020-08"",
	""2020-09"",
	""2020-10"",
	""2020-11"",
	""2020-12"",
	""2021-01"",
	""2021-02"",
	""2021-03"",
	""2021-04"",
	""2021-05"",
	""2021-06"",
	""2021-07"",
	""2021-08"",
	""2021-09"",
	""2021-10"",
	""2021-11"",
	""2021-12"",
	""2022-01"",
	""2022-02"",
	""2022-03"",
	""2022-04"",
	""2022-05"",
	""2022-06"",
	""2022-07"",
	""2022-08"",
	""2022-09"",
	""2022-10"",
	""2022-11"",
	""2022-12"",
	""2023-01"",
	""2023-02"",
	""2023-03"",
	""2023-04"",
    ""2023-05""
) as

with ds01_revenue as 
(
   select RECHARGE_SUBSCRIPTION_ID,
          RECURLY_SUBSCRIPTION_ID,
  
          case when RECHARGE_SUBSCRIPTION_ID is null then RECURLY_SUBSCRIPTION_ID
            else RECHARGE_SUBSCRIPTION_ID
            end as _subscription_id,

          min(charged_date) over (partition by _subscription_id) as first_charged_at,
          charged_date as charged_at,
          charged_quantity,

          is_recharge_native,
          is_imported,
          is_recurly_native

    from
    (

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as cohort
        join 
        (
            select to_varchar(s.uuid) as subscription_id,
                   t.date as charged_date,
                   (ifnull(a.adjustment_quantity,0)) as charged_quantity
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
              join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
              left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
            where t.type = 'purchase'
              and t.status = 'success'
              and adjustment_description not ilike '%shipping%'
              and (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
              and adjustment_plan_code not ilike 'pds%'
 
        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))

        union all

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as cohort
        -- left join 
        join
        (
            
             select to_varchar(s.id) as subscription_id, 
                   to_date(dateadd(hour, -4, c.processed_at)) as charged_date, 
                   (ifnull(cli.quantity,0)) as charged_quantity
             from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
             
        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        order by charged_date

    ) as a
  
  )
  
  -- fix names
select cohort_id, ""'2018-10'"" as ""2018-10"", ""'2018-11'"" as ""2018-11"", ""'2018-12'"" as ""2018-12"", ""'2019-01'"" as ""2019-01"", ""'2019-02'"" as ""2019-02"", ""'2019-03'"" as ""2019-03"", ""'2019-04'"" as ""2019-04"", ""'2019-05'"" as ""2019-05"", ""'2019-06'"" as ""2019-06"", ""'2019-07'"" as ""2019-07"", ""'2019-08'"" as ""2019-08"", ""'2019-09'"" as ""2019-09"", ""'2019-10'"" as ""2019-10"", ""'2019-11'"" as ""2019-11"", ""'2019-12'"" as ""2019-12"", ""'2020-01'"" as ""2020-01"", ""'2020-02'"" as ""2020-02"", ""'2020-03'"" as ""2020-03"", ""'2020-04'"" as ""2020-04"", ""'2020-05'"" as ""2020-05"", ""'2020-06'"" as ""2020-06"", ""'2020-07'"" as ""2020-07"", ""'2020-08'"" as ""2020-08"", ""'2020-09'"" as ""2020-09"", ""'2020-10'"" as ""2020-10"", ""'2020-11'"" as ""2020-11"", ""'2020-12'"" as ""2020-12"",
""'2021-01'"" as ""2021-01"", ""'2021-02'"" as ""2021-02"", ""'2021-03'"" as ""2021-03"", ""'2021-04'"" as ""2021-04"", ""'2021-05'"" as ""2021-05"", ""'2021-06'"" as ""2021-06"",""'2021-07'"" as ""2021-07"", ""'2021-08'"" as ""2021-08"", ""'2021-09'"" as ""2021-09"",""'2021-10'"" as ""2021-10"", ""'2021-11'"" as ""2021-11"", ""'2021-12'"" as ""2021-12"", ""'2022-01'"" as ""2022-01"", ""'2022-02'"" as ""2022-02"",""'2022-03'"" as ""2022-03"", ""'2022-04'"" as ""2022-04"",""'2022-05'"" as ""2022-05"",""'2022-06'"" as ""2022-06"", ""'2022-07'"" as ""2022-07"", ""'2022-08'"" as ""2022-08"", ""'2022-09'"" as ""2022-09"", ""'2022-10'"" as ""2022-10"", ""'2022-11'"" as ""2022-11"", ""'2022-12'"" as ""2022-12"", ""'2023-01'"" as ""2023-01"", ""'2023-02'"" as ""2023-02"", ""'2023-03'"" as ""2023-03"", ""'2023-04'"" as ""2023-04"",""'2023-05'"" as ""2023-05""
from
(
  select *
    from 
    (
        select left(first_charged_at, 7) as cohort_id, charged_quantity, left(charged_at, 7) as charged_at_month
        from ds01_revenue
        where cohort_id is not null
    ) as ds01_revenue_agg 
                    pivot (
                        sum(charged_quantity) for charged_at_month in 
                        ('2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03','2022-04','2022-05','2022-06','2022-07','2022-08','2022-09','2022-10','2022-11','2022-12','2023-01','2023-02','2023-03','2023-04','2023-05')      
                    )
    order by cohort_id
);"
"V_COHORT_PDS08_APR_26_2022","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_PDS08_APR_26_2022(
	COHORT_ID,
	TOTAL_QUANTITY,
	COHORT_ID_LOSSES,
	""'2022-04'""
) as

with all_gain_loss as
    (

        select distinct
            recurly_subscription_id,
            cohort.created_at as first_charged_date,
            cohort.cancelled_at as cancelled_at,
            cohort.quantity as total_quantity 
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_PDS_08"" as cohort
        )

    select *
    from
    (

        select left(first_charged_date, 7) as cohort_id, sum(total_quantity) as total_quantity
        from all_gain_loss
        group by cohort_id

    ) as initial_gain
    
    join 
    (
      select *
      from 
      (


        select left(first_charged_date, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from all_gain_loss
 


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2022-04')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"V_COHORT_PDS08_REVENUE_APR_12_2023","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_PDS08_REVENUE_APR_12_2023(
	COHORT_ID,
	""2022-04"",
	""2022-05"",
	""2022-06"",
	""2022-07"",
	""2022-08"",
	""2022-09"",
	""2022-10"",
	""2022-11"",
	""2022-12"",
	""2023-01"",
	""2023-02"",
	""2023-03"",
	""2023-04"",
    ""2023-05""
) as

with pds08_revenue as 
(
   select RECURLY_SUBSCRIPTION_ID as _subscription_id,
          min(charged_date) over (partition by _subscription_id) as first_charged_at,
          charged_date as charged_at,
          charged_amount
    from
    (

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_PDS_08"" as cohort
        join 
        (
            select to_varchar(s.uuid) as subscription_id,
                   t.date as charged_date,
                   (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0)) as charged_amount
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
              join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
              left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
            where t.type = 'purchase'
              and t.status = 'success'
              and adjustment_description not ilike '%shipping%'
              and (s.plan_name ilike '%PDS-08%' or s.plan_name ilike 'Pediatric Daily Synbiotic%')
              and adjustment_plan_code not ilike '%syn%'
              
        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))


    ) as a
  
  )
  
  
  -- fix names
select cohort_id, ""'2022-04'"" as ""2022-04"",""'2022-05'"" as ""2022-05"",""'2022-06'"" as ""2022-06"", ""'2022-07'"" as ""2022-07"", ""'2022-08'"" as ""2022-08"", ""'2022-09'"" as ""2022-09"", ""'2022-10'"" as ""2022-10"", ""'2022-11'"" as ""2022-11"", ""'2022-12'"" as ""2022-12"", 
                ""'2023-01'"" as ""2023-01"", ""'2023-02'"" as ""2023-02"", ""'2023-03'"" as ""2023-03"", ""'2023-04'"" as ""2023-04"", ""'2023-05'"" as ""2023-05""
from
(   
    select *
    from 
    (
        select left(first_charged_at, 7) as cohort_id, charged_amount, left(charged_at, 7) as charged_at_month
        from pds08_revenue
        where cohort_id is not null and cohort_id >= '2022-04'
    ) as pds08_revenue_agg 
                    pivot (
                        sum(charged_amount) for charged_at_month in 
                        ('2022-04','2022-05','2022-06','2022-07','2022-08','2022-09','2022-10','2022-11','2022-12','2023-01','2023-02','2023-03','2023-04','2023-05')      
                    )
    order by cohort_id
    
);"
"V_COHORT_PDS08_REVENUE_QTY_APR_12_2023","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_PDS08_REVENUE_QTY_APR_12_2023(
	COHORT_ID,
	""2022-04"",
	""2022-05"",
	""2022-06"",
	""2022-07"",
	""2022-08"",
	""2022-09"",
	""2022-10"",
	""2022-11"",
	""2022-12"",
	""2023-01"",
	""2023-02"",
	""2023-03"",
	""2023-04"",
    ""2023-05""
) as

with pds08_revenue as 
(
   select RECURLY_SUBSCRIPTION_ID as _subscription_id,
          min(charged_date) over (partition by _subscription_id) as first_charged_at,
          charged_date as charged_at,
          charged_quantity
    from
    (

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_PDS_08"" as cohort
        join 
        (
            select to_varchar(s.uuid) as subscription_id,
                   t.date as charged_date,
                   (ifnull(a.adjustment_quantity,0)) as charged_quantity
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
              join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
              left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
            where t.type = 'purchase'
              and t.status = 'success'
              and adjustment_description not ilike '%shipping%'
              and (s.plan_name ilike '%PDS-08%' or s.plan_name ilike 'Pediatric Daily Synbiotic%')
              and adjustment_plan_code not ilike '%syn%'
              
        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))


    ) as a
  
  )
  
  
  -- fix names
select cohort_id, ""'2022-04'"" as ""2022-04"",""'2022-05'"" as ""2022-05"",""'2022-06'"" as ""2022-06"", ""'2022-07'"" as ""2022-07"", ""'2022-08'"" as ""2022-08"", ""'2022-09'"" as ""2022-09"", ""'2022-10'"" as ""2022-10"", ""'2022-11'"" as ""2022-11"", ""'2022-12'"" as ""2022-12"",
                ""'2023-01'"" as ""2023-01"", ""'2023-02'"" as ""2023-02"", ""'2023-03'"" as ""2023-03"", ""'2023-04'"" as ""2023-04"", ""'2023-05'"" as ""2023-05""
from
(   
    select *
    from 
    (
        select left(first_charged_at, 7) as cohort_id, charged_quantity, left(charged_at, 7) as charged_at_month
        from pds08_revenue
        where cohort_id is not null and cohort_id >= '2022-04'
    ) as pds08_revenue_agg 
                    pivot (
                        sum(charged_quantity) for charged_at_month in 
                        ('2022-04','2022-05','2022-06','2022-07','2022-08','2022-09','2022-10','2022-11','2022-12','2023-01','2023-02','2023-03','2023-04','2023-05')      
                    )
    order by cohort_id
    
);"
"V_COHORT_RETENTION_DS01_APR_26_2022","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_RETENTION_DS01_APR_26_2022(
	COHORT_ID,
	TOTAL_QUANTITY,
	COHORT_ID_LOSSES,
	""'2018-06'"",
	""'2018-07'"",
	""'2018-08'"",
	""'2018-09'"",
	""'2018-10'"",
	""'2018-11'"",
	""'2018-12'"",
	""'2019-01'"",
	""'2019-02'"",
	""'2019-03'"",
	""'2019-04'"",
	""'2019-05'"",
	""'2019-06'"",
	""'2019-07'"",
	""'2019-08'"",
	""'2019-09'"",
	""'2019-10'"",
	""'2019-11'"",
	""'2019-12'"",
	""'2020-01'"",
	""'2020-02'"",
	""'2020-03'"",
	""'2020-04'"",
	""'2020-05'"",
	""'2020-06'"",
	""'2020-07'"",
	""'2020-08'"",
	""'2020-09'"",
	""'2020-10'"",
	""'2020-11'"",
	""'2020-12'"",
	""'2021-01'"",
	""'2021-02'"",
	""'2021-03'"",
	""'2021-04'"",
	""'2021-05'"",
	""'2021-06'"",
	""'2021-07'"",
	""'2021-08'"",
	""'2021-09'"",
	""'2021-10'"",
	""'2021-11'"",
	""'2021-12'"",
	""'2022-01'"",
	""'2022-02'"",
	""'2022-03'"",
	""'2022-04'"",
	""'2022-05'"",
	""'2022-06'"",
	""'2022-07'"",
	""'2022-08'"",
	""'2022-09'"",
	""'2022-10'"",
	""'2022-11'"",
	""'2022-12'"",
	""'2023-01'"",
	""'2023-02'"",
	""'2023-03'"",
	""'2023-04'"",
	""'2023-05'"",
    ""'2023-06'""
) as

   with all_gain_loss as
    (

        select distinct
            recharge_subscription_id,
            recurly_subscription_id,
            cohort.created_at as first_charged_date,
            cohort.cancelled_at as cancelled_at,
            cohort.quantity as total_quantity 
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as cohort
        )
        

    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
              )
              




        ) as _cohort
        group by cohort_id

    ) as initial_gain
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx
                    

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12',
                           '2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12',
                           '2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12',
                           '2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12',
                           '2022-01','2022-02','2022-03','2022-04','2022-05','2022-06','2022-07','2022-08','2022-09','2022-10','2022-11','2022-12',
                           '2023-01','2023-02','2023-03','2023-04','2023-05','2023-06')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"V_COHORT_RETENTION_DS01_APR_26_2022_BASELINE","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_RETENTION_DS01_APR_26_2022_BASELINE(
	COHORT_ID,
	TOTAL_QUANTITY,
	COHORT_ID_LOSSES,
	""'2018-06'"",
	""'2018-07'"",
	""'2018-08'"",
	""'2018-09'"",
	""'2018-10'"",
	""'2018-11'"",
	""'2018-12'"",
	""'2019-01'"",
	""'2019-02'"",
	""'2019-03'"",
	""'2019-04'"",
	""'2019-05'"",
	""'2019-06'"",
	""'2019-07'"",
	""'2019-08'"",
	""'2019-09'"",
	""'2019-10'"",
	""'2019-11'"",
	""'2019-12'"",
	""'2020-01'"",
	""'2020-02'"",
	""'2020-03'"",
	""'2020-04'"",
	""'2020-05'"",
	""'2020-06'"",
	""'2020-07'"",
	""'2020-08'"",
	""'2020-09'"",
	""'2020-10'"",
	""'2020-11'"",
	""'2020-12'"",
	""'2021-01'"",
	""'2021-02'"",
	""'2021-03'"",
	""'2021-04'"",
	""'2021-05'"",
	""'2021-06'"",
	""'2021-07'"",
	""'2021-08'"",
	""'2021-09'"",
	""'2021-10'"",
	""'2021-11'"",
	""'2021-12'"",
	""'2022-01'"",
	""'2022-02'"",
	""'2022-03'"",
	""'2022-04'"",
	""'2022-05'"",
	""'2022-06'"",
	""'2022-07'"",
	""'2022-08'"",
	""'2022-09'"",
	""'2022-10'"",
	""'2022-11'"",
	""'2022-12'"",
	""'2023-01'"",
	""'2023-02'"",
	""'2023-03'"",
	""'2023-04'"",
	""'2023-05'"",
    ""'2023-06'""
) as

   with all_gain_loss as
    (

        select distinct
            recharge_subscription_id,
            recurly_subscription_id,
            cohort.created_at as first_charged_date,
            cohort.cancelled_at as cancelled_at,
            cohort.quantity as total_quantity 
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as cohort
        where sku not ilike '%3mo%'
        )

    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
              )
              




        ) as _cohort
        group by cohort_id

    ) as initial_gain
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx
                    

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03','2022-04','2022-05','2022-06','2022-07','2022-08','2022-09','2022-10','2022-11','2022-12','2023-01','2023-02','2023-03','2023-04','2023-05','2023-06')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"V_COHORT_RETENTION_PDS08_APR_26_2022","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_RETENTION_PDS08_APR_26_2022(
	COHORT_ID,
	TOTAL_QUANTITY,
	COHORT_ID_LOSSES,
	""2022-04"",
	""2022-05"",
	""2022-06"",
	""2022-07"",
	""2022-08"",
	""2022-09"",
	""2022-10"",
	""2022-11"",
	""2022-12"",
	""2023-01"",
	""2023-02"",
	""2023-03"",
    ""2023-04"",
    ""2023-05""
) as

with all_gain_loss as
    (

        select distinct
            recurly_subscription_id,
            cohort.created_at as first_charged_date,
            cohort.cancelled_at as cancelled_at,
            cohort.quantity as total_quantity 
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_PDS_08"" as cohort
        )

    select *
    from
    (

        select left(first_charged_date, 7) as cohort_id, sum(total_quantity) as total_quantity
        from all_gain_loss
        group by cohort_id

    ) as initial_gain
    
    join 
    (
      select *
      from 
      (


        select left(first_charged_date, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from all_gain_loss
 


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2022-04','2022-05','2022-06','2022-07','2022-08','2022-09','2022-10','2022-11','2022-12',
                           '2023-01','2023-02','2023-03','2023-04','2023-05')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"V_CUSTOMER_KUSTOMER","create view v_customer_kustomer as

select
	ce.email as pk_email,
	count(*) as ticket_volume,
	cc.name as ticket_channel,
	max(first_message_in_sent_at) as last_ticket_date,
	max(last_message_direction) as last_ticket_direction,
	avg(con.satisfaction) as avg_satisfaction,
	avg(datediff(hour,con.first_message_in_sent_at, con.last_message_at)) as avg_handle_time,
	listagg(distinct t.name, ' | ') as tags,
	case when
	  count_if(con.status  = 'open') > 0 then 'open' else 'closed' end as ticket_status
from ""MARKETING_DATABASE"".""KUSTOMER"".""CUSTOMER"" as cust
join ""MARKETING_DATABASE"".""KUSTOMER"".""CUSTOMER_EMAIL"" as ce on ce.customer_id = cust.id
join ""MARKETING_DATABASE"".""KUSTOMER"".""CONVERSATION""as con on con.customer_id = cust.id
join ""MARKETING_DATABASE"".""KUSTOMER"".""CONVERSATION_CHANNEL"" as cc on cc.conversation_id = con.id
left join ""MARKETING_DATABASE"".""KUSTOMER"".""CONVERSATION_TAG"" as ct on ct.conversation_id = con.id
left join ""MARKETING_DATABASE"".""KUSTOMER"".""TAG"" as t on t.id = ct.tag_id
group by cc.name, ce.email,cust.name
order by pk_email asc"
"V_CUSTOMER_RECURLY","create view v_customer_recurly as 
select case 
                when rsh.version_started_at is null then rs.created_at
                
                else rsh.version_started_at
            end as Date, 
            rs.Email as Email,
            rs.Account_Code as AccountCode,
            'Recurly' as DataSource, 
            case
                when rsh.subscription_state is null then rs.state
                else rsh.subscription_state
            end as Action,
            'Recurly.Subscriptions' as SourceTableName,
            UUID as SourceColumnName,
            to_varchar(rs.UUID) as SourceTableID,
            to_varchar(rsh.subscription_uuid) as pk_subscription_id,
            to_varchar(rs.ship_address_firstname) as first_name,
            to_varchar(rs.ship_address_lastname) as last_name,
            to_varchar(rs.created_at) as start_time,
            to_varchar(rs.activated_at) as activated_at,
            to_varchar(rs.canceled_at) as end_time,
            to_varchar(rs.total_billing_cycles) as length, --Check
            to_varchar(rsh.plan_code) as product_id,
            to_varchar(rsh.plan_name) as product_name,
            to_varchar(rs.quantity) as quantity,
            to_varchar(rs.total_recurring_amount) as total_subscription_value,
            to_varchar(rs.ship_address_phone) as phone,
            to_varchar(rs.ship_address_street1) as address,
            to_varchar(rs.ship_address_city) as city, 
            to_varchar(rs.ship_address_state) as state,
            to_varchar(rs.ship_address_country) as country,
            to_varchar(rs.ship_address_zip) as zipcode

            /*Still Need to check length and total_subscription_value. Still missing columns Total_Shipped_Quantity, Total_subscription_count, discounts_applied*/
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as rs
    left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTION_HISTORY"" rsh on rs.ACCOUNT_CODE = rsh.ACCOUNT_CODE"
"V_DAILYGROWTHTRACKER","create view v_DailyGrowthTracker
as

    select -- subs.*, 
            subs.GAIN,
            subs.LOSS,
            subs.NET,
            subs.RUNNING_TOTAL,
            subs.TRAILING_30_LOSS,
            rev.*,
            avg(subs.running_total) over (order by subs.day asc rows between 29 preceding and current row) as thirty_day_avg_total_active_users,
            (
            trailing_30_loss
            /
            avg(subs.running_total) over (order by subs.day asc rows between 29 preceding and current row) ) * 100 as churn_rate
    from
    (

        with data as (  

            -- Recharge: Daily Gain vs Loss 
            select new.referenced_date as day, 
                new.total_new_quantity as gain, churned.total_churn_quantity as loss, new.total_new_quantity - churned.total_churn_quantity as net
            from
            (
                -- Total New Subscribers
                with date_list as 
                (
                    select distinct to_date(_s.created_at) as referenced_date
                    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" as _s
                    order by to_date(_s.created_at) desc
                )
                select dl.referenced_date, count(*) as total_new_customers, sum(quantity) as total_new_quantity
                from date_list dl
                join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" as s on dl.referenced_date = to_date(dateadd(hour, -4, s.created_at))
                group by dl.referenced_date
                order by dl.referenced_date

            ) as new
            join 
            (
                -- Total Churned Subscribers
                with date_list as 
                (
                    select distinct to_date(_s.created_at) as referenced_date
                    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" as _s
                    order by to_date(_s.created_at) desc
                )
                select dl.referenced_date, count(*) as total_churned_customers, sum(quantity) as total_churn_quantity
                from date_list dl
                join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" as s on dl.referenced_date = to_date(dateadd(hour, -4, s.cancelled_at))
                group by dl.referenced_date
                order by dl.referenced_date

            ) as churned on new.referenced_date = churned.referenced_date
            order by new.referenced_date
        )

        select day, gain, loss, net,
                sum(net) over (order by day asc rows between unbounded preceding and current row) as running_total,
                sum(loss) over (order by day asc rows between 29 preceding and current row) as trailing_30_loss
        from data
    ) as subs  
    join 
    (
      -- Shopify: Daily Revenue Numbers
      select to_date(dateadd(hour, -4, o.created_at)) as day, 
          sum(zeroifnull(o.total_price) - zeroifnull(osl.price) - zeroifnull(o.total_tax) - zeroifnull(o.total_discounts)) as net_revenue,
          sum(o.total_tax) as tax_amount,
          sum(osl.price) as shipping_amount,
          sum(o.total_discounts) as discount_amount,
          count(*) as total_order_quantity,
          avg(o.total_price) as aov,
          sum(o.total_price) as shopify_total_price,
          sum(o.subtotal_price) as shopify_subtotal_price
      from ""MARKETING_DATABASE"".""SHOPIFY"".""ORDER"" o
      left join ""MARKETING_DATABASE"".""SHOPIFY"".""ORDER_SHIPPING_LINE"" osl on osl.order_id = o.id
      group by to_date(dateadd(hour, -4, o.created_at))
      order by to_date(dateadd(hour, -4, o.created_at))  

    ) as rev
    on rev.day = subs.day
    order by rev.day desc"
"V_DAILYGROWTHTRACKER_DS_01_V_02","create or replace view MARKETING_DATABASE.PUBLIC.V_DAILYGROWTHTRACKER_DS_01_V_02(
	DAY,
	GAIN,
	LOSS,
	NET,
	TOTAL_ACTIVE,
	TOTAL_ACTIVE_INTERNATIONAL,
	TOTAL_ACTIVE_INTERNATIONAL_3MO_REFILL,
	TOTAL_ACTIVE_GIFTKITS,
	TOTAL_ACTIVE_GIFTCREDITS,
	TOTAL_ACTIVE_PREORDERS,
	TRAILING_30_DAY_GAIN,
	TRAILING_30_DAY_LOSS,
	GAIN_INTERNATIONAL,
	LOSS_INTERNATIONAL,
	NET_INTERNATIONAL,
	GAIN_INTERNATIONAL_3MO_REFILL,
	LOSS_INTERNATIONAL_3MO_REFILL,
	NET_INTERNATIONAL_3MO_REFILL,
	GAIN_GIFTKITS,
	LOSS_GIFTKITS,
	NET_GIFTKITS,
	GAIN_GIFTCREDITS,
	LOSS_GIFTCREDITS,
	NET_GIFTCREDITS,
	GAIN_PREORDERS,
	LOSS_PREORDERS,
	NET_PREORDERS,
	TAX_AMOUNT,
	SHIPPING_AMOUNT,
	TOTAL_DISCOUNT_AMOUNT,
	TOTAL_CHARGE_QUANTITY,
	TOTAL_SUBSCRIPTION_QUANTITY,
	AOV,
	PRICE_TOTAL,
	TOTAL_GIFTKIT_SUBSCRIPTION_QUANTITY,
	TOTAL_GIFTCREDIT_SUBSCRIPTION_QUANTITY,
	REFILL_COGS,
	WELCOME_KIT_COGS,
	GROSS_SALES,
	NET_SALES,
	CREDIT_APPLIED,
	GAIN_DOMESTIC_3MO_REFILL,
	LOSS_DOMESTIC_3MO_REFILL,
	NET_DOMESTIC_3MO_REFILL,
	TOTAL_ACTIVE_DOMESTIC_3MO_REFILL,
	TOTAL_ACTIVE_6MO_REFILL,
	DISCOUNT_WELCOME_KIT,
	WELCOME_KIT_QUANTITY,
	DISCOUNT_REFILL_KIT,
	REFILL_KIT_QUANTITY,
	REFILL_3MO_ORDER_SENT,
	REFILL_6MO_ORDER_SENT,
	REFILL_3MO_QUANTITY_SENT,
	REFILL_6MO_QUANTITY_SENT
) as

      -- REVENUE UNION
      with revenue as
      (

        select rev.day,
              sum(total_tax) as tax_amount,
              sum(shipping_amount) as shipping_amount,
              sum(total_discount_amount) as total_discount_amount,
              sum(total_charge_quantity) as total_charge_quantity,
              sum(total_subscription_quantity) as total_subscription_quantity,
              zeroifnull(sum(rev.price_total) - sum(rev.total_tax)) / sum(total_charge_quantity) as aov,
              sum(price_total) as price_total,
              sum(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
              sum(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity,  
              sum(zeroifnull(manual.refill_cogs)) as refill_cogs,
              sum(zeroifnull(manual.welcome_kit_cogs)) as welcome_kit_cogs,
              zeroifnull(sum(rev.price_total) - sum(rev.total_tax) - sum(rev.shipping_amount) + sum(rev.total_discount_amount) + sum(rev.credit_applied)) as gross_sales,
              zeroifnull(sum(rev.price_total) - sum(rev.total_tax)) as net_sales,
              sum(credit_applied) as credit_applied,
              sum(zeroifnull(welcome_kit_discount)) as discount_welcome_kit,
              sum(zeroifnull(welcome_kit_subscription_quantity)) as welcome_kit_quantity,
              sum(zeroifnull(refill_discount)) as discount_refill_kit,
              sum(zeroifnull(refill_subscription_quantity)) as refill_kit_quantity,
              sum(zeroifnull(RF_3MO_order_sent)) as refill_3mo_order_sent,
              sum(zeroifnull(RF_6MO_order_sent)) as refill_6mo_order_sent,
              sum(zeroifnull(RF_3MO_quantity_sent)) as refill_3mo_quantity_sent,
              sum(zeroifnull(RF_6MO_quantity_sent)) as refill_6mo_quantity_sent

          from 
          (

                -- ***** START - RECHARGE Daily Revenue ***** --      
                select charges.day,
                        charges.total_price as price_total, 
                        charges.total_discounts as total_discount_amount, 
                        charges.total_charge_quantity as total_charge_quantity,
                        0 as credit_applied,
                        charge_lines.total_subscription_quantity as total_subscription_quantity, 
                        charge_lines.total_tax as total_tax,
                        zeroifnull(charge_shipping.shipping_amount) as shipping_amount,
                        zeroifnull(charge_giftcredit.total_subscription_quantity) as total_giftcredit_subscription_quantity,
                        zeroifnull(charge_giftkit.total_subscription_quantity) as total_giftkit_subscription_quantity,
                        zeroifnull(charge_wk_rev.WK_discount) as welcome_kit_discount,
                        zeroifnull(charge_wk_qty.WK_subscription_quantity) as welcome_kit_subscription_quantity,
                        zeroifnull(charge_rf_rev.RF_discount) as refill_discount,
                        zeroifnull(charge_rf_qty.RF_subscription_quantity) as refill_subscription_quantity,
                        zeroifnull(charge_rf_3mo.SRP_3mo_order_sent) as RF_3MO_order_sent,
                        zeroifnull(charge_rf_3mo.SRP_3mo_quantity_sent) as RF_3MO_quantity_sent,
                        zeroifnull(charge_rf_6mo.SRP_6mo_order_sent) as RF_6MO_order_sent,
                        zeroifnull(charge_rf_6mo.SRP_6mo_quantity_sent) as RF_6MO_quantity_sent
                from
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(c.total_price) as total_price, sum(c.total_discounts) as total_discounts, count(*) as total_charge_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    -- Do not exclude charges where status != SUCCESS  (where c.status = 'SUCCESS')
                    group by day
                ) as charges
                join 
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity,
                            sum(c.total_tax) as total_tax
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    group by day
                ) as charge_lines on charge_lines.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(csl.price) as shipping_amount
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c                
                    left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id        
                    group by day
                ) as charge_shipping on charge_shipping.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    where cli.title ilike '%gift kit%'
                    group by day
                ) as charge_giftkit on charge_giftkit.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    where cli.title ilike '%Gift Credit%'
                    group by day
                ) as charge_giftcredit on charge_giftcredit.day = charges.day
            
            -- Adding 4 new columns WK discount and quantity, RF discount and quantity 
            -- Adding 4 more new columns RF-3mo, RF-6mo order count and quantity
            
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(c.total_discounts) as WK_discount
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    where sku ilike '%SYN%WK%' and sku not ilike '%GIFT%' and index = 0
                    group by day
                ) as charge_wk_rev on charge_wk_rev.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as WK_subscription_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    where sku ilike '%SYN%WK%' and sku not ilike '%GIFT%'
                    group by day
                ) as charge_wk_qty on charge_wk_qty.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(c.total_discounts) as RF_discount
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    where sku ilike '%SYN%RF' and index = 0
                    group by day
                ) as charge_rf_rev on charge_rf_rev.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as RF_subscription_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    where sku ilike '%SYN%RF'
                    group by day
                ) as charge_rf_qty on charge_rf_qty.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                                count(distinct charge_id) as SRP_3mo_order_sent,
                                sum(cli.quantity) as SRP_3mo_quantity_sent
                                  from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                                  join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                                  where sku ilike '%3MO%'
                                  group by day
                ) as charge_rf_3mo on charge_rf_3mo.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                                count(distinct charge_id) as SRP_6mo_order_sent,
                                sum(cli.quantity) as SRP_6mo_quantity_sent
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    where sku ilike '%6MO%'
                    group by day
                ) as charge_rf_6mo on charge_rf_6mo.day = charges.day
            
            
                -- ***** END - RECHARGE Daily Revenue ***** --      

                union all 
            
                -- ***** START - RECURLY Daily Revenue ***** --  
                select charge_level_revenue.day, 
                        price_total as price_total, 
                        total_discount_amount as total_discount_amount, 
                        total_charge_quantity as total_charge_quantity,
                        credit_applied as credit_applied,
                        total_subscription_quantity as total_subscription_quantity,    
                        tax_amount as total_tax,
                        zeroifnull(shipping_amount) as shipping_amount,
                        zeroifnull(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
                        zeroifnull(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity,
                        zeroifnull(charge_level_wk.wk_discount_amount) as welcome_kit_discount,
                        zeroifnull(charge_level_wk.wk_quantity) as welcome_kit_subscription_quantity,
                        zeroifnull(charge_level_rf.rf_discount_amount) as refill_discount,
                        zeroifnull(charge_level_rf.rf_quantity) as refill_subscription_quantity,
                        zeroifnull(charge_level_rf_3mo.SRP_3mo_order_sent) as RF_3MO_order_sent,
                        zeroifnull(charge_level_rf_3mo.SRP_3mo_quantity_sent) as RF_3MO_quantity_sent,
                        zeroifnull(charge_level_rf_6mo.SRP_6mo_order_sent) as RF_6MO_order_sent,
                        zeroifnull(charge_level_rf_6mo.SRP_6mo_quantity_sent) as RF_6MO_quantity_sent
                from
                (
                  
                    select nonship_adj.day as day,
                        nonship_adj.tax as tax_amount,
                        shipping_adj.shipping as shipping_amount,
                        credit.credit_amount as credit_applied,
                        nonship_adj.discount_amount as total_discount_amount,
                        nonship_adj.total_charges as total_charge_quantity,
                        nonship_adj.quantity as total_subscription_quantity,
                        nonship_adj.total_price as price_total,
                        nonship_adj.total_price - nonship_adj.tax - shipping_adj.shipping + nonship_adj.discount_amount as gross_revenue
                    from
                    (
                        select to_date(t.date) as day,
                                sum(adjustment_discount) as discount_amount,
                                sum(t.tax_amount) as tax,
                                sum(adjustment_total) as adj_total_price,
                                sum(t.amount) as total_price,  
                                sum(adjustment_quantity) as quantity,
                                count(*) as total_charges
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and adjustment_description not ilike '%shipping%'
                            and (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
                        group by day
                        order by day

                    ) as nonship_adj 
                    left join
                    ( 

                        -- Shipping totals will NEVER match up to DGT
                        select to_date(t.date) as day,
                            sum(adjustment_total) as shipping
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and  adjustment_description ilike '%shipping%'
                            and (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
                        group by day
                        order by day  

                    ) as shipping_adj on nonship_adj.day = shipping_adj.day
                    
                    left join
                    (	--- Credit amount applied date
	                    select to_date(t.date) as day ,
	                    sum(c.amount) as credit_amount
	                      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""CREDIT_PAYMENTS"" as c 
                          join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on c.applied_to_invoice_number = i.invoice_number 
                          join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t on t.invoice_id = i.id
                          left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
	                      where action != 'write_off' 
                                and (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
	                      group by day
                      
                    ) as credit on nonship_adj.day = credit.day
                    order by nonship_adj.day
                ) as charge_level_revenue
                left join 
                (
                    select to_date(i.closed_at) as day, 
                          sum(a.adjustment_quantity) as total_giftkit_subscription_quantity
                    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                    where i.status in ('paid')
                    and i.invoice_doc_type in ('charge') 
                    and adjustment_description = 'Gift Kit Holiday 2020'
                    group by day 
                ) as charge_level_revenue_giftkit 
                  on charge_level_revenue_giftkit.day = charge_level_revenue.day
                left join 
                (
                    select to_date(i.closed_at) as day, 
                          sum(a.adjustment_quantity) as total_giftcredit_subscription_quantity
                    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                    where i.status in ('paid')
                    and i.invoice_doc_type in ('charge') 
                    and adjustment_description = 'GIFT_CREDIT_PLACEHOLDER'            
                    group by day 
                ) as charge_level_revenue_giftcredit
                  on charge_level_revenue_giftcredit.day = charge_level_revenue.day
                left join
                (
                    select to_date(t.date) as day,
                                sum(adjustment_discount) as wk_discount_amount,sum(adjustment_quantity) as wk_quantity
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and adjustment_description not ilike '%shipping%'
                            and (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
                            and adjustment_plan_code ilike 'syn-wk'          
                        group by day
                        
                ) as charge_level_wk
                  on charge_level_wk.day = charge_level_revenue.day
                left join
                (
                    select to_date(t.date) as day,
                                sum(adjustment_discount) as rf_discount_amount,sum(adjustment_quantity) as rf_quantity
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and adjustment_description not ilike '%shipping%'
                            and (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
                            and adjustment_plan_code ilike 'syn-rf'          
                        group by day
                        
                ) as charge_level_rf
                  on charge_level_rf.day = charge_level_revenue.day
                
                left join
                (
                    select to_date(t.date) as day,
                                    count(distinct t.transaction_id) as SRP_3mo_order_sent,sum(adjustment_quantity) as SRP_3mo_quantity_sent 
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and adjustment_description not ilike '%shipping%'
                            and (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
                            and adjustment_plan_code ilike '%3mo%'  
                            group by day
                        
                ) as charge_level_rf_3mo
                  on charge_level_rf_3mo.day = charge_level_revenue.day
            
               left join
                (
                    select to_date(t.date) as day,
                                    count(distinct t.transaction_id) as SRP_6mo_order_sent,sum(adjustment_quantity) as SRP_6mo_quantity_sent 
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and adjustment_description not ilike '%shipping%'
                            and (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
                            and adjustment_plan_code ilike '%6mo%'  
                            group by day
                        
                ) as charge_level_rf_6mo
                  on charge_level_rf_6mo.day = charge_level_revenue.day
            
            
                -- ***** END - RECURLY Daily Revenue ***** -- 

          ) as rev
          left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = rev.day
          group by rev.day
          order by rev.day
        
      ), 
      
      gainlossnet as -- GAIN LOSS JOIN
      (

          select gain.dt as day, 
                  zeroifnull(gain.total_subscribers_gained) as total_subscribers_gained, 
                  zeroifnull(loss.total_subscribers_lost) total_subscribers_lost,   
                  zeroifnull(gain.total_subscriptions_gained) as gain,
                  zeroifnull(loss.total_subscriptions_lost) as loss,
                  zeroifnull(gain.total_subscriptions_gained) - zeroifnull(loss.total_subscriptions_lost) as net,

                  -- _international
                  zeroifnull(gain.total_subscriptions_gained_international) as gain_international,
                  zeroifnull(loss.total_subscriptions_lost_international) as loss_international,
                  zeroifnull(gain.total_subscriptions_gained_international) - zeroifnull(loss.total_subscriptions_lost_international) as net_international,

                  -- _international_3mo_refill
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) as gain_international_3mo_refill,
                  zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as loss_international_3mo_refill,
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) - zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as net_international_3mo_refill,

                  -- _giftkits
                  zeroifnull(gain.total_subscriptions_gained_giftkits) as gain_giftkits,
                  zeroifnull(loss.total_subscriptions_lost_giftkits) as loss_giftkits,
                  zeroifnull(gain.total_subscriptions_gained_giftkits) - zeroifnull(loss.total_subscriptions_lost_giftkits) as net_giftkits,

                  -- _giftcredits
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) as gain_giftcredits,
                  zeroifnull(loss.total_subscriptions_lost_giftcredits) as loss_giftcredits,
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) - zeroifnull(loss.total_subscriptions_lost_giftcredits) as net_giftcredits,

                  -- _preorders
                  zeroifnull(gain.total_subscriptions_gained_preorders) as gain_preorders,
                  zeroifnull(loss.total_subscriptions_lost_preorders) as loss_preorders,
                  zeroifnull(gain.total_subscriptions_gained_preorders) - zeroifnull(loss.total_subscriptions_lost_preorders) as net_preorders,
        
                  -- _domestic_3mo_refill
                  zeroifnull(gain.total_subscriptions_gained_domestic_3mo_refill) as gain_domestic_3mo_refill,
                  zeroifnull(loss.total_subscriptions_lost_domestic_3mo_refill) as loss_domestic_3mo_refill,
                  zeroifnull(gain.total_subscriptions_gained_domestic_3mo_refill) - zeroifnull(loss.total_subscriptions_lost_domestic_3mo_refill) as net_domestic_3mo_refill,
         
                  -- 6mo_refill
                  zeroifnull(gain.total_subscriptions_gained_6mo_refill) as gain_6mo_refill,
                  zeroifnull(loss.total_subscriptions_lost_6mo_refill) as loss_6mo_refill,
                  zeroifnull(gain.total_subscriptions_gained_6mo_refill) - zeroifnull(loss.total_subscriptions_lost_6mo_refill) as net_6mo_refill
         

          from
          (

                with subscription_breakdowns as 
                (

                    select 
                        -- only perform timezone offset subscriptions created within recharge
                        case 
                          when is_recharge_native = 1 then to_date(dateadd(hour, -4, map.created_at))
                          when is_imported = 1 then to_date(dateadd(hour, -4, map.created_at))
                          else to_date(map.created_at) end
                        as dt,
                        count(*) as total_subscribers_gained, 
                        sum(quantity) as total_subscriptions_gained,
                        is_international,
                        sku,
                        is_preorder
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as map
                    group by dt, is_international, sku, is_preorder
                    order by dt
                )            
            

                -- **************************************************
                -- BREAKDOWNS: Create aggregation + join for each breakdown
                -- **************************************************      
                select total.dt, total_subscribers_gained, total_subscriptions_gained, 
                        total_subscribers_gained_international, total_subscriptions_gained_international,
                        total_subscribers_gained_international_3mo_refill, total_subscriptions_gained_international_3mo_refill,
                        total_subscribers_gained_giftkits, total_subscriptions_gained_giftkits,
                        total_subscribers_gained_giftcredits, total_subscriptions_gained_giftcredits,
                        total_subscribers_gained_preorders, total_subscriptions_gained_preorders,
                        total_subscribers_gained_domestic_3mo_refill, total_subscriptions_gained_domestic_3mo_refill,
                        total_subscribers_gained_6mo_refill, total_subscriptions_gained_6mo_refill
                from
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained, sum(total_subscriptions_gained) as total_subscriptions_gained
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international, sum(total_subscriptions_gained) as total_subscriptions_gained_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international_3mo_refill, sum(total_subscriptions_gained) as total_subscriptions_gained_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftkits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftcredits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_preorders, sum(total_subscriptions_gained) as total_subscriptions_gained_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt
                -- adding domestic STP
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_domestic_3mo_refill, sum(total_subscriptions_gained) as total_subscriptions_gained_domestic_3mo_refill
                    from subscription_breakdowns
                    where is_international = 0
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                )as total_domestic_3mo_refill on total.dt = total_domestic_3mo_refill.dt  
               -- adding 6mo 
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_6mo_refill, sum(total_subscriptions_gained) as total_subscriptions_gained_6mo_refill
                    from subscription_breakdowns
                    where sku = 'syn-rf-6mo' or sku ilike '%6mo%'
                    group by dt    
                )as total_6mo_refill on total.dt = total_6mo_refill.dt  


          ) as gain
          left join
          (

                with subscription_breakdowns as 
                (
                    select 
                          -- only perform timezone offset on subscriptions cancelled within recharge, not on recurly
                          case
                            when is_recharge_native = 1 and is_imported = 0 then to_date(dateadd(hour, -4, map.cancelled_at))
                            when is_imported = 1 then to_date(map.cancelled_at)
                            else to_date(map.cancelled_at)
                          end as dt,
                          count(*) as total_subscribers_lost, 
                          sum(quantity) as total_subscriptions_lost,
                          is_international,
                          sku,
                          is_preorder
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as map
                    where map.cancelled_at is not null
                    group by dt, is_international, sku, is_preorder
                    order by dt           
                )             
            
                -- **************************************************
                -- BREAKDOWNS: Create aggregation for each breakdown
                -- **************************************************    
                select total.dt, total_subscribers_lost, total_subscriptions_lost, 
                        total_subscribers_lost_international, total_subscriptions_lost_international,
                        total_subscribers_lost_international_3mo_refill, total_subscriptions_lost_international_3mo_refill,
                        total_subscribers_lost_giftkits, total_subscriptions_lost_giftkits,
                        total_subscribers_lost_giftcredits, total_subscriptions_lost_giftcredits,
                        total_subscribers_lost_preorders, total_subscriptions_lost_preorders,
                        total_subscribers_lost_domestic_3mo_refill, total_subscriptions_lost_domestic_3mo_refill,
                        total_subscribers_lost_6mo_refill,total_subscriptions_lost_6mo_refill
                from
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost, sum(total_subscriptions_lost) as total_subscriptions_lost
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international, sum(total_subscriptions_lost) as total_subscriptions_lost_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt          
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international_3mo_refill, sum(total_subscriptions_lost) as total_subscriptions_lost_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftkits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftcredits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_preorders, sum(total_subscriptions_lost) as total_subscriptions_lost_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_domestic_3mo_refill, sum(total_subscriptions_lost) as total_subscriptions_lost_domestic_3mo_refill
                    from subscription_breakdowns
                    where is_international = 0
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_domestic_3mo_refill on total.dt = total_domestic_3mo_refill.dt      
               left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_6mo_refill, sum(total_subscriptions_lost) as total_subscriptions_lost_6mo_refill
                    from subscription_breakdowns
                    where sku = 'syn-rf-6mo' or sku ilike '%6mo%'
                    group by dt    
                ) as total_6mo_refill on total.dt = total_6mo_refill.dt     


          ) as loss 
          on gain.dt = loss.dt
          order by gain.dt  

      ),
      spend as
      (

          with facebook as
          (

              select day, sum(spend) as fb_spend
              from
              (
                  select distinct fb.date as day, fb.CAMPAIGN_NAME, fb.spend-- , fba.value as conversions
                  from ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS"" fb
                  -- **** if we need conversions, this is the correct pixel name          
                  -- left join ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS_ACTIONS"" fba on fba.date = fb.date
                  -- where fba.action_type in ('offsite_conversion.fb_pixel_purchase')
              )
              group by day
          ),
          adwords as
          (
              select date as day, sum(cost) as gaw_spend
              from ""MARKETING_DATABASE"".""ADWORDS"".""ADWORDS_CAMPAIGN_STATS"" gaw
              group by day    
          )

          select case when fb.day is null then aw.day else fb.day end as day, 
            fb_spend as fb_spend,
            gaw_spend as gaw_spend
          from facebook as fb
          left join adwords as aw on fb.day = aw.day
          order by day

      )

      -- Final ratios, calcs, and aggregations

      /*
      select gainlossnet_agg.day,
          revenue.*,
          sum(revenue.total_subscription_quantity) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_total_orders,
          sum(revenue.net_revenue) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_net_revenue,
          -- sum(revenue.total_discounts) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_discounts,
          sum(revenue.total_discount_amount) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_discounts,
          trailing_30_discounts / gainlossnet_agg.trailing_30_day_gain as trailing_30_avg_discount_per_checkout,

          gainlossnet_agg.*,
          gainlossnet_agg.total_active_international / gainlossnet_agg.total_active as percent_international,
          gainlossnet_agg.total_active_international_3mo_refill / gainlossnet_agg.total_active as percent_stp_3mo_refill,    
          sum(gainlossnet_agg.total_active) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_active_subs,
          avg(gainlossnet_agg.total_active) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_average_active_subs,
          gainlossnet_agg.trailing_30_day_loss / trailing_30_day_average_active_subs as trailing_30_day_churn,
          gainlossnet_agg.trailing_30_day_gain / trailing_30_day_active_subs as trailing_30_day_percent_recurring_subscriptions,

          spend.fb_spend,
          spend.fb_conversions,
          sum(spend.fb_conversions) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_fb_conversions,
          spend.gaw_spend,
          spend.gaw_conversions,
          sum(spend.gaw_conversions) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_gaw_conversions,

          manual.*,
          (zeroifnull(spend.fb_spend) + 
              zeroifnull(spend.gaw_spend) +     
              zeroifnull(manual.Other_Ads) +
              zeroifnull(manual.Partnerships) +
              zeroifnull(manual.Affiliates) +
              zeroifnull(manual.Share_a_Sale) +
              zeroifnull(manual.Growth_Agencies) +
              zeroifnull(manual.Growth_Consultants) +
              zeroifnull(manual.Partnerships_Agencies) +
              zeroifnull(manual.Partnerships_Consultants) +
              zeroifnull(manual.Brand_Expenses)) as total_spend,
          sum(total_spend) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_spend,
          (zeroifnull(spend.fb_spend) + 
              zeroifnull(spend.gaw_spend) +     
              zeroifnull(manual.Other_Ads) +
              zeroifnull(manual.Partnerships) +
              zeroifnull(manual.Affiliates)) /  gainlossnet_agg.gain as cpa,
          sum(cpa) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_cpa,
          total_spend / trailing_30_net_revenue as spend_as_percent_of_trailing_30_net_revenue,
          (total_spend + total_discount_amount) / gain as cac,
          sum(cac) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_cac,
          (trailing_30_net_revenue - trailing_30_discounts) / trailing_30_day_average_active_subs as trailing_30_day_grps,
          case when zeroifnull(trailing_30_day_churn) = 0 then null else trailing_30_day_grps / trailing_30_day_churn end as trailing_30_day_ltr,
          case when manual.refill_cogs is not null then manual.refill_cogs else lag(manual.refill_cogs) ignore nulls over (order by gainlossnet_agg.day asc) end as refill_cogs_last,
          case when manual.welcome_kit_cogs is not null then manual.welcome_kit_cogs else lag(manual.welcome_kit_cogs) ignore nulls over (order by gainlossnet_agg.day asc) end as welcome_kit_cogs_last,    
          case when zeroifnull(trailing_30_day_cpa) = 0 then -999 else trailing_30_day_LTR / trailing_30_day_cpa end as trailing_30_day_LTR_to_CPA,
          case when zeroifnull(trailing_30_day_cac) = 0 then -999 else trailing_30_day_LTR / trailing_30_day_cac end as trailing_30_day_LTR_to_CAC,
          (net_revenue - total_discount_amount) / total_active as arpu,
          sum(arpu) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_arpu,


          case when zeroifnull(trailing_30_day_churn) = 0 then -999 else
              ( 
                  trailing_30_day_arpu
                  * 
                  (
                      (
                            (49.99 / (trailing_30_day_churn * -1.0)) 
                            - 
                            (
                                (refill_cogs_last) / (trailing_30_day_churn * -1.0)
                            )
                            + 
                            (refill_cogs_last) - (welcome_kit_cogs_last)
                      )
                      / 
                      (
                         49.99
                         /
                         (trailing_30_day_churn * -1.0)
                      )
                  )
              )
              /
              (trailing_30_day_churn * -1.0) 
          end as trailing_30_day_ltv,
          case when zeroifnull(trailing_30_day_cpa) = 0 then -999 else trailing_30_day_ltv / trailing_30_day_cpa end as trailing_30_day_ltv_to_cpa,
          case when zeroifnull(trailing_30_day_cac) = 0 then -999 else trailing_30_day_ltv / trailing_30_day_cac end as trailing_30_day_ltv_to_cac
          -- sum(arpu) over (order by gainlossnet_agg.day asc rows between 60 preceding and 30 preceding) as trailing_30_60_day_arpu   
          -- sum(revenue) over (order by date asc rows between 59 preceding and 30 preceding) as trailing_30to60_revenue
          */


      select gainlossnet_agg.DAY,
          gainlossnet_agg.GAIN,
          gainlossnet_agg.LOSS,
          gainlossnet_agg.NET,
          gainlossnet_agg.TOTAL_ACTIVE,
          gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL,
          gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.TOTAL_ACTIVE_GIFTKITS,
          gainlossnet_agg.TOTAL_ACTIVE_GIFTCREDITS,
          gainlossnet_agg.TOTAL_ACTIVE_PREORDERS,
          gainlossnet_agg.TRAILING_30_DAY_GAIN,
          gainlossnet_agg.TRAILING_30_DAY_LOSS,
          gainlossnet_agg.GAIN_INTERNATIONAL,
          gainlossnet_agg.LOSS_INTERNATIONAL,
          gainlossnet_agg.NET_INTERNATIONAL,
          gainlossnet_agg.GAIN_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.LOSS_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.NET_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.GAIN_GIFTKITS,
          gainlossnet_agg.LOSS_GIFTKITS,
          gainlossnet_agg.NET_GIFTKITS,
          gainlossnet_agg.GAIN_GIFTCREDITS,
          gainlossnet_agg.LOSS_GIFTCREDITS,
          gainlossnet_agg.NET_GIFTCREDITS,
          gainlossnet_agg.GAIN_PREORDERS,
          gainlossnet_agg.LOSS_PREORDERS,
          gainlossnet_agg.NET_PREORDERS,

          revenue.TAX_AMOUNT,
          revenue.SHIPPING_AMOUNT,
          revenue.TOTAL_DISCOUNT_AMOUNT,
          revenue.TOTAL_CHARGE_QUANTITY,
          revenue.TOTAL_SUBSCRIPTION_QUANTITY,
          revenue.AOV,
          revenue.PRICE_TOTAL,
          revenue.TOTAL_GIFTKIT_SUBSCRIPTION_QUANTITY,
          revenue.TOTAL_GIFTCREDIT_SUBSCRIPTION_QUANTITY,
          revenue.REFILL_COGS,
          revenue.WELCOME_KIT_COGS,
          revenue.GROSS_SALES,
          revenue.NET_SALES,
          revenue.CREDIT_APPLIED,
          gainlossnet_agg.GAIN_DOMESTIC_3MO_REFILL,
          gainlossnet_agg.LOSS_DOMESTIC_3MO_REFILL,
          gainlossnet_agg.NET_DOMESTIC_3MO_REFILL,
          gainlossnet_agg.TOTAL_ACTIVE_DOMESTIC_3MO_REFILL,
          gainlossnet_agg.TOTAL_ACTIVE_6MO_REFILL,
          revenue.DISCOUNT_WELCOME_KIT,
          revenue.WELCOME_KIT_QUANTITY,
          revenue.DISCOUNT_REFILL_KIT,
          revenue.REFILL_KIT_QUANTITY,
          revenue. REFILL_3MO_ORDER_SENT,
          revenue.REFILL_6MO_ORDER_SENT,
          revenue.REFILL_3MO_QUANTITY_SENT,
          revenue.REFILL_6MO_QUANTITY_SENT
                  

      from
      (
          select day, gain, loss, net,
                  sum(net) over (order by day asc rows between unbounded preceding and current row) as total_active,
                  sum(net_international) over (order by day asc rows between unbounded preceding and current row) as total_active_international,
                  sum(net_international_3mo_refill) over (order by day asc rows between unbounded preceding and current row) as total_active_international_3mo_refill,
                  sum(net_giftkits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftkits,
                  sum(net_giftcredits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftcredits,  
                  sum(net_preorders) over (order by day asc rows between unbounded preceding and current row) as total_active_preorders,  
                  sum(net_domestic_3mo_refill) over (order by day asc rows between unbounded preceding and current row) as total_active_domestic_3mo_refill, 
                  -- adding 6mo refill
                  sum(net_6mo_refill) over (order by day asc rows between unbounded preceding and current row) as total_active_6mo_refill, 
        
                  sum(gain) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_gain,        
                  sum(loss) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_loss,

                  gain_international,
                  loss_international,
                  net_international,
                  gain_international_3mo_refill,
                  loss_international_3mo_refill,
                  net_international_3mo_refill,
                  gain_giftkits,
                  loss_giftkits,
                  net_giftkits,
                  gain_giftcredits,
                  loss_giftcredits,
                  net_giftcredits,
                  gain_preorders,
                  loss_preorders,
                  net_preorders,
                  gain_domestic_3mo_refill,
                  loss_domestic_3mo_refill,
                  net_domestic_3mo_refill

          from gainlossnet
      ) as gainlossnet_agg
      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = gainlossnet_agg.day
      left join revenue on revenue.day = gainlossnet_agg.day
      left join spend on spend.day = gainlossnet_agg.day
      /*where (gainlossnet_agg.day between '2020-07-01' and '2020-07-31'
               or
             gainlossnet_agg.day between '2020-12-01' and '2020-12-30')*/
      order by gainlossnet_agg.day asc;"
"V_DAILYGROWTHTRACKER_V_2_0","create or replace view ""MARKETING_DATABASE"".""PUBLIC"".""V_DAILYGROWTHTRACKER_V_2_0""
as

      -- REVENUE UNION
      with revenue as
      (

        select rev.day,
              sum(total_tax) as tax_amount,
              sum(shipping_amount) as shipping_amount,
              sum(total_discount_amount) as total_discount_amount,
              count(total_charge_quantity) as total_charge_quantity,
              sum(total_subscription_quantity) as total_subscription_quantity,
              sum(price_total) / count(total_charge_quantity) as aov,
              sum(price_total) as price_total,
              sum(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
              sum(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity,  
              sum(zeroifnull(manual.refill_cogs)) as refill_cogs,
              sum(zeroifnull(manual.welcome_kit_cogs)) as welcome_kit_cogs,
              sum(rev.price_total) - sum(rev.total_tax) - sum(rev.shipping_amount) + sum(rev.total_discount_amount) as gross_revenue,
              gross_revenue - sum(zeroifnull(welcome_kit_cogs)) as net_revenue

          from 
          (

                -- ***** START - RECHARGE Daily Revenue ***** --      
                select charges.day,
                        charges.total_price as price_total, 
                        charges.total_discounts as total_discount_amount, 
                        charges.total_charge_quantity as total_charge_quantity,
                        charge_lines.total_subscription_quantity as total_subscription_quantity, 
                        charge_lines.total_tax as total_tax,
                        zeroifnull(charge_shipping.shipping_amount) as shipping_amount,
                        zeroifnull(charge_giftcredit.total_subscription_quantity) as total_giftcredit_subscription_quantity,
                        zeroifnull(charge_giftkit.total_subscription_quantity) as total_giftkit_subscription_quantity         
                from
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(c.total_price) as total_price, sum(c.total_discounts) as total_discounts, count(*) as total_charge_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    -- Do not exclude charges where status != SUCCESS  (where c.status = 'SUCCESS')
                    group by day
                ) as charges
                join 
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity,
                            sum(c.total_tax) as total_tax
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    group by day
                ) as charge_lines on charge_lines.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(csl.price) as shipping_amount
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c                
                    left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id        
                    group by day
                ) as charge_shipping on charge_shipping.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    where cli.title ilike '%gift kit%'
                    group by day
                ) as charge_giftkit on charge_giftkit.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    where cli.title ilike '%Gift Credit%'
                    group by day
                ) as charge_giftcredit on charge_giftcredit.day = charges.day
                -- ***** END - RECHARGE Daily Revenue ***** --      

                union all 
            
                -- ***** START - RECURLY Daily Revenue ***** --  
                select charge_level_revenue.day, 
                        price_total as price_total, 
                        total_discount_amount as total_discount_amount, 
                        total_charge_quantity as total_charge_quantity,      
                        total_subscription_quantity as total_subscription_quantity,    
                        tax_amount as total_tax,
                        zeroifnull(shipping_amount) as shipping_amount,
                        zeroifnull(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
                        zeroifnull(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity
                from
                (
                  
                    select nonship_adj.day as day,
                        nonship_adj.tax as tax_amount,
                        shipping_adj.shipping as shipping_amount,
                        nonship_adj.discount_amount as total_discount_amount,
                        nonship_adj.total_charges as total_charge_quantity,
                        nonship_adj.quantity as total_subscription_quantity,
                        nonship_adj.total_price as price_total,
                        nonship_adj.total_price - nonship_adj.tax - shipping_adj.shipping + nonship_adj.discount_amount as gross_revenue
                    from
                    (
                        select to_date(t.date) as day,
                                sum(adjustment_discount) as discount_amount,
                                sum(t.tax_amount) as tax,
                                sum(adjustment_total) as adj_total_price,
                                sum(t.amount) as total_price,  
                                sum(adjustment_quantity) as quantity,
                                count(*) as total_charges
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and adjustment_description not ilike '%shipping%'
                        group by day
                        order by day

                    ) as nonship_adj 
                    left join
                    ( 

                        -- Shipping totals will NEVER match up to DGT
                        select to_date(t.date) as day,
                            sum(adjustment_total) as shipping
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and  adjustment_description ilike '%shipping%'
                        group by day
                        order by day  

                    ) as shipping_adj on nonship_adj.day = shipping_adj.day
                    order by nonship_adj.day

                ) as charge_level_revenue
                left join 
                (
                    select to_date(i.closed_at) as day, 
                          sum(a.adjustment_quantity) as total_giftkit_subscription_quantity
                    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                    where i.status in ('paid')
                    and i.invoice_doc_type in ('charge') 
                    and adjustment_description = 'Gift Kit Holiday 2020'
                    group by day 
                ) as charge_level_revenue_giftkit 
                  on charge_level_revenue_giftkit.day = charge_level_revenue.day
                left join 
                (
                    select to_date(i.closed_at) as day, 
                          sum(a.adjustment_quantity) as total_giftcredit_subscription_quantity
                    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                    where i.status in ('paid')
                    and i.invoice_doc_type in ('charge') 
                    and adjustment_description = 'GIFT_CREDIT_PLACEHOLDER'            
                    group by day 
                ) as charge_level_revenue_giftcredit
                  on charge_level_revenue_giftcredit.day = charge_level_revenue.day
                -- ***** END - RECURLY Daily Revenue ***** -- 

          ) as rev
          left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = rev.day
          group by rev.day
          order by rev.day
        
      ), 
      gainlossnet as -- GAIN LOSS JOIN
      (

          select gain.dt as day, 
                  zeroifnull(gain.total_subscribers_gained) as total_subscribers_gained, 
                  zeroifnull(loss.total_subscribers_lost) total_subscribers_lost,   
                  zeroifnull(gain.total_subscriptions_gained) as gain,
                  zeroifnull(loss.total_subscriptions_lost) as loss,
                  zeroifnull(gain.total_subscriptions_gained) - zeroifnull(loss.total_subscriptions_lost) as net,

                  -- _international
                  zeroifnull(gain.total_subscriptions_gained_international) as gain_international,
                  zeroifnull(loss.total_subscriptions_lost_international) as loss_international,
                  zeroifnull(gain.total_subscriptions_gained_international) - zeroifnull(loss.total_subscriptions_lost_international) as net_international,

                  -- _international_3mo_refill
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) as gain_international_3mo_refill,
                  zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as loss_international_3mo_refill,
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) - zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as net_international_3mo_refill,

                  -- _giftkits
                  zeroifnull(gain.total_subscriptions_gained_giftkits) as gain_giftkits,
                  zeroifnull(loss.total_subscriptions_lost_giftkits) as loss_giftkits,
                  zeroifnull(gain.total_subscriptions_gained_giftkits) - zeroifnull(loss.total_subscriptions_lost_giftkits) as net_giftkits,

                  -- _giftcredits
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) as gain_giftcredits,
                  zeroifnull(loss.total_subscriptions_lost_giftcredits) as loss_giftcredits,
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) - zeroifnull(loss.total_subscriptions_lost_giftcredits) as net_giftcredits,

                  -- _preorders
                  zeroifnull(gain.total_subscriptions_gained_preorders) as gain_preorders,
                  zeroifnull(loss.total_subscriptions_lost_preorders) as loss_preorders,
                  zeroifnull(gain.total_subscriptions_gained_preorders) - zeroifnull(loss.total_subscriptions_lost_preorders) as net_preorders

          from
          (

                with subscription_breakdowns as 
                (

                    select 
                        -- only perform timezone offset subscriptions created within recharge
                        case 
                          when is_recharge_native = 1 then to_date(dateadd(hour, -4, map.created_at))
                          when is_imported = 1 then to_date(dateadd(hour, -4, map.created_at))
                          else to_date(map.created_at) end
                        as dt,
                        count(*) as total_subscribers_gained, 
                        sum(quantity) as total_subscriptions_gained,
                        is_international,
                        sku,
                        is_preorder
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map
                    group by dt, is_international, sku, is_preorder
                    order by dt
                )            
            

                -- **************************************************
                -- BREAKDOWNS: Create aggregation + join for each breakdown
                -- **************************************************      
                select total.dt, total_subscribers_gained, total_subscriptions_gained, 
                        total_subscribers_gained_international, total_subscriptions_gained_international,
                        total_subscribers_gained_international_3mo_refill, total_subscriptions_gained_international_3mo_refill,
                        total_subscribers_gained_giftkits, total_subscriptions_gained_giftkits,
                        total_subscribers_gained_giftcredits, total_subscriptions_gained_giftcredits,
                        total_subscribers_gained_preorders, total_subscriptions_gained_preorders
                from
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained, sum(total_subscriptions_gained) as total_subscriptions_gained
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international, sum(total_subscriptions_gained) as total_subscriptions_gained_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international_3mo_refill, sum(total_subscriptions_gained) as total_subscriptions_gained_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftkits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftcredits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_preorders, sum(total_subscriptions_gained) as total_subscriptions_gained_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt


          ) as gain
          left join
          (

                with subscription_breakdowns as 
                (
                    select 
                          -- only perform timezone offset on subscriptions cancelled within recharge, not on recurly
                          case
                            when is_recharge_native = 1 and is_imported = 0 then to_date(dateadd(hour, -4, map.cancelled_at))
                            when is_imported = 1 then to_date(map.cancelled_at)
                            else to_date(map.cancelled_at)
                          end as dt,
                          count(*) as total_subscribers_lost, 
                          sum(quantity) as total_subscriptions_lost,
                          is_international,
                          sku,
                          is_preorder
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map
                    where map.cancelled_at is not null
                    group by dt, is_international, sku, is_preorder
                    order by dt           
                )             
            
                -- **************************************************
                -- BREAKDOWNS: Create aggregation for each breakdown
                -- **************************************************    
                select total.dt, total_subscribers_lost, total_subscriptions_lost, 
                        total_subscribers_lost_international, total_subscriptions_lost_international,
                        total_subscribers_lost_international_3mo_refill, total_subscriptions_lost_international_3mo_refill,
                        total_subscribers_lost_giftkits, total_subscriptions_lost_giftkits,
                        total_subscribers_lost_giftcredits, total_subscriptions_lost_giftcredits,
                        total_subscribers_lost_preorders, total_subscriptions_lost_preorders
                from
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost, sum(total_subscriptions_lost) as total_subscriptions_lost
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international, sum(total_subscriptions_lost) as total_subscriptions_lost_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt          
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international_3mo_refill, sum(total_subscriptions_lost) as total_subscriptions_lost_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftkits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftcredits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_preorders, sum(total_subscriptions_lost) as total_subscriptions_lost_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt


          ) as loss 
          on gain.dt = loss.dt
          order by gain.dt  

      ),
      spend as
      (

          with facebook as
          (

              select day, sum(spend) as fb_spend
              from
              (
                  select distinct fb.date as day, fb.CAMPAIGN_NAME, fb.spend-- , fba.value as conversions
                  from ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS"" fb
                  -- **** if we need conversions, this is the correct pixel name          
                  -- left join ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS_ACTIONS"" fba on fba.date = fb.date
                  -- where fba.action_type in ('offsite_conversion.fb_pixel_purchase')
              )
              group by day
          ),
          adwords as
          (
              select date as day, sum(cost) as gaw_spend
              from ""MARKETING_DATABASE"".""ADWORDS"".""ADWORDS_CAMPAIGN_STATS"" gaw
              group by day    
          )

          select case when fb.day is null then aw.day else fb.day end as day, 
            fb_spend as fb_spend,
            gaw_spend as gaw_spend
          from facebook as fb
          left join adwords as aw on fb.day = aw.day
          order by day

      )

      -- Final ratios, calcs, and aggregations

      /*
      select gainlossnet_agg.day,
          revenue.*,
          sum(revenue.total_subscription_quantity) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_total_orders,
          sum(revenue.net_revenue) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_net_revenue,
          -- sum(revenue.total_discounts) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_discounts,
          sum(revenue.total_discount_amount) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_discounts,
          trailing_30_discounts / gainlossnet_agg.trailing_30_day_gain as trailing_30_avg_discount_per_checkout,

          gainlossnet_agg.*,
          gainlossnet_agg.total_active_international / gainlossnet_agg.total_active as percent_international,
          gainlossnet_agg.total_active_international_3mo_refill / gainlossnet_agg.total_active as percent_stp_3mo_refill,    
          sum(gainlossnet_agg.total_active) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_active_subs,
          avg(gainlossnet_agg.total_active) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_average_active_subs,
          gainlossnet_agg.trailing_30_day_loss / trailing_30_day_average_active_subs as trailing_30_day_churn,
          gainlossnet_agg.trailing_30_day_gain / trailing_30_day_active_subs as trailing_30_day_percent_recurring_subscriptions,

          spend.fb_spend,
          spend.fb_conversions,
          sum(spend.fb_conversions) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_fb_conversions,
          spend.gaw_spend,
          spend.gaw_conversions,
          sum(spend.gaw_conversions) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_gaw_conversions,

          manual.*,
          (zeroifnull(spend.fb_spend) + 
              zeroifnull(spend.gaw_spend) +     
              zeroifnull(manual.Other_Ads) +
              zeroifnull(manual.Partnerships) +
              zeroifnull(manual.Affiliates) +
              zeroifnull(manual.Share_a_Sale) +
              zeroifnull(manual.Growth_Agencies) +
              zeroifnull(manual.Growth_Consultants) +
              zeroifnull(manual.Partnerships_Agencies) +
              zeroifnull(manual.Partnerships_Consultants) +
              zeroifnull(manual.Brand_Expenses)) as total_spend,
          sum(total_spend) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_spend,
          (zeroifnull(spend.fb_spend) + 
              zeroifnull(spend.gaw_spend) +     
              zeroifnull(manual.Other_Ads) +
              zeroifnull(manual.Partnerships) +
              zeroifnull(manual.Affiliates)) /  gainlossnet_agg.gain as cpa,
          sum(cpa) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_cpa,
          total_spend / trailing_30_net_revenue as spend_as_percent_of_trailing_30_net_revenue,
          (total_spend + total_discount_amount) / gain as cac,
          sum(cac) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_cac,
          (trailing_30_net_revenue - trailing_30_discounts) / trailing_30_day_average_active_subs as trailing_30_day_grps,
          case when zeroifnull(trailing_30_day_churn) = 0 then null else trailing_30_day_grps / trailing_30_day_churn end as trailing_30_day_ltr,
          case when manual.refill_cogs is not null then manual.refill_cogs else lag(manual.refill_cogs) ignore nulls over (order by gainlossnet_agg.day asc) end as refill_cogs_last,
          case when manual.welcome_kit_cogs is not null then manual.welcome_kit_cogs else lag(manual.welcome_kit_cogs) ignore nulls over (order by gainlossnet_agg.day asc) end as welcome_kit_cogs_last,    
          case when zeroifnull(trailing_30_day_cpa) = 0 then -999 else trailing_30_day_LTR / trailing_30_day_cpa end as trailing_30_day_LTR_to_CPA,
          case when zeroifnull(trailing_30_day_cac) = 0 then -999 else trailing_30_day_LTR / trailing_30_day_cac end as trailing_30_day_LTR_to_CAC,
          (net_revenue - total_discount_amount) / total_active as arpu,
          sum(arpu) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_arpu,


          case when zeroifnull(trailing_30_day_churn) = 0 then -999 else
              ( 
                  trailing_30_day_arpu
                  * 
                  (
                      (
                            (49.99 / (trailing_30_day_churn * -1.0)) 
                            - 
                            (
                                (refill_cogs_last) / (trailing_30_day_churn * -1.0)
                            )
                            + 
                            (refill_cogs_last) - (welcome_kit_cogs_last)
                      )
                      / 
                      (
                         49.99
                         /
                         (trailing_30_day_churn * -1.0)
                      )
                  )
              )
              /
              (trailing_30_day_churn * -1.0) 
          end as trailing_30_day_ltv,
          case when zeroifnull(trailing_30_day_cpa) = 0 then -999 else trailing_30_day_ltv / trailing_30_day_cpa end as trailing_30_day_ltv_to_cpa,
          case when zeroifnull(trailing_30_day_cac) = 0 then -999 else trailing_30_day_ltv / trailing_30_day_cac end as trailing_30_day_ltv_to_cac
          -- sum(arpu) over (order by gainlossnet_agg.day asc rows between 60 preceding and 30 preceding) as trailing_30_60_day_arpu   
          -- sum(revenue) over (order by date asc rows between 59 preceding and 30 preceding) as trailing_30to60_revenue
          */


      select gainlossnet_agg.DAY,
          gainlossnet_agg.GAIN,
          gainlossnet_agg.LOSS,
          gainlossnet_agg.NET,
          gainlossnet_agg.TOTAL_ACTIVE,
          gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL,
          gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.TOTAL_ACTIVE_GIFTKITS,
          gainlossnet_agg.TOTAL_ACTIVE_GIFTCREDITS,
          gainlossnet_agg.TOTAL_ACTIVE_PREORDERS,
          gainlossnet_agg.TRAILING_30_DAY_GAIN,
          gainlossnet_agg.TRAILING_30_DAY_LOSS,
          gainlossnet_agg.GAIN_INTERNATIONAL,
          gainlossnet_agg.LOSS_INTERNATIONAL,
          gainlossnet_agg.NET_INTERNATIONAL,
          gainlossnet_agg.GAIN_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.LOSS_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.NET_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.GAIN_GIFTKITS,
          gainlossnet_agg.LOSS_GIFTKITS,
          gainlossnet_agg.NET_GIFTKITS,
          gainlossnet_agg.GAIN_GIFTCREDITS,
          gainlossnet_agg.LOSS_GIFTCREDITS,
          gainlossnet_agg.NET_GIFTCREDITS,
          gainlossnet_agg.GAIN_PREORDERS,
          gainlossnet_agg.LOSS_PREORDERS,
          gainlossnet_agg.NET_PREORDERS,

          revenue.TAX_AMOUNT,
          revenue.SHIPPING_AMOUNT,
          revenue.TOTAL_DISCOUNT_AMOUNT,
          revenue.TOTAL_CHARGE_QUANTITY,
          revenue.TOTAL_SUBSCRIPTION_QUANTITY,
          revenue.AOV,
          revenue.PRICE_TOTAL,
          revenue.TOTAL_GIFTKIT_SUBSCRIPTION_QUANTITY,
          revenue.TOTAL_GIFTCREDIT_SUBSCRIPTION_QUANTITY,
          revenue.REFILL_COGS,
          revenue.WELCOME_KIT_COGS,
          revenue.GROSS_REVENUE,
          revenue.NET_REVENUE
                  

      from
      (
          select day, gain, loss, net,
                  sum(net) over (order by day asc rows between unbounded preceding and current row) as total_active,
                  sum(net_international) over (order by day asc rows between unbounded preceding and current row) as total_active_international,
                  sum(net_international_3mo_refill) over (order by day asc rows between unbounded preceding and current row) as total_active_international_3mo_refill,
                  sum(net_giftkits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftkits,
                  sum(net_giftcredits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftcredits,  
                  sum(net_preorders) over (order by day asc rows between unbounded preceding and current row) as total_active_preorders,  

                  sum(gain) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_gain,        
                  sum(loss) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_loss,

                  gain_international,
                  loss_international,
                  net_international,
                  gain_international_3mo_refill,
                  loss_international_3mo_refill,
                  net_international_3mo_refill,
                  gain_giftkits,
                  loss_giftkits,
                  net_giftkits,
                  gain_giftcredits,
                  loss_giftcredits,
                  net_giftcredits,
                  gain_preorders,
                  loss_preorders,
                  net_preorders

          from gainlossnet
      ) as gainlossnet_agg
      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = gainlossnet_agg.day
      left join revenue on revenue.day = gainlossnet_agg.day
      left join spend on spend.day = gainlossnet_agg.day
      /*where (gainlossnet_agg.day between '2020-07-01' and '2020-07-31'
               or
             gainlossnet_agg.day between '2020-12-01' and '2020-12-30')*/
      order by gainlossnet_agg.day asc"
"V_KLAVIYOCRM","create view ""MARKETING_DATABASE"".""PUBLIC"".V_KLAVIYOCRM
AS
select to_date(DATETIME) as SEND_DATE,
COUNT(CASE WHEN TYPE = 'Recurly Start Subscription' THEN 1 END) AS E_NEWSUB,
COUNT(CASE WHEN TYPE = 'Subscription Reactivated' THEN 1 END) AS E_REACTIVATE,
COUNT(CASE WHEN TYPE = 'STP Enrollment' THEN 1 END) AS E_STP_ENROLL,
COUNT(CASE WHEN TYPE = 'Recurly Subscription Cancellation' THEN 1 END) AS E_CANCEL
FROM MARKETING_DATABASE.KLAVIYO.EVENT
WHERE PROPERTY_ATTRIBUTION IS NOT NULL
AND SEND_DATE > '2022-05-31'
GROUP BY SEND_DATE
order by SEND_DATE ASC"
"V_KLAVIYOCRM_CAMPAIGNS","create or replace view MARKETING_DATABASE.PUBLIC.V_KLAVIYOCRM_CAMPAIGNS as
//select to_date(SEND_TIME) as SENDTIME, FROM_NAME, FROM_EMAIL,NAME,SUBJECT,ID from MARKETING_DATABASE.KLAVIYO.CAMPAIGN

select to_date(SEND_TIME) as SENDTIME, FROM_NAME, FROM_EMAIL,NAME,SUBJECT,ID from MARKETING_DATABASE.KLAVIYO.CAMPAIGN
WHERE status_label = 'Sent' AND


SENDTIME >= '2020-01-01'
ORDER BY SENDTIME ASC


//select * from MARKETING_DATABASE.PUBLIC.V_KLAVIYOCRM_CAMPAIGNS"
"V_NEXTREBILLSRP","create or replace view MARKETING_DATABASE.PUBLIC.V_NEXTREBILLSRP (nextbill,plan_code,qty) as 
select to_date(CURRENT_PERIOD_ENDS_AT) nextbill, PLAN_CODE, SUM(QUANTITY) from IO06230_RECURLY_SEED_SHARE.CLASSIC.SUBSCRIPTIONS
where STATE = 'active' OR STATE = 'paused' OR STATE = 'pending'
AND NEXTBILL > CURRENT_DATE()
group by NEXTBILL, PLAN_CODE
order by NEXTBILL, PLAN_CODE ASC"
"V_SUBMASTER_DOH","create view ""MARKETING_DATABASE"".""PUBLIC"".V_SUBMASTER_DOH

AS

select left(to_date(activated_at),7) as cohort_month_year,first_discount_percentage, count(distinct coalesce(recharge_subscription_id,recurly_subscription_id)) as subscription_count from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION_MASTER"" where first_discount_percentage is not null group by 1,2 order by 1,2 ASC"
"V_SUBSCRIPTION_MAPPING_V2_0_WORKINGCOPY","create view MARKETING_DATABASE.PUBLIC.V_SUBSCRIPTION_MAPPING_V2_0_WORKINGCOPY
as

    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
    select to_varchar(recharge_s.id) as recharge_subscription_id, 
            null as recurly_subscription_id, 
            1 as is_recharge_native, 
            0 as is_recurly_native, 
            0 as is_imported,
            to_varchar(recharge_c.id) as customer_id, 
            recharge_c.email as customer_email,
            recharge_s.status as current_status, 
            recharge_s.created_at as created_at, 
            null as activated_at, 
            recharge_s.cancelled_at as cancelled_at, 
            recharge_s.price as price, 
            recharge_s.quantity as quantity,
            recharge_c.billing_country,
            case when recharge_c.billing_country in ('United States', 'US') then 0 else 1 end as is_international,            
            recharge_s.sku,
            null as is_preorder
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    where to_varchar(recharge_s.id) not in (

        select *
        from
        (
            select distinct trim(to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct trim(to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct trim(to_varchar(RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null   
        ) as a
        where _RECHARGE_SUBSCRIPTION_ID not in ('NULL', 'canceled', 'cancel')      
    )
    -- remove ""Active"" Recharge customers that were never imported
    and to_varchar(recharge_s.id) not in
    (
        select to_varchar(zeroifnull(map.recharge_subscription_id))
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map
        where is_recharge_native = 1 and is_imported = 0
        and current_status = 'ACTIVE'
    )
    
    union all

    -- Get all (IMPORTED & MAPPED) Subscriptions
    select to_varchar(mapping._recharge_subscription_id) as recharge_subscription_id, 
            to_varchar(mapping._recurly_subscription_id) as recurly_subscription_id, 
            1 as is_recharge_native, 
            0 as is_recurly_native, 
            1 as is_imported,
            to_varchar(recharge_c.id) as customer_id, 
            recharge_c.email as customer_email,
            recurly.state as current_status, 
            recharge_s.created_at as created_at, 
            null as activated_at, -- precaution: we dont know the exact ""activated at"" for imporated subscriptions
            -- recurly.activated_at as activated_at, 
            recurly.canceled_at as cancelled_at, 
            recurly.total_recurring_amount as price, 
            recurly.quantity as quantity,
            recharge_c.billing_country,
            case when recharge_c.billing_country in ('United States', 'US') then 0 else 1 end as is_international,
            recharge_s.sku,
            null as is_preorder
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s            
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    join
    (
        select *
        from
        (
            select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null
            union all
            select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct to_varchar(RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID
            from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null   
        ) as a
        where _RECHARGE_SUBSCRIPTION_ID not in ('NULL', 'canceled', 'cancel') 
        and _RECURLY_SUBSCRIPTION_ID not in ('NULL', 'no need to map since it''s cancelled', 'expired', 'cancelled', 'canceled', 'cancel')
    ) as mapping on to_varchar(mapping._recharge_subscription_id) = to_varchar(recharge_s.id)
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping._recurly_subscription_id = recurly.uuid
  
    union all 

    -- Get all (UNIMPORTED) Recurly-Only Subscriptions
    select null as recharge_subscription_id, 
            to_varchar(uuid) as recurly_subscription_id, 
            0 as is_recharge_native, 
            1 as is_recurly_native, 
            0 as is_imported,
            to_varchar(account_code) as customer_id, 
            email as customer_email,
            state as current_status, 
            created_at as created_at, 
            activated_at as activated_at, 
            canceled_at as cancelled_at, 
            total_recurring_amount as price, 
            quantity as quantity,            
            ship_address_country,
            case when ship_address_country in ('United States', 'US') then 0 else 1 end as is_international,
            adj_first.first_adjustment_product_code as sku,
            case when adj_first.first_adjustment_total = 0 then 1 else 0 end as is_preorder
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" s
    left join ""MARKETING_DATABASE"".""PUBLIC"".""v_first_recurly_adjustment"" adj_first on adj_first.subscription_id = s.uuid
    where uuid not in (
        select *
        from
        (
          select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
          where to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) is not null
          union all
          select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
          where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
          union all
          select distinct to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
          where to_varchar(RECURLY_SUBSCRIPTION_ID) is not null      
         ) as a
         where _RECURLY_SUBSCRIPTION_ID not in ('NULL', 'no need to map since it''s cancelled', 'expired', 'cancelled', 'canceled', 'cancel')
    )
    
    union all
    
    -- Get all (UNIMPORTED) Recurly-Only Subscriptions ** THAT ARE GIFT KITS
    select null as recharge_subscription_id, 
            null as recurly_subscription_id, 
            0 as is_recharge_native, 
            1 as is_recurly_native, 
            0 as is_imported,
            to_varchar(acc.account_code) as customer_id, 
            acc.ACCOUNT_EMAIL as customer_email,
            'ACTIVE' as current_status, 
            inv.BILLED_DATE as created_at, 
            inv.BILLED_DATE as activated_at, 
            null as cancelled_at, 
            adj.adjustment_total as price, 
            adj.adjustment_quantity as quantity,            
            inv.ship_address_country,
            case when inv.ship_address_country in ('United States', 'US') then 0 else 1 end as is_international,
            adj.adjustment_product_code as sku,
            0 as is_preorder
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" adj
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" inv on inv.id = adj.INVOICE_ID
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS"" acc on acc.ACCOUNT_CODE = adj.ACCOUNT_CODE    
    where adj.subscription_id is null
      and adj.adjustment_description not ilike 'Shipping%' 
      and adj.adjustment_type = 'charge'      
      and adj.adjustment_product_code ilike '%gift%';"
"V_ZERO_LTR_SUBSCRIPTIONS","create or replace view MARKETING_DATABASE.PUBLIC.V_ZERO_LTR_SUBSCRIPTIONS(
	RECHARGE_SUBSCRIPTION_ID,
	RECURLY_SUBSCRIPTION_ID,
	LTR
) as
    select map.recharge_subscription_id, 
            map.recurly_subscription_id, 
            zeroifnull(LTR_recharge) + zeroifnull(LTR_recurly) as LTR-- ,
            -- map.*
    from  ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as map
    left join (


        select s.id as recharge_subscription_id, sum(c.total_price) as LTR_recharge
        from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
        join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
        left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
        left join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on s.customer_id = c.customer_id
        where c.status = 'SUCCESS'
        group by recharge_subscription_id
        order by recharge_subscription_id



    ) as _recharge on map.recharge_subscription_id = _recharge.recharge_subscription_id
    left join (

        select a.subscription_id as recurly_subscription_id, sum(a.ADJUSTMENT_TOTAL) as LTR_recurly
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
        where i.status in ('paid')
        and i.invoice_doc_type in ('charge')
        group by subscription_id
        order by subscription_id

    ) as _recurly on map.recurly_subscription_id = _recurly.recurly_subscription_id
    where LTR <= 0
    -- and _recharge.recharge_subscription_id is null AND _recurly.recurly_subscription_id is null
    order by map.recharge_subscription_id, map.recurly_subscription_id;"
"FILTERVIEW_TWO","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.FILTERVIEW_TWO as 


select
  e.plan_name as plan_name, 
  e.email as email, 
  e.subscription_id as subscription_id, 
  e.subscription_quantity as subscription_quantity,
  e.credits_used as credits_used,
  e.account_code as account_code,
  e.cx_conversations,
  e.first_adjustment_discount as first_adjustment_discount,
  f.campaign_names as campaign_names

from (
select 

  c.plan_name as plan_name, 
  c.email as email, 
  c.subscription_id as subscription_id, 
  c.subscription_quantity as subscription_quantity,
  c.credits_used as credits_used,
  c.account_code as account_code,
  c.cx_conversations,
  d.first_adjustment_discount as first_adjustment_discount


from (

    select 
    a.plan_name as plan_name, 
    a.email as email, 
    a.subscription_id as subscription_id, 
    a.subscription_quantity as subscription_quantity,
    zeroifnull(a.credits_used) as credits_used,
    a.account_code as account_code,
    b.cx_conversations as cx_conversations

  from (

    select 
    plan_name as plan_name, 
    sub_plan.email as email, 
    sub_plan.uuid as subscription_id,
    sub_plan.account_code,
    quantity as subscription_quantity,
    credits.credits_used as credits_used
  //  zeroifnull(cx_activity.cx_conversations) as cx_conversations,
  //  zeroifnull(first_discount.first_adjustment_discount) as discounts_at_signup,
  //  campaigns.campaign_names as campaign_names
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as sub_plan
     left join (
     select account_code, count(adjustment_description) as credits_used
      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
      where adjustment_description ilike '%credit%'
      group by account_code
    ) as credits on credits.account_code = sub_plan.account_code

  ) as a left join (


select c.CONVERSATION_COUNTS_ALL as cx_conversations,
  e.email as email
  from ""MARKETING_DATABASE"".""KUSTOMER"".""CUSTOMER"" as c
  join ""MARKETING_DATABASE"".""KUSTOMER"".""CUSTOMER_EMAIL"" as e on c.id = e.customer_id



) as b on a. email = b.email
  
  
) as c left join (

  select 
   adj_first.adjustment_created_at as adjustment_created_at,
   adj_first.subscription_id as subscription_id,
   details.adjustment_discount as first_adjustment_discount
   from (
   select min(to_date(adjustment_created_at)) as adjustment_created_at, 
   subscription_id
      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
      where adjustment_description not ilike 'Shipping%' 
      and adjustment_type = 'charge' 
      and subscription_id is not null
      group by subscription_id
    ) as adj_first join (
    select to_date(adjustment_created_at) as adjustment_created_at,
      adjustment_discount, 
      subscription_id
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
    where adjustment_description not ilike '%shipping%'
    and adjustment_discount > 0
    ) as details on adj_first.subscription_id = details.subscription_id
    and adj_first.adjustment_created_at = details.adjustment_created_at
    order by subscription_id desc  
  
) as d on c.subscription_id = d.subscription_id

  ) as e left join (

  select lists.email as email, listagg(lists.campaign_name, ', ') as campaign_names
from (
  select p.email as email, c.name as campaign_name
  from ""MARKETING_DATABASE"".""KLAVIYO"".""CAMPAIGN"" as c
  left join ""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" as e on c.id = e.campaign_id
  left join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" as p on e.person_id = p.id
  where e.type = 'Received Email'
  order by p.email
) as lists group by lists.email
  
  
  
  ) as f on e.email = f.email;"
"NEWTESTVIEW","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.NEWTESTVIEW as 

select *
from ""MARKETING_DATABASE"".""PUBLIC"".""TEST_VIEW_THREE"" as tv
left join (

select 
distinct email as email,
campaign_names as campaigns
from ""MARKETING_DATABASE"".""PUBLIC"".""FILTERVIEW"" ) as fv on tv.customer_email = fv.email;"
"NEWTESTVIEWTHREE","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.NEWTESTVIEWTHREE as (
    select v.*, a.audience_name, a.audience_id, test_group
    FROM ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""NEWTESTVIEW"" as v
    left join ""MARKETING_DATABASE"".""COHORTPOC"".""ALL_EXPERIMENT_GROUPS"" as a on a.email = v.email
);"
"ORDER_REPORT_DOH","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.ORDER_REPORT_DOH
as

    select quantities.day,
          zeroifnull(""'Daily Synbiotic'"") as WK,
          dgt_gains.dgt_gain,
          zeroifnull(""'Daily Synbiotic—Refill'"") as RF,
          zeroifnull(""'Daily Synbiotic—Refill (3 month)'"") as three_mo,
          zeroifnull(""'Daily Synbiotic—Refill (2 month)'"") as two_mo,
          zeroifnull(""'(Replacement) Vial)'"") as replacement_vial,
          zeroifnull(""'(Replacement) Jar + Vial'"") as replacement_jar_and_vial,
          zeroifnull(""'(Replacement) Daily Synbiotic'"") as replacement_wk,
          zeroifnull(""'(Replacement) Jar'"") as replacement_jar,
          zeroifnull(""'(Replacement) Daily Synbiotic—Refill'"") as replacement_rf,
          zeroifnull(""'(Replacement) Jar Lid'"") as replacement_jar_lid,
          wk_refunds.wk_refund_amount,
          wk_refunds.wk_refund_quantity,
          rf_refunds.rf_refund_amount,
          rf_refunds.rf_refund_quantity
    from
    (

        select *
        from
        (
            select to_date(t.date) as day, 
                  sum(adjustment_quantity) as quantity,
                  adjustment_description as sku
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
            where t.type = 'purchase'
            and t.status = 'success'
            and sku not ilike '%shipping%'
            group by day, sku
        ) as new_entry

            pivot (
                sum(quantity) for sku in 
                    ('Daily Synbiotic',
                    'Daily Synbiotic—Refill', 
                    'Daily Synbiotic—Refill (3 month)', 
                    'Daily Synbiotic—Refill (2 month)',
                    '(Replacement) Vial)',
                    '(Replacement) Jar + Vial',
                    '(Replacement) Daily Synbiotic',
                    '(Replacement) Jar',
                    '(Replacement) Daily Synbiotic—Refill',
                    '(Replacement) Jar Lid')
               )  order by day


    ) as quantities
    right join
    (
        select to_date(map.created_at) as day, 
            sum(quantity) as dgt_gain
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map
        where map.created_at is not null
        group by day
    ) as dgt_gains on dgt_gains.day = quantities.day
    left join -- just in case there are days with no refunds
    (
       select to_date(t.date) as day, 
           sum(amount) as wk_refund_amount, 
           sum(adjustment_quantity) as wk_refund_quantity
       from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
       join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
       where t.type = 'refund'
       and t.status = 'success'
       and adjustment_description not ilike '%shipping%'
       and adjustment_description  = 'Daily Synbiotic'
       group by day, adjustment_description
    ) as wk_refunds on dgt_gains.day = wk_refunds.day
    left join
    (
         select to_date(t.date) as day, 
             sum(amount) as rf_refund_amount, 
             sum(adjustment_quantity) as rf_refund_quantity
         from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
         join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
         where t.type = 'refund'
         and t.status = 'success'
         and adjustment_description not ilike '%shipping%'
         and adjustment_description  = 'Daily Synbiotic—Refill'
         group by day, adjustment_description
    ) as rf_refunds on dgt_gains.day = rf_refunds.day
    where dgt_gains.day > '2021-01-01'
    order by dgt_gains.day;"
"TEST_VIEW_THREE","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.TEST_VIEW_THREE as
        --select distinct
        select 
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity,
            customer_email,
            
            --sku plan name
            case when recurly.subscription_id is not null then
            recurly.sku
            else
                recharge.sku
            end as plan_name 
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at,
                    s.sku as sku
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at, s.sku
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at,
                    s.plan_code as sku
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at, s.plan_code
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
where recharge.first_charged_date is not null or recurly.first_charged_date is not null;"
"V_COHORT_GAINLOSS_1_0","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.V_COHORT_GAINLOSS_1_0
as

with all_gain_loss as
(
  
    select distinct
        /*cohort.is_recharge_native,
        cohort.is_imported,
        cohort.is_recurly_native,
        cohort.RECHARGE_SUBSCRIPTION_ID,
        cohort.RECURLY_SUBSCRIPTION_ID,*/

        recharge.subscription_id as recharge_subscription_id,
        recurly.subscription_id as recurly_subscription_id,
  
        -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
        case when recharge.subscription_id is not null then
            recharge.first_charged_date
        else
            recurly.first_charged_date
        end as first_charged_date,

        -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
        case when recurly.subscription_id is not null then
            recurly.canceled_at
        else
            recharge.cancelled_at
        end as cancelled_at,

        -- if RECURLY ID exists, default to RECURLY QUANTITY
        case when recurly.subscription_id is not null then
            recurly.total_quantity
        else
            recharge.total_quantity
        end as total_quantity,  
        recurly.total_quantity as recurly_total_quantity,
        recharge.total_quantity as recharge_total_quantity

    from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort

    left join
    (
        select to_varchar(s.id) as subscription_id, 
                min(c.processed_at) as first_charged_date, 
                s.quantity as total_quantity,
                s.cancelled_at
        from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
        join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
        left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
        join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
        where c.status = 'SUCCESS'
        and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
        group by to_varchar(s.id), s.quantity, s.cancelled_at
        order by to_varchar(s.id)

    ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

    left join 
    (
        select to_varchar(s.uuid) as subscription_id, 
                min(t.date) as first_charged_date, 
                s.quantity as total_quantity,
                s.canceled_at
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
        where a.invoice_type in ('purchase', 'renewal')
        and i.status in ('closed', 'paid')
        and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
        and a.adjustment_product_code != 'free_shipping'
        and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
        group by to_varchar(s.uuid), s.quantity, s.canceled_at
        order by to_varchar(s.uuid)          

    ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))

)

select losses.cohort_id, initial_gain.total_quantity, 
 ""'2018-06'"" as ""2018-06"", ""'2018-07'"" as ""2018-07"", ""'2018-08'"" as ""2018-08"", ""'2018-09'"" as ""2018-09"", ""'2018-10'"" as ""2018-10"", ""'2018-11'"" as ""2018-11"", ""'2018-12'"" as ""2018-12"", ""'2019-01'"" as ""2019-01"", ""'2019-02'"" as ""2019-02"", ""'2019-03'"" as ""2019-03"", ""'2019-04'"" as ""2019-04"", ""'2019-05'"" as ""2019-05"", ""'2019-06'"" as ""2019-06"", ""'2019-07'"" as ""2019-07"", ""'2019-08'"" as ""2019-08"", ""'2019-09'"" as ""2019-09"", ""'2019-10'"" as ""2019-10"", ""'2019-11'"" as ""2019-11"", ""'2019-12'"" as ""2019-12"", ""'2020-01'"" as ""2020-01"", ""'2020-02'"" as ""2020-02"", ""'2020-03'"" as ""2020-03"", ""'2020-04'"" as ""2020-04"", ""'2020-05'"" as ""2020-05"", ""'2020-06'"" as ""2020-06"", ""'2020-07'"" as ""2020-07"", ""'2020-08'"" as ""2020-08"", ""'2020-09'"" as ""2020-09"", ""'2020-10'"" as ""2020-10"", ""'2020-11'"" as ""2020-11"", ""'2020-12'"" as ""2020-12"", ""'2021-01'"" as ""2021-01"", ""'2021-02'"" as ""2021-02"", ""'2021-03'"" as ""2021-03"", ""'2021-04'"" as ""2021-04"", ""'2021-05'"" as ""2021-05"", ""'2021-06'"" as ""2021-06""
from
(
    select left(first_charged_date, 7) as cohort_id, sum(total_quantity) as total_quantity
    from all_gain_loss
    group by cohort_id
) as initial_gain
join 
(
  select *
  from 
  (
      select left(first_charged_date, 7) as cohort_id, total_quantity, left(cancelled_at, 7) as cancelled_at_month
      from all_gain_loss
  ) as agg
                  pivot (
                      sum(total_quantity) for cancelled_at_month in 
                      ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06')
                  )
) as losses on initial_gain.cohort_id  = losses.cohort_id
order by losses.cohort_id;"
"V_COHORT_REVENUE","create or replace view V_COHORT_REVENUE
as

with all_revenue as
(
    select RECHARGE_SUBSCRIPTION_ID,
            RECURLY_SUBSCRIPTION_ID,
  
            case when RECHARGE_SUBSCRIPTION_ID is null then
                RECURLY_SUBSCRIPTION_ID
            else
                RECHARGE_SUBSCRIPTION_ID
            end as _subscription_id,

            min(charged_date) over (partition by _subscription_id) as first_charged_at,
            charged_date as charged_at,
            charged_amount,

            is_recharge_native,
            is_imported,
            is_recurly_native

    from
    (

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort
        -- left join
        join 
        (
            select to_varchar(s.uuid) as subscription_id,
                    -- a.adjustment_start_at as charged_date,
                    t.date as charged_date,
                    (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) as charged_amount
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and ifnull(charged_amount,0) > 0
        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))

        union all

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort
        -- left join 
        join
        (
            select to_varchar(s.id) as subscription_id, 
                    c.processed_at as charged_date, 
                    (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) as charged_amount
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and ifnull(charged_amount,0) > 0
        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        order by charged_date

    ) as a

)

-- fix names
select cohort_id, ""'2018-06'"" as ""2018-06"", ""'2018-07'"" as ""2018-07"", ""'2018-08'"" as ""2018-08"", ""'2018-09'"" as ""2018-09"", ""'2018-10'"" as ""2018-10"", ""'2018-11'"" as ""2018-11"", ""'2018-12'"" as ""2018-12"", ""'2019-01'"" as ""2019-01"", ""'2019-02'"" as ""2019-02"", ""'2019-03'"" as ""2019-03"", ""'2019-04'"" as ""2019-04"", ""'2019-05'"" as ""2019-05"", ""'2019-06'"" as ""2019-06"", ""'2019-07'"" as ""2019-07"", ""'2019-08'"" as ""2019-08"", ""'2019-09'"" as ""2019-09"", ""'2019-10'"" as ""2019-10"", ""'2019-11'"" as ""2019-11"", ""'2019-12'"" as ""2019-12"", ""'2020-01'"" as ""2020-01"", ""'2020-02'"" as ""2020-02"", ""'2020-03'"" as ""2020-03"", ""'2020-04'"" as ""2020-04"", ""'2020-05'"" as ""2020-05"", ""'2020-06'"" as ""2020-06"", ""'2020-07'"" as ""2020-07"", ""'2020-08'"" as ""2020-08"", ""'2020-09'"" as ""2020-09"", ""'2020-10'"" as ""2020-10"", ""'2020-11'"" as ""2020-11"", ""'2020-12'"" as ""2020-12"", ""'2021-01'"" as ""2021-01"", ""'2021-02'"" as ""2021-02"", ""'2021-03'"" as ""2021-03"", ""'2021-04'"" as ""2021-04"", ""'2021-05'"" as ""2021-05"", ""'2021-06'"" as ""2021-06"",""'2021-07'"" as ""2021-07"", ""'2021-08'"" as ""2021-08"", ""'2021-09'"" as ""2021-09"",""'2021-10'"" as ""2021-10"", ""'2021-11'"" as ""2021-11""  
from
(

    select *
    from 
    (
        select left(first_charged_at, 7) as cohort_id, charged_amount, left(charged_at, 7) as charged_at_month
        from all_revenue
    ) as all_revenue_agg 
                    pivot (
                        sum(charged_amount) for charged_at_month in 
                        ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11')
                    )
    order by cohort_id
);"
"V_DAILYGROWTHTRACKER_V_2_0","create or replace view ""MARKETING_DATABASE.PRODUCTION_VIEWS.V_DAILYGROWTHTRACKER_V_2_0""
as

      -- REVENUE UNION
      with revenue as
      (

        select rev.day,
              sum(total_tax) as tax_amount,
              sum(shipping_amount) as shipping_amount,
              sum(total_discount_amount) as total_discount_amount,
              count(total_charge_quantity) as total_charge_quantity,
              sum(total_subscription_quantity) as total_subscription_quantity,
              sum(price_total) / count(total_charge_quantity) as aov,
              sum(price_total) as price_total,
              sum(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
              sum(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity,  
              sum(zeroifnull(manual.refill_cogs)) as refill_cogs,
              sum(zeroifnull(manual.welcome_kit_cogs)) as welcome_kit_cogs,
              sum(rev.price_total) - sum(rev.total_tax) - sum(rev.shipping_amount) + sum(rev.total_discount_amount) as gross_revenue,
              gross_revenue - sum(zeroifnull(welcome_kit_cogs)) as net_revenue

          from 
          (

                -- ***** START - RECHARGE Daily Revenue ***** --      
                select charges.day,
                        charges.total_price as price_total, 
                        charges.total_discounts as total_discount_amount, 
                        charges.total_charge_quantity as total_charge_quantity,
                        charge_lines.total_subscription_quantity as total_subscription_quantity, 
                        charge_lines.total_tax as total_tax,
                        zeroifnull(charge_shipping.shipping_amount) as shipping_amount,
                        zeroifnull(charge_giftcredit.total_subscription_quantity) as total_giftcredit_subscription_quantity,
                        zeroifnull(charge_giftkit.total_subscription_quantity) as total_giftkit_subscription_quantity         
                from
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(c.total_price) as total_price, sum(c.total_discounts) as total_discounts, count(*) as total_charge_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    -- Do not exclude charges where status != SUCCESS  (where c.status = 'SUCCESS')
                    group by day
                ) as charges
                join 
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity,
                            sum(c.total_tax) as total_tax
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    group by day
                ) as charge_lines on charge_lines.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(csl.price) as shipping_amount
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c                
                    left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id        
                    group by day
                ) as charge_shipping on charge_shipping.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    where cli.title ilike '%gift kit%'
                    group by day
                ) as charge_giftkit on charge_giftkit.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    where cli.title ilike '%Gift Credit%'
                    group by day
                ) as charge_giftcredit on charge_giftcredit.day = charges.day
                -- ***** END - RECHARGE Daily Revenue ***** --      

                union all 
            
                -- ***** START - RECURLY Daily Revenue ***** --  
                select charge_level_revenue.day, 
                        price_total as price_total, 
                        total_discount_amount as total_discount_amount, 
                        total_charge_quantity as total_charge_quantity,      
                        total_subscription_quantity as total_subscription_quantity,    
                        tax_amount as total_tax,
                        zeroifnull(shipping_amount) as shipping_amount,
                        zeroifnull(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
                        zeroifnull(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity
                from
                (
                  
                    select nonship_adj.day as day,
                        nonship_adj.tax as tax_amount,
                        shipping_adj.shipping as shipping_amount,
                        nonship_adj.discount_amount as total_discount_amount,
                        nonship_adj.total_charges as total_charge_quantity,
                        nonship_adj.quantity as total_subscription_quantity,
                        nonship_adj.total_price as price_total,
                        nonship_adj.total_price - nonship_adj.tax - shipping_adj.shipping + nonship_adj.discount_amount as gross_revenue
                    from
                    (
                        select to_date(t.date) as day,
                                sum(adjustment_discount) as discount_amount,
                                sum(t.tax_amount) as tax,
                                sum(adjustment_total) as adj_total_price,
                                sum(t.amount) as total_price,  
                                sum(adjustment_quantity) as quantity,
                                count(*) as total_charges
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and adjustment_description not ilike '%shipping%'
                        group by day
                        order by day

                    ) as nonship_adj 
                    left join
                    ( 

                        -- Shipping totals will NEVER match up to DGT
                        select to_date(t.date) as day,
                            sum(adjustment_total) as shipping
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and  adjustment_description ilike '%shipping%'
                        group by day
                        order by day  

                    ) as shipping_adj on nonship_adj.day = shipping_adj.day
                    order by nonship_adj.day

                ) as charge_level_revenue
                left join 
                (
                    select to_date(i.closed_at) as day, 
                          sum(a.adjustment_quantity) as total_giftkit_subscription_quantity
                    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                    where i.status in ('paid')
                    and i.invoice_doc_type in ('charge') 
                    and adjustment_description = 'Gift Kit Holiday 2020'
                    group by day 
                ) as charge_level_revenue_giftkit 
                  on charge_level_revenue_giftkit.day = charge_level_revenue.day
                left join 
                (
                    select to_date(i.closed_at) as day, 
                          sum(a.adjustment_quantity) as total_giftcredit_subscription_quantity
                    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                    where i.status in ('paid')
                    and i.invoice_doc_type in ('charge') 
                    and adjustment_description = 'GIFT_CREDIT_PLACEHOLDER'            
                    group by day 
                ) as charge_level_revenue_giftcredit
                  on charge_level_revenue_giftcredit.day = charge_level_revenue.day
                -- ***** END - RECURLY Daily Revenue ***** -- 

          ) as rev
          left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = rev.day
          group by rev.day
          order by rev.day
        
      ), 
      gainlossnet as -- GAIN LOSS JOIN
      (

          select gain.dt as day, 
                  zeroifnull(gain.total_subscribers_gained) as total_subscribers_gained, 
                  zeroifnull(loss.total_subscribers_lost) total_subscribers_lost,   
                  zeroifnull(gain.total_subscriptions_gained) as gain,
                  zeroifnull(loss.total_subscriptions_lost) as loss,
                  zeroifnull(gain.total_subscriptions_gained) - zeroifnull(loss.total_subscriptions_lost) as net,

                  -- _international
                  zeroifnull(gain.total_subscriptions_gained_international) as gain_international,
                  zeroifnull(loss.total_subscriptions_lost_international) as loss_international,
                  zeroifnull(gain.total_subscriptions_gained_international) - zeroifnull(loss.total_subscriptions_lost_international) as net_international,

                  -- _international_3mo_refill
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) as gain_international_3mo_refill,
                  zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as loss_international_3mo_refill,
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) - zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as net_international_3mo_refill,

                  -- _giftkits
                  zeroifnull(gain.total_subscriptions_gained_giftkits) as gain_giftkits,
                  zeroifnull(loss.total_subscriptions_lost_giftkits) as loss_giftkits,
                  zeroifnull(gain.total_subscriptions_gained_giftkits) - zeroifnull(loss.total_subscriptions_lost_giftkits) as net_giftkits,

                  -- _giftcredits
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) as gain_giftcredits,
                  zeroifnull(loss.total_subscriptions_lost_giftcredits) as loss_giftcredits,
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) - zeroifnull(loss.total_subscriptions_lost_giftcredits) as net_giftcredits,

                  -- _preorders
                  zeroifnull(gain.total_subscriptions_gained_preorders) as gain_preorders,
                  zeroifnull(loss.total_subscriptions_lost_preorders) as loss_preorders,
                  zeroifnull(gain.total_subscriptions_gained_preorders) - zeroifnull(loss.total_subscriptions_lost_preorders) as net_preorders

          from
          (

                with subscription_breakdowns as 
                (

                    select 
                        -- only perform timezone offset subscriptions created within recharge
                        case 
                          when is_recharge_native = 1 then to_date(dateadd(hour, -4, map.created_at))
                          when is_imported = 1 then to_date(dateadd(hour, -4, map.created_at))
                          else to_date(map.created_at) end
                        as dt,
                        count(*) as total_subscribers_gained, 
                        sum(quantity) as total_subscriptions_gained,
                        is_international,
                        sku,
                        is_preorder
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map
                    group by dt, is_international, sku, is_preorder
                    order by dt
                )            
            

                -- **************************************************
                -- BREAKDOWNS: Create aggregation + join for each breakdown
                -- **************************************************      
                select total.dt, total_subscribers_gained, total_subscriptions_gained, 
                        total_subscribers_gained_international, total_subscriptions_gained_international,
                        total_subscribers_gained_international_3mo_refill, total_subscriptions_gained_international_3mo_refill,
                        total_subscribers_gained_giftkits, total_subscriptions_gained_giftkits,
                        total_subscribers_gained_giftcredits, total_subscriptions_gained_giftcredits,
                        total_subscribers_gained_preorders, total_subscriptions_gained_preorders
                from
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained, sum(total_subscriptions_gained) as total_subscriptions_gained
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international, sum(total_subscriptions_gained) as total_subscriptions_gained_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international_3mo_refill, sum(total_subscriptions_gained) as total_subscriptions_gained_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftkits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftcredits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_preorders, sum(total_subscriptions_gained) as total_subscriptions_gained_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt


          ) as gain
          left join
          (

                with subscription_breakdowns as 
                (
                    select 
                          -- only perform timezone offset on subscriptions cancelled within recharge, not on recurly
                          case
                            when is_recharge_native = 1 and is_imported = 0 then to_date(dateadd(hour, -4, map.cancelled_at))
                            when is_imported = 1 then to_date(map.cancelled_at)
                            else to_date(map.cancelled_at)
                          end as dt,
                          count(*) as total_subscribers_lost, 
                          sum(quantity) as total_subscriptions_lost,
                          is_international,
                          sku,
                          is_preorder
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map
                    where map.cancelled_at is not null
                    group by dt, is_international, sku, is_preorder
                    order by dt           
                )             
            
                -- **************************************************
                -- BREAKDOWNS: Create aggregation for each breakdown
                -- **************************************************    
                select total.dt, total_subscribers_lost, total_subscriptions_lost, 
                        total_subscribers_lost_international, total_subscriptions_lost_international,
                        total_subscribers_lost_international_3mo_refill, total_subscriptions_lost_international_3mo_refill,
                        total_subscribers_lost_giftkits, total_subscriptions_lost_giftkits,
                        total_subscribers_lost_giftcredits, total_subscriptions_lost_giftcredits,
                        total_subscribers_lost_preorders, total_subscriptions_lost_preorders
                from
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost, sum(total_subscriptions_lost) as total_subscriptions_lost
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international, sum(total_subscriptions_lost) as total_subscriptions_lost_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt          
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international_3mo_refill, sum(total_subscriptions_lost) as total_subscriptions_lost_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftkits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftcredits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_preorders, sum(total_subscriptions_lost) as total_subscriptions_lost_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt


          ) as loss 
          on gain.dt = loss.dt
          order by gain.dt  

      ),
      spend as
      (

          with facebook as
          (

              select day, sum(spend) as fb_spend
              from
              (
                  select distinct fb.date as day, fb.CAMPAIGN_NAME, fb.spend-- , fba.value as conversions
                  from ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS"" fb
                  -- **** if we need conversions, this is the correct pixel name          
                  -- left join ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS_ACTIONS"" fba on fba.date = fb.date
                  -- where fba.action_type in ('offsite_conversion.fb_pixel_purchase')
              )
              group by day
          ),
          adwords as
          (
              select date as day, sum(cost) as gaw_spend
              from ""MARKETING_DATABASE"".""ADWORDS"".""ADWORDS_CAMPAIGN_STATS"" gaw
              group by day    
          )

          select case when fb.day is null then aw.day else fb.day end as day, 
            fb_spend as fb_spend,
            gaw_spend as gaw_spend
          from facebook as fb
          left join adwords as aw on fb.day = aw.day
          order by day

      )

      -- Final ratios, calcs, and aggregations

      /*
      select gainlossnet_agg.day,
          revenue.*,
          sum(revenue.total_subscription_quantity) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_total_orders,
          sum(revenue.net_revenue) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_net_revenue,
          -- sum(revenue.total_discounts) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_discounts,
          sum(revenue.total_discount_amount) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_discounts,
          trailing_30_discounts / gainlossnet_agg.trailing_30_day_gain as trailing_30_avg_discount_per_checkout,

          gainlossnet_agg.*,
          gainlossnet_agg.total_active_international / gainlossnet_agg.total_active as percent_international,
          gainlossnet_agg.total_active_international_3mo_refill / gainlossnet_agg.total_active as percent_stp_3mo_refill,    
          sum(gainlossnet_agg.total_active) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_active_subs,
          avg(gainlossnet_agg.total_active) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_average_active_subs,
          gainlossnet_agg.trailing_30_day_loss / trailing_30_day_average_active_subs as trailing_30_day_churn,
          gainlossnet_agg.trailing_30_day_gain / trailing_30_day_active_subs as trailing_30_day_percent_recurring_subscriptions,

          spend.fb_spend,
          spend.fb_conversions,
          sum(spend.fb_conversions) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_fb_conversions,
          spend.gaw_spend,
          spend.gaw_conversions,
          sum(spend.gaw_conversions) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_gaw_conversions,

          manual.*,
          (zeroifnull(spend.fb_spend) + 
              zeroifnull(spend.gaw_spend) +     
              zeroifnull(manual.Other_Ads) +
              zeroifnull(manual.Partnerships) +
              zeroifnull(manual.Affiliates) +
              zeroifnull(manual.Share_a_Sale) +
              zeroifnull(manual.Growth_Agencies) +
              zeroifnull(manual.Growth_Consultants) +
              zeroifnull(manual.Partnerships_Agencies) +
              zeroifnull(manual.Partnerships_Consultants) +
              zeroifnull(manual.Brand_Expenses)) as total_spend,
          sum(total_spend) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_spend,
          (zeroifnull(spend.fb_spend) + 
              zeroifnull(spend.gaw_spend) +     
              zeroifnull(manual.Other_Ads) +
              zeroifnull(manual.Partnerships) +
              zeroifnull(manual.Affiliates)) /  gainlossnet_agg.gain as cpa,
          sum(cpa) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_cpa,
          total_spend / trailing_30_net_revenue as spend_as_percent_of_trailing_30_net_revenue,
          (total_spend + total_discount_amount) / gain as cac,
          sum(cac) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_cac,
          (trailing_30_net_revenue - trailing_30_discounts) / trailing_30_day_average_active_subs as trailing_30_day_grps,
          case when zeroifnull(trailing_30_day_churn) = 0 then null else trailing_30_day_grps / trailing_30_day_churn end as trailing_30_day_ltr,
          case when manual.refill_cogs is not null then manual.refill_cogs else lag(manual.refill_cogs) ignore nulls over (order by gainlossnet_agg.day asc) end as refill_cogs_last,
          case when manual.welcome_kit_cogs is not null then manual.welcome_kit_cogs else lag(manual.welcome_kit_cogs) ignore nulls over (order by gainlossnet_agg.day asc) end as welcome_kit_cogs_last,    
          case when zeroifnull(trailing_30_day_cpa) = 0 then -999 else trailing_30_day_LTR / trailing_30_day_cpa end as trailing_30_day_LTR_to_CPA,
          case when zeroifnull(trailing_30_day_cac) = 0 then -999 else trailing_30_day_LTR / trailing_30_day_cac end as trailing_30_day_LTR_to_CAC,
          (net_revenue - total_discount_amount) / total_active as arpu,
          sum(arpu) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_arpu,


          case when zeroifnull(trailing_30_day_churn) = 0 then -999 else
              ( 
                  trailing_30_day_arpu
                  * 
                  (
                      (
                            (49.99 / (trailing_30_day_churn * -1.0)) 
                            - 
                            (
                                (refill_cogs_last) / (trailing_30_day_churn * -1.0)
                            )
                            + 
                            (refill_cogs_last) - (welcome_kit_cogs_last)
                      )
                      / 
                      (
                         49.99
                         /
                         (trailing_30_day_churn * -1.0)
                      )
                  )
              )
              /
              (trailing_30_day_churn * -1.0) 
          end as trailing_30_day_ltv,
          case when zeroifnull(trailing_30_day_cpa) = 0 then -999 else trailing_30_day_ltv / trailing_30_day_cpa end as trailing_30_day_ltv_to_cpa,
          case when zeroifnull(trailing_30_day_cac) = 0 then -999 else trailing_30_day_ltv / trailing_30_day_cac end as trailing_30_day_ltv_to_cac
          -- sum(arpu) over (order by gainlossnet_agg.day asc rows between 60 preceding and 30 preceding) as trailing_30_60_day_arpu   
          -- sum(revenue) over (order by date asc rows between 59 preceding and 30 preceding) as trailing_30to60_revenue
          */


      select gainlossnet_agg.DAY,
          gainlossnet_agg.GAIN,
          gainlossnet_agg.LOSS,
          gainlossnet_agg.NET,
          gainlossnet_agg.TOTAL_ACTIVE,
          gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL,
          gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.TOTAL_ACTIVE_GIFTKITS,
          gainlossnet_agg.TOTAL_ACTIVE_GIFTCREDITS,
          gainlossnet_agg.TOTAL_ACTIVE_PREORDERS,
          gainlossnet_agg.TRAILING_30_DAY_GAIN,
          gainlossnet_agg.TRAILING_30_DAY_LOSS,
          gainlossnet_agg.GAIN_INTERNATIONAL,
          gainlossnet_agg.LOSS_INTERNATIONAL,
          gainlossnet_agg.NET_INTERNATIONAL,
          gainlossnet_agg.GAIN_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.LOSS_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.NET_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.GAIN_GIFTKITS,
          gainlossnet_agg.LOSS_GIFTKITS,
          gainlossnet_agg.NET_GIFTKITS,
          gainlossnet_agg.GAIN_GIFTCREDITS,
          gainlossnet_agg.LOSS_GIFTCREDITS,
          gainlossnet_agg.NET_GIFTCREDITS,
          gainlossnet_agg.GAIN_PREORDERS,
          gainlossnet_agg.LOSS_PREORDERS,
          gainlossnet_agg.NET_PREORDERS,

          revenue.TAX_AMOUNT,
          revenue.SHIPPING_AMOUNT,
          revenue.TOTAL_DISCOUNT_AMOUNT,
          revenue.TOTAL_CHARGE_QUANTITY,
          revenue.TOTAL_SUBSCRIPTION_QUANTITY,
          revenue.AOV,
          revenue.PRICE_TOTAL,
          revenue.TOTAL_GIFTKIT_SUBSCRIPTION_QUANTITY,
          revenue.TOTAL_GIFTCREDIT_SUBSCRIPTION_QUANTITY,
          revenue.REFILL_COGS,
          revenue.WELCOME_KIT_COGS,
          revenue.GROSS_REVENUE,
          revenue.NET_REVENUE
                  

      from
      (
          select day, gain, loss, net,
                  sum(net) over (order by day asc rows between unbounded preceding and current row) as total_active,
                  sum(net_international) over (order by day asc rows between unbounded preceding and current row) as total_active_international,
                  sum(net_international_3mo_refill) over (order by day asc rows between unbounded preceding and current row) as total_active_international_3mo_refill,
                  sum(net_giftkits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftkits,
                  sum(net_giftcredits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftcredits,  
                  sum(net_preorders) over (order by day asc rows between unbounded preceding and current row) as total_active_preorders,  

                  sum(gain) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_gain,        
                  sum(loss) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_loss,

                  gain_international,
                  loss_international,
                  net_international,
                  gain_international_3mo_refill,
                  loss_international_3mo_refill,
                  net_international_3mo_refill,
                  gain_giftkits,
                  loss_giftkits,
                  net_giftkits,
                  gain_giftcredits,
                  loss_giftcredits,
                  net_giftcredits,
                  gain_preorders,
                  loss_preorders,
                  net_preorders

          from gainlossnet
      ) as gainlossnet_agg
      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = gainlossnet_agg.day
      left join revenue on revenue.day = gainlossnet_agg.day
      left join spend on spend.day = gainlossnet_agg.day
      /*where (gainlossnet_agg.day between '2020-07-01' and '2020-07-31'
               or
             gainlossnet_agg.day between '2020-12-01' and '2020-12-30')*/
      order by gainlossnet_agg.day asc"
"V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS","create view MARKETING_DATABASE.PRODUCTION_VIEWS.V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS
as

    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
    select to_varchar(id) as recharge_subscription_id, null as recurly_subscription_id, 1 as is_recharge_native, 0 as is_recurly_native, 0 as is_imported
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION""
    where id not in (select recharge_subscription_id from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING"")

    union all

    -- Get all (IMPORTED & MAPPED) Subscriptions
    select mapping.recharge_subscription_id, mapping.recurly_subscription_id, 1 as is_recharge_native, 0 as is_recurly_native, 1 as is_imported
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" as recharge
    join ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING"" as mapping on mapping.recharge_subscription_id = recharge.id
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping.recurly_subscription_id = recurly.uuid

    union all 

    -- Get all (UNIMPORTED) Recurly-Only Subscriptions
    select null as recharge_subscription_id, uuid as recurly_subscription_id, 0 as is_recharge_native, 1 as is_recurly_native, 0 as is_imported
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS""
    where uuid not in (select recharge_subscription_id from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING"")"
"V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1","create view MARKETING_DATABASE.PRODUCTION_VIEWS.""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1""
as

    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
    select to_varchar(recharge_s.id) as recharge_subscription_id, null as recurly_subscription_id, 
        1 as is_recharge_native, 0 as is_recurly_native, 0 as is_imported,
        to_varchar(recharge_c.id) as customer_id, recharge_c.email as customer_email,
        recharge_s.status as current_status, recharge_s.created_at as created_at, null as activated_at, recharge_s.cancelled_at as cancelled_at, recharge_s.price as price, recharge_s.quantity as quantity
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    where to_varchar(recharge_s.id) not in (

        select *
        from
        (
            select distinct trim(to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct trim(to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct trim(to_varchar(RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null   
        ) as a
        where _RECHARGE_SUBSCRIPTION_ID not in ('NULL', 'canceled', 'cancel')      
      
    )

    union all

    -- Get all (IMPORTED & MAPPED) Subscriptions
    select to_varchar(mapping._recharge_subscription_id) as recharge_subscription_id, to_varchar(mapping._recurly_subscription_id) as recurly_subscription_id, 
        1 as is_recharge_native, 0 as is_recurly_native, 1 as is_imported,
        to_varchar(recharge_c.id) as customer_id, recharge_c.email as customer_email,
        recurly.state as current_status, recharge_c.created_at as created_at, recurly.activated_at as activated_at, recurly.canceled_at as cancelled_at, recurly.total_recurring_amount as price, recurly.quantity as quantity
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    join
    (
        select *
        from
        (
            select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null
            union all
            select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct to_varchar(RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID
            from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null   
        ) as a
        where _RECHARGE_SUBSCRIPTION_ID not in ('NULL', 'canceled', 'cancel') 
        and _RECURLY_SUBSCRIPTION_ID not in ('NULL', 'no need to map since it''s cancelled', 'expired', 'cancelled', 'canceled', 'cancel')
    ) as mapping on to_varchar(mapping._recharge_subscription_id) = to_varchar(recharge_s.id)
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping._recurly_subscription_id = recurly.uuid
  
    union all 

    -- Get all (UNIMPORTED) Recurly-Only Subscriptions
    select null as recharge_subscription_id, to_varchar(uuid) as recurly_subscription_id, 
        0 as is_recharge_native, 1 as is_recurly_native, 0 as is_imported,
        to_varchar(account_code) as customer_id, email as customer_email,
        state as current_status, created_at as created_at, activated_at as activated_at, canceled_at as cancelled_at, total_recurring_amount as price, quantity as quantity
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS""
    where uuid not in (
        select *
        from
        (
          select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
          where to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) is not null
          union all
          select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
          where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
          union all
          select distinct to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
          where to_varchar(RECURLY_SUBSCRIPTION_ID) is not null      
         ) as a
         where _RECURLY_SUBSCRIPTION_ID not in ('NULL', 'no need to map since it''s cancelled', 'expired', 'cancelled', 'canceled', 'cancel')
    )"
"V_PILOT_DASHBOARD","create or replace view ""MARKETING_DATABASE.PRODUCTION_VIEWS.V_PILOT_DASHBOARD""
as

    select charges.*, zeroifnull(refunds.total_refund) as total_refund
    from 
    (
        select recurly_non_shipping.day as day, 
            recurly_non_shipping.sku as sku,
            zeroifnull(sum(recurly_shipping.shipping_amount)) as shipping_amount,                      
            zeroifnull(sum(recurly_non_shipping.tax_amount)) as tax_amount,
            zeroifnull(sum(recurly_non_shipping.discount_amount)) as discount_amount,
            zeroifnull(sum(recurly_non_shipping.total_charge_quantity)) as total_charge_quantity,
            zeroifnull(sum(recurly_non_shipping.total_subscription_quantity)) as total_subscription_quantity,
            zeroifnull(sum(recurly_non_shipping.price_total)) as price_total,
            zeroifnull(sum(recurly_non_shipping.price_subtotal)) as price_subtotal,
            zeroifnull(sum(recurly_non_shipping.price_total)) - zeroifnull(sum(recurly_non_shipping.tax_amount)) - zeroifnull(sum(recurly_shipping.shipping_amount)) + zeroifnull(sum(recurly_non_shipping.discount_amount)) as gross_revenue


        from
        (

              -- Non-Shipping Adjustments
              select to_date(i.closed_at) as day, 
                     i.id,
                     a.adjustment_description as sku,
                    sum(distinct i.tax_amount) as tax_amount,
                    0 as shipping_amount,
                    sum(distinct i.invoice_discount) as discount_amount,
                    count(distinct i.id) as total_charge_quantity,
                    sum(a.adjustment_quantity) as total_subscription_quantity,
                    sum(distinct i.invoice_total) as price_total,
                    sum(distinct i.invoice_subtotal) as price_subtotal                  
              from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
              join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
              where i.status in ('paid')
              and i.invoice_doc_type in ('charge') 
              and adjustment_description not ilike '%shipping%'
              group by i.id, day, sku

          ) as recurly_non_shipping
          left join 
          (
              -- Shipping Adjustments            
              select to_date(i.closed_at) as day, 
                    i.id,
                    a.adjustment_description as sku,
                    0 as tax_amount,
                    sum(a.adjustment_total) as shipping_amount,
                    0 as discount_amount,
                    0 as total_charge_quantity,
                    0 as total_subscription_quantity,
                    0 as price_total,            
                    0 as price_subtotal                  
              from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
              join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
              where i.status in ('paid')
              and i.invoice_doc_type in ('charge')
              and adjustment_description ilike '%shipping%'
              group by i.id, day, sku

          ) as recurly_shipping 
          on recurly_shipping.id = recurly_non_shipping.id 
            and recurly_shipping.day = recurly_non_shipping.day
        group by recurly_non_shipping.day, recurly_non_shipping.sku
    ) as charges
    left join
    (

        select to_date(i.closed_at) as day,
                a.adjustment_description as sku,
                sum(distinct i.invoice_total) as total_refund
        from""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
        where i.invoice_type = 'refund'
        and adjustment_description not ilike '%shipping%'
        group by day, sku

    ) as refunds on charges.day = refunds.day and charges.sku = refunds.sku
    order by charges.day"
"V_ZERO_LTR_SUBSCRIPTIONS","create view ""MARKETING_DATABASE.PRODUCTION_VIEWS.V_ZERO_LTR_SUBSCRIPTIONS""
as
    select map.recharge_subscription_id, 
            map.recurly_subscription_id, 
            zeroifnull(LTR_recharge) + zeroifnull(LTR_recurly) as LTR-- ,
            -- map.*
    from  ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as map
    left join (


        select s.id as recharge_subscription_id, sum(c.total_price) as LTR_recharge
        from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
        join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
        left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
        left join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on s.customer_id = c.customer_id
        where c.status = 'SUCCESS'
        group by recharge_subscription_id
        order by recharge_subscription_id



    ) as _recharge on map.recharge_subscription_id = _recharge.recharge_subscription_id
    left join (

        select a.subscription_id as recurly_subscription_id, sum(a.ADJUSTMENT_TOTAL) as LTR_recurly
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
        where i.status in ('paid')
        and i.invoice_doc_type in ('charge') 
        group by subscription_id
        order by subscription_id

    ) as _recurly on map.recurly_subscription_id = _recurly.recurly_subscription_id
    where LTR <= 0
    -- and _recharge.recharge_subscription_id is null AND _recurly.recurly_subscription_id is null
    order by map.recharge_subscription_id, map.recurly_subscription_id"
"d_first_recurly_adjustment","create view MARKETING_DATABASE.PRODUCTION_VIEWS.""d_first_recurly_adjustment""
as
    select adj_first_sku.subscription_id, 
            adj_first_sku.adjustment_start_at as first_adjustment_start_at, 
            adj_first_sku.adjustment_product_code as first_adjustment_product_code,
            adj_first_sku.adjustment_quantity as first_adjustment_quantity,
            adj_first_sku.adjustment_total as first_adjustment_total,
            adj_first_sku.adjustment_tax as first_adjustment_total_tax,
            adj_first_sku.adjustment_discount as first_adjustment_total_discount

    from
    (
      select min(adjustment_start_at) as adjustment_start_at, subscription_id
      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
      where adjustment_description not ilike 'Shipping%' 
      and adjustment_type = 'charge' 
      and subscription_id is not null
      group by subscription_id
    ) as adj_first
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as adj_first_sku 
        on adj_first_sku.adjustment_start_at = adj_first.adjustment_start_at
        and adj_first_sku.subscription_id = adj_first.subscription_id
    where adj_first_sku.adjustment_description not ilike 'Shipping%' 
    and adj_first_sku.adjustment_type = 'charge' 
    and adj_first_sku.subscription_id is not null    
    order by adj_first_sku.adjustment_start_at, adj_first_sku.subscription_id"
"v_first_recurly_adjustment","create view MARKETING_DATABASE.PRODUCTION_VIEWS.""v_first_recurly_adjustment""
as
    select adj_first_sku.subscription_id, 
            adj_first_sku.adjustment_start_at as first_adjustment_start_at, 
            adj_first_sku.adjustment_product_code as first_adjustment_product_code,
            adj_first_sku.adjustment_quantity as first_adjustment_quantity,
            adj_first_sku.adjustment_total as first_adjustment_total,
            adj_first_sku.adjustment_tax as first_adjustment_total_tax,
            adj_first_sku.adjustment_discount as first_adjustment_total_discount

    from
    (
      select min(adjustment_start_at) as adjustment_start_at, subscription_id
      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
      where adjustment_description not ilike 'Shipping%' 
      and adjustment_type = 'charge' 
      and subscription_id is not null
      group by subscription_id
    ) as adj_first
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as adj_first_sku 
        on adj_first_sku.adjustment_start_at = adj_first.adjustment_start_at
        and adj_first_sku.subscription_id = adj_first.subscription_id
    where adj_first_sku.adjustment_description not ilike 'Shipping%' 
    and adj_first_sku.adjustment_type = 'charge' 
    and adj_first_sku.subscription_id is not null    
    order by adj_first_sku.adjustment_start_at, adj_first_sku.subscription_id"
"RETENTION_202110_LOYALTY","CREATE VIEW ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".RETENTION_202110_LOYALTY AS     with all_gain_loss as
    (

        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTION_2021_OCTOBER_LOYALTY_A"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))
       
    )

    --select count(*) from all_gain_loss -- 14354 versus 187687
    --select count(*)
    --from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort -- 195,693
    --where CUSTOMER_EMAIL in (select email from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTION_2021_OCTOBER_LOYALTY_A"") -- 14,545
    -- select initial_gain.*
    
    
    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )

        ) as _cohort
        group by cohort_id

    ) as initial_gain    
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                
                      /*union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec*/

                      /*union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx*/

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"VW_RPT_RETURN_v1.0","create or replace view ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""VW_RPT_RETURN_v1.0""
as

  select *
  from ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""EXPORT_VW_RPT_RETURN""
  order by return_id"
"V_REVENUE_CALCULATIONS_01","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.V_REVENUE_CALCULATIONS_01(
	INVOICE_ID,
	INVOICE_NUMBER,
	SKU_DESCRIPTION,
	SKU,
	ITEM_DESCRIPTION,
	INVOICE_DATE,
	TOTAL_DISCOUNT,
	TOTAL_TAX,
	TOTAL_ADJ_PRICE,
	BASE_PRICE,
	TOTAL_QUANTITY,
	TOTAL_SHIPPING_AMOUNT,
	TOTAL_SHIPPING_TAX_AMOUNT,
	TOTAL_CREDIT_APPLIED,
	TOTAL_REFUND_AMOUNT,
	REFUND_DATE,
	GROSS_REVENUE,
	ADJ_GROSS_REVENUE,
	ADJ_TOTAL_PAID,
	ADJ_SUBTOTAL_PAID,
	NET_VALUE,
	INVOICE_FLAG,
	ORDER_SHIPPED_DATE,
	SHIPTO_CITY,
	SHIPTO_STATE,
	SHIPTO_COUNTRY_CODE,
	SHIPTO_ZIP,
	FULLFILMENT_PARTNER
) as 

with 
credit_final as (   

    select 
      applied_to_invoice_number as invoice_applied
    , sum(amount) as credit_amount
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""CREDIT_PAYMENTS""
    where action != 'write_off'
    group by invoice_applied   
)
    
, nonship_adj as (

    select 
      to_date(date) as date
    , t.transaction_id as transaction_id
    , t.account_code as customer_id
    , t.subscription_id as subscription_id
    , a.adjustment_plan_code as sku
    , a.adjustment_description as sku_description
    , a.adjustment_tax_code as item_description
    , a.adjustment_coupon_code as promotion_code
    , t.invoice_id
    , a.invoice_number
    ----- measures
    , null as total_price
    , ifnull(sum(a.adjustment_quantity),0) as quantity
    , ifnull(sum(a.adjustment_amount),0) as base_price
    , ifnull(sum(a.adjustment_total),0) as adj_total_price
    , ifnull(sum(a.adjustment_tax),0) as tax
    , ifnull(sum(a.adjustment_discount),0) as discount_amount

from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
----- only for successful purchases and adjustment descriptions does not include shipping
where lower(t.type) = 'purchase'
and lower(t.status) = 'success'
and a.adjustment_description not ilike '%shipping%' 
group by 1,2,3,4,5,6,7,8,9,10
)

, shipping_adj as ( 
 -- Shipping totals will NEVER match up to DGT
    select 
      t.invoice_id
    , ADJUSTMENT_plan_CODE as sku
    , adjustment_amount as shipping
    , adjustment_tax as shipping_tax

from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
where t.type = 'purchase'
and t.status = 'success'
and  adjustment_description ilike '%shipping%'

)
 
, double_invoices_clean as (
 
    select 
      invoice_id
    , invoice_number
    , sku_description
    , SKU
    , item_description
    , min(date) as invoice_date
    , sum(discount_amount) as total_discount
    , sum(tax) as total_tax
    , sum(adj_total_price) as total_adj_price
    --, sum(total_price) as total_price
    , sum(base_price) as base_price
    , sum(quantity) as total_quantity
    
from nonship_adj 
group by invoice_id,invoice_number,sku_description,SKU,item_description
)

, replacements as (
    select 
      invoice_id
    , invoice_number
    , ADJUSTMENT_DESCRIPTION as SKU_DESCRIPTION
    , CASE when sku_description ilike '%Daily Synbiotic' then 'syn-wk'
        when sku_description ilike '%Daily Synbiotic—Refill' then 'syn-rf'
        when sku_description ilike '%Daily Synbiotic—Refill (2 month)%' then 'syn-rf-2mo'
        when sku_description ilike '%Daily Synbiotic—Refill (3 month)%' then 'syn-rf-3mo'
        when sku_description ilike '%Daily Synbiotic—Refill (6 month)%' then 'syn-rf-6mo'
        when sku_description ilike '%Pediatric Daily Synbiotic' then 'pds-wk'
        when sku_description ilike '%Pediatric Daily Synbiotic—Refill' then 'pds-rf'
        when sku_description ilike '%Pediatric Daily Synbiotic—Refill (2 month)' then 'pds-rf-2mo'
        else 'others' end as SKU
    , adjustment_tax_code as item_description
    , to_date(ADJUSTMENT_CREATED_AT) as INVOICE_DATE
    , adjustment_discount as total_discount
    , adjustment_tax as total_tax
    , adjustment_total as total_adj_price
    , adjustment_amount as base_price
    , adjustment_quantity as total_quantity
                        
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
where adjustment_description ilike '%(Replacement)%'
)

, double_invoices_clean_final as (

select * from double_invoices_clean

UNION ALL

select * from replacements 
)    

, double_shipping_clean as (

select 
      invoice_id
    , sku
    , sum(shipping) as total_shipping
    , sum(shipping_tax) as total_shipping_tax
 
from shipping_adj
group by 1,2
)   

, refunds_update as
(
select 
  t.original_transaction_id as transaction_id ---- normalized
, t.invoice_id
, min(t.date) as refund_date
, ifnull(sum(t.amount),0) as refund_amount ----- aggregated the data 
--, t.date as refund_date
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id

----- only for successful refunds and adjustment descriptions does not include shipping
where t.type = 'refund'
and t.status = 'success'
and adjustment_description not ilike '%shipping%'

group by 1,2
)

, refunds as (

        with tbl1 as (
        select 
          t.date as refund_date
        , t.amount as refund_amount
        , t.original_transaction_id
        
         from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
         join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
         
         where t.type = 'refund'
         and t.status = 'success' 
         and adjustment_description not ilike '%shipping%'
         )
         
        , tbl2 as (
        select 
        distinct 
         t.transaction_id
        ,t.invoice_id
        
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS""  as t
        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
        
        where t.type = 'purchase'
        and t.status = 'success'
        and adjustment_description not ilike '%shipping%' 
        and adjustment_description not ilike '%(Replacement)%'
        and adjustment_description not ilike '%preorder%'
       ) 

        select 
          tbl2.invoice_id
        , min(refund_date) as refund_date
        , sum(tbl1.refund_amount) as refund_amount
        from tbl1 
        join tbl2 on tbl2.transaction_id = tbl1.original_transaction_id
        group by 1
 )
            
, stord_shipment_cleaning as (

select 
     distinct
      order_number
    , destination_postal_code
    , ship_date
    , row_number() over(partition by order_number order by ship_date desc) as ranking
from ""MARKETING_DATABASE"".""STORD"".""SHIPMENTS"" as s
qualify ranking = 1
)
    
,oceanx_stord as (

select 
  distinct 
  order_number_updated
, order_shipped_date
, shipto_city
, shipto_state
, shipto_country_code
, shipto_zip
, fullfilment_partner
from (

select 
     distinct case when order_number ilike 'SEED%' then right(order_number,len(order_number)-5) else order_number end as order_number_updated
    , to_date(order_shipped_date) as order_shipped_date
    , UPPER(shipto_city) AS shipto_city
    , UPPER(shipto_state) AS shipto_state
    , UPPER(shipto_country_code) AS shipto_country_code
    , UPPER(shipto_zip) AS shipto_zip
    , 'ocean_x' as fullfilment_partner
from ""MARKETING_DATABASE"".""OCEANX_DATALAKE"".""VW_DATA_SHIPMENT""

UNION ALL

select 
    distinct case when o.order_number ilike 'SEED%' 
                then right(o.order_number,len(o.order_number)-5) else o.order_number 
                end as order_number_updated
  , to_date(SHIP_DATE) as order_shipped_date
  , UPPER(dest_city) as shipto_city
  , UPPER(dest_state) as shipto_state
  , UPPER(dest_country) as shipto_country_code
  , UPPER(DESTINATION_POSTAL_CODE) as shipto_zip
  , 'stord' as fullfilment_partner
from ""MARKETING_DATABASE"".""STORD"".""ORDERS"" as o
left join stord_shipment_cleaning as s on o.order_number = s.order_number
where
o.order_type = 'sales' 
and o.order_status = 'shipped' )
where order_number_updated not like '%SAMPLE%'
)

, final_data as ( 
select
      double_invoices_clean_final.*
    , COALESCE(double_shipping_clean.total_shipping,0) as total_shipping_amount
    , COALESCE(double_shipping_clean.total_shipping_tax,0) as total_shipping_tax_amount
    , COALESCE(credit_final.credit_amount, 0) as total_credit_applied
    , COALESCE(refunds.refund_amount,0) as total_refund_amount
    , to_date(refunds.refund_date) as refund_date
    --, double_invoices_clean_final.total_price 
    , double_invoices_clean_final.base_price
        - double_invoices_clean_final.total_tax 
        - COALESCE(double_shipping_clean.total_shipping,0) 
        - COALESCE(double_shipping_clean.total_shipping_tax,0) 
        + double_invoices_clean_final.total_discount 
        + COALESCE(credit_final.credit_amount, 0) as gross_revenue
        
    , double_invoices_clean_final.base_price
        - double_invoices_clean_final.total_tax 
        - COALESCE(double_shipping_clean.total_shipping_tax,0) 
        + double_invoices_clean_final.total_discount 
        + COALESCE(double_shipping_clean.total_shipping, 0) as adj_gross_revenue
        
    , double_invoices_clean_final.base_price
        + double_invoices_clean_final.total_tax 
        + COALESCE(double_shipping_clean.total_shipping,0) 
        + COALESCE(double_shipping_clean.total_shipping_tax,0) 
        - double_invoices_clean_final.total_discount 
        - COALESCE(credit_final.credit_amount, 0) as adj_total_paid
        
    , double_invoices_clean_final.base_price
        + COALESCE(double_shipping_clean.total_shipping,0) 
        - double_invoices_clean_final.total_discount 
        - COALESCE(credit_final.credit_amount, 0) as adj_subtotal_paid
        
    ,gross_revenue/total_quantity as Net_Value
    
    , CASE WHEN net_value != 49.99 and double_invoices_clean_final.SKU not ilike '%3 month%' then 1 
        WHEN net_value != 147.97 and net_value != 149.97 and double_invoices_clean_final.SKU ilike '%3month' then 1
             else 0 end as invoice_flag

             
from double_invoices_clean_final 
left join double_shipping_clean 
on double_invoices_clean_final.invoice_id = double_shipping_clean.invoice_id 
and double_invoices_clean_final.sku = double_shipping_clean.sku 
left join credit_final
on double_invoices_clean_final.invoice_number = credit_final.invoice_applied
left join refunds on double_invoices_clean_final.invoice_id = refunds.invoice_id
--left join refunds_update on double_invoices_clean_final.invoice_id = refunds_update.invoice_id
order by invoice_number
    )

/*select 
sku,
  sum(TOTAL_DISCOUNT) as TOTAL_DISCOUNT
, sum(TOTAL_TAX) as TOTAL_TAX
, sum(TOTAL_PRICE) as TOTAL_PRICE
, sum(BASE_PRICE) as BASE_PRICE
, sum(TOTAL_QUANTITY) as TOTAL_QUANTITY
, sum(TOTAL_SHIPPING_AMOUNT) as TOTAL_SHIPPING_AMOUNT
, sum(TOTAL_SHIPPING_TAX_AMOUNT) as TOTAL_SHIPPING_TAX_AMOUNT
, sum(TOTAL_CREDIT_APPLIED) as TOTAL_CREDIT_APPLIED
, sum(TOTAL_REFUND_AMOUNT) as TOTAL_REFUND_AMOUNT
, sum(GROSS_REVENUE) as GROSS_REVENUE
, sum(ADJ_GROSS_REVENUE) as ADJ_GROSS_REVENUE
, sum(NET_VALUE) as NET_VALUE
, sum(adj_total_paid) as adj_total_paid
, sum(adj_subtotal_paid) as adj_subtotal_paid
from final_data
left join oceanx_stord as ocx_strd 
on final_data.invoice_number = ocx_strd.order_number_updated
where invoice_number = 3786521
group by 1 */

/*select 
date_trunc('month',final_data.INVOICE_DATE) as invoice_month,
count(distinct case when final_data.refund_date is not null then final_data.invoice_number end) as refund_invoices,
count(distinct final_data.invoice_number) as invoices
from final_data
left join oceanx_stord as ocx_strd 
on final_data.invoice_number = ocx_strd.order_number_updated
group by 1
order by 1 desc*/

select 
final_data.*
,ocx_strd.order_shipped_date
,UPPER(ocx_strd.shipto_city) AS shipto_city
,UPPER(ocx_strd.shipto_state) AS shipto_state
,UPPER(ocx_strd.shipto_country_code) AS shipto_country_code
,UPPER(ocx_strd.shipto_zip) AS shipto_zip
,UPPER(ocx_strd.fullfilment_partner) AS fullfilment_partner
from final_data
left join oceanx_stord as ocx_strd 
on final_data.invoice_number = ocx_strd.order_number_updated
--where invoice_number = 4192417
--where invoice_date = '2023-05-01'
--and invoice_number = 4191608
order by invoice_date
--limit 10
;"
"NEWTESTVIEW","create or replace view MARKETING_DATABASE.PUBLIC.NEWTESTVIEW(
	RECHARGE_SUBSCRIPTION_ID,
	RECURLY_SUBSCRIPTION_ID,
	FIRST_CHARGED_DATE,
	CANCELLED_AT,
	TOTAL_QUANTITY,
	RECURLY_TOTAL_QUANTITY,
	RECHARGE_TOTAL_QUANTITY,
	CUSTOMER_EMAIL,
	PLAN_NAME,
	EMAIL,
	CAMPAIGNS
) as 

select *
from ""MARKETING_DATABASE"".""PUBLIC"".""TEST_VIEW_THREE"" as tv
left join (

select 
distinct email as email,
campaign_names as campaigns
from ""MARKETING_DATABASE"".""PUBLIC"".""FILTERVIEW"" ) as fv on tv.customer_email = fv.email;"
"ORDER_REPORT_SUPPLY_CHAIN_1_0","create or replace view MARKETING_DATABASE.PUBLIC.ORDER_REPORT_supply_chain_1_0(
	DAY,
	DS_WK,
	DS_RF,
	DS_RF_3mo,
	DS_RF_6mo,
	DS_RF_2mo,
	PDS_WK,
	PDS_RF,
	PDS_RF_3mo,
	PDS_RF_6mo,
	replacement_vial,
	replacement_jar_and_vial,
	replacement_jar,
	replacement_jar_lid,
	replacement_DS_WK,
	replacement_DS_RF,
    replacement_DS_RF_3mo,
    replacement_PDS_WK_empty,
    replacement_PDS_WK_full,
    replacement_PDS_RF,
    replacement_PDS_RF_3mo
) as

select 
non_replacement_quantities.day as day,
zeroifnull(""'syn-wk'"") as DS_WK,
zeroifnull(""'syn-rf'"") as DS_RF,
zeroifnull(""'syn-rf-3mo'"") as DS_RF_3mo,
zeroifnull(""'syn-rf-6mo'"") as DS_RF_6mo,
zeroifnull(""'syn-rf-2mo'"") as DS_RF_2mo,
zeroifnull(""'pds-wk'"") as PDS_WK,
zeroifnull(""'pds-rf'"") as PDS_RF,
zeroifnull(""'pds-rf-3mo'"") as PDS_RF_3mo,
zeroifnull(""'pds-rf-2mo'"") as PDS_RF_6mo,


zeroifnull(""'(Replacement) Vial'"") as replacement_vial,
zeroifnull(""'(Replacement) Jar + Vial'"") as replacement_jar_and_vial,
zeroifnull(""'(Replacement) Jar'"") as replacement_jar,
zeroifnull(""'(Replacement) Jar Lid'"") as replacement_jar_lid,

zeroifnull(""'(Replacement) Daily Synbiotic'"") as replacement_DS_WK,
zeroifnull(""'(Replacement) Daily Synbiotic—Refill'"") as replacement_DS_RF,
zeroifnull(""'(Replacement) Daily Synbiotic—Refill (3 month)'"") as replacement_DS_RF_3mo,


zeroifnull(""'(PDS08 Replacement) Welcome Kit, Empty'"") as replacement_PDS_WK_empty,
zeroifnull(""'(PDS08 Replacement) Welcome Kit, Full'"") as replacement_PDS_WK_full,
zeroifnull(""'(PDS08 Replacement) Replacement, Refill, Monthly'"") as replacement_PDS_RF,
zeroifnull(""'(PDS08 Replacement) Refill, 3 Month'"") as replacement_PDS_RF_3mo

from (
    
    
    
    select*

      from(
          select to_date(t.date) as day, 
          sum(adjustment_quantity) as quantity,
          adjustment_plan_code as sku
          from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
          join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
          where t.type = 'purchase'
          and t.status = 'success'
          and adjustment_description not ilike '%shipping%'
          group by day, sku) as non_replacement

              pivot (sum(quantity) for sku in 
                     ('syn-wk',
                      'syn-rf',
                      'syn-rf-2mo',
                      'syn-rf-3mo', 
                      'syn-rf-6mo',
                      'pds-wk',
                      'pds-rf',
                      'pds-rf-2mo',
                      'pds-rf-3mo'
                     )
                    )

          order by day 
  
  ) as non_replacement_quantities left join (
  
      select*

        from(
        select to_date(a.adjustment_created_at) as day, 
        sum(adjustment_quantity) as quantity,
        adjustment_description as sku
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a 
        where sku ilike '%replacement%'
        group by day, sku) as replacement
        
            pivot (sum(quantity) for sku in 
                   ('(Replacement) Vial',
                    '(Replacement) Jar + Vial',
                    '(Replacement) Jar',
                    '(Replacement) Jar Lid',
                    '(Replacement) Daily Synbiotic',
                    '(Replacement) Daily Synbiotic—Refill',
                    '(Replacement) Daily Synbiotic—Refill (3 month)',
                    '(PDS08 Replacement) Welcome Kit, Empty',
                    '(PDS08 Replacement) Welcome Kit, Full',
                    '(PDS08 Replacement) Replacement, Refill, Monthly',
                    '(PDS08 Replacement) Refill, 3 Month'  
                   )
                  )

         order by day 
  
  ) as replacement_quants on replacement_quants.day = non_replacement_quantities.day   
 ;"
"ORDER_REPORT_SUPPLY_CHAIN_1_DOH_ORIGINAL","create or replace view MARKETING_DATABASE.PUBLIC.ORDER_REPORT_SUPPLY_CHAIN_1_DOH_ORIGINAL(
	DAY,
	DS_WK,
	DS_RF,
	DS_RF_3MO,
	DS_RF_6MO,
	DS_RF_2MO,
	PDS_WK,
	PDS_RF,
	PDS_RF_3MO,
	PDS_RF_2MO,
	REPLACEMENT_VIAL,
	REPLACEMENT_JAR_AND_VIAL,
	REPLACEMENT_JAR,
	REPLACEMENT_JAR_LID,
	REPLACEMENT_DS_WK,
	REPLACEMENT_DS_RF,
	REPLACEMENT_DS_RF_3MO,
	REPLACEMENT_PDS_WK_EMPTY,
	REPLACEMENT_PDS_WK_FULL,
	REPLACEMENT_PDS_RF,
	REPLACEMENT_PDS_RF_3MO,
	NEW_SUBSCRIPTIONS_DS_01
) as

select 
non_replacement_quantities.day as day,
zeroifnull(""'syn-wk'"") as DS_WK,
zeroifnull(""'syn-rf'"") as DS_RF,
zeroifnull(""'syn-rf-3mo'"") as DS_RF_3mo,
zeroifnull(""'syn-rf-6mo'"") as DS_RF_6mo,
zeroifnull(""'syn-rf-2mo'"") as DS_RF_2mo,
zeroifnull(""'pds-wk'"") as PDS_WK,
zeroifnull(""'pds-rf'"") as PDS_RF,
zeroifnull(""'pds-rf-3mo'"") as PDS_RF_3mo,
zeroifnull(""'pds-rf-2mo'"") as PDS_RF_2mo,


zeroifnull(""'(Replacement) Vial'"") as replacement_vial,
zeroifnull(""'(Replacement) Jar + Vial'"") as replacement_jar_and_vial,
zeroifnull(""'(Replacement) Jar'"") as replacement_jar,
zeroifnull(""'(Replacement) Jar Lid'"") as replacement_jar_lid,

zeroifnull(""'(Replacement) Daily Synbiotic'"") as replacement_DS_WK,
zeroifnull(""'(Replacement) Daily Synbiotic—Refill'"") as replacement_DS_RF,
zeroifnull(""'(Replacement) Daily Synbiotic—Refill (3 month)'"") as replacement_DS_RF_3mo,


zeroifnull(""'(PDS08 Replacement) Welcome Kit, Empty'"") as replacement_PDS_WK_empty,
zeroifnull(""'(PDS08 Replacement) Welcome Kit, Full'"") as replacement_PDS_WK_full,
zeroifnull(""'(PDS08 Replacement) Replacement, Refill, Monthly'"") as replacement_PDS_RF,
zeroifnull(""'(PDS08 Replacement) Refill, 3 Month'"") as replacement_PDS_RF_3mo,
zeroifnull(total_subscriptions_gained) as new_subscriptions_DS01

from (
    
    
    
    select*

      from(
          //select to_date(t.date) as day, 
          select to_date(t.date) as day, //lets make it PDT
          sum(adjustment_quantity) as quantity,
          adjustment_plan_code as sku
          from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
          join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
          where t.type = 'purchase'
          and t.status = 'success'
          and adjustment_description not ilike '%shipping%'
          group by day, sku) as non_replacement

              pivot (sum(quantity) for sku in 
                     ('syn-wk',
                      'syn-rf',
                      'syn-rf-2mo',
                      'syn-rf-3mo', 
                      'syn-rf-6mo',
                      'pds-wk',
                      'pds-rf',
                      'pds-rf-2mo',
                      'pds-rf-3mo'
                     )
                    )

          order by day 
  
  ) as non_replacement_quantities left join (
  
      select*

        from(
        select to_date(a.adjustment_created_at) as day, 
        sum(adjustment_quantity) as quantity,
        adjustment_description as sku
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a 
        where sku ilike '%replacement%'
        group by day, sku) as replacement
        
            pivot (sum(quantity) for sku in 
                   ('(Replacement) Vial',
                    '(Replacement) Jar + Vial',
                    '(Replacement) Jar',
                    '(Replacement) Jar Lid',
                    '(Replacement) Daily Synbiotic',
                    '(Replacement) Daily Synbiotic—Refill',
                    '(Replacement) Daily Synbiotic—Refill (3 month)',
                    '(PDS08 Replacement) Welcome Kit, Empty',
                    '(PDS08 Replacement) Welcome Kit, Full',
                    '(PDS08 Replacement) Replacement, Refill, Monthly',
                    '(PDS08 Replacement) Refill, 3 Month'  
                   )
                  )

         order by day 
  
  ) as replacement_quants on replacement_quants.day = non_replacement_quantities.day   
  left join
  (
                       select 
                        -- only perform timezone offset subscriptions created within recharge
                        case 
                          when is_recharge_native = 1 then to_date(dateadd(hour, -4, map.created_at))
                          when is_imported = 1 then to_date(dateadd(hour, -4, map.created_at))
                          else to_date(map.created_at) end
                        as day,
                        sum(quantity) as total_subscriptions_gained
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as map
                    group by day
   ) as subs on subs.day = non_replacement_quantities.day
            
 ;"
"RECURLY_CUSTOMER_VIEW","create view recurly_customer_view as 

(
select 
a.Subscription_ID as pk_Subscription_ID,
ac.account_first_name as first_name,
ac.account_last_name as last_name,
c.email as email,
c.state as active,
max(c.created_at) as start_time, --(created_at),
max(c.activated_at) as activated_at,
max(c.canceled_at) as end_time, --(cancelled_at),
case 
  when c.state = 'active' then datediff(day, c.activated_at, current_date()) 
  when c.state = 'canceled' then datediff(day, c.activated_at, c.canceled_at) 
end as Total_subscription_length, -- (length)
c.plan_name as product_name,
a.item_code as product_id,
sum(a.adjustment_quantity) as quantity,
sum(c.quantity) as TOTAL_shipped_quantity,
sum(a.adjustment_total /*follow up with ameeqa*/ ) as Total_subscription_value,
sum(a.adjustment_discount) as discounts_applied,
ac.account_phone as phone,
ac.account_address1 as address,
ac.account_city as city,
ac.account_state as state,
ac.account_country as country,
ac.account_postal_code as zipcode

from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as b on b.id = a.invoice_id
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as c on c.ACCOUNT_CODE = a.ACCOUNT_CODE
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS"" as ac on c.account_code = ac.account_code
    where b.status in ('paid')
    and b.invoice_doc_type in ('charge')
    group by pk_Subscription_ID, 

    ac.account_phone,ac.account_address1,ac.account_city,ac.account_state,ac.account_country,ac.account_postal_code,
    ac.account_first_name, ac.account_last_name,c.email, c.state, c.plan_name, a.item_code, c.activated_at, c.canceled_at
	order by Subscription_ID
  
  )"
"SUB_CANCEL_REASONS_ANALYSIS","create or replace view MARKETING_DATABASE.PUBLIC.SUB_CANCEL_REASONS_ANALYSIS(
	CUSTOMER_EMAIL,
    FIRST_NAME,
    LAST_NAME,
    SUBSCRIPTION_UUID,
	REASON,
	CONTEXT,
	CANCELED_FORM_SUBMITTED_DATE,
	ACTIVATED_AT,
	CANCELED_AT,
	PRODUCT,
	SHIP_ADDRESS_COUNTRY,
	STP_FLAG,
	MEDIAN_INCOME,
	MEAN_INCOME
) as

    with sub_info as (
        select customer_email,first_name,last_name,recurly_subscription_id,created_at,cancelled_at,'DS-01' as product
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01""
        where recurly_subscription_id is not null
        UNION 
        select customer_email,first_name,last_name,recurly_subscription_id,created_at,cancelled_at,'PDS-08' as product
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_PDS_08""
     ),
     cancel_reasons as(
          select distinct customer_email,first_name,last_name,subscription_uuid,reason,context,user_cancel.created as canceled_form_submitted_date,user_sub.activated_at,user_sub.canceled_at,product
          from ""MARKETING_DATABASE"".""SEED_CORE_PUBLIC"".""SEED_ECOMMERCE_USERSUBSCRIPTIONCANCELLATIONREASON"" as user_cancel 
          left join ""MARKETING_DATABASE"".""SEED_CORE_PUBLIC"".""SEED_ECOMMERCE_CANCELLATIONREASON"" as map on user_cancel.reason_id = map.ID
          left join ""MARKETING_DATABASE"".""SEED_CORE_PUBLIC"".""SEED_ECOMMERCE_SUBSCRIPTION"" as user_sub on user_sub.user_subscription_id = user_cancel.user_subscription_id
          left join sub_info on sub_info.recurly_subscription_id = user_sub.subscription_uuid
          where user_sub.canceled_at is not null and user_sub.canceled_at >= '2022-02-22' and datediff('day',canceled_form_submitted_date,user_sub.canceled_at) = 0
    ),
    last_transaction as (
          select distinct adj_last_sku.subscription_id, adjustment_product_code
         from
        (
          select max(adjustment_start_at) as adjustment_last_at, subscription_id
          from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
          where adjustment_description not ilike 'Shipping%' 
          and adjustment_type = 'charge' 
          and subscription_id is not null
          group by subscription_id
        ) as adj_latest
        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as adj_last_sku 
            on adj_last_sku.adjustment_start_at = adj_latest.adjustment_last_at
            and adj_last_sku.subscription_id = adj_latest.subscription_id
        where adj_last_sku.adjustment_description not ilike 'Shipping%' 
        and adj_last_sku.adjustment_type = 'charge' 
        and adj_last_sku.subscription_id is not null    
        --order by adj_last_sku.adjustment_start_at, adj_last_sku.subscription_id
    ),
    
    zip_code as(
      select s.uuid as subscription_id, left(s.SHIP_ADDRESS_ZIP,5) as zip_code
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s 
        --left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""CENSUS_2020"" as cen on s.zip_code = cen.zip_code
        where s.SHIP_ADDRESS_COUNTRY = 'US'),
        
    zip_code_merge as (
      
      select zc.*,cen.ESTIMATE_HOUSEHOLDS_MEDIAN_INCOME_DOLLARS_ as median_income, cen.ESTIMATE_HOUSEHOLDS_MEAN_INCOME_DOLLARS_ as mean_income
      from zip_code as zc left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""CENSUS_2020"" as cen on zc.zip_code = cen.zip_code)
    
    select cancel_reasons.*,r_sub.SHIP_ADDRESS_COUNTRY, 
    CASE when adjustment_product_code ilike '%3mo%' then 'STP'
    else 'Baseline' end as STP_flag,
    median_income,
    mean_income
    from cancel_reasons 
    left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as r_sub on r_sub.uuid = cancel_reasons.subscription_uuid
    left join last_transaction on cancel_reasons.subscription_uuid = last_transaction.subscription_id
    left join zip_code_merge as zcm on zcm.subscription_id = r_sub.uuid;"
"V_COHORT_DS01_REVENUE_APR_12_2023","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_DS01_REVENUE_APR_12_2023(
	COHORT_ID,
	""2018-10"",
	""2018-11"",
	""2018-12"",
	""2019-01"",
	""2019-02"",
	""2019-03"",
	""2019-04"",
	""2019-05"",
	""2019-06"",
	""2019-07"",
	""2019-08"",
	""2019-09"",
	""2019-10"",
	""2019-11"",
	""2019-12"",
	""2020-01"",
	""2020-02"",
	""2020-03"",
	""2020-04"",
	""2020-05"",
	""2020-06"",
	""2020-07"",
	""2020-08"",
	""2020-09"",
	""2020-10"",
	""2020-11"",
	""2020-12"",
	""2021-01"",
	""2021-02"",
	""2021-03"",
	""2021-04"",
	""2021-05"",
	""2021-06"",
	""2021-07"",
	""2021-08"",
	""2021-09"",
	""2021-10"",
	""2021-11"",
	""2021-12"",
	""2022-01"",
	""2022-02"",
	""2022-03"",
	""2022-04"",
	""2022-05"",
	""2022-06"",
	""2022-07"",
	""2022-08"",
	""2022-09"",
	""2022-10"",
	""2022-11"",
	""2022-12"",
	""2023-01"",
	""2023-02"",
	""2023-03"",
	""2023-04"",
    ""2023-05""
) as

with ds01_revenue as 
(
   select RECHARGE_SUBSCRIPTION_ID,
          RECURLY_SUBSCRIPTION_ID,
  
          case when RECHARGE_SUBSCRIPTION_ID is null then RECURLY_SUBSCRIPTION_ID
            else RECHARGE_SUBSCRIPTION_ID
            end as _subscription_id,

          min(charged_date) over (partition by _subscription_id) as first_charged_at,
          charged_date as charged_at,
          charged_amount,

          is_recharge_native,
          is_imported,
          is_recurly_native

    from
    (

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as cohort
        join 
        (
            select to_varchar(s.uuid) as subscription_id,
                   t.date as charged_date,
                   (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0)) as charged_amount
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
              join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
              left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
            where t.type = 'purchase'
              and t.status = 'success'
              and adjustment_description not ilike '%shipping%'
              and (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
              and adjustment_plan_code not ilike '%pds%'
        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))

        union all

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as cohort
        -- left join 
        join
        (
            
             select to_varchar(s.id) as subscription_id, 
                   to_date(dateadd(hour, -4, c.processed_at)) as charged_date, 
                   (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0)) as charged_amount
             from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
             
        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        order by charged_date

    ) as a
  
  )
  
  -- fix names
select cohort_id, ""'2018-10'"" as ""2018-10"", ""'2018-11'"" as ""2018-11"", ""'2018-12'"" as ""2018-12"", ""'2019-01'"" as ""2019-01"", ""'2019-02'"" as ""2019-02"", ""'2019-03'"" as ""2019-03"", ""'2019-04'"" as ""2019-04"", ""'2019-05'"" as ""2019-05"", ""'2019-06'"" as ""2019-06"", ""'2019-07'"" as ""2019-07"", ""'2019-08'"" as ""2019-08"", ""'2019-09'"" as ""2019-09"", ""'2019-10'"" as ""2019-10"", ""'2019-11'"" as ""2019-11"", ""'2019-12'"" as ""2019-12"", ""'2020-01'"" as ""2020-01"", ""'2020-02'"" as ""2020-02"", ""'2020-03'"" as ""2020-03"", ""'2020-04'"" as ""2020-04"", ""'2020-05'"" as ""2020-05"", ""'2020-06'"" as ""2020-06"", ""'2020-07'"" as ""2020-07"", ""'2020-08'"" as ""2020-08"", ""'2020-09'"" as ""2020-09"", ""'2020-10'"" as ""2020-10"", ""'2020-11'"" as ""2020-11"", ""'2020-12'"" as ""2020-12"",
""'2021-01'"" as ""2021-01"", ""'2021-02'"" as ""2021-02"", ""'2021-03'"" as ""2021-03"", ""'2021-04'"" as ""2021-04"", ""'2021-05'"" as ""2021-05"", ""'2021-06'"" as ""2021-06"",""'2021-07'"" as ""2021-07"", ""'2021-08'"" as ""2021-08"", ""'2021-09'"" as ""2021-09"",""'2021-10'"" as ""2021-10"", ""'2021-11'"" as ""2021-11"", ""'2021-12'"" as ""2021-12"", ""'2022-01'"" as ""2022-01"", ""'2022-02'"" as ""2022-02"",""'2022-03'"" as ""2022-03"", ""'2022-04'"" as ""2022-04"",""'2022-05'"" as ""2022-05"",""'2022-06'"" as ""2022-06"", ""'2022-07'"" as ""2022-07"", ""'2022-08'"" as ""2022-08"", ""'2022-09'"" as ""2022-09"", ""'2022-10'"" as ""2022-10"", ""'2022-11'"" as ""2022-11"", ""'2022-12'"" as ""2022-12"", ""'2023-01'"" as ""2023-01"", ""'2023-02'"" as ""2023-02"", ""'2023-03'"" as ""2023-03"", ""'2023-04'"" as ""2023-04"",""'2023-05'"" as ""2023-05""
from
(
  select *
    from 
    (
        select left(first_charged_at, 7) as cohort_id, charged_amount, left(charged_at, 7) as charged_at_month
        from ds01_revenue
        where cohort_id is not null
    ) as ds01_revenue_agg 
                    pivot (
                        sum(charged_amount) for charged_at_month in 
                        ('2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03','2022-04','2022-05','2022-06','2022-07','2022-08','2022-09','2022-10','2022-11','2022-12','2023-01','2023-02','2023-03','2023-04','2023-05')      
                    )
    order by cohort_id
);"
"V_COHORT_DS01_REVENUE_UNIT_APR_12_2023","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_DS01_REVENUE_UNIT_APR_12_2023(
	COHORT_ID,
	""2018-10"",
	""2018-11"",
	""2018-12"",
	""2019-01"",
	""2019-02"",
	""2019-03"",
	""2019-04"",
	""2019-05"",
	""2019-06"",
	""2019-07"",
	""2019-08"",
	""2019-09"",
	""2019-10"",
	""2019-11"",
	""2019-12"",
	""2020-01"",
	""2020-02"",
	""2020-03"",
	""2020-04"",
	""2020-05"",
	""2020-06"",
	""2020-07"",
	""2020-08"",
	""2020-09"",
	""2020-10"",
	""2020-11"",
	""2020-12"",
	""2021-01"",
	""2021-02"",
	""2021-03"",
	""2021-04"",
	""2021-05"",
	""2021-06"",
	""2021-07"",
	""2021-08"",
	""2021-09"",
	""2021-10"",
	""2021-11"",
	""2021-12"",
	""2022-01"",
	""2022-02"",
	""2022-03"",
	""2022-04"",
	""2022-05"",
	""2022-06"",
	""2022-07"",
	""2022-08"",
	""2022-09"",
	""2022-10"",
	""2022-11"",
	""2022-12"",
	""2023-01"",
	""2023-02"",
	""2023-03"",
	""2023-04"",
    ""2023-05""
) as

with ds01_revenue as 
(
   select RECHARGE_SUBSCRIPTION_ID,
          RECURLY_SUBSCRIPTION_ID,
  
          case when RECHARGE_SUBSCRIPTION_ID is null then RECURLY_SUBSCRIPTION_ID
            else RECHARGE_SUBSCRIPTION_ID
            end as _subscription_id,

          min(charged_date) over (partition by _subscription_id) as first_charged_at,
          charged_date as charged_at,
          charged_unit,

          is_recharge_native,
          is_imported,
          is_recurly_native

    from
    (

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as cohort
        join 
        (
            select to_varchar(s.uuid) as subscription_id,
                   t.date as charged_date,
                   case when adjustment_plan_code ilike '%3mo%' then ifnull(a.adjustment_quantity,0)*3 
                        when adjustment_plan_code ilike '%6mo%' then ifnull(a.adjustment_quantity,0)*6
                        else (ifnull(a.adjustment_quantity,0)) end as charged_unit
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
              join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
              left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
            where t.type = 'purchase'
              and t.status = 'success'
              and adjustment_description not ilike '%shipping%'
              and (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
              and adjustment_plan_code not ilike 'pds%'
 
        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))

        union all

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as cohort
        -- left join 
        join
        (
            
             select to_varchar(s.id) as subscription_id, 
                   to_date(dateadd(hour, -4, c.processed_at)) as charged_date, 
                   case when cli.sku ilike '%3MO%' then ifnull(cli.quantity,0)*3
                        else ifnull(cli.quantity,0) end as charged_unit
             from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
             
        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        order by charged_date

    ) as a
  
  )
  
  -- fix names
select cohort_id, ""'2018-10'"" as ""2018-10"", ""'2018-11'"" as ""2018-11"", ""'2018-12'"" as ""2018-12"", ""'2019-01'"" as ""2019-01"", ""'2019-02'"" as ""2019-02"", ""'2019-03'"" as ""2019-03"", ""'2019-04'"" as ""2019-04"", ""'2019-05'"" as ""2019-05"", ""'2019-06'"" as ""2019-06"", ""'2019-07'"" as ""2019-07"", ""'2019-08'"" as ""2019-08"", ""'2019-09'"" as ""2019-09"", ""'2019-10'"" as ""2019-10"", ""'2019-11'"" as ""2019-11"", ""'2019-12'"" as ""2019-12"", ""'2020-01'"" as ""2020-01"", ""'2020-02'"" as ""2020-02"", ""'2020-03'"" as ""2020-03"", ""'2020-04'"" as ""2020-04"", ""'2020-05'"" as ""2020-05"", ""'2020-06'"" as ""2020-06"", ""'2020-07'"" as ""2020-07"", ""'2020-08'"" as ""2020-08"", ""'2020-09'"" as ""2020-09"", ""'2020-10'"" as ""2020-10"", ""'2020-11'"" as ""2020-11"", ""'2020-12'"" as ""2020-12"",
""'2021-01'"" as ""2021-01"", ""'2021-02'"" as ""2021-02"", ""'2021-03'"" as ""2021-03"", ""'2021-04'"" as ""2021-04"", ""'2021-05'"" as ""2021-05"", ""'2021-06'"" as ""2021-06"",""'2021-07'"" as ""2021-07"", ""'2021-08'"" as ""2021-08"", ""'2021-09'"" as ""2021-09"",""'2021-10'"" as ""2021-10"", ""'2021-11'"" as ""2021-11"", ""'2021-12'"" as ""2021-12"", ""'2022-01'"" as ""2022-01"", ""'2022-02'"" as ""2022-02"",""'2022-03'"" as ""2022-03"", ""'2022-04'"" as ""2022-04"",""'2022-05'"" as ""2022-05"",""'2022-06'"" as ""2022-06"", ""'2022-07'"" as ""2022-07"", ""'2022-08'"" as ""2022-08"", ""'2022-09'"" as ""2022-09"", ""'2022-10'"" as ""2022-10"", ""'2022-11'"" as ""2022-11"", ""'2022-12'"" as ""2022-12"", ""'2023-01'"" as ""2023-01"", ""'2023-02'"" as ""2023-02"", ""'2023-03'"" as ""2023-03"", ""'2023-04'"" as ""2023-04"",""'2023-05'"" as ""2023-05""
from
(
  select *
    from 
    (
        select left(first_charged_at, 7) as cohort_id, charged_unit, left(charged_at, 7) as charged_at_month
        from ds01_revenue
        where cohort_id is not null
    ) as ds01_revenue_agg 
                    pivot (
                        sum(charged_unit) for charged_at_month in 
                        ('2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03','2022-04','2022-05','2022-06','2022-07','2022-08','2022-09','2022-10','2022-11','2022-12','2023-01','2023-02','2023-03','2023-04','2023-05')      
                    )
    order by cohort_id
);"
"V_COHORT_PDS08_REVENUE_UNIT_APR_12_2023","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_PDS08_REVENUE_UNIT_APR_12_2023(
	COHORT_ID,
	""2022-04"",
	""2022-05"",
	""2022-06"",
	""2022-07"",
	""2022-08"",
	""2022-09"",
	""2022-10"",
	""2022-11"",
	""2022-12"",
	""2023-01"",
	""2023-02"",
	""2023-03"",
	""2023-04"",
    ""2023-05""
) as

with pds08_revenue as 
(
   select RECURLY_SUBSCRIPTION_ID as _subscription_id,
          min(charged_date) over (partition by _subscription_id) as first_charged_at,
          charged_date as charged_at,
          charged_unit
    from
    (

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_PDS_08"" as cohort
        join 
        (
            select to_varchar(s.uuid) as subscription_id,
                   t.date as charged_date,
                   case when adjustment_plan_code ilike '%3mo%' then ifnull(a.adjustment_quantity,0)*3 
                        else (ifnull(a.adjustment_quantity,0)) end as charged_unit
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
              join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
              left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
            where t.type = 'purchase'
              and t.status = 'success'
              and adjustment_description not ilike '%shipping%'
              and (s.plan_name ilike '%PDS-08%' or s.plan_name ilike 'Pediatric Daily Synbiotic%')
              and adjustment_plan_code not ilike '%syn%'
              
        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))


    ) as a
  
  )
  
  
  -- fix names
select cohort_id, ""'2022-04'"" as ""2022-04"",""'2022-05'"" as ""2022-05"",""'2022-06'"" as ""2022-06"", ""'2022-07'"" as ""2022-07"", ""'2022-08'"" as ""2022-08"", ""'2022-09'"" as ""2022-09"", ""'2022-10'"" as ""2022-10"", ""'2022-11'"" as ""2022-11"", ""'2022-12'"" as ""2022-12"",
            ""'2023-01'"" as ""2023-01"", ""'2023-02'"" as ""2023-02"", ""'2023-03'"" as ""2023-03"", ""'2023-04'"" as ""2023-04"", ""'2023-05'"" as ""2023-05""
from
(   
    select *
    from 
    (
        select left(first_charged_at, 7) as cohort_id, charged_unit, left(charged_at, 7) as charged_at_month
        from pds08_revenue
        where cohort_id is not null and cohort_id >= '2022-04'
    ) as pds08_revenue_agg 
                    pivot (
                        sum(charged_unit) for charged_at_month in 
                        ('2022-04','2022-05','2022-06','2022-07','2022-08','2022-09','2022-10','2022-11','2022-12','2023-01','2023-02','2023-03','2023-04','2023-05')      
                    )
    order by cohort_id
    
);"
"V_COHORT_RETENTION_DS01_APR_26_2022_SRP6MO","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_RETENTION_DS01_APR_26_2022_SRP6MO(
	COHORT_ID,
	TOTAL_QUANTITY,
	COHORT_ID_LOSSES,
	""'2018-06'"",
	""'2018-07'"",
	""'2018-08'"",
	""'2018-09'"",
	""'2018-10'"",
	""'2018-11'"",
	""'2018-12'"",
	""'2019-01'"",
	""'2019-02'"",
	""'2019-03'"",
	""'2019-04'"",
	""'2019-05'"",
	""'2019-06'"",
	""'2019-07'"",
	""'2019-08'"",
	""'2019-09'"",
	""'2019-10'"",
	""'2019-11'"",
	""'2019-12'"",
	""'2020-01'"",
	""'2020-02'"",
	""'2020-03'"",
	""'2020-04'"",
	""'2020-05'"",
	""'2020-06'"",
	""'2020-07'"",
	""'2020-08'"",
	""'2020-09'"",
	""'2020-10'"",
	""'2020-11'"",
	""'2020-12'"",
	""'2021-01'"",
	""'2021-02'"",
	""'2021-03'"",
	""'2021-04'"",
	""'2021-05'"",
	""'2021-06'"",
	""'2021-07'"",
	""'2021-08'"",
	""'2021-09'"",
	""'2021-10'"",
	""'2021-11'"",
	""'2021-12'"",
	""'2022-01'"",
	""'2022-02'"",
	""'2022-03'"",
	""'2022-04'"",
	""'2022-05'"",
	""'2022-06'"",
	""'2022-07'"",
	""'2022-08'"",
	""'2022-09'"",
	""'2022-10'"",
	""'2022-11'"",
	""'2022-12'"",
	""'2023-01'"",
	""'2023-02'"",
	""'2023-03'"",
	""'2023-04'"",
	""'2023-05'"",
    ""'2023-06'""
) as

   with all_gain_loss as
    (

        select distinct
            recharge_subscription_id,
            recurly_subscription_id,
            cohort.created_at as first_charged_date,
            cohort.cancelled_at as cancelled_at,
            cohort.quantity as total_quantity,
            cohort.sku as sku
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as cohort
        where sku ilike '%6mo%'
        )
        

    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                   

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
              )
              




        ) as _cohort
        group by cohort_id
        

    ) as initial_gain
    
   
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                    

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12',
                           '2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12',
                           '2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12',
                           '2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12',
                           '2022-01','2022-02','2022-03','2022-04','2022-05','2022-06','2022-07','2022-08','2022-09','2022-10','2022-11','2022-12',
                           '2023-01','2023-02','2023-03','2023-04','2023-05','2023-06')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"V_COHORT_RETENTION_DS01_APR_28_2023_SRP_ALL","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_RETENTION_DS01_APR_28_2023_SRP_ALL(
	COHORT_ID,
	TOTAL_QUANTITY,
	COHORT_ID_LOSSES,
	""'2018-06'"",
	""'2018-07'"",
	""'2018-08'"",
	""'2018-09'"",
	""'2018-10'"",
	""'2018-11'"",
	""'2018-12'"",
	""'2019-01'"",
	""'2019-02'"",
	""'2019-03'"",
	""'2019-04'"",
	""'2019-05'"",
	""'2019-06'"",
	""'2019-07'"",
	""'2019-08'"",
	""'2019-09'"",
	""'2019-10'"",
	""'2019-11'"",
	""'2019-12'"",
	""'2020-01'"",
	""'2020-02'"",
	""'2020-03'"",
	""'2020-04'"",
	""'2020-05'"",
	""'2020-06'"",
	""'2020-07'"",
	""'2020-08'"",
	""'2020-09'"",
	""'2020-10'"",
	""'2020-11'"",
	""'2020-12'"",
	""'2021-01'"",
	""'2021-02'"",
	""'2021-03'"",
	""'2021-04'"",
	""'2021-05'"",
	""'2021-06'"",
	""'2021-07'"",
	""'2021-08'"",
	""'2021-09'"",
	""'2021-10'"",
	""'2021-11'"",
	""'2021-12'"",
	""'2022-01'"",
	""'2022-02'"",
	""'2022-03'"",
	""'2022-04'"",
	""'2022-05'"",
	""'2022-06'"",
	""'2022-07'"",
	""'2022-08'"",
	""'2022-09'"",
	""'2022-10'"",
	""'2022-11'"",
	""'2022-12'"",
	""'2023-01'"",
	""'2023-02'"",
	""'2023-03'"",
    ""'2023-04'"",
    ""'2023-05'""
) as

   with all_gain_loss as
    (

        select distinct
            recharge_subscription_id,
            recurly_subscription_id,
            cohort.created_at as first_charged_date,
            cohort.cancelled_at as cancelled_at,
            cohort.quantity as total_quantity,
            cohort.sku as sku
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as cohort
        where sku ilike '%3mo%' or sku ilike '%6mo%'
        )
        

    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                   

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
              )
              




        ) as _cohort
        group by cohort_id
        

    ) as initial_gain
    
   
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                    

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12',
                           '2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12',
                           '2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12',
                           '2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12',
                           '2022-01','2022-02','2022-03','2022-04','2022-05','2022-06','2022-07','2022-08','2022-09','2022-10','2022-11','2022-12',
                           '2023-01','2023-02','2023-03','2023-04','2023-05')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"V_COHORT_REVENUE_4_0","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_REVENUE_4_0(
	COHORT_ID,
	""2018-06"",
	""2018-07"",
	""2018-08"",
	""2018-09"",
	""2018-10"",
	""2018-11"",
	""2018-12"",
	""2019-01"",
	""2019-02"",
	""2019-03"",
	""2019-04"",
	""2019-05"",
	""2019-06"",
	""2019-07"",
	""2019-08"",
	""2019-09"",
	""2019-10"",
	""2019-11"",
	""2019-12"",
	""2020-01"",
	""2020-02"",
	""2020-03"",
	""2020-04"",
	""2020-05"",
	""2020-06"",
	""2020-07"",
	""2020-08"",
	""2020-09"",
	""2020-10"",
	""2020-11"",
	""2020-12"",
	""2021-01"",
	""2021-02"",
	""2021-03"",
	""2021-04"",
	""2021-05"",
	""2021-06"",
	""2021-07"",
	""2021-08"",
	""2021-09"",
	""2021-10"",
	""2021-11"",
	""2021-12"",
	""2022-01"",
	""2022-02"",
	""2022-03"",
	""2022-04"",
	""2022-05"",
	""2022-06"",
	""2022-07"",
	""2022-08"",
	""2022-09"",
	""2022-10"",
	""2022-11"",
	""2022-12"",
	""2023-01"",
	""2023-02"",
	""2023-03"",
    ""2023-04"",
    ""2023-05""
) as

with all_revenue as
(
    select RECHARGE_SUBSCRIPTION_ID,
            RECURLY_SUBSCRIPTION_ID,
  
            case when RECHARGE_SUBSCRIPTION_ID is null then
                RECURLY_SUBSCRIPTION_ID
            else
                RECHARGE_SUBSCRIPTION_ID
            end as _subscription_id,

            min(charged_date) over (partition by _subscription_id) as first_charged_at,
            charged_date as charged_at,
            charged_amount,

            is_recharge_native,
            is_imported,
            is_recurly_native

    from
    (

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort
        -- left join
        join 
        (
            select to_varchar(s.uuid) as subscription_id,
                    -- a.adjustment_start_at as charged_date,
                    t.date as charged_date,
                    (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) as charged_amount
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and ifnull(charged_amount,0) > 0
        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))

        union all

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort
        -- left join 
        join
        (
            select to_varchar(s.id) as subscription_id, 
                    c.processed_at as charged_date, 
                    (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) as charged_amount
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and ifnull(charged_amount,0) > 0
        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        order by charged_date

    ) as a

)

-- fix names
select cohort_id, ""'2018-06'"" as ""2018-06"", ""'2018-07'"" as ""2018-07"", ""'2018-08'"" as ""2018-08"", ""'2018-09'"" as ""2018-09"", ""'2018-10'"" as ""2018-10"", ""'2018-11'"" as ""2018-11"", ""'2018-12'"" as ""2018-12"", ""'2019-01'"" as ""2019-01"", ""'2019-02'"" as ""2019-02"", ""'2019-03'"" as ""2019-03"", ""'2019-04'"" as ""2019-04"", ""'2019-05'"" as ""2019-05"", ""'2019-06'"" as ""2019-06"", ""'2019-07'"" as ""2019-07"", ""'2019-08'"" as ""2019-08"", ""'2019-09'"" as ""2019-09"", ""'2019-10'"" as ""2019-10"", ""'2019-11'"" as ""2019-11"", ""'2019-12'"" as ""2019-12"", ""'2020-01'"" as ""2020-01"", ""'2020-02'"" as ""2020-02"", ""'2020-03'"" as ""2020-03"", ""'2020-04'"" as ""2020-04"", ""'2020-05'"" as ""2020-05"", ""'2020-06'"" as ""2020-06"", ""'2020-07'"" as ""2020-07"", ""'2020-08'"" as ""2020-08"", ""'2020-09'"" as ""2020-09"", ""'2020-10'"" as ""2020-10"", ""'2020-11'"" as ""2020-11"", ""'2020-12'"" as ""2020-12"",
""'2021-01'"" as ""2021-01"", ""'2021-02'"" as ""2021-02"", ""'2021-03'"" as ""2021-03"", ""'2021-04'"" as ""2021-04"", ""'2021-05'"" as ""2021-05"", ""'2021-06'"" as ""2021-06"",""'2021-07'"" as ""2021-07"", ""'2021-08'"" as ""2021-08"", ""'2021-09'"" as ""2021-09"",""'2021-10'"" as ""2021-10"", ""'2021-11'"" as ""2021-11"", ""'2021-12'"" as ""2021-12"", ""'2022-01'"" as ""2022-01"", ""'2022-02'"" as ""2022-02"",""'2022-03'"" as ""2022-03"", ""'2022-04'"" as ""2022-04"",""'2022-05'"" as ""2022-05"",""'2022-06'"" as ""2022-06"", ""'2022-07'"" as ""2022-07"", ""'2022-08'"" as ""2022-08"", ""'2022-09'"" as ""2022-09"", ""'2022-10'"" as ""2022-10"", ""'2022-11'"" as ""2022-11"", ""'2022-12'"" as ""2022-12"", ""'2023-01'"" as ""2023-01"", ""'2023-02'"" as ""2023-02"", ""'2023-03'"" as ""2023-03"", ""'2023-04'"" as ""2023-04"", ""'2023-05'"" as ""2023-05""
from
(

    select *
    from 
    (
        select left(first_charged_at, 7) as cohort_id, charged_amount, left(charged_at, 7) as charged_at_month
        from all_revenue
    ) as all_revenue_agg 
                    pivot (
                        sum(charged_amount) for charged_at_month in 
                        ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03','2022-04','2022-05','2022-06','2022-07','2022-08','2022-09','2022-10','2022-11','2022-12','2023-01','2023-02','2023-03','2023-04','2023-05')      
                    )
    order by cohort_id
);"
"V_COHORT_REVENUE_4_1_NET","create or replace view MARKETING_DATABASE.PUBLIC.V_COHORT_REVENUE_4_1_net(
	COHORT_ID,
	""2018-10"",
	""2018-11"",
	""2018-12"",
	""2019-01"",
	""2019-02"",
	""2019-03"",
	""2019-04"",
	""2019-05"",
	""2019-06"",
	""2019-07"",
	""2019-08"",
	""2019-09"",
	""2019-10"",
	""2019-11"",
	""2019-12"",
	""2020-01"",
	""2020-02"",
	""2020-03"",
	""2020-04"",
	""2020-05"",
	""2020-06"",
	""2020-07"",
	""2020-08"",
	""2020-09"",
	""2020-10"",
	""2020-11"",
	""2020-12"",
	""2021-01"",
	""2021-02"",
	""2021-03"",
	""2021-04"",
	""2021-05"",
	""2021-06"",
	""2021-07"",
	""2021-08"",
	""2021-09"",
	""2021-10"",
	""2021-11"",
	""2021-12"",
	""2022-01"",
	""2022-02"",
	""2022-03"",
    ""2022-04"",
    ""2022-05""
) as

with all_revenue as
(
    select RECHARGE_SUBSCRIPTION_ID,
            RECURLY_SUBSCRIPTION_ID,
  
            case when RECHARGE_SUBSCRIPTION_ID is null then
                RECURLY_SUBSCRIPTION_ID
            else
                RECHARGE_SUBSCRIPTION_ID
            end as _subscription_id,

            min(charged_date) over (partition by _subscription_id) as first_charged_at,
            charged_date as charged_at,
            charged_amount,

            is_recharge_native,
            is_imported,
            is_recurly_native

    from
    (

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort
        -- left join
        join 
        (
            select to_varchar(s.uuid) as subscription_id,
                    -- a.adjustment_start_at as charged_date,
                    t.date as charged_date,
                    (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0)) as charged_amount
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and ifnull(charged_amount,0) > 0
        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))

        union all

        select *
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort
        -- left join 
        join
        (
            select to_varchar(s.id) as subscription_id, 
                    c.processed_at as charged_date, 
                    (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0)) as charged_amount
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and ifnull(charged_amount,0) > 0
        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        order by charged_date

    ) as a

)

-- fix names
select cohort_id, ""'2018-10'"" as ""2018-10"", ""'2018-11'"" as ""2018-11"", ""'2018-12'"" as ""2018-12"", ""'2019-01'"" as ""2019-01"", ""'2019-02'"" as ""2019-02"", ""'2019-03'"" as ""2019-03"", ""'2019-04'"" as ""2019-04"", ""'2019-05'"" as ""2019-05"", ""'2019-06'"" as ""2019-06"", ""'2019-07'"" as ""2019-07"", ""'2019-08'"" as ""2019-08"", ""'2019-09'"" as ""2019-09"", ""'2019-10'"" as ""2019-10"", ""'2019-11'"" as ""2019-11"", ""'2019-12'"" as ""2019-12"", ""'2020-01'"" as ""2020-01"", ""'2020-02'"" as ""2020-02"", ""'2020-03'"" as ""2020-03"", ""'2020-04'"" as ""2020-04"", ""'2020-05'"" as ""2020-05"", ""'2020-06'"" as ""2020-06"", ""'2020-07'"" as ""2020-07"", ""'2020-08'"" as ""2020-08"", ""'2020-09'"" as ""2020-09"", ""'2020-10'"" as ""2020-10"", ""'2020-11'"" as ""2020-11"", ""'2020-12'"" as ""2020-12"",
""'2021-01'"" as ""2021-01"", ""'2021-02'"" as ""2021-02"", ""'2021-03'"" as ""2021-03"", ""'2021-04'"" as ""2021-04"", ""'2021-05'"" as ""2021-05"", ""'2021-06'"" as ""2021-06"",""'2021-07'"" as ""2021-07"", ""'2021-08'"" as ""2021-08"", ""'2021-09'"" as ""2021-09"",""'2021-10'"" as ""2021-10"", ""'2021-11'"" as ""2021-11"", ""'2021-12'"" as ""2021-12"", ""'2022-01'"" as ""2022-01"", ""'2022-02'"" as ""2022-02"",""'2022-03'"" as ""2022-03"", ""'2022-04'"" as ""2022-04"",""'2022-05'"" as ""2022-05""
from
(

    select *
    from 
    (
        select left(first_charged_at, 7) as cohort_id, charged_amount, left(charged_at, 7) as charged_at_month
        from all_revenue
    ) as all_revenue_agg 
                    pivot (
                        sum(charged_amount) for charged_at_month in 
                        ('2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03','2022-04','2022-05')      
                    )
    order by cohort_id
)"
"V_CUSTOMER_KLAYVIO","create view v_customer_klayvio as

select a.email,
case when a.custom_consent like '%email%' then true else false end as Email_Opt_in, --accepts_marketing
case when a.custom_consent like '%mobile%' then true else false end as SMS_Opt_in,--accepts_marketing
M_open_date, M_click_date, M_received_date, e.open_rate, f.click_rate
from ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" as a
join
  (select p.email, e.type, to_date(max(e.datetime)) as M_open_date
  from ""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" as e
  join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" as p on p.id = e.person_id
  where e.type = 'Opened Email' /*and p.email = 'christascreative@gmail.com'*/
  group by p.email, e.type) b on b.email = a.email
 
  join
    (select p2.email, to_date(max(e2.datetime)) as M_click_date
     from ""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" as e2
     join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" as p2 on p2.id = e2.person_id
     where e2.type = 'Clicked Email' /*and p2.email = 'christascreative@gmail.com'*/
     group by p2.email) c on c.email = b.email
     
          join
            (select p3.email, to_date(max(e3.datetime)) as M_received_date
             from ""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" as e3
             join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" as p3 on p3.id = e3.person_id
             where e3.type = 'Received Email' /*and p3.email = 'christascreative@gmail.com'*/
             group by p3.email) d on d.email = c.email
                           
                            join
                                (select (opened.emails_opened/received.emails_received)*100 as open_rate, opened.email as email
                                  from (

                                     select email, count (distinct campaign_id) as emails_opened
                                      from (

                                          select distinct campaign_id, type, p.email
                                          from ""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" as e
                                          join ""MARKETING_DATABASE"".""KLAVIYO"".""CAMPAIGN"" as c
                                          on e.campaign_id = c.id
                                          join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" as p
                                          on p.id = e.person_id
                                          where /*p.email = 'christascreative@gmail.com' and*/ type = 'Opened Email'

                                          union

                                          select distinct flow_id, type, p.email
                                          from ""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" as e
                                          join ""MARKETING_DATABASE"".""KLAVIYO"".""FLOW"" as f
                                          on e.flow_id = f.id
                                          join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" as p
                                          on p.id = e.person_id
                                          where /*p.email = 'christascreative@gmail.com' and*/ type = 'Opened Email')
                                          group by email ) as opened

                                      join (

                                      select email, count (distinct campaign_id) as emails_received
                                      from (
                                      select distinct campaign_id, email
                                      from ""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" as e
                                      join ""MARKETING_DATABASE"".""KLAVIYO"".""CAMPAIGN"" as c
                                      on e.campaign_id = c.id
                                      join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" as p
                                      on p.id = e.person_id
                                      /*where p.email = 'christascreative@gmail.com'*/

                                        union

                                     select distinct flow_id, email
                                      from ""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" as e
                                      join ""MARKETING_DATABASE"".""KLAVIYO"".""FLOW"" as f
                                      on e.flow_id = f.id
                                      join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" as p
                                      on p.id = e.person_id
                                      /*where p.email = 'christascreative@gmail.com'*/ )
                                      group by email ) as received on received.email = opened.email
                                      ) as e on d.email = e.email
                                     
                                      join
                                     
                                        ( select (clicked.emails_clicked/received.emails_received)*100 as click_rate, clicked.email as email
                                            from (

                                           select email, count (distinct campaign_id) as emails_clicked
                                            from (

                                                select distinct campaign_id, type, p.email
                                                from ""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" as e
                                                join ""MARKETING_DATABASE"".""KLAVIYO"".""CAMPAIGN"" as c
                                                on e.campaign_id = c.id
                                                join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" as p
                                                on p.id = e.person_id
                                                where /*p.email = 'christascreative@gmail.com' and*/ type = 'Clicked Email'

                                                union

                                                select distinct flow_id, type, p.email
                                                from ""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" as e
                                                join ""MARKETING_DATABASE"".""KLAVIYO"".""FLOW"" as f
                                                on e.flow_id = f.id
                                                join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" as p
                                                on p.id = e.person_id
                                                where /*p.email = 'christascreative@gmail.com' and*/ type = 'Clicked Email')
                                                group by email ) as clicked

                                            join (

                                            select email, count (distinct campaign_id) as emails_received
                                            from (
                                            select distinct campaign_id, email
                                            from ""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" as e
                                            join ""MARKETING_DATABASE"".""KLAVIYO"".""CAMPAIGN"" as c
                                            on e.campaign_id = c.id
                                            join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" as p
                                            on p.id = e.person_id
                                            /*where p.email = 'christascreative@gmail.com'*/

                                              union

                                           select distinct flow_id, email
                                            from ""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" as e
                                            join ""MARKETING_DATABASE"".""KLAVIYO"".""FLOW"" as f
                                            on e.flow_id = f.id
                                            join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" as p
                                            on p.id = e.person_id
                                            /*where p.email = 'christascreative@gmail.com'*/ )
                                            group by email ) as received on received.email = clicked.email) as f on f.email = e.email"
"V_CUSTOMER_OCEANX_ORDERS","create view v_customer_oceanx_orders as 
 select o.order_date as Date,
            a.account_email as Email,
            a.account_code as AccountCode,
            'OCEANX' as DataSource,
            o.order_status as Action,
            'OCEANX.VW_RPT_ORDER' as SourceTableName, 
            'ORDER_NUMBER' as SourceColumnName, 
            to_varchar(o.order_number) as SourceTableID,
            to_varchar(o.order_status) as Delivery_status,
            to_varchar(o.shipto_address_1) as delivery_address,
            to_varchar(o.shipto_city) as delivery_city,
            to_varchar(o.shipto_state) as delivery_state,
           -- to_varchar(min(o.ship_date)) as first_shipdate,
            --to_varchar(max(o.ship_date)) as last_shipdate,
            to_varchar(o.tracking_number) as tracking_number,
            to_varchar(o.product_name) as product_name,
            to_varchar(o.order_ship_amt) as shipping_cost
           
            /* missing - current_delivery_status, packages, returned */
      from ""MARKETING_DATABASE"".""OCEANX"".""VW_RPT_ORDER"" o
      join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS"" as a on a.ACCOUNT_EMAIL = o.EMAIL_ADDRESS"
"V_CUSTOMER_OCEANX_RETURNS","create view v_customer_oceanx_returns as

select distinct r.RETURN_DATE as Date,
                  a.account_email as Email,
                  a.account_code as AccountCode,
                  'OCEANX' as DataSource,
                  o.order_status as Action,
                  'OCEANX.VW_RPT_RETURN' as SourceTableName, 
                  'ORDER_NUMBER' as SourceColumnName, 
                  to_varchar(o.order_number) as SourceTableID,
                  to_varchar(r.RETURN_REASON_CODE) as MiscData1,
                  to_varchar(r.RETURN_REASON_DESC) as MiscData2,
                  to_varchar(r.WAREHOUSE_ID) as MiscData3,
                  to_varchar(r.PRODUCT_CODE) as MiscData4
      from ""MARKETING_DATABASE"".""OCEANX"".""VW_RPT_RETURN"" as r
      join ""MARKETING_DATABASE"".""OCEANX"".""VW_RPT_ORDER"" o on o.ORDER_NUMBER = r.ORDER_NUMBER
      join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS"" as a on a.ACCOUNT_EMAIL = o.EMAIL_ADDRESS"
"V_DAILYGROWTHTRACKER_DS_01_V_01","create or replace view MARKETING_DATABASE.PUBLIC.V_DAILYGROWTHTRACKER_DS_01_V_01(
	DAY,
	GAIN,
	LOSS,
	NET,
	TOTAL_ACTIVE,
	TOTAL_ACTIVE_INTERNATIONAL,
	TOTAL_ACTIVE_INTERNATIONAL_3MO_REFILL,
	TOTAL_ACTIVE_GIFTKITS,
	TOTAL_ACTIVE_GIFTCREDITS,
	TOTAL_ACTIVE_PREORDERS,
	TRAILING_30_DAY_GAIN,
	TRAILING_30_DAY_LOSS,
	GAIN_INTERNATIONAL,
	LOSS_INTERNATIONAL,
	NET_INTERNATIONAL,
	GAIN_INTERNATIONAL_3MO_REFILL,
	LOSS_INTERNATIONAL_3MO_REFILL,
	NET_INTERNATIONAL_3MO_REFILL,
	GAIN_GIFTKITS,
	LOSS_GIFTKITS,
	NET_GIFTKITS,
	GAIN_GIFTCREDITS,
	LOSS_GIFTCREDITS,
	NET_GIFTCREDITS,
	GAIN_PREORDERS,
	LOSS_PREORDERS,
	NET_PREORDERS,
	TAX_AMOUNT,
	SHIPPING_AMOUNT,
	TOTAL_DISCOUNT_AMOUNT,
	TOTAL_CHARGE_QUANTITY,
	TOTAL_SUBSCRIPTION_QUANTITY,
	AOV,
	PRICE_TOTAL,
	TOTAL_GIFTKIT_SUBSCRIPTION_QUANTITY,
	TOTAL_GIFTCREDIT_SUBSCRIPTION_QUANTITY,
	REFILL_COGS,
	WELCOME_KIT_COGS,
	GROSS_SALES,
	NET_SALES,
	CREDIT_APPLIED
) as

      -- REVENUE UNION
      with revenue as
      (

        select rev.day,
              sum(total_tax) as tax_amount,
              sum(shipping_amount) as shipping_amount,
              sum(total_discount_amount) as total_discount_amount,
              sum(total_charge_quantity) as total_charge_quantity,
              sum(total_subscription_quantity) as total_subscription_quantity,
              zeroifnull(sum(rev.price_total) - sum(rev.total_tax)) / sum(total_charge_quantity) as aov,
              sum(price_total) as price_total,
              sum(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
              sum(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity,  
              sum(zeroifnull(manual.refill_cogs)) as refill_cogs,
              sum(zeroifnull(manual.welcome_kit_cogs)) as welcome_kit_cogs,
              zeroifnull(sum(rev.price_total) - sum(rev.total_tax) - sum(rev.shipping_amount) + sum(rev.total_discount_amount) + sum(rev.credit_applied)) as gross_sales,
              zeroifnull(sum(rev.price_total) - sum(rev.total_tax)) as net_sales,
              sum(credit_applied) as credit_applied

          from 
          (

                -- ***** START - RECHARGE Daily Revenue ***** --      
                select charges.day,
                        charges.total_price as price_total, 
                        charges.total_discounts as total_discount_amount, 
                        charges.total_charge_quantity as total_charge_quantity,
                        0 as credit_applied,
                        charge_lines.total_subscription_quantity as total_subscription_quantity, 
                        charge_lines.total_tax as total_tax,
                        zeroifnull(charge_shipping.shipping_amount) as shipping_amount,
                        zeroifnull(charge_giftcredit.total_subscription_quantity) as total_giftcredit_subscription_quantity,
                        zeroifnull(charge_giftkit.total_subscription_quantity) as total_giftkit_subscription_quantity         
                from
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(c.total_price) as total_price, sum(c.total_discounts) as total_discounts, count(*) as total_charge_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    -- Do not exclude charges where status != SUCCESS  (where c.status = 'SUCCESS')
                    group by day
                ) as charges
                join 
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity,
                            sum(c.total_tax) as total_tax
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    group by day
                ) as charge_lines on charge_lines.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(csl.price) as shipping_amount
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c                
                    left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id        
                    group by day
                ) as charge_shipping on charge_shipping.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    where cli.title ilike '%gift kit%'
                    group by day
                ) as charge_giftkit on charge_giftkit.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    where cli.title ilike '%Gift Credit%'
                    group by day
                ) as charge_giftcredit on charge_giftcredit.day = charges.day
                -- ***** END - RECHARGE Daily Revenue ***** --      

                union all 
            
                -- ***** START - RECURLY Daily Revenue ***** --  
                select charge_level_revenue.day, 
                        price_total as price_total, 
                        total_discount_amount as total_discount_amount, 
                        total_charge_quantity as total_charge_quantity,
                        credit_applied as credit_applied,
                        total_subscription_quantity as total_subscription_quantity,    
                        tax_amount as total_tax,
                        zeroifnull(shipping_amount) as shipping_amount,
                        zeroifnull(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
                        zeroifnull(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity
                from
                (
                  
                    select nonship_adj.day as day,
                        nonship_adj.tax as tax_amount,
                        shipping_adj.shipping as shipping_amount,
                        credit.credit_amount as credit_applied,
                        nonship_adj.discount_amount as total_discount_amount,
                        nonship_adj.total_charges as total_charge_quantity,
                        nonship_adj.quantity as total_subscription_quantity,
                        nonship_adj.total_price as price_total,
                        nonship_adj.total_price - nonship_adj.tax - shipping_adj.shipping + nonship_adj.discount_amount as gross_revenue
                    from
                    (
                        select to_date(t.date) as day,
                                sum(adjustment_discount) as discount_amount,
                                sum(t.tax_amount) as tax,
                                sum(adjustment_total) as adj_total_price,
                                sum(t.amount) as total_price,  
                                sum(adjustment_quantity) as quantity,
                                count(*) as total_charges
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and adjustment_description not ilike '%shipping%'
                            and (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
                        group by day
                        order by day

                    ) as nonship_adj 
                    left join
                    ( 

                        -- Shipping totals will NEVER match up to DGT
                        select to_date(t.date) as day,
                            sum(adjustment_total) as shipping
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and  adjustment_description ilike '%shipping%'
                            and (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
                        group by day
                        order by day  

                    ) as shipping_adj on nonship_adj.day = shipping_adj.day
                    
                    left join
                    (	--- Credit amount applied date
	                    select to_date(t.date) as day ,
	                    sum(c.amount) as credit_amount
	                      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""CREDIT_PAYMENTS"" as c 
                          join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on c.applied_to_invoice_number = i.invoice_number 
                          join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t on t.invoice_id = i.id
                          left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
	                      where action != 'write_off' 
                                and (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
	                      group by day
                      
                    ) as credit on nonship_adj.day = credit.day
                    order by nonship_adj.day
                ) as charge_level_revenue
                left join 
                (
                    select to_date(i.closed_at) as day, 
                          sum(a.adjustment_quantity) as total_giftkit_subscription_quantity
                    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                    where i.status in ('paid')
                    and i.invoice_doc_type in ('charge') 
                    and adjustment_description = 'Gift Kit Holiday 2020'
                    group by day 
                ) as charge_level_revenue_giftkit 
                  on charge_level_revenue_giftkit.day = charge_level_revenue.day
                left join 
                (
                    select to_date(i.closed_at) as day, 
                          sum(a.adjustment_quantity) as total_giftcredit_subscription_quantity
                    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                    where i.status in ('paid')
                    and i.invoice_doc_type in ('charge') 
                    and adjustment_description = 'GIFT_CREDIT_PLACEHOLDER'            
                    group by day 
                ) as charge_level_revenue_giftcredit
                  on charge_level_revenue_giftcredit.day = charge_level_revenue.day
                -- ***** END - RECURLY Daily Revenue ***** -- 

          ) as rev
          left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = rev.day
          group by rev.day
          order by rev.day
        
      ), 
      
      gainlossnet as -- GAIN LOSS JOIN
      (

          select gain.dt as day, 
                  zeroifnull(gain.total_subscribers_gained) as total_subscribers_gained, 
                  zeroifnull(loss.total_subscribers_lost) total_subscribers_lost,   
                  zeroifnull(gain.total_subscriptions_gained) as gain,
                  zeroifnull(loss.total_subscriptions_lost) as loss,
                  zeroifnull(gain.total_subscriptions_gained) - zeroifnull(loss.total_subscriptions_lost) as net,

                  -- _international
                  zeroifnull(gain.total_subscriptions_gained_international) as gain_international,
                  zeroifnull(loss.total_subscriptions_lost_international) as loss_international,
                  zeroifnull(gain.total_subscriptions_gained_international) - zeroifnull(loss.total_subscriptions_lost_international) as net_international,

                  -- _international_3mo_refill
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) as gain_international_3mo_refill,
                  zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as loss_international_3mo_refill,
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) - zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as net_international_3mo_refill,

                  -- _giftkits
                  zeroifnull(gain.total_subscriptions_gained_giftkits) as gain_giftkits,
                  zeroifnull(loss.total_subscriptions_lost_giftkits) as loss_giftkits,
                  zeroifnull(gain.total_subscriptions_gained_giftkits) - zeroifnull(loss.total_subscriptions_lost_giftkits) as net_giftkits,

                  -- _giftcredits
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) as gain_giftcredits,
                  zeroifnull(loss.total_subscriptions_lost_giftcredits) as loss_giftcredits,
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) - zeroifnull(loss.total_subscriptions_lost_giftcredits) as net_giftcredits,

                  -- _preorders
                  zeroifnull(gain.total_subscriptions_gained_preorders) as gain_preorders,
                  zeroifnull(loss.total_subscriptions_lost_preorders) as loss_preorders,
                  zeroifnull(gain.total_subscriptions_gained_preorders) - zeroifnull(loss.total_subscriptions_lost_preorders) as net_preorders

          from
          (

                with subscription_breakdowns as 
                (

                    select 
                        -- only perform timezone offset subscriptions created within recharge
                        case 
                          when is_recharge_native = 1 then to_date(dateadd(hour, -4, map.created_at))
                          when is_imported = 1 then to_date(dateadd(hour, -4, map.created_at))
                          else to_date(map.created_at) end
                        as dt,
                        count(*) as total_subscribers_gained, 
                        sum(quantity) as total_subscriptions_gained,
                        is_international,
                        sku,
                        is_preorder
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as map
                    group by dt, is_international, sku, is_preorder
                    order by dt
                )            
            

                -- **************************************************
                -- BREAKDOWNS: Create aggregation + join for each breakdown
                -- **************************************************      
                select total.dt, total_subscribers_gained, total_subscriptions_gained, 
                        total_subscribers_gained_international, total_subscriptions_gained_international,
                        total_subscribers_gained_international_3mo_refill, total_subscriptions_gained_international_3mo_refill,
                        total_subscribers_gained_giftkits, total_subscriptions_gained_giftkits,
                        total_subscribers_gained_giftcredits, total_subscriptions_gained_giftcredits,
                        total_subscribers_gained_preorders, total_subscriptions_gained_preorders
                from
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained, sum(total_subscriptions_gained) as total_subscriptions_gained
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international, sum(total_subscriptions_gained) as total_subscriptions_gained_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international_3mo_refill, sum(total_subscriptions_gained) as total_subscriptions_gained_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftkits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftcredits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_preorders, sum(total_subscriptions_gained) as total_subscriptions_gained_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt


          ) as gain
          left join
          (

                with subscription_breakdowns as 
                (
                    select 
                          -- only perform timezone offset on subscriptions cancelled within recharge, not on recurly
                          case
                            when is_recharge_native = 1 and is_imported = 0 then to_date(dateadd(hour, -4, map.cancelled_at))
                            when is_imported = 1 then to_date(map.cancelled_at)
                            else to_date(map.cancelled_at)
                          end as dt,
                          count(*) as total_subscribers_lost, 
                          sum(quantity) as total_subscriptions_lost,
                          is_international,
                          sku,
                          is_preorder
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as map
                    where map.cancelled_at is not null
                    group by dt, is_international, sku, is_preorder
                    order by dt           
                )             
            
                -- **************************************************
                -- BREAKDOWNS: Create aggregation for each breakdown
                -- **************************************************    
                select total.dt, total_subscribers_lost, total_subscriptions_lost, 
                        total_subscribers_lost_international, total_subscriptions_lost_international,
                        total_subscribers_lost_international_3mo_refill, total_subscriptions_lost_international_3mo_refill,
                        total_subscribers_lost_giftkits, total_subscriptions_lost_giftkits,
                        total_subscribers_lost_giftcredits, total_subscriptions_lost_giftcredits,
                        total_subscribers_lost_preorders, total_subscriptions_lost_preorders
                from
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost, sum(total_subscriptions_lost) as total_subscriptions_lost
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international, sum(total_subscriptions_lost) as total_subscriptions_lost_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt          
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international_3mo_refill, sum(total_subscriptions_lost) as total_subscriptions_lost_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftkits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftcredits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_preorders, sum(total_subscriptions_lost) as total_subscriptions_lost_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt


          ) as loss 
          on gain.dt = loss.dt
          order by gain.dt  

      ),
      spend as
      (

          with facebook as
          (

              select day, sum(spend) as fb_spend
              from
              (
                  select distinct fb.date as day, fb.CAMPAIGN_NAME, fb.spend-- , fba.value as conversions
                  from ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS"" fb
                  -- **** if we need conversions, this is the correct pixel name          
                  -- left join ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS_ACTIONS"" fba on fba.date = fb.date
                  -- where fba.action_type in ('offsite_conversion.fb_pixel_purchase')
              )
              group by day
          ),
          adwords as
          (
              select date as day, sum(cost) as gaw_spend
              from ""MARKETING_DATABASE"".""ADWORDS"".""ADWORDS_CAMPAIGN_STATS"" gaw
              group by day    
          )

          select case when fb.day is null then aw.day else fb.day end as day, 
            fb_spend as fb_spend,
            gaw_spend as gaw_spend
          from facebook as fb
          left join adwords as aw on fb.day = aw.day
          order by day

      )

      -- Final ratios, calcs, and aggregations

      /*
      select gainlossnet_agg.day,
          revenue.*,
          sum(revenue.total_subscription_quantity) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_total_orders,
          sum(revenue.net_revenue) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_net_revenue,
          -- sum(revenue.total_discounts) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_discounts,
          sum(revenue.total_discount_amount) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_discounts,
          trailing_30_discounts / gainlossnet_agg.trailing_30_day_gain as trailing_30_avg_discount_per_checkout,

          gainlossnet_agg.*,
          gainlossnet_agg.total_active_international / gainlossnet_agg.total_active as percent_international,
          gainlossnet_agg.total_active_international_3mo_refill / gainlossnet_agg.total_active as percent_stp_3mo_refill,    
          sum(gainlossnet_agg.total_active) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_active_subs,
          avg(gainlossnet_agg.total_active) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_average_active_subs,
          gainlossnet_agg.trailing_30_day_loss / trailing_30_day_average_active_subs as trailing_30_day_churn,
          gainlossnet_agg.trailing_30_day_gain / trailing_30_day_active_subs as trailing_30_day_percent_recurring_subscriptions,

          spend.fb_spend,
          spend.fb_conversions,
          sum(spend.fb_conversions) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_fb_conversions,
          spend.gaw_spend,
          spend.gaw_conversions,
          sum(spend.gaw_conversions) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_gaw_conversions,

          manual.*,
          (zeroifnull(spend.fb_spend) + 
              zeroifnull(spend.gaw_spend) +     
              zeroifnull(manual.Other_Ads) +
              zeroifnull(manual.Partnerships) +
              zeroifnull(manual.Affiliates) +
              zeroifnull(manual.Share_a_Sale) +
              zeroifnull(manual.Growth_Agencies) +
              zeroifnull(manual.Growth_Consultants) +
              zeroifnull(manual.Partnerships_Agencies) +
              zeroifnull(manual.Partnerships_Consultants) +
              zeroifnull(manual.Brand_Expenses)) as total_spend,
          sum(total_spend) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_spend,
          (zeroifnull(spend.fb_spend) + 
              zeroifnull(spend.gaw_spend) +     
              zeroifnull(manual.Other_Ads) +
              zeroifnull(manual.Partnerships) +
              zeroifnull(manual.Affiliates)) /  gainlossnet_agg.gain as cpa,
          sum(cpa) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_cpa,
          total_spend / trailing_30_net_revenue as spend_as_percent_of_trailing_30_net_revenue,
          (total_spend + total_discount_amount) / gain as cac,
          sum(cac) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_cac,
          (trailing_30_net_revenue - trailing_30_discounts) / trailing_30_day_average_active_subs as trailing_30_day_grps,
          case when zeroifnull(trailing_30_day_churn) = 0 then null else trailing_30_day_grps / trailing_30_day_churn end as trailing_30_day_ltr,
          case when manual.refill_cogs is not null then manual.refill_cogs else lag(manual.refill_cogs) ignore nulls over (order by gainlossnet_agg.day asc) end as refill_cogs_last,
          case when manual.welcome_kit_cogs is not null then manual.welcome_kit_cogs else lag(manual.welcome_kit_cogs) ignore nulls over (order by gainlossnet_agg.day asc) end as welcome_kit_cogs_last,    
          case when zeroifnull(trailing_30_day_cpa) = 0 then -999 else trailing_30_day_LTR / trailing_30_day_cpa end as trailing_30_day_LTR_to_CPA,
          case when zeroifnull(trailing_30_day_cac) = 0 then -999 else trailing_30_day_LTR / trailing_30_day_cac end as trailing_30_day_LTR_to_CAC,
          (net_revenue - total_discount_amount) / total_active as arpu,
          sum(arpu) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_arpu,


          case when zeroifnull(trailing_30_day_churn) = 0 then -999 else
              ( 
                  trailing_30_day_arpu
                  * 
                  (
                      (
                            (49.99 / (trailing_30_day_churn * -1.0)) 
                            - 
                            (
                                (refill_cogs_last) / (trailing_30_day_churn * -1.0)
                            )
                            + 
                            (refill_cogs_last) - (welcome_kit_cogs_last)
                      )
                      / 
                      (
                         49.99
                         /
                         (trailing_30_day_churn * -1.0)
                      )
                  )
              )
              /
              (trailing_30_day_churn * -1.0) 
          end as trailing_30_day_ltv,
          case when zeroifnull(trailing_30_day_cpa) = 0 then -999 else trailing_30_day_ltv / trailing_30_day_cpa end as trailing_30_day_ltv_to_cpa,
          case when zeroifnull(trailing_30_day_cac) = 0 then -999 else trailing_30_day_ltv / trailing_30_day_cac end as trailing_30_day_ltv_to_cac
          -- sum(arpu) over (order by gainlossnet_agg.day asc rows between 60 preceding and 30 preceding) as trailing_30_60_day_arpu   
          -- sum(revenue) over (order by date asc rows between 59 preceding and 30 preceding) as trailing_30to60_revenue
          */


      select gainlossnet_agg.DAY,
          gainlossnet_agg.GAIN,
          gainlossnet_agg.LOSS,
          gainlossnet_agg.NET,
          gainlossnet_agg.TOTAL_ACTIVE,
          gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL,
          gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.TOTAL_ACTIVE_GIFTKITS,
          gainlossnet_agg.TOTAL_ACTIVE_GIFTCREDITS,
          gainlossnet_agg.TOTAL_ACTIVE_PREORDERS,
          gainlossnet_agg.TRAILING_30_DAY_GAIN,
          gainlossnet_agg.TRAILING_30_DAY_LOSS,
          gainlossnet_agg.GAIN_INTERNATIONAL,
          gainlossnet_agg.LOSS_INTERNATIONAL,
          gainlossnet_agg.NET_INTERNATIONAL,
          gainlossnet_agg.GAIN_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.LOSS_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.NET_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.GAIN_GIFTKITS,
          gainlossnet_agg.LOSS_GIFTKITS,
          gainlossnet_agg.NET_GIFTKITS,
          gainlossnet_agg.GAIN_GIFTCREDITS,
          gainlossnet_agg.LOSS_GIFTCREDITS,
          gainlossnet_agg.NET_GIFTCREDITS,
          gainlossnet_agg.GAIN_PREORDERS,
          gainlossnet_agg.LOSS_PREORDERS,
          gainlossnet_agg.NET_PREORDERS,

          revenue.TAX_AMOUNT,
          revenue.SHIPPING_AMOUNT,
          revenue.TOTAL_DISCOUNT_AMOUNT,
          revenue.TOTAL_CHARGE_QUANTITY,
          revenue.TOTAL_SUBSCRIPTION_QUANTITY,
          revenue.AOV,
          revenue.PRICE_TOTAL,
          revenue.TOTAL_GIFTKIT_SUBSCRIPTION_QUANTITY,
          revenue.TOTAL_GIFTCREDIT_SUBSCRIPTION_QUANTITY,
          revenue.REFILL_COGS,
          revenue.WELCOME_KIT_COGS,
          revenue.GROSS_SALES,
          revenue.NET_SALES,
          revenue.CREDIT_APPLIED
                  

      from
      (
          select day, gain, loss, net,
                  sum(net) over (order by day asc rows between unbounded preceding and current row) as total_active,
                  sum(net_international) over (order by day asc rows between unbounded preceding and current row) as total_active_international,
                  sum(net_international_3mo_refill) over (order by day asc rows between unbounded preceding and current row) as total_active_international_3mo_refill,
                  sum(net_giftkits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftkits,
                  sum(net_giftcredits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftcredits,  
                  sum(net_preorders) over (order by day asc rows between unbounded preceding and current row) as total_active_preorders,  

                  sum(gain) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_gain,        
                  sum(loss) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_loss,

                  gain_international,
                  loss_international,
                  net_international,
                  gain_international_3mo_refill,
                  loss_international_3mo_refill,
                  net_international_3mo_refill,
                  gain_giftkits,
                  loss_giftkits,
                  net_giftkits,
                  gain_giftcredits,
                  loss_giftcredits,
                  net_giftcredits,
                  gain_preorders,
                  loss_preorders,
                  net_preorders

          from gainlossnet
      ) as gainlossnet_agg
      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = gainlossnet_agg.day
      left join revenue on revenue.day = gainlossnet_agg.day
      left join spend on spend.day = gainlossnet_agg.day
      /*where (gainlossnet_agg.day between '2020-07-01' and '2020-07-31'
               or
             gainlossnet_agg.day between '2020-12-01' and '2020-12-30')*/
      order by gainlossnet_agg.day asc;"
"V_DAILYGROWTHTRACKER_PDS_01_V_01","create or replace view MARKETING_DATABASE.PUBLIC.V_DAILYGROWTHTRACKER_PDS_01_V_01(
	DAY,
	GAIN,
	LOSS,
	NET,
	TOTAL_ACTIVE,
	TOTAL_ACTIVE_INTERNATIONAL,
	TOTAL_ACTIVE_INTERNATIONAL_3MO_REFILL,
	TOTAL_ACTIVE_GIFTKITS,
	TOTAL_ACTIVE_GIFTCREDITS,
	TOTAL_ACTIVE_PREORDERS,
	TRAILING_30_DAY_GAIN,
	TRAILING_30_DAY_LOSS,
	GAIN_INTERNATIONAL,
	LOSS_INTERNATIONAL,
	NET_INTERNATIONAL,
	GAIN_INTERNATIONAL_3MO_REFILL,
	LOSS_INTERNATIONAL_3MO_REFILL,
	NET_INTERNATIONAL_3MO_REFILL,
	GAIN_GIFTKITS,
	LOSS_GIFTKITS,
	NET_GIFTKITS,
	GAIN_GIFTCREDITS,
	LOSS_GIFTCREDITS,
	NET_GIFTCREDITS,
	GAIN_PREORDERS,
	LOSS_PREORDERS,
	NET_PREORDERS,
	TAX_AMOUNT,
	SHIPPING_AMOUNT,
	TOTAL_DISCOUNT_AMOUNT,
	TOTAL_CHARGE_QUANTITY,
	TOTAL_SUBSCRIPTION_QUANTITY,
	AOV,
	PRICE_TOTAL,
	TOTAL_GIFTKIT_SUBSCRIPTION_QUANTITY,
	TOTAL_GIFTCREDIT_SUBSCRIPTION_QUANTITY,
	REFILL_COGS,
	WELCOME_KIT_COGS,
	GROSS_SALES,
	NET_SALES,
	CREDIT_APPLIED
) as

      -- REVENUE UNION
      with revenue as
      (

        select rev.day,
              sum(total_tax) as tax_amount,
              sum(shipping_amount) as shipping_amount,
              sum(total_discount_amount) as total_discount_amount,
              sum(total_charge_quantity) as total_charge_quantity,
              sum(total_subscription_quantity) as total_subscription_quantity,
              zeroifnull(sum(rev.price_total) - sum(rev.total_tax)) / sum(total_charge_quantity) as aov,
              sum(price_total) as price_total,
              sum(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
              sum(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity,  
              sum(zeroifnull(manual.refill_cogs)) as refill_cogs,
              sum(zeroifnull(manual.welcome_kit_cogs)) as welcome_kit_cogs,
              zeroifnull(sum(rev.price_total)) - zeroifnull(sum(rev.total_tax)) - zeroifnull(sum(rev.shipping_amount)) + zeroifnull(sum(rev.total_discount_amount)) + zeroifnull(sum(rev.credit_applied)) as gross_sales,
              zeroifnull(sum(rev.price_total)) - zeroifnull(sum(rev.total_tax)) as net_sales,
              zeroifnull(sum(credit_applied)) as credit_applied

          from 
          (
                -- ***** START - RECURLY Daily Revenue ***** --  
                select charge_level_revenue.day, 
                        price_total as price_total, 
                        total_discount_amount as total_discount_amount, 
                        total_charge_quantity as total_charge_quantity,
                        credit_applied as credit_applied,
                        total_subscription_quantity as total_subscription_quantity,    
                        tax_amount as total_tax,
                        zeroifnull(shipping_amount) as shipping_amount,
                        zeroifnull(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
                        zeroifnull(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity
                from
                (
                    select nonship_adj.day as day,
                        nonship_adj.tax as tax_amount,
                        shipping_adj.shipping as shipping_amount,
                        credit.credit_amount as credit_applied,
                        nonship_adj.discount_amount as total_discount_amount,
                        nonship_adj.total_charges as total_charge_quantity,
                        nonship_adj.quantity as total_subscription_quantity,
                        nonship_adj.total_price as price_total
                    from
                    (
                        select to_date(t.date) as day,
                                sum(adjustment_discount) as discount_amount,
                                sum(t.tax_amount) as tax,
                                sum(adjustment_total) as adj_total_price,
                                sum(t.amount) as total_price,  
                                sum(adjustment_quantity) as quantity,
                                count(*) as total_charges
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and adjustment_description not ilike '%shipping%'
                            and (s.plan_name ilike '%PDS-08%' or s.plan_name ilike 'Pediatric Daily Synbiotic%')
                        group by day
                        order by day

                    ) as nonship_adj 
                    left join
                    ( 

                        -- Shipping totals will NEVER match up to DGT
                        select to_date(t.date) as day,
                            sum(adjustment_total) as shipping
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and  adjustment_description ilike '%shipping%'
                            and (s.plan_name ilike '%PDS-08%' or s.plan_name ilike 'Pediatric Daily Synbiotic%')
                        group by day
                        order by day  

                    ) as shipping_adj on nonship_adj.day = shipping_adj.day
                    
                    left join
                    (	--- Credit amount applied date
	                    select to_date(t.date) as day ,
	                    sum(c.amount) as credit_amount
	                      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""CREDIT_PAYMENTS"" as c 
                          join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on c.applied_to_invoice_number = i.invoice_number 
                          join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t on t.invoice_id = i.id
                          left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
	                      where action != 'write_off' 
                                and (s.plan_name ilike '%PDS-08%' or s.plan_name ilike 'Pediatric Daily Synbiotic%')
	                      group by day
                      
                    ) as credit on nonship_adj.day = credit.day
                    order by nonship_adj.day
                ) as charge_level_revenue
                left join 
                (
                    select to_date(i.closed_at) as day, 
                          sum(a.adjustment_quantity) as total_giftkit_subscription_quantity
                    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                    left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on a.subscription_id = s.uuid
                    where i.status in ('paid')
                    and i.invoice_doc_type in ('charge') 
                    and adjustment_description = 'Gift Kit Holiday 2020'
                    and (s.plan_name ilike '%PDS-08%' or s.plan_name ilike 'Pediatric Daily Synbiotic%')
                    group by day 
                ) as charge_level_revenue_giftkit 
                  on charge_level_revenue_giftkit.day = charge_level_revenue.day
                left join 
                (
                    select to_date(i.closed_at) as day, 
                          sum(a.adjustment_quantity) as total_giftcredit_subscription_quantity
                    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                    left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on a.subscription_id = s.uuid
                    where i.status in ('paid')
                    and i.invoice_doc_type in ('charge') 
                    and adjustment_description = 'GIFT_CREDIT_PLACEHOLDER'
                    and (s.plan_name ilike '%PDS-08%' or s.plan_name ilike 'Pediatric Daily Synbiotic%')
                    group by day 
                ) as charge_level_revenue_giftcredit
                  on charge_level_revenue_giftcredit.day = charge_level_revenue.day
                -- ***** END - RECURLY Daily Revenue ***** -- 

          ) as rev
          left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = rev.day
          group by rev.day
          order by rev.day
        
      ), 
      
      gainlossnet as -- GAIN LOSS JOIN
      (

          select gain.dt as day, 
                  zeroifnull(gain.total_subscribers_gained) as total_subscribers_gained, 
                  zeroifnull(loss.total_subscribers_lost) total_subscribers_lost,   
                  zeroifnull(gain.total_subscriptions_gained) as gain,
                  zeroifnull(loss.total_subscriptions_lost) as loss,
                  zeroifnull(gain.total_subscriptions_gained) - zeroifnull(loss.total_subscriptions_lost) as net,

                  -- _international
                  zeroifnull(gain.total_subscriptions_gained_international) as gain_international,
                  zeroifnull(loss.total_subscriptions_lost_international) as loss_international,
                  zeroifnull(gain.total_subscriptions_gained_international) - zeroifnull(loss.total_subscriptions_lost_international) as net_international,

                  -- _international_3mo_refill
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) as gain_international_3mo_refill,
                  zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as loss_international_3mo_refill,
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) - zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as net_international_3mo_refill,

                  -- _giftkits
                  zeroifnull(gain.total_subscriptions_gained_giftkits) as gain_giftkits,
                  zeroifnull(loss.total_subscriptions_lost_giftkits) as loss_giftkits,
                  zeroifnull(gain.total_subscriptions_gained_giftkits) - zeroifnull(loss.total_subscriptions_lost_giftkits) as net_giftkits,

                  -- _giftcredits
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) as gain_giftcredits,
                  zeroifnull(loss.total_subscriptions_lost_giftcredits) as loss_giftcredits,
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) - zeroifnull(loss.total_subscriptions_lost_giftcredits) as net_giftcredits,

                  -- _preorders
                  zeroifnull(gain.total_subscriptions_gained_preorders) as gain_preorders,
                  zeroifnull(loss.total_subscriptions_lost_preorders) as loss_preorders,
                  zeroifnull(gain.total_subscriptions_gained_preorders) - zeroifnull(loss.total_subscriptions_lost_preorders) as net_preorders

          from
          (

                with subscription_breakdowns as 
                (

                    select 
                        -- only perform timezone offset subscriptions created within recharge
                        to_date(created_at) as dt,
                        count(*) as total_subscribers_gained, 
                        sum(quantity) as total_subscriptions_gained,
                        is_international,
                        sku,
                        is_preorder
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_PDS_08""
                    group by dt, is_international, sku, is_preorder
                    order by dt
                )            
            

                -- **************************************************
                -- BREAKDOWNS: Create aggregation + join for each breakdown
                -- **************************************************      
                select total.dt, total_subscribers_gained, total_subscriptions_gained, 
                        total_subscribers_gained_international, total_subscriptions_gained_international,
                        total_subscribers_gained_international_3mo_refill, total_subscriptions_gained_international_3mo_refill,
                        total_subscribers_gained_giftkits, total_subscriptions_gained_giftkits,
                        total_subscribers_gained_giftcredits, total_subscriptions_gained_giftcredits,
                        total_subscribers_gained_preorders, total_subscriptions_gained_preorders
                from
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained, sum(total_subscriptions_gained) as total_subscriptions_gained
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international, sum(total_subscriptions_gained) as total_subscriptions_gained_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international_3mo_refill, sum(total_subscriptions_gained) as total_subscriptions_gained_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftkits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftcredits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_preorders, sum(total_subscriptions_gained) as total_subscriptions_gained_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt


          ) as gain
          left join
          (

                with subscription_breakdowns as 
                (

                    select 
                          -- only perform timezone offset on subscriptions cancelled within recharge, not on recurly
                          to_date(cancelled_at) as dt,
                          count(*) as total_subscribers_lost, 
                          sum(quantity) as total_subscriptions_lost,
                          is_international,
                          sku,
                          is_preorder
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_PDS_08"" as map
                    where map.cancelled_at is not null
                    group by dt, is_international, sku, is_preorder
                    order by dt
                )               
            
                -- **************************************************
                -- BREAKDOWNS: Create aggregation for each breakdown
                -- **************************************************    
                select total.dt, total_subscribers_lost, total_subscriptions_lost, 
                        total_subscribers_lost_international, total_subscriptions_lost_international,
                        total_subscribers_lost_international_3mo_refill, total_subscriptions_lost_international_3mo_refill,
                        total_subscribers_lost_giftkits, total_subscriptions_lost_giftkits,
                        total_subscribers_lost_giftcredits, total_subscriptions_lost_giftcredits,
                        total_subscribers_lost_preorders, total_subscriptions_lost_preorders
                from
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost, sum(total_subscriptions_lost) as total_subscriptions_lost
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international, sum(total_subscriptions_lost) as total_subscriptions_lost_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt          
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international_3mo_refill, sum(total_subscriptions_lost) as total_subscriptions_lost_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftkits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftcredits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_preorders, sum(total_subscriptions_lost) as total_subscriptions_lost_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt


          ) as loss 
          on gain.dt = loss.dt
          order by gain.dt  

      )
      
      select gainlossnet_agg.DAY,
          gainlossnet_agg.GAIN,
          gainlossnet_agg.LOSS,
          gainlossnet_agg.NET,
          gainlossnet_agg.TOTAL_ACTIVE,
          gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL,
          gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.TOTAL_ACTIVE_GIFTKITS,
          gainlossnet_agg.TOTAL_ACTIVE_GIFTCREDITS,
          gainlossnet_agg.TOTAL_ACTIVE_PREORDERS,
          gainlossnet_agg.TRAILING_30_DAY_GAIN,
          gainlossnet_agg.TRAILING_30_DAY_LOSS,
          gainlossnet_agg.GAIN_INTERNATIONAL,
          gainlossnet_agg.LOSS_INTERNATIONAL,
          gainlossnet_agg.NET_INTERNATIONAL,
          gainlossnet_agg.GAIN_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.LOSS_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.NET_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.GAIN_GIFTKITS,
          gainlossnet_agg.LOSS_GIFTKITS,
          gainlossnet_agg.NET_GIFTKITS,
          gainlossnet_agg.GAIN_GIFTCREDITS,
          gainlossnet_agg.LOSS_GIFTCREDITS,
          gainlossnet_agg.NET_GIFTCREDITS,
          gainlossnet_agg.GAIN_PREORDERS,
          gainlossnet_agg.LOSS_PREORDERS,
          gainlossnet_agg.NET_PREORDERS,

          revenue.TAX_AMOUNT,
          revenue.SHIPPING_AMOUNT,
          revenue.TOTAL_DISCOUNT_AMOUNT,
          revenue.TOTAL_CHARGE_QUANTITY,
          revenue.TOTAL_SUBSCRIPTION_QUANTITY,
          revenue.AOV,
          revenue.PRICE_TOTAL,
          revenue.TOTAL_GIFTKIT_SUBSCRIPTION_QUANTITY,
          revenue.TOTAL_GIFTCREDIT_SUBSCRIPTION_QUANTITY,
          revenue.REFILL_COGS,
          revenue.WELCOME_KIT_COGS,
          revenue.GROSS_SALES,
          revenue.NET_SALES,
          revenue.CREDIT_APPLIED
                  

      from
      (
          select day, gain, loss, net,
                  sum(net) over (order by day asc rows between unbounded preceding and current row) as total_active,
                  sum(net_international) over (order by day asc rows between unbounded preceding and current row) as total_active_international,
                  sum(net_international_3mo_refill) over (order by day asc rows between unbounded preceding and current row) as total_active_international_3mo_refill,
                  sum(net_giftkits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftkits,
                  sum(net_giftcredits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftcredits,  
                  sum(net_preorders) over (order by day asc rows between unbounded preceding and current row) as total_active_preorders,  

                  sum(gain) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_gain,        
                  sum(loss) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_loss,

                  gain_international,
                  loss_international,
                  net_international,
                  gain_international_3mo_refill,
                  loss_international_3mo_refill,
                  net_international_3mo_refill,
                  gain_giftkits,
                  loss_giftkits,
                  net_giftkits,
                  gain_giftcredits,
                  loss_giftcredits,
                  net_giftcredits,
                  gain_preorders,
                  loss_preorders,
                  net_preorders

          from gainlossnet
      ) as gainlossnet_agg
      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = gainlossnet_agg.day
      left join revenue on revenue.day = gainlossnet_agg.day

      order by gainlossnet_agg.day asc;"
"V_DAILYGROWTHTRACKER_V_1_0","create or replace view ""MARKETING_DATABASE"".""PUBLIC"".""V_DAILYGROWTHTRACKER_V_1_0""
as

      -- REVENUE UNION
      with revenue as
      (

        select rev.day,
              sum(total_tax) as tax_amount,
              sum(shipping_amount) as shipping_amount,
              sum(total_discount_amount) as total_discount_amount,
              count(total_charge_quantity) as total_charge_quantity,
              sum(total_subscription_quantity) as total_subscription_quantity,
              sum(price_total) / count(total_charge_quantity) as aov,
              sum(price_total) as price_total,
              sum(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
              sum(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity,  
              sum(zeroifnull(manual.refill_cogs)) as refill_cogs,
              sum(zeroifnull(manual.welcome_kit_cogs)) as welcome_kit_cogs,
              sum(rev.price_total) - sum(rev.total_tax) - sum(rev.shipping_amount) + sum(rev.total_discount_amount) as gross_revenue,
              gross_revenue - sum(zeroifnull(welcome_kit_cogs)) as net_revenue

          from 
          (

                -- ***** START - RECHARGE Daily Revenue ***** --      
                select charges.day,
                        charges.total_price as price_total, 
                        charges.total_discounts as total_discount_amount, 
                        charges.total_charge_quantity as total_charge_quantity,
                        charge_lines.total_subscription_quantity as total_subscription_quantity, 
                        charge_lines.total_tax as total_tax,
                        zeroifnull(charge_shipping.shipping_amount) as shipping_amount,
                        zeroifnull(charge_giftcredit.total_subscription_quantity) as total_giftcredit_subscription_quantity,
                        zeroifnull(charge_giftkit.total_subscription_quantity) as total_giftkit_subscription_quantity         
                from
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(c.total_price) as total_price, sum(c.total_discounts) as total_discounts, count(*) as total_charge_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    --where c.status = 'SUCCESS'
                    group by day
                ) as charges
                join 
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity,
                            sum(c.total_tax) as total_tax
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    --where c.status = 'SUCCESS'
                    group by day
                ) as charge_lines on charge_lines.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(csl.price) as shipping_amount
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c                
                    left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
                    --where c.status = 'SUCCESS'            
                    group by day
                ) as charge_shipping on charge_shipping.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    --where c.status = 'SUCCESS'
                    where cli.title ilike '%gift kit%'
                    group by day
                ) as charge_giftkit on charge_giftkit.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    --where c.status = 'SUCCESS'
                    where cli.title ilike '%Gift Credit%'
                    group by day
                ) as charge_giftcredit on charge_giftcredit.day = charges.day
                -- where charges.day between '2020-07-01' and '2020-07-31'
                --order by charges.day
                -- ***** END - RECHARGE Daily Revenue ***** --      

                union all 

                -- ***** START - RECURLY Daily Revenue ***** --  
                select charge_level_revenue.day, 
                        price_total as price_total, 
                        total_discount_amount as total_discount_amount, 
                        total_charge_quantity as total_charge_quantity,      
                        total_subscription_quantity as total_subscription_quantity,    
                        tax_amount as total_tax,
                        zeroifnull(shipping_amount) as shipping_amount,
                        zeroifnull(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
                        zeroifnull(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity
                from
                (
                    select  charge_level_revenue.day, 
                            sum(tax_amount) as tax_amount,
                            sum(shipping_amount) as shipping_amount,
                            sum(discount_amount) as total_discount_amount,
                            count(*) as total_charge_quantity, 
                            sum(total_subscription_quantity) as total_subscription_quantity,
                            avg(price_total) as aov,
                            sum(price_total) as price_total,
                            sum(price_subtotal) as price_subtotal
                    from 
                    (
                              select day, id,
                                        sum(tax_amount) as tax_amount,
                                        sum(shipping_amount) as shipping_amount,
                                        sum(discount_amount) as discount_amount,
                                        count(id) as total_charge_quantity,
                                        sum(total_subscription_quantity) as total_subscription_quantity,
                                        sum(price_total) as price_total,
                                        sum(price_subtotal) as price_subtotal         
                              from
                              (

                                  -- Non-Shipping Adjustments
                                  select to_date(i.closed_at) as day, 
                                         i.id,
                                        sum(a.adjustment_tax) as tax_amount,
                                        0 as shipping_amount,
                                        sum(a.adjustment_discount) as discount_amount,
                                        count(distinct i.id) as total_charge_quantity,
                                        sum(a.adjustment_quantity) as total_subscription_quantity,
                                        sum(a.adjustment_amount) as price_total,
                                        sum(a.adjustment_total) as price_subtotal
                                  from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                                  join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                                  where i.status in ('paid')
                                  and i.invoice_doc_type in ('charge') 
                                  and adjustment_description not ilike '%shipping%'
                                  group by i.id, day

                                  union all

                                  -- Shipping Adjustments            
                                  select to_date(i.closed_at) as day, 
                                        i.id,
                                        0 as tax_amount,
                                        sum(a.adjustment_total) as shipping_amount,
                                        0 as discount_amount,
                                        0 as total_charge_quantity,
                                        0 as total_subscription_quantity,
                                        0 as price_total,            
                                        0 as price_subtotal                  
                                  from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                                  join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                                  where i.status in ('paid')
                                  and i.invoice_doc_type in ('charge')
                                  and adjustment_description ilike '%shipping%'
                                  group by i.id, day

                              ) as rev
                              group by id, day


                    ) as charge_level_revenue
                    group by charge_level_revenue.day
                    --order by charge_level_revenue.day

                ) as charge_level_revenue
                left join 
                (
                    select to_date(i.closed_at) as day, 
                          sum(a.adjustment_quantity) as total_giftkit_subscription_quantity
                    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                    where i.status in ('paid')
                    and i.invoice_doc_type in ('charge') 
                    and adjustment_description = 'Gift Kit Holiday 2020'
                    group by day 
                ) as charge_level_revenue_giftkit 
                  on charge_level_revenue_giftkit.day = charge_level_revenue.day
                left join 
                (
                    select to_date(i.closed_at) as day, 
                          sum(a.adjustment_quantity) as total_giftcredit_subscription_quantity
                    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                    where i.status in ('paid')
                    and i.invoice_doc_type in ('charge') 
                    and adjustment_description = 'GIFT_CREDIT_PLACEHOLDER'            
                    group by day 
                ) as charge_level_revenue_giftcredit
                  on charge_level_revenue_giftcredit.day = charge_level_revenue.day
                --order by charge_level_revenue.day
                -- ***** END - RECURLY Daily Revenue ***** --  

          ) as rev
          left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = rev.day
          group by rev.day
          order by rev.day    
      ), 
      gainlossnet as -- GAIN LOSS JOIN
      (

          -- **** TO DO:
              -- ## Total International
              -- ## International on 3-mo Refill
              -- ## Gift Kits
              -- ## Gift Credits   
              -- Total Preorder

          select gain.dt as day, 
                  zeroifnull(gain.total_subscribers_gained) as total_subscribers_gained, 
                  zeroifnull(loss.total_subscribers_lost) total_subscribers_lost,   
                  zeroifnull(gain.total_subscriptions_gained) as gain,
                  zeroifnull(loss.total_subscriptions_lost) as loss,
                  zeroifnull(gain.total_subscriptions_gained) - zeroifnull(loss.total_subscriptions_lost) as net,

                  -- _international
                  zeroifnull(gain.total_subscriptions_gained_international) as gain_international,
                  zeroifnull(loss.total_subscriptions_lost_international) as loss_international,
                  zeroifnull(gain.total_subscriptions_gained_international) - zeroifnull(loss.total_subscriptions_lost_international) as net_international,

                  -- _international_3mo_refill
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) as gain_international_3mo_refill,
                  zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as loss_international_3mo_refill,
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) - zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as net_international_3mo_refill,

                  -- _giftkits
                  zeroifnull(gain.total_subscriptions_gained_giftkits) as gain_giftkits,
                  zeroifnull(loss.total_subscriptions_lost_giftkits) as loss_giftkits,
                  zeroifnull(gain.total_subscriptions_gained_giftkits) - zeroifnull(loss.total_subscriptions_lost_giftkits) as net_giftkits,

                  -- _giftcredits
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) as gain_giftcredits,
                  zeroifnull(loss.total_subscriptions_lost_giftcredits) as loss_giftcredits,
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) - zeroifnull(loss.total_subscriptions_lost_giftcredits) as net_giftcredits,

                  -- _preorders
                  zeroifnull(gain.total_subscriptions_gained_preorders) as gain_preorders,
                  zeroifnull(loss.total_subscriptions_lost_preorders) as loss_preorders,
                  zeroifnull(gain.total_subscriptions_gained_preorders) - zeroifnull(loss.total_subscriptions_lost_preorders) as net_preorders

          from
          (
                /*
                with subscription_breakdowns as 
                (
                    select to_date(dateadd(hour, -4, map.created_at)) as dt, 
                              count(*) as total_subscribers_gained, 
                              sum(quantity) as total_subscriptions_gained,
                              is_international,
                              sku,
                              is_preorder
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map
                    group by dt, is_international, sku, is_preorder
                    order by dt
                )*/

                with subscription_breakdowns as 
                (

                    select case 
                          when is_recharge_native = 1 then to_date(dateadd(hour, -4, map.created_at))
                          when is_imported = 1 then to_date(dateadd(hour, -4, map.created_at))
                          else to_date(map.created_at) end as dt,
                    -- select to_date(dateadd(hour, -4, map.created_at)) as dt, 
                              count(*) as total_subscribers_gained, 
                              sum(quantity) as total_subscriptions_gained,
                              is_international,
                              sku,
                              is_preorder
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map
                    group by dt, is_international, sku, is_preorder
                    order by dt
                )            
            

                -- **************************************************
                -- BREAKDOWNS: Create aggregation + join for each breakdown
                -- **************************************************      
                select total.dt, total_subscribers_gained, total_subscriptions_gained, 
                        total_subscribers_gained_international, total_subscriptions_gained_international,
                        total_subscribers_gained_international_3mo_refill, total_subscriptions_gained_international_3mo_refill,
                        total_subscribers_gained_giftkits, total_subscriptions_gained_giftkits,
                        total_subscribers_gained_giftcredits, total_subscriptions_gained_giftcredits,
                        total_subscribers_gained_preorders, total_subscriptions_gained_preorders
                from
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained, sum(total_subscriptions_gained) as total_subscriptions_gained
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international, sum(total_subscriptions_gained) as total_subscriptions_gained_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international_3mo_refill, sum(total_subscriptions_gained) as total_subscriptions_gained_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftkits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftcredits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_preorders, sum(total_subscriptions_gained) as total_subscriptions_gained_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt


          ) as gain
          left join
          (
            
                /*
                with subscription_breakdowns as 
                (
                    select to_date(dateadd(hour, -4, map.cancelled_at)) as dt, 
                              count(*) as total_subscribers_lost, 
                              sum(quantity) as total_subscriptions_lost,
                              is_international,
                              sku,
                              is_preorder
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map
                    where map.cancelled_at is not null
                    group by dt, is_international, sku, is_preorder
                    order by dt           
                ) */     

                with subscription_breakdowns as 
                (
                    select case 
                          when is_recharge_native = 1 and is_imported = 0 then to_date(dateadd(hour, -4, map.cancelled_at))
                          when is_imported = 1 then to_date(map.cancelled_at)
                          else to_date(map.cancelled_at) end as dt,
                          -- to_date(dateadd(hour, -4, map.cancelled_at)) as dt, 
                          count(*) as total_subscribers_lost, 
                          sum(quantity) as total_subscriptions_lost,
                          is_international,
                          sku,
                          is_preorder
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map
                    where map.cancelled_at is not null
                    group by dt, is_international, sku, is_preorder
                    order by dt           
                )             
            
                -- **************************************************
                -- BREAKDOWNS: Create aggregation for each breakdown
                -- **************************************************    
                select total.dt, total_subscribers_lost, total_subscriptions_lost, 
                        total_subscribers_lost_international, total_subscriptions_lost_international,
                        total_subscribers_lost_international_3mo_refill, total_subscriptions_lost_international_3mo_refill,
                        total_subscribers_lost_giftkits, total_subscriptions_lost_giftkits,
                        total_subscribers_lost_giftcredits, total_subscriptions_lost_giftcredits,
                        total_subscribers_lost_preorders, total_subscriptions_lost_preorders
                from
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost, sum(total_subscriptions_lost) as total_subscriptions_lost
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international, sum(total_subscriptions_lost) as total_subscriptions_lost_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt          
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international_3mo_refill, sum(total_subscriptions_lost) as total_subscriptions_lost_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftkits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftcredits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_preorders, sum(total_subscriptions_lost) as total_subscriptions_lost_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt


          ) as loss 
          on gain.dt = loss.dt
          order by gain.dt  

      ),
      spend as
      (

          with facebook as
          (

              select day, sum(spend) as fb_spend
              from
              (
                  select distinct fb.date as day, fb.CAMPAIGN_NAME, fb.spend-- , fba.value as conversions
                  from ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS"" fb
                  -- **** if we need conversions, this is the correct pixel name          
                  -- left join ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS_ACTIONS"" fba on fba.date = fb.date
                  -- where fba.action_type in ('offsite_conversion.fb_pixel_purchase')

              )
              group by day
          ),
          adwords as
          (
              select date as day, sum(cost) as gaw_spend
              from ""MARKETING_DATABASE"".""ADWORDS"".""ADWORDS_CAMPAIGN_STATS"" gaw
              group by day    
          )

          select case when fb.day is null then aw.day else fb.day end as day, 
            fb_spend as fb_spend,
            gaw_spend as gaw_spend
          from facebook as fb
          left join adwords as aw on fb.day = aw.day
          -- where day between '2020-12-09' and '2020-12-12'
          order by day

      )

      -- select * from revenue where day between '2020-12-01' and '2020-12-31'

      /*
      select -- sum(net) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as total_active,
      sum(net) over (order by day asc rows between unbounded preceding and current row) as total_active, * 
      from gainlossnet
      -- where day between '2020-07-01' and '2020-07-10'
      */

      -- Final ratios, calcs, and aggregations

      /*
      select gainlossnet_agg.day,
          revenue.*,
          sum(revenue.total_subscription_quantity) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_total_orders,
          sum(revenue.net_revenue) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_net_revenue,
          -- sum(revenue.total_discounts) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_discounts,
          sum(revenue.total_discount_amount) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_discounts,
          trailing_30_discounts / gainlossnet_agg.trailing_30_day_gain as trailing_30_avg_discount_per_checkout,

          gainlossnet_agg.*,
          gainlossnet_agg.total_active_international / gainlossnet_agg.total_active as percent_international,
          gainlossnet_agg.total_active_international_3mo_refill / gainlossnet_agg.total_active as percent_stp_3mo_refill,    
          sum(gainlossnet_agg.total_active) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_active_subs,
          avg(gainlossnet_agg.total_active) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_average_active_subs,
          gainlossnet_agg.trailing_30_day_loss / trailing_30_day_average_active_subs as trailing_30_day_churn,
          gainlossnet_agg.trailing_30_day_gain / trailing_30_day_active_subs as trailing_30_day_percent_recurring_subscriptions,

          spend.fb_spend,
          spend.fb_conversions,
          sum(spend.fb_conversions) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_fb_conversions,
          spend.gaw_spend,
          spend.gaw_conversions,
          sum(spend.gaw_conversions) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_gaw_conversions,

          manual.*,
          (zeroifnull(spend.fb_spend) + 
              zeroifnull(spend.gaw_spend) +     
              zeroifnull(manual.Other_Ads) +
              zeroifnull(manual.Partnerships) +
              zeroifnull(manual.Affiliates) +
              zeroifnull(manual.Share_a_Sale) +
              zeroifnull(manual.Growth_Agencies) +
              zeroifnull(manual.Growth_Consultants) +
              zeroifnull(manual.Partnerships_Agencies) +
              zeroifnull(manual.Partnerships_Consultants) +
              zeroifnull(manual.Brand_Expenses)) as total_spend,
          sum(total_spend) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_spend,
          (zeroifnull(spend.fb_spend) + 
              zeroifnull(spend.gaw_spend) +     
              zeroifnull(manual.Other_Ads) +
              zeroifnull(manual.Partnerships) +
              zeroifnull(manual.Affiliates)) /  gainlossnet_agg.gain as cpa,
          sum(cpa) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_cpa,
          total_spend / trailing_30_net_revenue as spend_as_percent_of_trailing_30_net_revenue,
          (total_spend + total_discount_amount) / gain as cac,
          sum(cac) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_cac,
          (trailing_30_net_revenue - trailing_30_discounts) / trailing_30_day_average_active_subs as trailing_30_day_grps,
          case when zeroifnull(trailing_30_day_churn) = 0 then null else trailing_30_day_grps / trailing_30_day_churn end as trailing_30_day_ltr,
          case when manual.refill_cogs is not null then manual.refill_cogs else lag(manual.refill_cogs) ignore nulls over (order by gainlossnet_agg.day asc) end as refill_cogs_last,
          case when manual.welcome_kit_cogs is not null then manual.welcome_kit_cogs else lag(manual.welcome_kit_cogs) ignore nulls over (order by gainlossnet_agg.day asc) end as welcome_kit_cogs_last,    
          case when zeroifnull(trailing_30_day_cpa) = 0 then -999 else trailing_30_day_LTR / trailing_30_day_cpa end as trailing_30_day_LTR_to_CPA,
          case when zeroifnull(trailing_30_day_cac) = 0 then -999 else trailing_30_day_LTR / trailing_30_day_cac end as trailing_30_day_LTR_to_CAC,
          (net_revenue - total_discount_amount) / total_active as arpu,
          sum(arpu) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_arpu,


          case when zeroifnull(trailing_30_day_churn) = 0 then -999 else
              ( 
                  trailing_30_day_arpu
                  * 
                  (
                      (
                            (49.99 / (trailing_30_day_churn * -1.0)) 
                            - 
                            (
                                (refill_cogs_last) / (trailing_30_day_churn * -1.0)
                            )
                            + 
                            (refill_cogs_last) - (welcome_kit_cogs_last)
                      )
                      / 
                      (
                         49.99
                         /
                         (trailing_30_day_churn * -1.0)
                      )
                  )
              )
              /
              (trailing_30_day_churn * -1.0) 
          end as trailing_30_day_ltv,
          case when zeroifnull(trailing_30_day_cpa) = 0 then -999 else trailing_30_day_ltv / trailing_30_day_cpa end as trailing_30_day_ltv_to_cpa,
          case when zeroifnull(trailing_30_day_cac) = 0 then -999 else trailing_30_day_ltv / trailing_30_day_cac end as trailing_30_day_ltv_to_cac
          -- sum(arpu) over (order by gainlossnet_agg.day asc rows between 60 preceding and 30 preceding) as trailing_30_60_day_arpu   
          -- sum(revenue) over (order by date asc rows between 59 preceding and 30 preceding) as trailing_30to60_revenue
          */


      -- select revenue.day
      -- select gainlossnet_agg.total_active_giftcredits
      select -- revenue.PRICE_TOTAL, revenue.TAX_AMOUNT, revenue.SHIPPING_AMOUNT, revenue.TOTAL_DISCOUNT_AMOUNT, 
          gainlossnet_agg.DAY,
          gainlossnet_agg.GAIN,
          gainlossnet_agg.LOSS,
          gainlossnet_agg.NET,
          gainlossnet_agg.TOTAL_ACTIVE,
          gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL,
          gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.TOTAL_ACTIVE_GIFTKITS,
          gainlossnet_agg.TOTAL_ACTIVE_GIFTCREDITS,
          gainlossnet_agg.TOTAL_ACTIVE_PREORDERS,
          gainlossnet_agg.TRAILING_30_DAY_GAIN,
          gainlossnet_agg.TRAILING_30_DAY_LOSS,
          gainlossnet_agg.GAIN_INTERNATIONAL,
          gainlossnet_agg.LOSS_INTERNATIONAL,
          gainlossnet_agg.NET_INTERNATIONAL,
          gainlossnet_agg.GAIN_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.LOSS_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.NET_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.GAIN_GIFTKITS,
          gainlossnet_agg.LOSS_GIFTKITS,
          gainlossnet_agg.NET_GIFTKITS,
          gainlossnet_agg.GAIN_GIFTCREDITS,
          gainlossnet_agg.LOSS_GIFTCREDITS,
          gainlossnet_agg.NET_GIFTCREDITS,
          gainlossnet_agg.GAIN_PREORDERS,
          gainlossnet_agg.LOSS_PREORDERS,
          gainlossnet_agg.NET_PREORDERS,

          revenue.TAX_AMOUNT,
          revenue.SHIPPING_AMOUNT,
          revenue.TOTAL_DISCOUNT_AMOUNT,
          revenue.TOTAL_CHARGE_QUANTITY,
          revenue.TOTAL_SUBSCRIPTION_QUANTITY,
          revenue.AOV,
          revenue.PRICE_TOTAL,
          revenue.TOTAL_GIFTKIT_SUBSCRIPTION_QUANTITY,
          revenue.TOTAL_GIFTCREDIT_SUBSCRIPTION_QUANTITY,
          revenue.REFILL_COGS,
          revenue.WELCOME_KIT_COGS,
          revenue.GROSS_REVENUE,
          revenue.NET_REVENUE
                  
                  /*,
                  gainlossnet_agg.*,
                  manual.*/

      from
      (
          select day, gain, loss, net,
                  sum(net) over (order by day asc rows between unbounded preceding and current row) as total_active,
                  sum(net_international) over (order by day asc rows between unbounded preceding and current row) as total_active_international,
                  sum(net_international_3mo_refill) over (order by day asc rows between unbounded preceding and current row) as total_active_international_3mo_refill,
                  sum(net_giftkits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftkits,
                  sum(net_giftcredits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftcredits,  
                  sum(net_preorders) over (order by day asc rows between unbounded preceding and current row) as total_active_preorders,  

                  sum(gain) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_gain,        
                  sum(loss) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_loss,

                  gain_international,
                  loss_international,
                  net_international,
                  gain_international_3mo_refill,
                  loss_international_3mo_refill,
                  net_international_3mo_refill,
                  gain_giftkits,
                  loss_giftkits,
                  net_giftkits,
                  gain_giftcredits,
                  loss_giftcredits,
                  net_giftcredits,
                  gain_preorders,
                  loss_preorders,
                  net_preorders

          from gainlossnet
      ) as gainlossnet_agg
      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = gainlossnet_agg.day
      left join revenue on revenue.day = gainlossnet_agg.day
      left join spend on spend.day = gainlossnet_agg.day
      /*where (gainlossnet_agg.day between '2020-07-01' and '2020-07-31'
               or
             gainlossnet_agg.day between '2020-12-01' and '2020-12-30')*/
      order by gainlossnet_agg.day asc"
"V_DAILYGROWTHTRACKER_V_2_1","create or replace view MARKETING_DATABASE.PUBLIC.V_DAILYGROWTHTRACKER_V_2_1(
	DAY,
	GAIN,
	LOSS,
	NET,
	TOTAL_ACTIVE,
	TOTAL_ACTIVE_INTERNATIONAL,
	TOTAL_ACTIVE_INTERNATIONAL_3MO_REFILL,
	TOTAL_ACTIVE_GIFTKITS,
	TOTAL_ACTIVE_GIFTCREDITS,
	TOTAL_ACTIVE_PREORDERS,
	TRAILING_30_DAY_GAIN,
	TRAILING_30_DAY_LOSS,
	GAIN_INTERNATIONAL,
	LOSS_INTERNATIONAL,
	NET_INTERNATIONAL,
	GAIN_INTERNATIONAL_3MO_REFILL,
	LOSS_INTERNATIONAL_3MO_REFILL,
	NET_INTERNATIONAL_3MO_REFILL,
	GAIN_GIFTKITS,
	LOSS_GIFTKITS,
	NET_GIFTKITS,
	GAIN_GIFTCREDITS,
	LOSS_GIFTCREDITS,
	NET_GIFTCREDITS,
	GAIN_PREORDERS,
	LOSS_PREORDERS,
	NET_PREORDERS,
	TAX_AMOUNT,
	SHIPPING_AMOUNT,
	TOTAL_DISCOUNT_AMOUNT,
	TOTAL_CHARGE_QUANTITY,
	TOTAL_SUBSCRIPTION_QUANTITY,
	AOV,
	PRICE_TOTAL,
	TOTAL_GIFTKIT_SUBSCRIPTION_QUANTITY,
	TOTAL_GIFTCREDIT_SUBSCRIPTION_QUANTITY,
	REFILL_COGS,
	WELCOME_KIT_COGS,
	GROSS_SALES,
	NET_SALES,
	CREDIT_APPLIED
) as

      -- REVENUE UNION
      with revenue as
      (

        select rev.day,
              sum(total_tax) as tax_amount,
              sum(shipping_amount) as shipping_amount,
              sum(total_discount_amount) as total_discount_amount,
              sum(total_charge_quantity) as total_charge_quantity,
              sum(total_subscription_quantity) as total_subscription_quantity,
              sum(price_total) / sum(total_charge_quantity) as aov,
              sum(price_total) as price_total,
              sum(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
              sum(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity,  
              sum(zeroifnull(manual.refill_cogs)) as refill_cogs,
              sum(zeroifnull(manual.welcome_kit_cogs)) as welcome_kit_cogs,
              zeroifnull(sum(rev.price_total) - sum(rev.total_tax) - sum(rev.shipping_amount) + sum(rev.total_discount_amount) + sum(rev.credit_applied)) as gross_sales,
              zeroifnull(sum(rev.price_total) - sum(rev.total_tax)) as net_sales,
              sum(credit_applied) as credit_applied

          from 
          (

                -- ***** START - RECHARGE Daily Revenue ***** --      
                select charges.day,
                        charges.total_price as price_total, 
                        charges.total_discounts as total_discount_amount, 
                        charges.total_charge_quantity as total_charge_quantity,
                        0 as credit_applied,
                        charge_lines.total_subscription_quantity as total_subscription_quantity, 
                        charge_lines.total_tax as total_tax,
                        zeroifnull(charge_shipping.shipping_amount) as shipping_amount,
                        zeroifnull(charge_giftcredit.total_subscription_quantity) as total_giftcredit_subscription_quantity,
                        zeroifnull(charge_giftkit.total_subscription_quantity) as total_giftkit_subscription_quantity         
                from
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(c.total_price) as total_price, sum(c.total_discounts) as total_discounts, count(*) as total_charge_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    -- Do not exclude charges where status != SUCCESS  (where c.status = 'SUCCESS')
                    group by day
                ) as charges
                join 
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity,
                            sum(c.total_tax) as total_tax
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    group by day
                ) as charge_lines on charge_lines.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(csl.price) as shipping_amount
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c                
                    left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id        
                    group by day
                ) as charge_shipping on charge_shipping.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    where cli.title ilike '%gift kit%'
                    group by day
                ) as charge_giftkit on charge_giftkit.day = charges.day
                left join
                (
                    select to_date(dateadd(hour, -4, c.processed_at)) as day,
                            sum(cli.quantity) as total_subscription_quantity
                    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
                    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
                    where cli.title ilike '%Gift Credit%'
                    group by day
                ) as charge_giftcredit on charge_giftcredit.day = charges.day
                -- ***** END - RECHARGE Daily Revenue ***** --      

                union all 
            
                -- ***** START - RECURLY Daily Revenue ***** --  
                select charge_level_revenue.day, 
                        price_total as price_total, 
                        total_discount_amount as total_discount_amount, 
                        total_charge_quantity as total_charge_quantity,
                        credit_applied as credit_applied,
                        total_subscription_quantity as total_subscription_quantity,    
                        tax_amount as total_tax,
                        zeroifnull(shipping_amount) as shipping_amount,
                        zeroifnull(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
                        zeroifnull(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity
                from
                (
                  
                    select nonship_adj.day as day,
                        nonship_adj.tax as tax_amount,
                        shipping_adj.shipping as shipping_amount,
                        credit.credit_amount as credit_applied,
                        nonship_adj.discount_amount as total_discount_amount,
                        nonship_adj.total_charges as total_charge_quantity,
                        nonship_adj.quantity as total_subscription_quantity,
                        nonship_adj.total_price as price_total,
                        nonship_adj.total_price - nonship_adj.tax - shipping_adj.shipping + nonship_adj.discount_amount as gross_revenue
                    from
                    (
                        select to_date(t.date) as day,
                                sum(adjustment_discount) as discount_amount,
                                sum(t.tax_amount) as tax,
                                sum(adjustment_total) as adj_total_price,
                                sum(t.amount) as total_price,  
                                sum(adjustment_quantity) as quantity,
                                count(*) as total_charges
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and adjustment_description not ilike '%shipping%'
                        group by day
                        order by day

                    ) as nonship_adj 
                    left join
                    ( 

                        -- Shipping totals will NEVER match up to DGT
                        select to_date(t.date) as day,
                            sum(adjustment_total) as shipping
                        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                        where t.type = 'purchase'
                            and t.status = 'success'
                            and  adjustment_description ilike '%shipping%'
                        group by day
                        order by day  

                    ) as shipping_adj on nonship_adj.day = shipping_adj.day
                    
                    left join
                    (	--- Credit amount applied date
	                    select to_date(t.date) as day ,
	                    sum(c.amount) as credit_amount
	                      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""CREDIT_PAYMENTS"" as c join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i
	                      on c.applied_to_invoice_number = i.invoice_number join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t on t.invoice_id = i.id
	                      where action != 'write_off'
	                      group by day
                      
                    ) as credit on nonship_adj.day = credit.day
                    order by nonship_adj.day
                ) as charge_level_revenue
                left join 
                (
                    select to_date(i.closed_at) as day, 
                          sum(a.adjustment_quantity) as total_giftkit_subscription_quantity
                    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                    where i.status in ('paid')
                    and i.invoice_doc_type in ('charge') 
                    and adjustment_description = 'Gift Kit Holiday 2020'
                    group by day 
                ) as charge_level_revenue_giftkit 
                  on charge_level_revenue_giftkit.day = charge_level_revenue.day
                left join 
                (
                    select to_date(i.closed_at) as day, 
                          sum(a.adjustment_quantity) as total_giftcredit_subscription_quantity
                    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
                    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
                    where i.status in ('paid')
                    and i.invoice_doc_type in ('charge') 
                    and adjustment_description = 'GIFT_CREDIT_PLACEHOLDER'            
                    group by day 
                ) as charge_level_revenue_giftcredit
                  on charge_level_revenue_giftcredit.day = charge_level_revenue.day
                -- ***** END - RECURLY Daily Revenue ***** -- 

          ) as rev
          left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = rev.day
          group by rev.day
          order by rev.day
        
      ), 
      
      gainlossnet as -- GAIN LOSS JOIN
      (

          select gain.dt as day, 
                  zeroifnull(gain.total_subscribers_gained) as total_subscribers_gained, 
                  zeroifnull(loss.total_subscribers_lost) total_subscribers_lost,   
                  zeroifnull(gain.total_subscriptions_gained) as gain,
                  zeroifnull(loss.total_subscriptions_lost) as loss,
                  zeroifnull(gain.total_subscriptions_gained) - zeroifnull(loss.total_subscriptions_lost) as net,

                  -- _international
                  zeroifnull(gain.total_subscriptions_gained_international) as gain_international,
                  zeroifnull(loss.total_subscriptions_lost_international) as loss_international,
                  zeroifnull(gain.total_subscriptions_gained_international) - zeroifnull(loss.total_subscriptions_lost_international) as net_international,

                  -- _international_3mo_refill
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) as gain_international_3mo_refill,
                  zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as loss_international_3mo_refill,
                  zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) - zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as net_international_3mo_refill,

                  -- _giftkits
                  zeroifnull(gain.total_subscriptions_gained_giftkits) as gain_giftkits,
                  zeroifnull(loss.total_subscriptions_lost_giftkits) as loss_giftkits,
                  zeroifnull(gain.total_subscriptions_gained_giftkits) - zeroifnull(loss.total_subscriptions_lost_giftkits) as net_giftkits,

                  -- _giftcredits
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) as gain_giftcredits,
                  zeroifnull(loss.total_subscriptions_lost_giftcredits) as loss_giftcredits,
                  zeroifnull(gain.total_subscriptions_gained_giftcredits) - zeroifnull(loss.total_subscriptions_lost_giftcredits) as net_giftcredits,

                  -- _preorders
                  zeroifnull(gain.total_subscriptions_gained_preorders) as gain_preorders,
                  zeroifnull(loss.total_subscriptions_lost_preorders) as loss_preorders,
                  zeroifnull(gain.total_subscriptions_gained_preorders) - zeroifnull(loss.total_subscriptions_lost_preorders) as net_preorders

          from
          (

                with subscription_breakdowns as 
                (

                    select 
                        -- only perform timezone offset subscriptions created within recharge
                        case 
                          when is_recharge_native = 1 then to_date(dateadd(hour, -4, map.created_at))
                          when is_imported = 1 then to_date(dateadd(hour, -4, map.created_at))
                          else to_date(map.created_at) end
                        as dt,
                        count(*) as total_subscribers_gained, 
                        sum(quantity) as total_subscriptions_gained,
                        is_international,
                        sku,
                        is_preorder
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map
                    group by dt, is_international, sku, is_preorder
                    order by dt
                )            
            

                -- **************************************************
                -- BREAKDOWNS: Create aggregation + join for each breakdown
                -- **************************************************      
                select total.dt, total_subscribers_gained, total_subscriptions_gained, 
                        total_subscribers_gained_international, total_subscriptions_gained_international,
                        total_subscribers_gained_international_3mo_refill, total_subscriptions_gained_international_3mo_refill,
                        total_subscribers_gained_giftkits, total_subscriptions_gained_giftkits,
                        total_subscribers_gained_giftcredits, total_subscriptions_gained_giftcredits,
                        total_subscribers_gained_preorders, total_subscriptions_gained_preorders
                from
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained, sum(total_subscriptions_gained) as total_subscriptions_gained
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international, sum(total_subscriptions_gained) as total_subscriptions_gained_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_international_3mo_refill, sum(total_subscriptions_gained) as total_subscriptions_gained_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftkits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_giftcredits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_gained) total_subscribers_gained_preorders, sum(total_subscriptions_gained) as total_subscriptions_gained_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt


          ) as gain
          left join
          (

                with subscription_breakdowns as 
                (
                    select 
                          -- only perform timezone offset on subscriptions cancelled within recharge, not on recurly
                          case
                            when is_recharge_native = 1 and is_imported = 0 then to_date(dateadd(hour, -4, map.cancelled_at))
                            when is_imported = 1 then to_date(map.cancelled_at)
                            else to_date(map.cancelled_at)
                          end as dt,
                          count(*) as total_subscribers_lost, 
                          sum(quantity) as total_subscriptions_lost,
                          is_international,
                          sku,
                          is_preorder
                    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map
                    where map.cancelled_at is not null
                    group by dt, is_international, sku, is_preorder
                    order by dt           
                )             
            
                -- **************************************************
                -- BREAKDOWNS: Create aggregation for each breakdown
                -- **************************************************    
                select total.dt, total_subscribers_lost, total_subscriptions_lost, 
                        total_subscribers_lost_international, total_subscriptions_lost_international,
                        total_subscribers_lost_international_3mo_refill, total_subscriptions_lost_international_3mo_refill,
                        total_subscribers_lost_giftkits, total_subscriptions_lost_giftkits,
                        total_subscribers_lost_giftcredits, total_subscriptions_lost_giftcredits,
                        total_subscribers_lost_preorders, total_subscriptions_lost_preorders
                from
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost, sum(total_subscriptions_lost) as total_subscriptions_lost
                    from subscription_breakdowns
                    group by dt
                ) as total
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international, sum(total_subscriptions_lost) as total_subscriptions_lost_international
                    from subscription_breakdowns
                    where is_international = 1
                    group by dt    
                ) as total_international on total.dt = total_international.dt          
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_international_3mo_refill, sum(total_subscriptions_lost) as total_subscriptions_lost_international_3mo_refill
                    from subscription_breakdowns
                    where is_international = 1
                    and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
                    group by dt    
                ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftkits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftkits
                    from subscription_breakdowns              
                    where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
                    group by dt    
                ) as total_giftkits on total.dt = total_giftkits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_giftcredits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftcredits
                    from subscription_breakdowns              
                    where sku ilike 'SYN-WK-GIFT-CREDIT%'
                    group by dt    
                ) as total_giftcredits on total.dt = total_giftcredits.dt
                left join
                (
                    select dt, sum(total_subscribers_lost) total_subscribers_lost_preorders, sum(total_subscriptions_lost) as total_subscriptions_lost_preorders
                    from subscription_breakdowns              
                    where is_preorder = 1
                    group by dt    
                ) as total_preorders on total.dt = total_preorders.dt


          ) as loss 
          on gain.dt = loss.dt
          order by gain.dt  

      ),
      spend as
      (

          with facebook as
          (

              select day, sum(spend) as fb_spend
              from
              (
                  select distinct fb.date as day, fb.CAMPAIGN_NAME, fb.spend-- , fba.value as conversions
                  from ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS"" fb
                  -- **** if we need conversions, this is the correct pixel name          
                  -- left join ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS_ACTIONS"" fba on fba.date = fb.date
                  -- where fba.action_type in ('offsite_conversion.fb_pixel_purchase')
              )
              group by day
          ),
          adwords as
          (
              select date as day, sum(cost) as gaw_spend
              from ""MARKETING_DATABASE"".""ADWORDS"".""ADWORDS_CAMPAIGN_STATS"" gaw
              group by day    
          )

          select case when fb.day is null then aw.day else fb.day end as day, 
            fb_spend as fb_spend,
            gaw_spend as gaw_spend
          from facebook as fb
          left join adwords as aw on fb.day = aw.day
          order by day

      )

      -- Final ratios, calcs, and aggregations

      /*
      select gainlossnet_agg.day,
          revenue.*,
          sum(revenue.total_subscription_quantity) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_total_orders,
          sum(revenue.net_revenue) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_net_revenue,
          -- sum(revenue.total_discounts) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_discounts,
          sum(revenue.total_discount_amount) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_discounts,
          trailing_30_discounts / gainlossnet_agg.trailing_30_day_gain as trailing_30_avg_discount_per_checkout,

          gainlossnet_agg.*,
          gainlossnet_agg.total_active_international / gainlossnet_agg.total_active as percent_international,
          gainlossnet_agg.total_active_international_3mo_refill / gainlossnet_agg.total_active as percent_stp_3mo_refill,    
          sum(gainlossnet_agg.total_active) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_active_subs,
          avg(gainlossnet_agg.total_active) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_average_active_subs,
          gainlossnet_agg.trailing_30_day_loss / trailing_30_day_average_active_subs as trailing_30_day_churn,
          gainlossnet_agg.trailing_30_day_gain / trailing_30_day_active_subs as trailing_30_day_percent_recurring_subscriptions,

          spend.fb_spend,
          spend.fb_conversions,
          sum(spend.fb_conversions) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_fb_conversions,
          spend.gaw_spend,
          spend.gaw_conversions,
          sum(spend.gaw_conversions) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_gaw_conversions,

          manual.*,
          (zeroifnull(spend.fb_spend) + 
              zeroifnull(spend.gaw_spend) +     
              zeroifnull(manual.Other_Ads) +
              zeroifnull(manual.Partnerships) +
              zeroifnull(manual.Affiliates) +
              zeroifnull(manual.Share_a_Sale) +
              zeroifnull(manual.Growth_Agencies) +
              zeroifnull(manual.Growth_Consultants) +
              zeroifnull(manual.Partnerships_Agencies) +
              zeroifnull(manual.Partnerships_Consultants) +
              zeroifnull(manual.Brand_Expenses)) as total_spend,
          sum(total_spend) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_spend,
          (zeroifnull(spend.fb_spend) + 
              zeroifnull(spend.gaw_spend) +     
              zeroifnull(manual.Other_Ads) +
              zeroifnull(manual.Partnerships) +
              zeroifnull(manual.Affiliates)) /  gainlossnet_agg.gain as cpa,
          sum(cpa) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_cpa,
          total_spend / trailing_30_net_revenue as spend_as_percent_of_trailing_30_net_revenue,
          (total_spend + total_discount_amount) / gain as cac,
          sum(cac) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_cac,
          (trailing_30_net_revenue - trailing_30_discounts) / trailing_30_day_average_active_subs as trailing_30_day_grps,
          case when zeroifnull(trailing_30_day_churn) = 0 then null else trailing_30_day_grps / trailing_30_day_churn end as trailing_30_day_ltr,
          case when manual.refill_cogs is not null then manual.refill_cogs else lag(manual.refill_cogs) ignore nulls over (order by gainlossnet_agg.day asc) end as refill_cogs_last,
          case when manual.welcome_kit_cogs is not null then manual.welcome_kit_cogs else lag(manual.welcome_kit_cogs) ignore nulls over (order by gainlossnet_agg.day asc) end as welcome_kit_cogs_last,    
          case when zeroifnull(trailing_30_day_cpa) = 0 then -999 else trailing_30_day_LTR / trailing_30_day_cpa end as trailing_30_day_LTR_to_CPA,
          case when zeroifnull(trailing_30_day_cac) = 0 then -999 else trailing_30_day_LTR / trailing_30_day_cac end as trailing_30_day_LTR_to_CAC,
          (net_revenue - total_discount_amount) / total_active as arpu,
          sum(arpu) over (order by gainlossnet_agg.day asc rows between 29 preceding and current row) as trailing_30_day_arpu,


          case when zeroifnull(trailing_30_day_churn) = 0 then -999 else
              ( 
                  trailing_30_day_arpu
                  * 
                  (
                      (
                            (49.99 / (trailing_30_day_churn * -1.0)) 
                            - 
                            (
                                (refill_cogs_last) / (trailing_30_day_churn * -1.0)
                            )
                            + 
                            (refill_cogs_last) - (welcome_kit_cogs_last)
                      )
                      / 
                      (
                         49.99
                         /
                         (trailing_30_day_churn * -1.0)
                      )
                  )
              )
              /
              (trailing_30_day_churn * -1.0) 
          end as trailing_30_day_ltv,
          case when zeroifnull(trailing_30_day_cpa) = 0 then -999 else trailing_30_day_ltv / trailing_30_day_cpa end as trailing_30_day_ltv_to_cpa,
          case when zeroifnull(trailing_30_day_cac) = 0 then -999 else trailing_30_day_ltv / trailing_30_day_cac end as trailing_30_day_ltv_to_cac
          -- sum(arpu) over (order by gainlossnet_agg.day asc rows between 60 preceding and 30 preceding) as trailing_30_60_day_arpu   
          -- sum(revenue) over (order by date asc rows between 59 preceding and 30 preceding) as trailing_30to60_revenue
          */


      select gainlossnet_agg.DAY,
          gainlossnet_agg.GAIN,
          gainlossnet_agg.LOSS,
          gainlossnet_agg.NET,
          gainlossnet_agg.TOTAL_ACTIVE,
          gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL,
          gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.TOTAL_ACTIVE_GIFTKITS,
          gainlossnet_agg.TOTAL_ACTIVE_GIFTCREDITS,
          gainlossnet_agg.TOTAL_ACTIVE_PREORDERS,
          gainlossnet_agg.TRAILING_30_DAY_GAIN,
          gainlossnet_agg.TRAILING_30_DAY_LOSS,
          gainlossnet_agg.GAIN_INTERNATIONAL,
          gainlossnet_agg.LOSS_INTERNATIONAL,
          gainlossnet_agg.NET_INTERNATIONAL,
          gainlossnet_agg.GAIN_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.LOSS_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.NET_INTERNATIONAL_3MO_REFILL,
          gainlossnet_agg.GAIN_GIFTKITS,
          gainlossnet_agg.LOSS_GIFTKITS,
          gainlossnet_agg.NET_GIFTKITS,
          gainlossnet_agg.GAIN_GIFTCREDITS,
          gainlossnet_agg.LOSS_GIFTCREDITS,
          gainlossnet_agg.NET_GIFTCREDITS,
          gainlossnet_agg.GAIN_PREORDERS,
          gainlossnet_agg.LOSS_PREORDERS,
          gainlossnet_agg.NET_PREORDERS,

          revenue.TAX_AMOUNT,
          revenue.SHIPPING_AMOUNT,
          revenue.TOTAL_DISCOUNT_AMOUNT,
          revenue.TOTAL_CHARGE_QUANTITY,
          revenue.TOTAL_SUBSCRIPTION_QUANTITY,
          revenue.AOV,
          revenue.PRICE_TOTAL,
          revenue.TOTAL_GIFTKIT_SUBSCRIPTION_QUANTITY,
          revenue.TOTAL_GIFTCREDIT_SUBSCRIPTION_QUANTITY,
          revenue.REFILL_COGS,
          revenue.WELCOME_KIT_COGS,
          revenue.GROSS_SALES,
          revenue.NET_SALES,
          revenue.CREDIT_APPLIED
                  

      from
      (
          select day, gain, loss, net,
                  sum(net) over (order by day asc rows between unbounded preceding and current row) as total_active,
                  sum(net_international) over (order by day asc rows between unbounded preceding and current row) as total_active_international,
                  sum(net_international_3mo_refill) over (order by day asc rows between unbounded preceding and current row) as total_active_international_3mo_refill,
                  sum(net_giftkits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftkits,
                  sum(net_giftcredits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftcredits,  
                  sum(net_preorders) over (order by day asc rows between unbounded preceding and current row) as total_active_preorders,  

                  sum(gain) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_gain,        
                  sum(loss) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_loss,

                  gain_international,
                  loss_international,
                  net_international,
                  gain_international_3mo_refill,
                  loss_international_3mo_refill,
                  net_international_3mo_refill,
                  gain_giftkits,
                  loss_giftkits,
                  net_giftkits,
                  gain_giftcredits,
                  loss_giftcredits,
                  net_giftcredits,
                  gain_preorders,
                  loss_preorders,
                  net_preorders

          from gainlossnet
      ) as gainlossnet_agg
      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = gainlossnet_agg.day
      left join revenue on revenue.day = gainlossnet_agg.day
      left join spend on spend.day = gainlossnet_agg.day
      /*where (gainlossnet_agg.day between '2020-07-01' and '2020-07-31'
               or
             gainlossnet_agg.day between '2020-12-01' and '2020-12-30')*/
      order by gainlossnet_agg.day asc;"
"V_KLAVIYOCRM_V2","create or replace view MARKETING_DATABASE.PUBLIC.V_KLAVIYOCRM_V2 as
select e.SEND_DATE,E_NEWSUB,E_REACTIVATE,E_STP_ENROLL,EMAILSENT from 
(select to_date(DATETIME) as SEND_DATE,
COUNT(CASE WHEN TYPE = 'Recurly Start Subscription' THEN 1 END) AS E_NEWSUB,
COUNT(CASE WHEN TYPE = 'Subscription Reactivated' THEN 1 END) AS E_REACTIVATE,
COUNT(CASE WHEN TYPE = 'STP Enrollment' THEN 1 END) AS E_STP_ENROLL
FROM MARKETING_DATABASE.KLAVIYO.EVENT 
WHERE PROPERTY_ATTRIBUTION IS NOT NULL
AND SEND_DATE >= '2020-01-01'
GROUP BY SEND_DATE) as e
LEFT JOIN (select to_date(DATETIME) as SEND_DATE, COUNT(TYPE) as EMAILSENT
from MARKETING_DATABASE.KLAVIYO.EVENT 
WHERE TYPE = 'Received Email'
AND SEND_DATE >= '2020-01-01'
GROUP BY SEND_DATE
ORDER BY SEND_DATE ASC) as s on e.SEND_DATE = s.SEND_DATE
ORDER BY e.SEND_DATE ASC;"
"V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS","create view v_MergedRechargeAndRecurlySubscriptions
as

    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
    select to_varchar(id) as recharge_subscription_id, null as recurly_subscription_id, 1 as is_recharge_native, 0 as is_recurly_native, 0 as is_imported
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION""
    where id not in (select recharge_subscription_id from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING"")

    union all

    -- Get all (IMPORTED & MAPPED) Subscriptions
    select mapping.recharge_subscription_id, mapping.recurly_subscription_id, 1 as is_recharge_native, 0 as is_recurly_native, 1 as is_imported
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" as recharge
    join ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING"" as mapping on mapping.recharge_subscription_id = recharge.id
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping.recurly_subscription_id = recurly.uuid

    union all 

    -- Get all (UNIMPORTED) Recurly-Only Subscriptions
    select null as recharge_subscription_id, uuid as recurly_subscription_id, 0 as is_recharge_native, 1 as is_recurly_native, 0 as is_imported
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS""
    where uuid not in (select recharge_subscription_id from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING"")"
"V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2","create view ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2""
as

    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
    select to_varchar(recharge_s.id) as recharge_subscription_id, null as recurly_subscription_id, 
        1 as is_recharge_native, 0 as is_recurly_native, 0 as is_imported,
        to_varchar(recharge_c.id) as customer_id, recharge_c.email as customer_email,
        recharge_s.status as current_status, recharge_s.created_at as created_at, null as activated_at, recharge_s.cancelled_at as cancelled_at, recharge_s.price as price, recharge_s.quantity as quantity
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    where to_varchar(recharge_s.id) not in (
        select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null
        union all
        select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
        where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
        union all
        select distinct to_varchar(RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null   
    )

    union all

    -- Get all (IMPORTED & MAPPED) Subscriptions
    select to_varchar(mapping._recharge_subscription_id) as recharge_subscription_id, to_varchar(mapping._recurly_subscription_id) as recurly_subscription_id, 
        1 as is_recharge_native, 0 as is_recurly_native, 1 as is_imported,
        to_varchar(recharge_c.id) as customer_id, recharge_c.email as customer_email,
        recurly.state as current_status, recharge_c.created_at as created_at, recurly.activated_at as activated_at, recurly.canceled_at as cancelled_at, recurly.total_recurring_amount as price, recurly.quantity as quantity
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    join
    (
        select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null
        union all
        select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
        where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
        union all
        select distinct to_varchar(RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID
        from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null   
    ) as mapping on to_varchar(mapping._recharge_subscription_id) = to_varchar(recharge_s.id)
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping._recurly_subscription_id = recurly.uuid
  
    union all 

    -- Get all (UNIMPORTED) Recurly-Only Subscriptions
    select null as recharge_subscription_id, to_varchar(uuid) as recurly_subscription_id, 
        0 as is_recharge_native, 1 as is_recurly_native, 0 as is_imported,
        to_varchar(account_code) as customer_id, email as customer_email,
        state as current_status, created_at as created_at, activated_at as activated_at, canceled_at as cancelled_at, total_recurring_amount as price, quantity as quantity
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS""
    where uuid not in (
        select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _MAPPED_RECURLY_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) is not null
        union all
        select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
        where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
        union all
        select distinct to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(RECURLY_SUBSCRIPTION_ID) is not null      
    )"
"V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1","create or replace view MARKETING_DATABASE.PUBLIC.""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1""(
	RECHARGE_SUBSCRIPTION_ID,
	RECURLY_SUBSCRIPTION_ID,
	IS_RECHARGE_NATIVE,
	IS_RECURLY_NATIVE,
	IS_IMPORTED,
	CUSTOMER_ID,
	CUSTOMER_EMAIL,
	CURRENT_STATUS,
	CREATED_AT,
	ACTIVATED_AT,
	CANCELLED_AT,
	PRICE,
	QUANTITY
) as

    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
    select to_varchar(recharge_s.id) as recharge_subscription_id, null as recurly_subscription_id, 
        1 as is_recharge_native, 0 as is_recurly_native, 0 as is_imported,
        to_varchar(recharge_c.id) as customer_id, recharge_c.email as customer_email,
        recharge_s.status as current_status, recharge_s.created_at as created_at, null as activated_at, recharge_s.cancelled_at as cancelled_at, recharge_s.price as price, recharge_s.quantity as quantity
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    where to_varchar(recharge_s.id) not in (

        select *
        from
        (
            select distinct trim(to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct trim(to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct trim(to_varchar(RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null   
        ) as a
        where _RECHARGE_SUBSCRIPTION_ID not in ('NULL', 'canceled', 'cancel')      
      
    )

    union all

    -- Get all (IMPORTED & MAPPED) Subscriptions
    select to_varchar(mapping._recharge_subscription_id) as recharge_subscription_id, to_varchar(mapping._recurly_subscription_id) as recurly_subscription_id, 
        1 as is_recharge_native, 0 as is_recurly_native, 1 as is_imported,
        to_varchar(recharge_c.id) as customer_id, recharge_c.email as customer_email,
        recurly.state as current_status, recharge_c.created_at as created_at, recurly.activated_at as activated_at, recurly.canceled_at as cancelled_at, recurly.total_recurring_amount as price, recurly.quantity as quantity
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    join
    (
        select *
        from
        (
            select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null
            union all
            select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct to_varchar(RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID
            from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null   
        ) as a
        where _RECHARGE_SUBSCRIPTION_ID not in ('NULL', 'canceled', 'cancel') 
        and _RECURLY_SUBSCRIPTION_ID not in ('NULL', 'no need to map since it''s cancelled', 'expired', 'cancelled', 'canceled', 'cancel')
    ) as mapping on to_varchar(mapping._recharge_subscription_id) = to_varchar(recharge_s.id)
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping._recurly_subscription_id = recurly.uuid
  
    union all 

    -- Get all (UNIMPORTED) Recurly-Only Subscriptions
    select null as recharge_subscription_id, to_varchar(uuid) as recurly_subscription_id, 
        0 as is_recharge_native, 1 as is_recurly_native, 0 as is_imported,
        to_varchar(account_code) as customer_id, email as customer_email,
        state as current_status, created_at as created_at, activated_at as activated_at, canceled_at as cancelled_at, total_recurring_amount as price, quantity as quantity
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS""
    where uuid not in (
        select *
        from
        (
          select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
          where to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) is not null
          union all
          select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
          where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
          union all
          select distinct to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
          where to_varchar(RECURLY_SUBSCRIPTION_ID) is not null      
         ) as a
         where _RECURLY_SUBSCRIPTION_ID not in ('NULL', 'no need to map since it''s cancelled', 'expired', 'cancelled', 'canceled', 'cancel')
    );"
"V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_META_DATES","create view v_MergedRechargeAndRecurlySubscriptions_Meta_Dates
as

    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
    select to_varchar(recharge_s.id) as recharge_subscription_id, null as recurly_subscription_id, 1 as is_recharge_native, 0 as is_recurly_native, 0 as is_imported,
        to_varchar(recharge_c.id) as customer_id, recharge_c.email as customer_email,
        recharge_s.status as current_status, recharge_s.created_at as created_at, null as activated_at, recharge_s.cancelled_at as cancelled_at, recharge_s.price as price, recharge_s.quantity as quantity
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    where recharge_s.id not in (select recharge_subscription_id from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING"")

    union all

    -- Get all (IMPORTED & MAPPED) Subscriptions
    select mapping.recharge_subscription_id, mapping.recurly_subscription_id, 1 as is_recharge_native, 0 as is_recurly_native, 1 as is_imported,
        to_varchar(recharge_c.id) as customer_id, recharge_c.email as customer_email,
        recurly.state as current_status, recharge_s.created_at as created_at, recurly.activated_at as activated_at, recurly.canceled_at as cancelled_at, recurly.total_recurring_amount as price, recurly.quantity as quantity
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    join ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING"" as mapping on mapping.recharge_subscription_id = recharge_s.id
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping.recurly_subscription_id = recurly.uuid

    union all 

    -- Get all (UNIMPORTED) Recurly-Only Subscriptions
    select null as recharge_subscription_id, uuid as recurly_subscription_id, 0 as is_recharge_native, 1 as is_recurly_native, 0 as is_imported,
        to_varchar(account_code) as customer_id, email as customer_email,
        state as current_status, created_at as created_at, activated_at as activated_at, canceled_at as cancelled_at, total_recurring_amount as price, quantity as quantity
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS""
    where uuid not in (select recharge_subscription_id from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING"")"
"V_PILOT_DASHBOARD","create or replace view ""MARKETING_DATABASE"".""PUBLIC"".""V_PILOT_DASHBOARD""
as

    select charges.*, zeroifnull(refunds.total_refund) as total_refund
    from 
    (
        select recurly_non_shipping.day as day, 
            recurly_non_shipping.sku as sku,
            zeroifnull(sum(recurly_shipping.shipping_amount)) as shipping_amount,                      
            zeroifnull(sum(recurly_non_shipping.tax_amount)) as tax_amount,
            zeroifnull(sum(recurly_non_shipping.discount_amount)) as discount_amount,
            zeroifnull(sum(recurly_non_shipping.total_charge_quantity)) as total_charge_quantity,
            zeroifnull(sum(recurly_non_shipping.total_subscription_quantity)) as total_subscription_quantity,
            zeroifnull(sum(recurly_non_shipping.price_total)) as price_total,
            zeroifnull(sum(recurly_non_shipping.price_subtotal)) as price_subtotal,
            zeroifnull(sum(recurly_non_shipping.price_total)) - zeroifnull(sum(recurly_non_shipping.tax_amount)) - zeroifnull(sum(recurly_shipping.shipping_amount)) + zeroifnull(sum(recurly_non_shipping.discount_amount)) as gross_revenue


        from
        (

              -- Non-Shipping Adjustments
              select to_date(i.closed_at) as day, 
                     i.id,
                     a.adjustment_description as sku,
                    sum(distinct i.tax_amount) as tax_amount,
                    0 as shipping_amount,
                    sum(distinct i.invoice_discount) as discount_amount,
                    count(distinct i.id) as total_charge_quantity,
                    sum(a.adjustment_quantity) as total_subscription_quantity,
                    sum(distinct i.invoice_total) as price_total,
                    sum(distinct i.invoice_subtotal) as price_subtotal                  
              from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
              join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
              where i.status in ('paid')
              and i.invoice_doc_type in ('charge') 
              and adjustment_description not ilike '%shipping%'
              group by i.id, day, sku

          ) as recurly_non_shipping
          left join 
          (
              -- Shipping Adjustments            
              select to_date(i.closed_at) as day, 
                    i.id,
                    a.adjustment_description as sku,
                    0 as tax_amount,
                    sum(a.adjustment_total) as shipping_amount,
                    0 as discount_amount,
                    0 as total_charge_quantity,
                    0 as total_subscription_quantity,
                    0 as price_total,            
                    0 as price_subtotal                  
              from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
              join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
              where i.status in ('paid')
              and i.invoice_doc_type in ('charge')
              and adjustment_description ilike '%shipping%'
              group by i.id, day, sku

          ) as recurly_shipping 
          on recurly_shipping.id = recurly_non_shipping.id 
            and recurly_shipping.day = recurly_non_shipping.day
        group by recurly_non_shipping.day, recurly_non_shipping.sku
    ) as charges
    left join
    (

        select to_date(i.closed_at) as day,
                a.adjustment_description as sku,
                sum(distinct i.invoice_total) as total_refund
        from""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
        where i.invoice_type = 'refund'
        and adjustment_description not ilike '%shipping%'
        group by day, sku

    ) as refunds on charges.day = refunds.day and charges.sku = refunds.sku
    order by charges.day"
"V_SUBSCRIPTION_MAPPING","create or replace view MARKETING_DATABASE.PUBLIC.V_SUBSCRIPTION_MAPPING(
	RECHARGE_SUBSCRIPTION_ID,
	RECURLY_SUBSCRIPTION_ID,
	IS_RECHARGE_NATIVE,
	IS_RECURLY_NATIVE,
	IS_IMPORTED,
	CUSTOMER_ID,
	CUSTOMER_EMAIL,
	FIRST_NAME,
	LAST_NAME,
	CURRENT_STATUS,
	CREATED_AT,
	ACTIVATED_AT,
	CANCELLED_AT,
	PRICE,
	QUANTITY,
	BILLING_COUNTRY,
	IS_INTERNATIONAL,
	SKU,
	IS_PREORDER
) as

    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
    select to_varchar(recharge_s.id) as recharge_subscription_id, 
            null as recurly_subscription_id, 
            1 as is_recharge_native, 
            0 as is_recurly_native, 
            0 as is_imported,
            to_varchar(recharge_c.id) as customer_id, 
            recharge_c.email as customer_email,
            recharge_c.first_name as first_name,
            recharge_c.last_name as last_name,
            recharge_s.status as current_status, 
            recharge_s.created_at as created_at, 
            null as activated_at, 
            recharge_s.cancelled_at as cancelled_at, 
            recharge_s.price as price, 
            recharge_s.quantity as quantity,
            recharge_c.billing_country,
            case when recharge_c.billing_country in ('United States', 'US') then 0 else 1 end as is_international,            
            recharge_s.sku,
            null as is_preorder
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    where to_varchar(recharge_s.id) not in (
        select distinct _RECHARGE_SUBSCRIPTION_ID
        from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_MAPPING_CONSOLIDATED""
    )

    union all

    -- Get all (IMPORTED & MAPPED) Subscriptions
    select to_varchar(mapping._recharge_subscription_id) as recharge_subscription_id, 
            to_varchar(mapping._recurly_subscription_id) as recurly_subscription_id, 
            1 as is_recharge_native, 
            0 as is_recurly_native, 
            1 as is_imported,
            to_varchar(recharge_c.id) as customer_id, 
            recharge_c.email as customer_email,
            recharge_c.first_name as first_name,
            recharge_c.last_name as last_name,
            recurly.state as current_status, 
            recharge_s.created_at as created_at, 
            null as activated_at, -- precaution: we dont know the exact ""activated at"" for imporated subscriptions
            -- recurly.activated_at as activated_at, 
            recurly.canceled_at as cancelled_at, 
            recurly.total_recurring_amount as price, 
            recurly.quantity as quantity,
            recharge_c.billing_country,
            case when recharge_c.billing_country in ('United States', 'US') then 0 else 1 end as is_international,
            recharge_s.sku,
            null as is_preorder
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s            
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    join
    (
        select distinct _RECHARGE_SUBSCRIPTION_ID, _RECURLY_SUBSCRIPTION_ID
        from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_MAPPING_CONSOLIDATED""       
    ) as mapping on to_varchar(mapping._recharge_subscription_id) = to_varchar(recharge_s.id)
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping._recurly_subscription_id = recurly.uuid
  
    union all 

    -- Get all (UNIMPORTED) Recurly-Only Subscriptions
    select null as recharge_subscription_id, 
            to_varchar(uuid) as recurly_subscription_id, 
            0 as is_recharge_native, 
            1 as is_recurly_native, 
            0 as is_imported,
            to_varchar(s.account_code) as customer_id, 
            email as customer_email,
            a.account_first_name as first_name,
            a.account_last_name as last_name,
            state as current_status, 
            created_at as created_at, 
            activated_at as activated_at, 
            canceled_at as cancelled_at, 
            total_recurring_amount as price, 
            quantity as quantity,            
            ship_address_country,
            case when ship_address_country in ('United States', 'US') then 0 else 1 end as is_international,
            adj_first.first_adjustment_product_code as sku,
            case when adj_first.first_adjustment_total = 0 then 1 else 0 end as is_preorder
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" s LEFT JOIN ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS"" a ON s.account_code = a.account_code 
    left join ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_FIRST_RECURLY_ADJUSTMENT"" adj_first on adj_first.subscription_id = s.uuid
    where uuid not in (

        select distinct _RECURLY_SUBSCRIPTION_ID
        from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_MAPPING_CONSOLIDATED""

    );"
"V_SUBSCRIPTION_MAPPING_DS_01","create or replace view MARKETING_DATABASE.PUBLIC.V_SUBSCRIPTION_MAPPING_DS_01(
	RECHARGE_SUBSCRIPTION_ID,
	RECURLY_SUBSCRIPTION_ID,
	IS_RECHARGE_NATIVE,
	IS_RECURLY_NATIVE,
	IS_IMPORTED,
	CUSTOMER_ID,
	CUSTOMER_EMAIL,
	FIRST_NAME,
	LAST_NAME,
	CURRENT_STATUS,
	CREATED_AT,
	ACTIVATED_AT,
	CANCELLED_AT,
	PRICE,
	QUANTITY,
	FULL_ADDRESS,
	BILLING_COUNTRY,
    BILLING_CITY,
    BILLING_STATE,
	IS_INTERNATIONAL,
	SKU,
	IS_PREORDER
) as

    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
    select to_varchar(recharge_s.id) as recharge_subscription_id, 
            null as recurly_subscription_id, 
            1 as is_recharge_native, 
            0 as is_recurly_native, 
            0 as is_imported,
            to_varchar(recharge_c.id) as customer_id, 
            recharge_c.email as customer_email,
            recharge_c.first_name as first_name,
            recharge_c.last_name as last_name,
            recharge_s.status as current_status, 
            recharge_s.created_at as created_at, 
            null as activated_at, 
            recharge_s.cancelled_at as cancelled_at, 
            recharge_s.price as price, 
            recharge_s.quantity as quantity,
            recharge_c.BILLING_ADDRESS_1 as full_address,
            recharge_c.billing_country,
            recharge_c.billing_city as billing_city,
            recharge_c.billing_province as billing_state,
            case when recharge_c.billing_country in ('United States', 'US') then 0 else 1 end as is_international,            
            recharge_s.sku,
            null as is_preorder
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    where to_varchar(recharge_s.id) not in (
        select distinct _RECHARGE_SUBSCRIPTION_ID
        from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_MAPPING_CONSOLIDATED""
    )

    union all

    -- Get all (IMPORTED & MAPPED) Subscriptions
    select to_varchar(mapping._recharge_subscription_id) as recharge_subscription_id, 
            to_varchar(mapping._recurly_subscription_id) as recurly_subscription_id, 
            1 as is_recharge_native, 
            0 as is_recurly_native, 
            1 as is_imported,
            to_varchar(recharge_c.id) as customer_id, 
            recharge_c.email as customer_email,
            recharge_c.first_name as first_name,
            recharge_c.last_name as last_name,
            recurly.state as current_status, 
            recharge_s.created_at as created_at, 
            null as activated_at, -- precaution: we dont know the exact ""activated at"" for imporated subscriptions
            -- recurly.activated_at as activated_at, 
            recurly.canceled_at as cancelled_at, 
            recurly.total_recurring_amount as price, 
            recurly.quantity as quantity,
            recharge_c.billing_address_1 as full_address,
            recharge_c.billing_country,
            recharge_c.billing_city as billing_city,
            recharge_c.billing_province as billing_state,
            case when recharge_c.billing_country in ('United States', 'US') then 0 else 1 end as is_international,
            recharge_s.sku,
            null as is_preorder
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s            
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    join
    (
        select distinct _RECHARGE_SUBSCRIPTION_ID, _RECURLY_SUBSCRIPTION_ID
        from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_MAPPING_CONSOLIDATED""       
    ) as mapping on to_varchar(mapping._recharge_subscription_id) = to_varchar(recharge_s.id)
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping._recurly_subscription_id = recurly.uuid
  
    union all 

    -- Get all (UNIMPORTED) Recurly-Only Subscriptions
    select null as recharge_subscription_id, 
            to_varchar(uuid) as recurly_subscription_id, 
            0 as is_recharge_native, 
            1 as is_recurly_native, 
            0 as is_imported,
            to_varchar(s.account_code) as customer_id, 
            email as customer_email,
            a.account_first_name as first_name,
            a.account_last_name as last_name,
            state as current_status, 
            created_at as created_at, 
            activated_at as activated_at, 
            canceled_at as cancelled_at, 
            total_recurring_amount as price, 
            quantity as quantity,
            ship_address_street1 as full_address,
            ship_address_country,
            SHIP_ADDRESS_CITY,
            SHIP_ADDRESS_STATE,
            case when ship_address_country in ('United States', 'US') then 0 else 1 end as is_international,
            adj_last.last_adjustment_product_code as sku,
            case when adj_first.first_adjustment_total = 0 then 1 else 0 end as is_preorder
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" s LEFT JOIN ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS"" a ON s.account_code = a.account_code 
    left join ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_FIRST_RECURLY_ADJUSTMENT"" adj_first on adj_first.subscription_id = s.uuid
    left join ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_LAST_RECURLY_ADJUSTMENT"" adj_last on adj_last.subscription_id = s.uuid
    where (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
          and uuid not in (
            select distinct _RECURLY_SUBSCRIPTION_ID
            from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_MAPPING_CONSOLIDATED""
                        );"
"V_SUBSCRIPTION_MAPPING_PDS_08","create or replace view MARKETING_DATABASE.PUBLIC.V_SUBSCRIPTION_MAPPING_PDS_08(
	RECURLY_SUBSCRIPTION_ID,
	CUSTOMER_ID,
	CUSTOMER_EMAIL,
	FIRST_NAME,
	LAST_NAME,
	CURRENT_STATUS,
	CREATED_AT,
	ACTIVATED_AT,
	CANCELLED_AT,
	PRICE,
	QUANTITY,
	BILLING_COUNTRY,
    BILLING_CITY,
    BILLING_STATE,
    BILLING_ZIP,
	IS_INTERNATIONAL,
	SKU,
	IS_PREORDER
) as

    -- Get all Recurly-Only Subscriptions
    select to_varchar(uuid) as recurly_subscription_id, 
            to_varchar(s.account_code) as customer_id, 
            email as customer_email,
            a.account_first_name as first_name,
            a.account_last_name as last_name,
            state as current_status, 
            created_at as created_at, 
            activated_at as activated_at, 
            canceled_at as cancelled_at, 
            total_recurring_amount as price, 
            quantity as quantity,            
            ship_address_country,
            ship_address_city,
            ship_address_state,
            ship_address_zip,
            case when ship_address_country in ('United States', 'US') then 0 else 1 end as is_international,
            adj_first.first_adjustment_product_code as sku,
            case when adj_first.first_adjustment_total = 0 then 1 else 0 end as is_preorder
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" s 
    LEFT JOIN ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS"" a ON s.account_code = a.account_code 
    left join ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_FIRST_RECURLY_ADJUSTMENT"" adj_first on adj_first.subscription_id = s.uuid
    where (s.plan_name ilike '%PDS-08%' or s.plan_name ilike 'Pediatric Daily Synbiotic%')
          ;"
"V_SUBSCRIPTION_MAPPING_V1_7","create view MARKETING_DATABASE.PUBLIC.V_SUBSCRIPTION_MAPPING_v1_7
as

    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
    select to_varchar(recharge_s.id) as recharge_subscription_id, 
            null as recurly_subscription_id, 
            1 as is_recharge_native, 
            0 as is_recurly_native, 
            0 as is_imported,
            to_varchar(recharge_c.id) as customer_id, 
            recharge_c.email as customer_email,
            recharge_s.status as current_status, 
            recharge_s.created_at as created_at, 
            null as activated_at, 
            recharge_s.cancelled_at as cancelled_at, 
            recharge_s.price as price, 
            recharge_s.quantity as quantity,
            recharge_c.billing_country,
            case when recharge_c.billing_country in ('United States', 'US') then 0 else 1 end as is_international,            
            recharge_s.sku,
            null as is_preorder
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    where to_varchar(recharge_s.id) not in (

        select *
        from
        (
            select distinct trim(to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct trim(to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct trim(to_varchar(RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null   
        ) as a
        where _RECHARGE_SUBSCRIPTION_ID not in ('NULL', 'canceled', 'cancel')      
    )

    union all

    -- Get all (IMPORTED & MAPPED) Subscriptions
    select to_varchar(mapping._recharge_subscription_id) as recharge_subscription_id, 
            to_varchar(mapping._recurly_subscription_id) as recurly_subscription_id, 
            1 as is_recharge_native, 
            0 as is_recurly_native, 
            1 as is_imported,
            to_varchar(recharge_c.id) as customer_id, 
            recharge_c.email as customer_email,
            recurly.state as current_status, 
            recharge_s.created_at as created_at, 
            null as activated_at, -- precaution: we dont know the exact ""activated at"" for imporated subscriptions
            -- recurly.activated_at as activated_at, 
            recurly.canceled_at as cancelled_at, 
            recurly.total_recurring_amount as price, 
            recurly.quantity as quantity,
            recharge_c.billing_country,
            case when recharge_c.billing_country in ('United States', 'US') then 0 else 1 end as is_international,
            recharge_s.sku,
            null as is_preorder
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s            
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    join
    (
        select *
        from
        (
            select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null
            union all
            select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct to_varchar(RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID
            from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null   
        ) as a
        where _RECHARGE_SUBSCRIPTION_ID not in ('NULL', 'canceled', 'cancel') 
        and _RECURLY_SUBSCRIPTION_ID not in ('NULL', 'no need to map since it''s cancelled', 'expired', 'cancelled', 'canceled', 'cancel')
    ) as mapping on to_varchar(mapping._recharge_subscription_id) = to_varchar(recharge_s.id)
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping._recurly_subscription_id = recurly.uuid
  
    union all 

    -- Get all (UNIMPORTED) Recurly-Only Subscriptions
    select null as recharge_subscription_id, 
            to_varchar(uuid) as recurly_subscription_id, 
            0 as is_recharge_native, 
            1 as is_recurly_native, 
            0 as is_imported,
            to_varchar(account_code) as customer_id, 
            email as customer_email,
            state as current_status, 
            created_at as created_at, 
            activated_at as activated_at, 
            canceled_at as cancelled_at, 
            total_recurring_amount as price, 
            quantity as quantity,            
            ship_address_country,
            case when ship_address_country in ('United States', 'US') then 0 else 1 end as is_international,
            adj_first.first_adjustment_product_code as sku,
            case when adj_first.first_adjustment_total = 0 then 1 else 0 end as is_preorder
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" s
    left join ""MARKETING_DATABASE"".""PUBLIC"".""v_first_recurly_adjustment"" adj_first on adj_first.subscription_id = s.uuid
    where uuid not in (
        select *
        from
        (
          select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
          where to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) is not null
          union all
          select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
          where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
          union all
          select distinct to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
          where to_varchar(RECURLY_SUBSCRIPTION_ID) is not null      
         ) as a
         where _RECURLY_SUBSCRIPTION_ID not in ('NULL', 'no need to map since it''s cancelled', 'expired', 'cancelled', 'canceled', 'cancel')
    )
    
    union all
    
    -- Get all (UNIMPORTED) Recurly-Only Subscriptions ** THAT ARE GIFT KITS
    select null as recharge_subscription_id, 
            null as recurly_subscription_id, 
            0 as is_recharge_native, 
            1 as is_recurly_native, 
            0 as is_imported,
            to_varchar(acc.account_code) as customer_id, 
            acc.ACCOUNT_EMAIL as customer_email,
            'ACTIVE' as current_status, 
            inv.BILLED_DATE as created_at, 
            inv.BILLED_DATE as activated_at, 
            null as cancelled_at, 
            adj.adjustment_total as price, 
            adj.adjustment_quantity as quantity,            
            inv.ship_address_country,
            case when inv.ship_address_country in ('United States', 'US') then 0 else 1 end as is_international,
            adj.adjustment_product_code as sku,
            0 as is_preorder
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" adj
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" inv on inv.id = adj.INVOICE_ID
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS"" acc on acc.ACCOUNT_CODE = adj.ACCOUNT_CODE    
    where adj.subscription_id is null
      and adj.adjustment_description not ilike 'Shipping%' 
      and adj.adjustment_type = 'charge'      
      and adj.adjustment_product_code ilike '%gift%'"
"V_SUB_DS01_PARTICIPATION_RETENTION_V1","create or replace view MARKETING_DATABASE.PUBLIC.V_SUB_DS01_PARTICIPATION_RETENTION_V1(
	RECHARGE_SUBSCRIPTION_ID,
	RECURLY_SUBSCRIPTION_ID,
	SUBSCRIPTION_ID,
	FIRST_CHARGED_DATE,
	TOTAL_QUANTITY,
	CHARGED_DATE,
	CHARGED_QUANTITY
) as


with all_gain_loss as
(
    select distinct 
        recharge_subscription_id,
        recurly_subscription_id,
        case when RECHARGE_SUBSCRIPTION_ID is null then RECURLY_SUBSCRIPTION_ID
            else RECHARGE_SUBSCRIPTION_ID
            end as subscription_id,
        cohort.created_at as first_charged_date,
        cohort.quantity as total_quantity 
    from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01"" as cohort
    
),
        
recurly_charges_adjusted as
(
    with recurly as
    (
        select to_varchar(s.uuid) as subscription_id,
            t.date as charged_date,
            adjustment_plan_code as sku,
            adjustment_quantity as charged_quantity
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
        left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
        where t.type = 'purchase'
            and t.status = 'success'
            and adjustment_description not ilike '%shipping%'
            and (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
            and adjustment_plan_code not ilike 'pds%'
 
    ),
    recurly_charges as
    (
        select *
        from recurly

        union all
        
        select subscription_id, DATEADD(day, 30, charged_date) as charged_date, sku, charged_quantity
        from recurly
        where sku ilike '%2mo%' or sku ilike '%3mo%' or sku ilike '%6mo%'

        union all
        
        select subscription_id, DATEADD(day, 60, charged_date) as charged_date, sku, charged_quantity
        from recurly
        where sku ilike '%3mo%' or sku ilike '%6mo%'

        union all
        
        select subscription_id, DATEADD(day, 90, charged_date) as charged_date, sku, charged_quantity
        from recurly
        where sku ilike '%6mo%'

        union all
        
        select subscription_id, DATEADD(day, 120, charged_date) as charged_date, sku, charged_quantity
        from recurly
        where sku ilike '%6mo%'

        union all
        
        select subscription_id, DATEADD(day, 150, charged_date) as charged_date, sku, charged_quantity
        from recurly
        where sku ilike '%6mo%'
        
    )
        
    select recharge_subscription_id,recurly_subscription_id,agl.subscription_id,first_charged_date,total_quantity,rcur_ch.charged_date,rcur_ch.charged_quantity
    from all_gain_loss as agl
    left join recurly_charges as rcur_ch on agl.recurly_subscription_id = rcur_ch.subscription_id
),

recharge_charges_adjusted as
(
    with recharge as
    (
        select to_varchar(s.id) as subscription_id, 
            c.processed_at as charged_date, 
            cli.sku as sku,
            cli.quantity as charged_quantity  
        from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
        join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
        join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
    ),
    recharge_charges as
    (
        select *
        from recharge

        union all
        
        select subscription_id, DATEADD(day, 30, charged_date) as charged_date, sku, charged_quantity
        from recharge
        where sku ilike '%2mo%' or sku ilike '%3mo%' or sku ilike '%6mo%'

        union all
        
        select subscription_id, DATEADD(day, 60, charged_date) as charged_date, sku, charged_quantity
        from recharge
        where sku ilike '%3mo%' or sku ilike '%6mo%'

        union all
        
        select subscription_id, DATEADD(day, 90, charged_date) as charged_date, sku, charged_quantity
        from recharge
        where sku ilike '%6mo%'

        union all
        
        select subscription_id, DATEADD(day, 120, charged_date) as charged_date, sku, charged_quantity
        from recharge
        where sku ilike '%6mo%'

        union all
        
        select subscription_id, DATEADD(day, 150, charged_date) as charged_date, sku, charged_quantity
        from recharge
        where sku ilike '%6mo%'
    )

    select recharge_subscription_id,recurly_subscription_id,agl.subscription_id,first_charged_date,total_quantity,rchr_ch.charged_date,rchr_ch.charged_quantity
    from all_gain_loss as agl
    left join recharge_charges as rchr_ch on agl.recharge_subscription_id = rchr_ch.subscription_id
    
)

select * from recurly_charges_adjusted
where charged_date is null or charged_date <= current_date
union all 
select * from recharge_charges_adjusted
where charged_date is null or charged_date <= current_date;"
"V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021","create or replace view MARKETING_DATABASE.PUBLIC.V_ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021(
	RECHARGE_SUBSCRIPTION_ID,
	RECURLY_SUBSCRIPTION_ID,
	LTR
) as
    select map.recharge_subscription_id, 
            map.recurly_subscription_id, 
            zeroifnull(LTR_recharge) + zeroifnull(LTR_recurly) as LTR-- ,
            -- map.*
    from  ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as map
    left join (


        select s.id as recharge_subscription_id, sum(c.total_price) as LTR_recharge
        from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
        join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
        left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
        left join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on s.customer_id = c.customer_id
        where c.status = 'SUCCESS'
        group by recharge_subscription_id
        order by recharge_subscription_id


    ) as _recharge on map.recharge_subscription_id = _recharge.recharge_subscription_id
    left join (

        select a.subscription_id as recurly_subscription_id, sum(a.ADJUSTMENT_TOTAL) as LTR_recurly
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
        where i.status in ('paid')
        and i.invoice_doc_type in ('charge')
        group by subscription_id
        order by subscription_id

    ) as _recurly on map.recurly_subscription_id = _recurly.recurly_subscription_id
    where LTR <= 0
    -- TIM & SURAJ - Only return Zero LTR Subscriptions before Oct 2020
    and map.created_at < '2021-01-01'
    -- and _recharge.recharge_subscription_id is null AND _recurly.recurly_subscription_id is null
    order by map.recharge_subscription_id, map.recurly_subscription_id;"
"v_first_recurly_adjustment","create view ""MARKETING_DATABASE"".""PUBLIC"".""v_first_recurly_adjustment""
as
    select adj_first_sku.subscription_id, 
            adj_first_sku.adjustment_start_at as first_adjustment_start_at, 
            adj_first_sku.adjustment_product_code as first_adjustment_product_code,
            adj_first_sku.adjustment_quantity as first_adjustment_quantity,
            adj_first_sku.adjustment_total as first_adjustment_total,
            adj_first_sku.adjustment_tax as first_adjustment_total_tax,
            adj_first_sku.adjustment_discount as first_adjustment_total_discount

    from
    (
      select min(adjustment_start_at) as adjustment_start_at, subscription_id
      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
      where adjustment_description not ilike 'Shipping%' 
      and adjustment_type = 'charge' 
      and subscription_id is not null
      group by subscription_id
    ) as adj_first
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as adj_first_sku 
        on adj_first_sku.adjustment_start_at = adj_first.adjustment_start_at
        and adj_first_sku.subscription_id = adj_first.subscription_id
    where adj_first_sku.adjustment_description not ilike 'Shipping%' 
    and adj_first_sku.adjustment_type = 'charge' 
    and adj_first_sku.subscription_id is not null    
    order by adj_first_sku.adjustment_start_at, adj_first_sku.subscription_id"
"PRE_ORDERS_JUNE_2021","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.PRE_ORDERS_JUNE_2021 as


select b.date, a.*, b.invoice_number

from (
select first_adjustment_product_code as first_sku,
s.email, s.uuid
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s
join ""MARKETING_DATABASE"".""PUBLIC"".""d_first_recurly_adjustment"" as a 
on s.uuid = a.subscription_id
where s.created_at > '2021-03-26') as a left join

(
select a.subscription_id as subscription_id,a.invoice_number as invoice_number, to_date(a.adjustment_created_at) as date
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
where i.status in ('paid')
and i.invoice_doc_type in ('charge') 
and adjustment_description not ilike '%shipping%') as b on a.uuid = b.subscription_id

order by uuid;"
"V_ALL_AUDIENCES","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.V_ALL_AUDIENCES as (
    select * from ""MARKETING_DATABASE"".""COHORTPOC"".""TWO_A""
        union all
    select * from ""MARKETING_DATABASE"".""COHORTPOC"".""TWO_B""
        union all 
    select * from ""MARKETING_DATABASE"".""COHORTPOC"".""TWO_C""
        union all 
    select * from ""MARKETING_DATABASE"".""COHORTPOC"".""SIX_A""
);"
"V_COHORT_DAVEADJUSTMENT_APRIL_01_2021","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.V_COHORT_DAVEADJUSTMENT_APRIL_01_2021
as

    with all_gain_loss as
    (

        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))

    )

    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx

              )  as a
              /*
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )
              */




        ) as _cohort
        group by cohort_id

    ) as initial_gain
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx

              )  as a
              /*where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )*/


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS","create view ""MARKETING_DATABASE.PRODUCTION_VIEWS.V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS""
as

    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
    select to_varchar(recharge_s.id) as recharge_subscription_id, null as recurly_subscription_id, 
        1 as is_recharge_native, 0 as is_recurly_native, 0 as is_imported,
        to_varchar(recharge_c.id) as customer_id, recharge_c.email as customer_email,
        recharge_s.status as current_status, recharge_s.created_at as created_at, null as activated_at, recharge_s.cancelled_at as cancelled_at, recharge_s.price as price, recharge_s.quantity as quantity
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    where to_varchar(recharge_s.id) not in (
        select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null
        union all
        select distinct to_varchar(RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null
    )

    union all

    -- Get all (IMPORTED & MAPPED) Subscriptions
    select to_varchar(mapping._recharge_subscription_id) as recharge_subscription_id, to_varchar(mapping._recurly_subscription_id) as recurly_subscription_id, 
        1 as is_recharge_native, 0 as is_recurly_native, 1 as is_imported,
        to_varchar(recharge_c.id) as customer_id, recharge_c.email as customer_email,
        recurly.state as current_status, recharge_c.created_at as created_at, recurly.activated_at as activated_at, recurly.canceled_at as cancelled_at, recurly.total_recurring_amount as price, recurly.quantity as quantity
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    join
    (
        select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null and to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) is not null
        union all
        select distinct to_varchar(RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID
        from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null and to_varchar(RECURLY_SUBSCRIPTION_ID) is not null      
    ) as mapping on to_varchar(mapping._recharge_subscription_id) = to_varchar(recharge_s.id)
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping._recurly_subscription_id = recurly.uuid
  
    union all 

    -- Get all (UNIMPORTED) Recurly-Only Subscriptions
    select null as recharge_subscription_id, to_varchar(uuid) as recurly_subscription_id, 
        0 as is_recharge_native, 1 as is_recurly_native, 0 as is_imported,
        to_varchar(account_code) as customer_id, email as customer_email,
        state as current_status, created_at as created_at, activated_at as activated_at, canceled_at as cancelled_at, total_recurring_amount as price, quantity as quantity
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS""
    where uuid not in (
        select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _MAPPED_RECURLY_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) is not null
        union all
        select distinct to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(RECURLY_SUBSCRIPTION_ID) is not null      
    )"
"V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2","create view ""MARKETING_DATABASE.PRODUCTION_VIEWS.V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2""
as

    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
    select to_varchar(recharge_s.id) as recharge_subscription_id, null as recurly_subscription_id, 
        1 as is_recharge_native, 0 as is_recurly_native, 0 as is_imported,
        to_varchar(recharge_c.id) as customer_id, recharge_c.email as customer_email,
        recharge_s.status as current_status, recharge_s.created_at as created_at, null as activated_at, recharge_s.cancelled_at as cancelled_at, recharge_s.price as price, recharge_s.quantity as quantity
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    where to_varchar(recharge_s.id) not in (
        select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null
        union all
        select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
        where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
        union all
        select distinct to_varchar(RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null   
    )

    union all

    -- Get all (IMPORTED & MAPPED) Subscriptions
    select to_varchar(mapping._recharge_subscription_id) as recharge_subscription_id, to_varchar(mapping._recurly_subscription_id) as recurly_subscription_id, 
        1 as is_recharge_native, 0 as is_recurly_native, 1 as is_imported,
        to_varchar(recharge_c.id) as customer_id, recharge_c.email as customer_email,
        recurly.state as current_status, recharge_c.created_at as created_at, recurly.activated_at as activated_at, recurly.canceled_at as cancelled_at, recurly.total_recurring_amount as price, recurly.quantity as quantity
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    join
    (
        select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null
        union all
        select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
        where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
        union all
        select distinct to_varchar(RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID
        from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null   
    ) as mapping on to_varchar(mapping._recharge_subscription_id) = to_varchar(recharge_s.id)
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping._recurly_subscription_id = recurly.uuid
  
    union all 

    -- Get all (UNIMPORTED) Recurly-Only Subscriptions
    select null as recharge_subscription_id, to_varchar(uuid) as recurly_subscription_id, 
        0 as is_recharge_native, 1 as is_recurly_native, 0 as is_imported,
        to_varchar(account_code) as customer_id, email as customer_email,
        state as current_status, created_at as created_at, activated_at as activated_at, canceled_at as cancelled_at, total_recurring_amount as price, quantity as quantity
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS""
    where uuid not in (
        select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _MAPPED_RECURLY_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) is not null
        union all
        select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
        where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
        union all
        select distinct to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
        from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
        where to_varchar(RECURLY_SUBSCRIPTION_ID) is not null      
    )"
"V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_META_DATES","create view MARKETING_DATABASE.PRODUCTION_VIEWS.V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_META_DATES
as

    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
    select to_varchar(recharge_s.id) as recharge_subscription_id, null as recurly_subscription_id, 1 as is_recharge_native, 0 as is_recurly_native, 0 as is_imported,
        to_varchar(recharge_c.id) as customer_id, recharge_c.email as customer_email,
        recharge_s.status as current_status, recharge_s.created_at as created_at, null as activated_at, recharge_s.cancelled_at as cancelled_at, recharge_s.price as price, recharge_s.quantity as quantity
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    where recharge_s.id not in (select recharge_subscription_id from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING"")

    union all

    -- Get all (IMPORTED & MAPPED) Subscriptions
    select mapping.recharge_subscription_id, mapping.recurly_subscription_id, 1 as is_recharge_native, 0 as is_recurly_native, 1 as is_imported,
        to_varchar(recharge_c.id) as customer_id, recharge_c.email as customer_email,
        recurly.state as current_status, recharge_s.created_at as created_at, recurly.activated_at as activated_at, recurly.canceled_at as cancelled_at, recurly.total_recurring_amount as price, recurly.quantity as quantity
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    join ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING"" as mapping on mapping.recharge_subscription_id = recharge_s.id
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping.recurly_subscription_id = recurly.uuid

    union all 

    -- Get all (UNIMPORTED) Recurly-Only Subscriptions
    select null as recharge_subscription_id, uuid as recurly_subscription_id, 0 as is_recharge_native, 1 as is_recurly_native, 0 as is_imported,
        to_varchar(account_code) as customer_id, email as customer_email,
        state as current_status, created_at as created_at, activated_at as activated_at, canceled_at as cancelled_at, total_recurring_amount as price, quantity as quantity
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS""
    where uuid not in (select recharge_subscription_id from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING"")"
"V_SUBSCRIPTION_MAPPING_V1_7","create view MARKETING_DATABASE.PRODUCTION_VIEWS.V_SUBSCRIPTION_MAPPING_V1_7
as

    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
    select to_varchar(recharge_s.id) as recharge_subscription_id, 
            null as recurly_subscription_id, 
            1 as is_recharge_native, 
            0 as is_recurly_native, 
            0 as is_imported,
            to_varchar(recharge_c.id) as customer_id, 
            recharge_c.email as customer_email,
            recharge_s.status as current_status, 
            recharge_s.created_at as created_at, 
            null as activated_at, 
            recharge_s.cancelled_at as cancelled_at, 
            recharge_s.price as price, 
            recharge_s.quantity as quantity,
            recharge_c.billing_country,
            case when recharge_c.billing_country in ('United States', 'US') then 0 else 1 end as is_international,            
            recharge_s.sku,
            null as is_preorder
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    where to_varchar(recharge_s.id) not in (

        select *
        from
        (
            select distinct trim(to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct trim(to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct trim(to_varchar(RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null   
        ) as a
        where _RECHARGE_SUBSCRIPTION_ID not in ('NULL', 'canceled', 'cancel')      
    )

    union all

    -- Get all (IMPORTED & MAPPED) Subscriptions
    select to_varchar(mapping._recharge_subscription_id) as recharge_subscription_id, 
            to_varchar(mapping._recurly_subscription_id) as recurly_subscription_id, 
            1 as is_recharge_native, 
            0 as is_recurly_native, 
            1 as is_imported,
            to_varchar(recharge_c.id) as customer_id, 
            recharge_c.email as customer_email,
            recurly.state as current_status, 
            recharge_s.created_at as created_at, 
            null as activated_at, -- precaution: we dont know the exact ""activated at"" for imporated subscriptions
            -- recurly.activated_at as activated_at, 
            recurly.canceled_at as cancelled_at, 
            recurly.total_recurring_amount as price, 
            recurly.quantity as quantity,
            recharge_c.billing_country,
            case when recharge_c.billing_country in ('United States', 'US') then 0 else 1 end as is_international,
            recharge_s.sku,
            null as is_preorder
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s            
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    join
    (
        select *
        from
        (
            select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null
            union all
            select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct to_varchar(RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID
            from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null   
        ) as a
        where _RECHARGE_SUBSCRIPTION_ID not in ('NULL', 'canceled', 'cancel') 
        and _RECURLY_SUBSCRIPTION_ID not in ('NULL', 'no need to map since it''s cancelled', 'expired', 'cancelled', 'canceled', 'cancel')
    ) as mapping on to_varchar(mapping._recharge_subscription_id) = to_varchar(recharge_s.id)
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping._recurly_subscription_id = recurly.uuid
  
    union all 

    -- Get all (UNIMPORTED) Recurly-Only Subscriptions
    select null as recharge_subscription_id, 
            to_varchar(uuid) as recurly_subscription_id, 
            0 as is_recharge_native, 
            1 as is_recurly_native, 
            0 as is_imported,
            to_varchar(account_code) as customer_id, 
            email as customer_email,
            state as current_status, 
            created_at as created_at, 
            activated_at as activated_at, 
            canceled_at as cancelled_at, 
            total_recurring_amount as price, 
            quantity as quantity,            
            ship_address_country,
            case when ship_address_country in ('United States', 'US') then 0 else 1 end as is_international,
            adj_first.first_adjustment_product_code as sku,
            case when adj_first.first_adjustment_total = 0 then 1 else 0 end as is_preorder
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" s
    left join ""MARKETING_DATABASE"".""PUBLIC"".""v_first_recurly_adjustment"" adj_first on adj_first.subscription_id = s.uuid
    where uuid not in (
        select *
        from
        (
          select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
          where to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) is not null
          union all
          select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
          where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
          union all
          select distinct to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
          where to_varchar(RECURLY_SUBSCRIPTION_ID) is not null      
         ) as a
         where _RECURLY_SUBSCRIPTION_ID not in ('NULL', 'no need to map since it''s cancelled', 'expired', 'cancelled', 'canceled', 'cancel')
    )
    
    union all
    
    -- Get all (UNIMPORTED) Recurly-Only Subscriptions ** THAT ARE GIFT KITS
    select null as recharge_subscription_id, 
            null as recurly_subscription_id, 
            0 as is_recharge_native, 
            1 as is_recurly_native, 
            0 as is_imported,
            to_varchar(acc.account_code) as customer_id, 
            acc.ACCOUNT_EMAIL as customer_email,
            'ACTIVE' as current_status, 
            inv.BILLED_DATE as created_at, 
            inv.BILLED_DATE as activated_at, 
            null as cancelled_at, 
            adj.adjustment_total as price, 
            adj.adjustment_quantity as quantity,            
            inv.ship_address_country,
            case when inv.ship_address_country in ('United States', 'US') then 0 else 1 end as is_international,
            adj.adjustment_product_code as sku,
            0 as is_preorder
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" adj
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" inv on inv.id = adj.INVOICE_ID
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS"" acc on acc.ACCOUNT_CODE = adj.ACCOUNT_CODE    
    where adj.subscription_id is null
      and adj.adjustment_description not ilike 'Shipping%' 
      and adj.adjustment_type = 'charge'      
      and adj.adjustment_product_code ilike '%gift%'"
"V_TRANSACTION_HISTORY","create or replace view V_TRANSACTION_HISTORY as
select
adj.day,
//adj.discount_amount,
//adj.tax,
//adj.total_price,
adj.quantity,
adj.sku,
adj.title,
adj.price,
inv.ship_address_country,
inv.ship_address_state,
//inv.ship_address_city,
adj.account_code
from (
  select to_date(t.date) as day,
          a.adjustment_discount as discount_amount,
          t.tax_amount as tax,
          t.amount as total_price,
          adjustment_quantity as quantity,
          adjustment_product_code as sku,
          adjustment_description as title,
          t.amount-t.tax_amount as price,
          a.invoice_id,
          t.account_code
  from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
  join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
  where t.type = 'purchase'
      and t.status = 'success'
      and a.adjustment_description not ilike '%shipping%'
  order by day
) as adj join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as inv on adj.INVOICE_ID = inv.id

union all 

select 
to_date(dateadd(hour, -4, c.processed_at)) as day,
cli.quantity as total_subscription_quantity,
cli.SKU as sku,
cli.title as title,
cli.price as price_total,
c.shipping_address_country as country,
c.SHIPPING_ADDRESS_PROVINCE as state,
TO_VARCHAR(c.customer_id) as customer_id
from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
where day is not null

order by day asc"
"V_COHORT_DAVEADJUSTMENT_REMOVEZEROLTR_APRIL_01_2021","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.V_COHORT_DAVEADJUSTMENT_REMOVEZEROLTR_APRIL_01_2021
as

    with all_gain_loss as
    (

        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))

    )

    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )
              




        ) as _cohort
        group by cohort_id

    ) as initial_gain
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"V_SUBSCRIPTION_MAPPING","create view MARKETING_DATABASE.PRODUCTION_VIEWS.V_SUBSCRIPTION_MAPPING
as

    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
    select to_varchar(recharge_s.id) as recharge_subscription_id, 
            null as recurly_subscription_id, 
            1 as is_recharge_native, 
            0 as is_recurly_native, 
            0 as is_imported,
            to_varchar(recharge_c.id) as customer_id, 
            recharge_c.email as customer_email,
            recharge_s.status as current_status, 
            recharge_s.created_at as created_at, 
            null as activated_at, 
            recharge_s.cancelled_at as cancelled_at, 
            recharge_s.price as price, 
            recharge_s.quantity as quantity,
            recharge_c.billing_country,
            case when recharge_c.billing_country in ('United States', 'US') then 0 else 1 end as is_international,            
            recharge_s.sku,
            null as is_preorder
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    where to_varchar(recharge_s.id) not in (

        select *
        from
        (
            select distinct trim(to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct trim(to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct trim(to_varchar(RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null   
        ) as a
        where _RECHARGE_SUBSCRIPTION_ID not in ('NULL', 'canceled', 'cancel')      
    )

    union all

    -- Get all (IMPORTED & MAPPED) Subscriptions
    select to_varchar(mapping._recharge_subscription_id) as recharge_subscription_id, 
            to_varchar(mapping._recurly_subscription_id) as recurly_subscription_id, 
            1 as is_recharge_native, 
            0 as is_recurly_native, 
            1 as is_imported,
            to_varchar(recharge_c.id) as customer_id, 
            recharge_c.email as customer_email,
            recurly.state as current_status, 
            recharge_s.created_at as created_at, 
            null as activated_at, -- precaution: we dont know the exact ""activated at"" for imporated subscriptions
            -- recurly.activated_at as activated_at, 
            recurly.canceled_at as cancelled_at, 
            recurly.total_recurring_amount as price, 
            recurly.quantity as quantity,
            recharge_c.billing_country,
            case when recharge_c.billing_country in ('United States', 'US') then 0 else 1 end as is_international,
            recharge_s.sku,
            null as is_preorder
    from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s            
    join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
    join
    (
        select *
        from
        (
            select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) is not null
            union all
            select distinct to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
            from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
            union all
            select distinct to_varchar(RECHARGE_SUBSCRIPTION_ID) as _RECHARGE_SUBSCRIPTION_ID, to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID
            from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
            where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null   
        ) as a
        where _RECHARGE_SUBSCRIPTION_ID not in ('NULL', 'canceled', 'cancel') 
        and _RECURLY_SUBSCRIPTION_ID not in ('NULL', 'no need to map since it''s cancelled', 'expired', 'cancelled', 'canceled', 'cancel')
    ) as mapping on to_varchar(mapping._recharge_subscription_id) = to_varchar(recharge_s.id)
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping._recurly_subscription_id = recurly.uuid
  
    union all 

    -- Get all (UNIMPORTED) Recurly-Only Subscriptions
    select null as recharge_subscription_id, 
            to_varchar(uuid) as recurly_subscription_id, 
            0 as is_recharge_native, 
            1 as is_recurly_native, 
            0 as is_imported,
            to_varchar(account_code) as customer_id, 
            email as customer_email,
            state as current_status, 
            created_at as created_at, 
            activated_at as activated_at, 
            canceled_at as cancelled_at, 
            total_recurring_amount as price, 
            quantity as quantity,            
            ship_address_country,
            case when ship_address_country in ('United States', 'US') then 0 else 1 end as is_international,
            adj_first.first_adjustment_product_code as sku,
            case when adj_first.first_adjustment_total = 0 then 1 else 0 end as is_preorder
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" s
    left join ""MARKETING_DATABASE"".""PUBLIC"".""v_first_recurly_adjustment"" adj_first on adj_first.subscription_id = s.uuid
    where uuid not in (
        select *
        from
        (
          select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""
          where to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) is not null
          union all
          select distinct to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""
          where to_varchar(RECHARGE_SUBSCRIPTION_ID) is not null  
          union all
          select distinct to_varchar(RECURLY_SUBSCRIPTION_ID) as _RECURLY_SUBSCRIPTION_ID 
          from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
          where to_varchar(RECURLY_SUBSCRIPTION_ID) is not null      
         ) as a
         where _RECURLY_SUBSCRIPTION_ID not in ('NULL', 'no need to map since it''s cancelled', 'expired', 'cancelled', 'canceled', 'cancel')
    );"
"COHORT_GAINLOSS","create or replace  view marketing_database.dbt_production.cohort_gainloss
  
   as (
    with adjusted_gain_loss as
(

    select *
    from
    (

        -- ADJUST: Edit SUBSCRIPTION_MAPPING with Dave Sylvia's manual edits.  If Dave has no adjustment, leave the original result
        select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
            case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
            to_date(map.cancelled_at) as cancelled_at,
            map.total_quantity
        from
        (
            select distinct
                recharge_subscription_id,
                recurly_subscription_id,
                created_at as first_charged_date,
                cancelled_at as cancelled_at,
                quantity as total_quantity 
            from marketing_database.dbt_production.subscription_mapping
        ) as map
        left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

        union all

        -- IMPORT: Manual data from Recharge
        select to_varchar(rec.customer_id) as recurly_id, 
                to_date(rec.REVISED_CREATED_AT) as created_at,
                to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                rec.quantity
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

        union all

        -- IMPORT: Manual data from OceanX
        select to_varchar(ocx.Membership_ID) as recurly_id, 
                to_date(ocx.Membership_Start_Date) as created_at,
                to_date(ocx.Membership_End_Date) as cancelled_at,
                ocx.Membership_Count
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx
    )
    where to_varchar(recurly_id) not in 
    (
        select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from marketing_database.dbt_production.zero_ltr_subscriptions_pre_jan_2021
        union all
        select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from marketing_database.dbt_production.zero_ltr_subscriptions_pre_jan_2021
    )

)

-- Join Cohort Month + Total Initial Subscriptions + Total Losses for each Month in history
select *
from
(
    -- Calculate: Total initial subscriptions for each cohort
    select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
    from adjusted_gain_loss
    group by cohort_id

) as initial_gain
join 
(
    -- Calculate: Total losses for each cohort, for every month in history.  PIVOT() accounts for each month explicitly and must be updated manually each month
    select *
    from 
    (
        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from adjusted_gain_loss
    ) as agg
    pivot (
        sum(total_quantity) for cancelled_at_month in 
        ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03')
    )
) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
order by losses.cohort_id_losses
  );"
"DAILYGROWTHTRACKER","create or replace  view marketing_database.dbt_production.dailygrowthtracker
  
   as (
    -- REVENUE UNION
with revenue as
(

select rev.day,
        sum(total_tax) as tax_amount,
        sum(shipping_amount) as shipping_amount,
        sum(total_discount_amount) as total_discount_amount,
        count(total_charge_quantity) as total_charge_quantity,
        sum(total_subscription_quantity) as total_subscription_quantity,
        sum(price_total) / count(total_charge_quantity) as aov,
        sum(price_total) as price_total,
        sum(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
        sum(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity,  
        sum(zeroifnull(manual.refill_cogs)) as refill_cogs,
        sum(zeroifnull(manual.welcome_kit_cogs)) as welcome_kit_cogs,
        sum(rev.price_total) - sum(rev.total_tax) - sum(rev.shipping_amount) + sum(rev.total_discount_amount) as gross_revenue,
        gross_revenue - sum(zeroifnull(welcome_kit_cogs)) as net_revenue

    from 
    (

        -- ***** START - RECHARGE Daily Revenue ***** --      
        select charges.day,
                charges.total_price as price_total, 
                charges.total_discounts as total_discount_amount, 
                charges.total_charge_quantity as total_charge_quantity,
                charge_lines.total_subscription_quantity as total_subscription_quantity, 
                charge_lines.total_tax as total_tax,
                zeroifnull(charge_shipping.shipping_amount) as shipping_amount,
                zeroifnull(charge_giftcredit.total_subscription_quantity) as total_giftcredit_subscription_quantity,
                zeroifnull(charge_giftkit.total_subscription_quantity) as total_giftkit_subscription_quantity         
        from
        (
            select to_date(dateadd(hour, -4, c.processed_at)) as day,
                    sum(c.total_price) as total_price, sum(c.total_discounts) as total_discounts, count(*) as total_charge_quantity
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            -- Do not exclude charges where status != SUCCESS  (where c.status = 'SUCCESS')
            group by day
        ) as charges
        join 
        (
            select to_date(dateadd(hour, -4, c.processed_at)) as day,
                    sum(cli.quantity) as total_subscription_quantity,
                    sum(c.total_tax) as total_tax
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
            group by day
        ) as charge_lines on charge_lines.day = charges.day
        left join
        (
            select to_date(dateadd(hour, -4, c.processed_at)) as day,
                    sum(csl.price) as shipping_amount
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c                
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id        
            group by day
        ) as charge_shipping on charge_shipping.day = charges.day
        left join
        (
            select to_date(dateadd(hour, -4, c.processed_at)) as day,
                    sum(cli.quantity) as total_subscription_quantity
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
            where cli.title ilike '%gift kit%'
            group by day
        ) as charge_giftkit on charge_giftkit.day = charges.day
        left join
        (
            select to_date(dateadd(hour, -4, c.processed_at)) as day,
                    sum(cli.quantity) as total_subscription_quantity
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on cli.charge_id = c.id
            where cli.title ilike '%Gift Credit%'
            group by day
        ) as charge_giftcredit on charge_giftcredit.day = charges.day
        -- ***** END - RECHARGE Daily Revenue ***** --      

        union all 
    
        -- ***** START - RECURLY Daily Revenue ***** --  
        select charge_level_revenue.day, 
                price_total as price_total, 
                total_discount_amount as total_discount_amount, 
                total_charge_quantity as total_charge_quantity,      
                total_subscription_quantity as total_subscription_quantity,    
                tax_amount as total_tax,
                zeroifnull(shipping_amount) as shipping_amount,
                zeroifnull(total_giftkit_subscription_quantity) as total_giftkit_subscription_quantity,
                zeroifnull(total_giftcredit_subscription_quantity) as total_giftcredit_subscription_quantity
        from
        (
            
            select nonship_adj.day as day,
                nonship_adj.tax as tax_amount,
                shipping_adj.shipping as shipping_amount,
                nonship_adj.discount_amount as total_discount_amount,
                nonship_adj.total_charges as total_charge_quantity,
                nonship_adj.quantity as total_subscription_quantity,
                nonship_adj.total_price as price_total,
                nonship_adj.total_price - nonship_adj.tax - shipping_adj.shipping + nonship_adj.discount_amount as gross_revenue
            from
            (
                select to_date(t.date) as day,
                        sum(adjustment_discount) as discount_amount,
                        sum(t.tax_amount) as tax,
                        sum(adjustment_total) as adj_total_price,
                        sum(t.amount) as total_price,  
                        sum(adjustment_quantity) as quantity,
                        count(*) as total_charges
                from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                where t.type = 'purchase'
                    and t.status = 'success'
                    and adjustment_description not ilike '%shipping%'
                group by day
                order by day

            ) as nonship_adj 
            left join
            ( 

                -- Shipping totals will NEVER match up to DGT
                select to_date(t.date) as day,
                    sum(adjustment_total) as shipping
                from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                where t.type = 'purchase'
                    and t.status = 'success'
                    and  adjustment_description ilike '%shipping%'
                group by day
                order by day  

            ) as shipping_adj on nonship_adj.day = shipping_adj.day
            order by nonship_adj.day

        ) as charge_level_revenue
        left join 
        (
            select to_date(i.closed_at) as day, 
                    sum(a.adjustment_quantity) as total_giftkit_subscription_quantity
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
            where i.status in ('paid')
            and i.invoice_doc_type in ('charge') 
            and adjustment_description = 'Gift Kit Holiday 2020'
            group by day 
        ) as charge_level_revenue_giftkit 
            on charge_level_revenue_giftkit.day = charge_level_revenue.day
        left join 
        (
            select to_date(i.closed_at) as day, 
                    sum(a.adjustment_quantity) as total_giftcredit_subscription_quantity
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
            where i.status in ('paid')
            and i.invoice_doc_type in ('charge') 
            and adjustment_description = 'GIFT_CREDIT_PLACEHOLDER'            
            group by day 
        ) as charge_level_revenue_giftcredit
            on charge_level_revenue_giftcredit.day = charge_level_revenue.day
        -- ***** END - RECURLY Daily Revenue ***** -- 

    ) as rev
    left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = rev.day
    group by rev.day
    order by rev.day

), 
gainlossnet as -- GAIN LOSS JOIN
(

    select gain.dt as day, 
            zeroifnull(gain.total_subscribers_gained) as total_subscribers_gained, 
            zeroifnull(loss.total_subscribers_lost) total_subscribers_lost,   
            zeroifnull(gain.total_subscriptions_gained) as gain,
            zeroifnull(loss.total_subscriptions_lost) as loss,
            zeroifnull(gain.total_subscriptions_gained) - zeroifnull(loss.total_subscriptions_lost) as net,

            -- _international
            zeroifnull(gain.total_subscriptions_gained_international) as gain_international,
            zeroifnull(loss.total_subscriptions_lost_international) as loss_international,
            zeroifnull(gain.total_subscriptions_gained_international) - zeroifnull(loss.total_subscriptions_lost_international) as net_international,

            -- _international_3mo_refill
            zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) as gain_international_3mo_refill,
            zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as loss_international_3mo_refill,
            zeroifnull(gain.total_subscriptions_gained_international_3mo_refill) - zeroifnull(loss.total_subscriptions_lost_international_3mo_refill) as net_international_3mo_refill,

            -- _giftkits
            zeroifnull(gain.total_subscriptions_gained_giftkits) as gain_giftkits,
            zeroifnull(loss.total_subscriptions_lost_giftkits) as loss_giftkits,
            zeroifnull(gain.total_subscriptions_gained_giftkits) - zeroifnull(loss.total_subscriptions_lost_giftkits) as net_giftkits,

            -- _giftcredits
            zeroifnull(gain.total_subscriptions_gained_giftcredits) as gain_giftcredits,
            zeroifnull(loss.total_subscriptions_lost_giftcredits) as loss_giftcredits,
            zeroifnull(gain.total_subscriptions_gained_giftcredits) - zeroifnull(loss.total_subscriptions_lost_giftcredits) as net_giftcredits,

            -- _preorders
            zeroifnull(gain.total_subscriptions_gained_preorders) as gain_preorders,
            zeroifnull(loss.total_subscriptions_lost_preorders) as loss_preorders,
            zeroifnull(gain.total_subscriptions_gained_preorders) - zeroifnull(loss.total_subscriptions_lost_preorders) as net_preorders

    from
    (

        with subscription_breakdowns as 
        (

            select 
                -- only perform timezone offset subscriptions created within recharge
                case 
                    when is_recharge_native = 1 then to_date(dateadd(hour, -4, map.created_at))
                    when is_imported = 1 then to_date(dateadd(hour, -4, map.created_at))
                    else to_date(map.created_at) end
                as dt,
                count(*) as total_subscribers_gained, 
                sum(quantity) as total_subscriptions_gained,
                is_international,
                sku,
                is_preorder
            from marketing_database.dbt_production.subscription_mapping as map
            group by dt, is_international, sku, is_preorder
            order by dt
        )            
    

        -- **************************************************
        -- BREAKDOWNS: Create aggregation + join for each breakdown
        -- **************************************************      
        select total.dt, total_subscribers_gained, total_subscriptions_gained, 
                total_subscribers_gained_international, total_subscriptions_gained_international,
                total_subscribers_gained_international_3mo_refill, total_subscriptions_gained_international_3mo_refill,
                total_subscribers_gained_giftkits, total_subscriptions_gained_giftkits,
                total_subscribers_gained_giftcredits, total_subscriptions_gained_giftcredits,
                total_subscribers_gained_preorders, total_subscriptions_gained_preorders
        from
        (
            select dt, sum(total_subscribers_gained) total_subscribers_gained, sum(total_subscriptions_gained) as total_subscriptions_gained
            from subscription_breakdowns
            group by dt
        ) as total
        left join
        (
            select dt, sum(total_subscribers_gained) total_subscribers_gained_international, sum(total_subscriptions_gained) as total_subscriptions_gained_international
            from subscription_breakdowns
            where is_international = 1
            group by dt    
        ) as total_international on total.dt = total_international.dt      
        left join
        (
            select dt, sum(total_subscribers_gained) total_subscribers_gained_international_3mo_refill, sum(total_subscriptions_gained) as total_subscriptions_gained_international_3mo_refill
            from subscription_breakdowns
            where is_international = 1
            and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
            group by dt    
        ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
        left join
        (
            select dt, sum(total_subscribers_gained) total_subscribers_gained_giftkits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftkits
            from subscription_breakdowns              
            where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
            group by dt    
        ) as total_giftkits on total.dt = total_giftkits.dt
        left join
        (
            select dt, sum(total_subscribers_gained) total_subscribers_gained_giftcredits, sum(total_subscriptions_gained) as total_subscriptions_gained_giftcredits
            from subscription_breakdowns              
            where sku ilike 'SYN-WK-GIFT-CREDIT%'
            group by dt    
        ) as total_giftcredits on total.dt = total_giftcredits.dt
        left join
        (
            select dt, sum(total_subscribers_gained) total_subscribers_gained_preorders, sum(total_subscriptions_gained) as total_subscriptions_gained_preorders
            from subscription_breakdowns              
            where is_preorder = 1
            group by dt    
        ) as total_preorders on total.dt = total_preorders.dt


    ) as gain
    left join
    (

        with subscription_breakdowns as 
        (
            select 
                    -- only perform timezone offset on subscriptions cancelled within recharge, not on recurly
                    case
                    when is_recharge_native = 1 and is_imported = 0 then to_date(dateadd(hour, -4, map.cancelled_at))
                    when is_imported = 1 then to_date(map.cancelled_at)
                    else to_date(map.cancelled_at)
                    end as dt,
                    count(*) as total_subscribers_lost, 
                    sum(quantity) as total_subscriptions_lost,
                    is_international,
                    sku,
                    is_preorder
            from marketing_database.dbt_production.subscription_mapping as map
            where map.cancelled_at is not null
            group by dt, is_international, sku, is_preorder
            order by dt           
        )             
    
        -- **************************************************
        -- BREAKDOWNS: Create aggregation for each breakdown
        -- **************************************************    
        select total.dt, total_subscribers_lost, total_subscriptions_lost, 
                total_subscribers_lost_international, total_subscriptions_lost_international,
                total_subscribers_lost_international_3mo_refill, total_subscriptions_lost_international_3mo_refill,
                total_subscribers_lost_giftkits, total_subscriptions_lost_giftkits,
                total_subscribers_lost_giftcredits, total_subscriptions_lost_giftcredits,
                total_subscribers_lost_preorders, total_subscriptions_lost_preorders
        from
        (
            select dt, sum(total_subscribers_lost) total_subscribers_lost, sum(total_subscriptions_lost) as total_subscriptions_lost
            from subscription_breakdowns
            group by dt
        ) as total
        left join
        (
            select dt, sum(total_subscribers_lost) total_subscribers_lost_international, sum(total_subscriptions_lost) as total_subscriptions_lost_international
            from subscription_breakdowns
            where is_international = 1
            group by dt    
        ) as total_international on total.dt = total_international.dt          
        left join
        (
            select dt, sum(total_subscribers_lost) total_subscribers_lost_international_3mo_refill, sum(total_subscriptions_lost) as total_subscriptions_lost_international_3mo_refill
            from subscription_breakdowns
            where is_international = 1
            and (sku = 'syn-rf-3mo' or sku ilike '%3mo%')
            group by dt    
        ) as total_international_3mo_refill on total.dt = total_international_3mo_refill.dt      
        left join
        (
            select dt, sum(total_subscribers_lost) total_subscribers_lost_giftkits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftkits
            from subscription_breakdowns              
            where sku in ('syn-wk-gift-2020','SYN-WK-GIFT')
            group by dt    
        ) as total_giftkits on total.dt = total_giftkits.dt
        left join
        (
            select dt, sum(total_subscribers_lost) total_subscribers_lost_giftcredits, sum(total_subscriptions_lost) as total_subscriptions_lost_giftcredits
            from subscription_breakdowns              
            where sku ilike 'SYN-WK-GIFT-CREDIT%'
            group by dt    
        ) as total_giftcredits on total.dt = total_giftcredits.dt
        left join
        (
            select dt, sum(total_subscribers_lost) total_subscribers_lost_preorders, sum(total_subscriptions_lost) as total_subscriptions_lost_preorders
            from subscription_breakdowns              
            where is_preorder = 1
            group by dt    
        ) as total_preorders on total.dt = total_preorders.dt


    ) as loss 
    on gain.dt = loss.dt
    order by gain.dt  

),
spend as
(

    with facebook as
    (

        select day, sum(spend) as fb_spend
        from
        (
            select distinct fb.date as day, fb.CAMPAIGN_NAME, fb.spend-- , fba.value as conversions
            from ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS"" fb
            -- **** if we need conversions, this is the correct pixel name          
            -- left join ""MARKETING_DATABASE"".""FACEBOOK"".""FACEBOOK_ANALYTICS_ACTIONS"" fba on fba.date = fb.date
            -- where fba.action_type in ('offsite_conversion.fb_pixel_purchase')
        )
        group by day
    ),
    adwords as
    (
        select date as day, sum(cost) as gaw_spend
        from ""MARKETING_DATABASE"".""ADWORDS"".""ADWORDS_CAMPAIGN_STATS"" gaw
        group by day    
    )

    select case when fb.day is null then aw.day else fb.day end as day, 
    fb_spend as fb_spend,
    gaw_spend as gaw_spend
    from facebook as fb
    left join adwords as aw on fb.day = aw.day
    order by day

)

select gainlossnet_agg.DAY,
    gainlossnet_agg.GAIN,
    gainlossnet_agg.LOSS,
    gainlossnet_agg.NET,
    gainlossnet_agg.TOTAL_ACTIVE,
    gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL,
    gainlossnet_agg.TOTAL_ACTIVE_INTERNATIONAL_3MO_REFILL,
    gainlossnet_agg.TOTAL_ACTIVE_GIFTKITS,
    gainlossnet_agg.TOTAL_ACTIVE_GIFTCREDITS,
    gainlossnet_agg.TOTAL_ACTIVE_PREORDERS,
    gainlossnet_agg.TRAILING_30_DAY_GAIN,
    gainlossnet_agg.TRAILING_30_DAY_LOSS,
    gainlossnet_agg.GAIN_INTERNATIONAL,
    gainlossnet_agg.LOSS_INTERNATIONAL,
    gainlossnet_agg.NET_INTERNATIONAL,
    gainlossnet_agg.GAIN_INTERNATIONAL_3MO_REFILL,
    gainlossnet_agg.LOSS_INTERNATIONAL_3MO_REFILL,
    gainlossnet_agg.NET_INTERNATIONAL_3MO_REFILL,
    gainlossnet_agg.GAIN_GIFTKITS,
    gainlossnet_agg.LOSS_GIFTKITS,
    gainlossnet_agg.NET_GIFTKITS,
    gainlossnet_agg.GAIN_GIFTCREDITS,
    gainlossnet_agg.LOSS_GIFTCREDITS,
    gainlossnet_agg.NET_GIFTCREDITS,
    gainlossnet_agg.GAIN_PREORDERS,
    gainlossnet_agg.LOSS_PREORDERS,
    gainlossnet_agg.NET_PREORDERS,

    revenue.TAX_AMOUNT,
    revenue.SHIPPING_AMOUNT,
    revenue.TOTAL_DISCOUNT_AMOUNT,
    revenue.TOTAL_CHARGE_QUANTITY,
    revenue.TOTAL_SUBSCRIPTION_QUANTITY,
    revenue.AOV,
    revenue.PRICE_TOTAL,
    revenue.TOTAL_GIFTKIT_SUBSCRIPTION_QUANTITY,
    revenue.TOTAL_GIFTCREDIT_SUBSCRIPTION_QUANTITY,
    revenue.REFILL_COGS,
    revenue.WELCOME_KIT_COGS,
    revenue.GROSS_REVENUE,
    revenue.NET_REVENUE

from
(
    select day, gain, loss, net,
            sum(net) over (order by day asc rows between unbounded preceding and current row) as total_active,
            sum(net_international) over (order by day asc rows between unbounded preceding and current row) as total_active_international,
            sum(net_international_3mo_refill) over (order by day asc rows between unbounded preceding and current row) as total_active_international_3mo_refill,
            sum(net_giftkits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftkits,
            sum(net_giftcredits) over (order by day asc rows between unbounded preceding and current row) as total_active_giftcredits,  
            sum(net_preorders) over (order by day asc rows between unbounded preceding and current row) as total_active_preorders,  

            sum(gain) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_gain,        
            sum(loss) over (order by day asc rows between 29 preceding and current row) as trailing_30_day_loss,

            gain_international,
            loss_international,
            net_international,
            gain_international_3mo_refill,
            loss_international_3mo_refill,
            net_international_3mo_refill,
            gain_giftkits,
            loss_giftkits,
            net_giftkits,
            gain_giftcredits,
            loss_giftcredits,
            net_giftcredits,
            gain_preorders,
            loss_preorders,
            net_preorders

    from gainlossnet
) as gainlossnet_agg
left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MANUAL_INPUT"" manual on manual.date = gainlossnet_agg.day
left join revenue on revenue.day = gainlossnet_agg.day
left join spend on spend.day = gainlossnet_agg.day
order by gainlossnet_agg.day asc
  );"
"FIRST_RECURLY_ADJUSTMENT","create or replace  view marketing_database.dbt_production.first_recurly_adjustment
  
   as (
    select
  'hello' as test_col,
  adj_first_sku.subscription_id, 
  adj_first_sku.adjustment_start_at as first_adjustment_start_at, 
  adj_first_sku.adjustment_product_code as first_adjustment_product_code,
  adj_first_sku.adjustment_quantity as first_adjustment_quantity,
  adj_first_sku.adjustment_total as first_adjustment_total,
  adj_first_sku.adjustment_tax as first_adjustment_total_tax,
  adj_first_sku.adjustment_discount as first_adjustment_total_discount

from
(
  select min(adjustment_start_at) as adjustment_start_at, subscription_id
  from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
  where adjustment_description not ilike 'Shipping%' 
  and adjustment_type = 'charge' 
  and subscription_id is not null
  group by subscription_id
) as adj_first
join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as adj_first_sku 
    on adj_first_sku.adjustment_start_at = adj_first.adjustment_start_at
    and adj_first_sku.subscription_id = adj_first.subscription_id
where adj_first_sku.adjustment_description not ilike 'Shipping%' 
and adj_first_sku.adjustment_type = 'charge' 
and adj_first_sku.subscription_id is not null    
order by adj_first_sku.adjustment_start_at, adj_first_sku.subscription_id
  );"
"MAPPING_CONSOLIDATED","create or replace  view marketing_database.dbt_production.mapping_consolidated
  
   as (
    select *
from
(
    select distinct trim(to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID, trim(to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID)) as _RECURLY_SUBSCRIPTION_ID   
    from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING""  

    union all

    select trim(to_varchar(MAPPED_RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID, trim(to_varchar(MAPPED_RECURLY_SUBSCRIPTION_ID)) as _RECURLY_SUBSCRIPTION_ID   
    from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_RECURLY_MAPPING_NOV_12_2020""

    union all

    select trim(to_varchar(RECHARGE_SUBSCRIPTION_ID)) as _RECHARGE_SUBSCRIPTION_ID, trim(to_varchar(RECURLY_SUBSCRIPTION_ID)) as _RECURLY_SUBSCRIPTION_ID  
    from ""MARKETING_DATABASE"".""RECHARGE"".""RECHARGE_RECURLY_MAPPING""
    
) as consolidated
where consolidated._RECHARGE_SUBSCRIPTION_ID not in ('canceled', 'cancel')
and consolidated._RECURLY_SUBSCRIPTION_ID not in ('no need to map since it''s cancelled', 'expired', 'cancelled', 'canceled', 'cancel')
  );"
"SUBSCRIPTION_MAPPING","create or replace  view marketing_database.dbt_production.subscription_mapping
  
   as (
    -- Get all (UNIMPORTED) Rechage-Only Subscriptions
select to_varchar(recharge_s.id) as recharge_subscription_id, 
        null as recurly_subscription_id, 
        1 as is_recharge_native, 
        0 as is_recurly_native, 
        0 as is_imported,
        to_varchar(recharge_c.id) as customer_id, 
        recharge_c.email as customer_email,
        recharge_c.first_name as first_name,
        recharge_c.last_name as last_name,
        recharge_s.status as current_status, 
        recharge_s.created_at as created_at, 
        null as activated_at, 
        recharge_s.cancelled_at as cancelled_at, 
        recharge_s.price as price, 
        recharge_s.quantity as quantity,
        recharge_c.billing_country,
        case when recharge_c.billing_country in ('United States', 'US') then 0 else 1 end as is_international,            
        recharge_s.sku,
        null as is_preorder
from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s
join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
where to_varchar(recharge_s.id) not in (
    select distinct _RECHARGE_SUBSCRIPTION_ID
    from marketing_database.dbt_production.mapping_consolidated
)

union all

-- Get all (IMPORTED & MAPPED) Subscriptions
select to_varchar(mapping._recharge_subscription_id) as recharge_subscription_id, 
        to_varchar(mapping._recurly_subscription_id) as recurly_subscription_id, 
        1 as is_recharge_native, 
        0 as is_recurly_native, 
        1 as is_imported,
        to_varchar(recharge_c.id) as customer_id, 
        recharge_c.email as customer_email,
        recharge_c.first_name as first_name,
        recharge_c.last_name as last_name,
        recurly.state as current_status, 
        recharge_s.created_at as created_at, 
        null as activated_at, -- precaution: we dont know the exact ""activated at"" for imporated subscriptions
        -- recurly.activated_at as activated_at, 
        recurly.canceled_at as cancelled_at, 
        recurly.total_recurring_amount as price, 
        recurly.quantity as quantity,
        recharge_c.billing_country,
        case when recharge_c.billing_country in ('United States', 'US') then 0 else 1 end as is_international,
        recharge_s.sku,
        null as is_preorder
from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s            
join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id
join
(
    select distinct _RECHARGE_SUBSCRIPTION_ID, _RECURLY_SUBSCRIPTION_ID
    from marketing_database.dbt_production.mapping_consolidated       
) as mapping on to_varchar(mapping._recharge_subscription_id) = to_varchar(recharge_s.id)
join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping._recurly_subscription_id = recurly.uuid

union all 

-- Get all (UNIMPORTED) Recurly-Only Subscriptions
select null as recharge_subscription_id, 
        to_varchar(uuid) as recurly_subscription_id, 
        0 as is_recharge_native, 
        1 as is_recurly_native, 
        0 as is_imported,
        to_varchar(s.account_code) as customer_id, 
        email as customer_email,
        a.account_first_name as first_name,
        a.account_last_name as last_name,
        state as current_status, 
        created_at as created_at, 
        activated_at as activated_at, 
        canceled_at as cancelled_at, 
        total_recurring_amount as price, 
        quantity as quantity,            
        ship_address_country,
        case when ship_address_country in ('United States', 'US') then 0 else 1 end as is_international,
        adj_first.first_adjustment_product_code as sku,
        case when adj_first.first_adjustment_total = 0 then 1 else 0 end as is_preorder
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" s LEFT JOIN ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS"" a ON s.account_code = a.account_code 
left join marketing_database.dbt_production.first_recurly_adjustment adj_first on adj_first.subscription_id = s.uuid
where uuid not in (

    select distinct _RECURLY_SUBSCRIPTION_ID
    from marketing_database.dbt_production.mapping_consolidated

)
  );"
"ZERO_LTR_SUBSCRIPTIONS_PRE_JAN_2021","create or replace  view marketing_database.dbt_production.zero_ltr_subscriptions_pre_jan_2021
  
   as (
    select map.recharge_subscription_id, 
        map.recurly_subscription_id, 
        zeroifnull(LTR_recharge) + zeroifnull(LTR_recurly) as LTR
from marketing_database.dbt_production.subscription_mapping as map
left join (

    select s.id as recharge_subscription_id, sum(c.total_price) as LTR_recharge
    from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
    join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
    left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
    left join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on s.customer_id = c.customer_id
    where c.status = 'SUCCESS'
    group by recharge_subscription_id
    order by recharge_subscription_id

) as _recharge on map.recharge_subscription_id = _recharge.recharge_subscription_id
left join (

    select a.subscription_id as recurly_subscription_id, sum(a.ADJUSTMENT_TOTAL) as LTR_recurly
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
    join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i on i.id = a.invoice_id
    where i.status in ('paid')
    and i.invoice_doc_type in ('charge')
    group by subscription_id
    order by subscription_id

) as _recurly on map.recurly_subscription_id = _recurly.recurly_subscription_id
where LTR <= 0
-- TIM & SURAJ - Only return Zero LTR Subscriptions before Oct 2020
and map.created_at < '2021-01-01'
-- and _recharge.recharge_subscription_id is null AND _recurly.recurly_subscription_id is null
order by map.recharge_subscription_id, map.recurly_subscription_id
  );"
"COHORT_REVENUE","create or replace  view marketing_database.dbt_production.cohort_revenue
  
   as (
    with all_revenue as
(
    select RECHARGE_SUBSCRIPTION_ID,
            RECURLY_SUBSCRIPTION_ID,
  
            case when RECHARGE_SUBSCRIPTION_ID is null then
                RECURLY_SUBSCRIPTION_ID
            else
                RECHARGE_SUBSCRIPTION_ID
            end as _subscription_id,

            min(charged_date) over (partition by _subscription_id) as first_charged_at,
            charged_date as charged_at,
            charged_amount,

            is_recharge_native,
            is_imported,
            is_recurly_native

    from
    (

        select *
        from marketing_database.dbt_production.subscription_mapping as cohort
        join 
        (
            select to_varchar(s.uuid) as subscription_id,
                    t.date as charged_date,
                    (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) as charged_amount
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and ifnull(charged_amount,0) > 0
        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))

        union all

        select *
        from marketing_database.dbt_production.subscription_mapping as cohort
        join
        (
            select to_varchar(s.id) as subscription_id, 
                    c.processed_at as charged_date, 
                    (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) as charged_amount
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and ifnull(charged_amount,0) > 0
        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        order by charged_date

    ) as a

)

-- fix names
select cohort_id, ""'2018-06'"" as ""2018-06"", ""'2018-07'"" as ""2018-07"", ""'2018-08'"" as ""2018-08"", ""'2018-09'"" as ""2018-09"", ""'2018-10'"" as ""2018-10"", ""'2018-11'"" as ""2018-11"", ""'2018-12'"" as ""2018-12"", ""'2019-01'"" as ""2019-01"", ""'2019-02'"" as ""2019-02"", ""'2019-03'"" as ""2019-03"", ""'2019-04'"" as ""2019-04"", ""'2019-05'"" as ""2019-05"", ""'2019-06'"" as ""2019-06"", ""'2019-07'"" as ""2019-07"", ""'2019-08'"" as ""2019-08"", ""'2019-09'"" as ""2019-09"", ""'2019-10'"" as ""2019-10"", ""'2019-11'"" as ""2019-11"", ""'2019-12'"" as ""2019-12"", ""'2020-01'"" as ""2020-01"", ""'2020-02'"" as ""2020-02"", ""'2020-03'"" as ""2020-03"", ""'2020-04'"" as ""2020-04"", ""'2020-05'"" as ""2020-05"", ""'2020-06'"" as ""2020-06"", ""'2020-07'"" as ""2020-07"", ""'2020-08'"" as ""2020-08"", ""'2020-09'"" as ""2020-09"", ""'2020-10'"" as ""2020-10"", ""'2020-11'"" as ""2020-11"", ""'2020-12'"" as ""2020-12"", ""'2021-01'"" as ""2021-01"", ""'2021-02'"" as ""2021-02"", ""'2021-03'"" as ""2021-03"", ""'2021-04'"" as ""2021-04"", ""'2021-05'"" as ""2021-05"", ""'2021-06'"" as ""2021-06"",""'2021-07'"" as ""2021-07"", ""'2021-08'"" as ""2021-08"", ""'2021-09'"" as ""2021-09"",""'2021-10'"" as ""2021-10"", ""'2021-11'"" as ""2021-11"", ""'2021-12'"" as ""2021-12"", ""'2022-01'"" as ""2022-01"", ""'2022-02'"" as ""2022-02"",""'2022-03'"" as ""2022-03""
from
(

    select *
    from 
    (
        select left(first_charged_at, 7) as cohort_id, charged_amount, left(charged_at, 7) as charged_at_month
        from all_revenue
    ) as all_revenue_agg 
                    pivot (
                        sum(charged_amount) for charged_at_month in 
                        ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07','2021-08','2021-09','2021-10','2021-11','2021-12','2022-01','2022-02','2022-03')      
                    )
    order by cohort_id
)
  );"
"FULFILLMENT_REPORT","create or replace view MARKETING_DATABASE.PUBLIC.FULFILLMENT_REPORT
as

select 
received.day as day,
shipped.pcode as product_code,
received.qty as received_qty,
processed.qty as processed_qty,
shipped.qty as shipped_qty

from (

  select sum(product_qty) as qty, to_date(order_received_date) as day, upper(product_code) as pcode
  from ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""VW_RPT_ORDER_v1.0""
  group by day, pcode
  order by day desc, pcode) as received 
  
  left join (
  
  select sum(product_qty) as qty, to_date(ship_date) as day, upper(product_code) as pcode
  from ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""VW_RPT_ORDER_v1.0""
  group by day, pcode
  order by day desc, pcode) as shipped on shipped.day = received.day and shipped.pcode = received.pcode
  
  join (
    
  select sum(product_qty) as qty, to_date(order_processed_date) as day, upper(product_code) as pcode
  from ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""VW_RPT_ORDER_v1.0""
  group by day, pcode
  
  ) as processed on processed.day = shipped.day and processed.pcode = shipped.pcode
  
  order by day desc, product_code"
"OPS_DAILY_QUANTS","create or replace view MARKETING_DATABASE.PUBLIC.OPS_DAILY_QUANTS
as

select 
quantities.day,
zeroifnull(""'Daily Synbiotic'"") as WK,
zeroifnull(""'Daily Synbiotic—Refill'"") as RF,
zeroifnull(""'Daily Synbiotic—Refill (3 month)'"") as three_mo,
zeroifnull(""'Daily Synbiotic—Refill (2 month)'"") as two_mo,
zeroifnull(""'(Replacement) Vial)'"") as replacement_vial,
zeroifnull(""'(Replacement) Jar + Vial'"") as replacement_jar_and_vial,
zeroifnull(""'(Replacement) Daily Synbiotic'"") as replacement_wk,
zeroifnull(""'(Replacement) Jar'"") as replacement_jar,
zeroifnull(""'(Replacement) Daily Synbiotic—Refill'"") as replacement_rf,
zeroifnull(""'(Replacement) Jar Lid'"") as replacement_jar_lid

from (
    
    
    
    select*

    from(
        select to_date(t.date) as day, 
        sum(adjustment_quantity) as quantity,
        adjustment_description as sku
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
        join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
        where t.type = 'purchase'
        and t.status = 'success'
        and sku not ilike '%shipping%'
        group by day, sku) as new_entry

            pivot (sum(quantity) for sku in 
                   ('Daily Synbiotic',
                    'Daily Synbiotic—Refill', 
                    'Daily Synbiotic—Refill (3 month)', 
                    'Daily Synbiotic—Refill (2 month)',
                    '(Replacement) Vial)',
                    '(Replacement) Jar + Vial',
                    '(Replacement) Daily Synbiotic',
                    '(Replacement) Jar',
                    '(Replacement) Daily Synbiotic—Refill',
                    '(Replacement) Jar Lid')
                  )

                  order by day 
  
  ) as quantities"
"ORDER_REPORT_3_0","create or replace view MARKETING_DATABASE.PUBLIC.ORDER_REPORT_3_0 as

select 
non_replacement_quantities.day as day,
dgt_gains.dgt_gain as dgt_gains,
zeroifnull(""'syn-wk'"") as WK,
zeroifnull(""'syn-rf'"") as RF,
zeroifnull(""'syn-rf-3mo'"") as three_mo,
zeroifnull(""'syn-rf-2mo'"") as two_mo,
zeroifnull(""'(Replacement) Vial'"") as replacement_vial,
zeroifnull(""'(Replacement) Jar + Vial'"") as replacement_jar_and_vial,
zeroifnull(""'(Replacement) Daily Synbiotic'"") as replacement_wk,
zeroifnull(""'(Replacement) Jar'"") as replacement_jar,
zeroifnull(""'(Replacement) Daily Synbiotic—Refill'"") as replacement_rf,
zeroifnull(""'(Replacement) Jar Lid'"") as replacement_jar_lid,
zeroifnull(wk_refunds.wk_refund_amount) as wk_refund_amount,
zeroifnull(wk_refunds.wk_refund_quantity) as wk_refund_quantity,
zeroifnull(rf_refunds.rf_refund_amount) as rf_refund_amount,
zeroifnull(rf_refunds.rf_refund_quantity) as rf_refund_quantity

from (
    
    
    
    select*

      from(
          select to_date(t.date) as day, 
          sum(adjustment_quantity) as quantity,
          adjustment_product_code as sku
          from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
          join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
          where t.type = 'purchase'
          and t.status = 'success'
          and adjustment_description not ilike '%shipping%'
          group by day, sku) as non_replacement

              pivot (sum(quantity) for sku in 
                     ('syn-wk',
                      'syn-rf', 
                      'syn-rf-3mo', 
                      'syn-rf-2mo'
                     )
                    )

          order by day 
  
  ) as non_replacement_quantities left join (
  
      select*

        from(
        select to_date(a.adjustment_created_at) as day, 
        sum(adjustment_quantity) as quantity,
        adjustment_description as sku
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a 
        where sku ilike '%replacement%'
        group by day, sku) as replacement
        
            pivot (sum(quantity) for sku in 
                   ('(Replacement) Vial',
                    '(Replacement) Jar + Vial',
                    '(Replacement) Daily Synbiotic',
                    '(Replacement) Jar',
                    '(Replacement) Daily Synbiotic—Refill',
                    '(Replacement) Jar Lid'
                   )
                  )

         order by day 
  
  ) as replacement_quants on replacement_quants.day = non_replacement_quantities.day   
  
      right join
    (
        select to_date(map.created_at) as day, 
            sum(quantity) as dgt_gain
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map
        where map.created_at is not null
        and to_date(map.created_at) > '2021-01-31'
        group by day
    ) as dgt_gains on dgt_gains.day = non_replacement_quantities.day
  
   left join -- just in case there are days with no refunds
    (
       select to_date(t.date) as day, 
           sum(amount) as wk_refund_amount, 
           sum(adjustment_quantity) as wk_refund_quantity
       from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
       join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
       where t.type = 'refund'
       and t.status = 'success'
       and adjustment_description not ilike '%shipping%'
       and adjustment_product_code  = 'syn-wk'
       group by day, adjustment_product_code
    ) as wk_refunds on dgt_gains.day = wk_refunds.day

    left join (
    
       select to_date(t.date) as day, 
             sum(amount) as rf_refund_amount, 
             sum(adjustment_quantity) as rf_refund_quantity
         from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
         join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
         where t.type = 'refund'
         and t.status = 'success'
         and adjustment_description not ilike '%shipping%'
         and adjustment_product_code  = 'syn-rf'
         group by day, adjustment_product_code
    ) as rf_refunds on dgt_gains.day = rf_refunds.day  
order by non_replacement_quantities.day desc;"
"PO_SUMMARY","create or replace view MARKETING_DATABASE.PUBLIC.PO_SUMMARY
as

/*refills*/
select*
from (

select REFILL_POUCH as material, date_ as eta, PO_NUMBER as po_number, arrived_total as total
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_RF""
where arrived_total > 0 

union

select REFILL_POUCH_MAILER as material, date_ as eta, PO_NUMBER_1 as po_number, arrived_total_1 as total
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_RF""
where arrived_total_1 > 0 

union

select GREEN_CELL_CORN_FOAM as material, date_ as eta, PO_NUMBER_2 as po_number, arrived_total_2 as total
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_RF""
where arrived_total_2 > 0 

union

/*welcome kit*/


select GREEN_GLASS_JAR_LUMI_ as material, DATE_ as day, PO_NUMBER as po, arrived_total as arriving
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total > 0

union

select JAR_CAP_SEAL_LUMI_ as material, DATE_ as day, PO_NUMBER_1 as po, arrived_total_1 as arriving
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total_1 > 0

union

select GREEN_GLASS_TRAVEL_VIAL_LUMI_ as material, DATE_ as day, PO_NUMBER_2 as po, arrived_total_2 as arriving
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total_2 is not null

union

select TRAVEL_VIAL_CAP_SEAL_LUMI_ as material, DATE_ as day, PO_NUMBER_3 as po, arrived_total_3
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total_3 > 0

union 

select PAPERFOAM_TRAY as material, DATE_ as day, PO_NUMBER_4 as po, arrived_total_4
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total_4 > 0

union

select ALGAE_PAPER_WELCOME_BOX as material, DATE_ as day, PO_NUMBER_5 as po, arrived_total_5
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total_5 > 0 

union

select WELCOME_BOX_STICKER as material, DATE_ as day, PO_NUMBER_6 as po, arrived_total_6
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total_6 > 0

union

select  WELCOME_BOOKLET_ALGAE_PAPER_ as material, DATE_ as day, PO_NUMBER_7 as po, arrived_total_7
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total_7 > 0 

union

select  JAR_LABEL as material, DATE_ as day, PO_NUMBER_8 as po, arrived_total_8
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total_8 > 0

/*blended*/
union

select DESSICANT_DESSICARE_ as material, DATE_ as day, PO_NUMBER as po, arrived_total_kg_
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_ > 0

union

select MXP_222_200_B_ as material, DATE_ as day, PO_NUMBER_1 as po, arrived_total_kg_1
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_1 > 0

union 

select VESALE_BLEND_100_B_ as material, DATE_ as day, PO_NUMBER_2 as po, arrived_total_kg_2
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_2 > 0

union

select B_LONGUM_120_B_ as material, DATE_ as day, PO_NUMBER_3 as po, arrived_total_kg_3
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_3 > 0

union 

select B_INFANTIS_M_63_80_B_ as material, DATE_ as day, PO_NUMBER_4 as po, arrived_total_kg_4
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_4 > 0

union


select L_PLANTARUM_400_B_ as material, DATE_ as day, PO_NUMBER_5 as po, arrived_total_kg_5
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_5 > 0

union

select ADM_BLEND_50_B_ as material, DATE_ as day, PO_NUMBER_6 as po, arrived_total_kg_6
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_6 > 0

union 

select B_BREVE_300_B_ as material, DATE_ as day, PO_NUMBER_7 as po, arrived_total_kg_7
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_7 > 0

union

select L_RHAMNOSUS_500_B_ as material, DATE_ as day, PO_NUMBER_8 as po, arrived_total_kg_8
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_8 > 0

union


select B_LACTIS_500_B_ as material, DATE_ as day, PO_NUMBER_9 as po, arrived_total_kg_9
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_9 > 0

union 

select L_CASEI_300_B_ as material, DATE_ as day, PO_NUMBER_10 as po, arrived_total_kg_10
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_10 > 0

union

select B_LONGUM_120_B_ as material, DATE_ as day, PO_NUMBER_11 as po, arrived_total_kg_11
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_11 > 0

union

select POMELLA as material, DATE_ as day, PO_NUMBER_12 as po, arrived_total_kg_12
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_12 > 0 ) as agg join ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_MAP"" as map on map.raw_material = agg.material"
"PREORDERS","create or replace view MARKETING_DATABASE.PUBLIC.PREORDERS
as

select
to_date(map.created_at) as subscription_created_at,
to_date(map.activated_at) as subscription_activated_at,
to_date(map.cancelled_at) as subscription_canceled_at,
orders_adj.*

from(
select o.email_address as email,
a.account_code as acct_code, 
a.subscription_id as subscription_id, 
a.invoice_number as invoice_number, 
to_date(a.adjustment_created_at) as adj_date,
to_date(o.order_date) as ocx_order_date,
to_date(o.order_received_date) as ocx_order_received,
to_date(o.ship_date) as ocx_order_shipped,
a.adjustment_total as total, 
a.adjustment_discount as discount, 
a.adjustment_quantity as quantity, 
a.adjustment_description as description,
a.adjustment_product_code as sku,
o.order_status as order_status
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a 
left join ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""VW_RPT_ORDER_v1.0"" as o on a.invoice_number = o.order_number
where a.adjustment_description not ilike '%shipping%') as orders_adj
join ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map on 
orders_adj.subscription_id = map.RECURLY_SUBSCRIPTION_ID and
orders_adj.acct_code = map.customer_id
where subscription_created_at > '2021-03-24'
order by orders_adj.acct_code asc,subscription_created_at desc,orders_adj.subscription_id desc"
"RETENTIONANALYSIS_WATERFALL","create or replace view MARKETING_DATABASE.DOH_GOOGLE_SHEETS_TEST.RETENTIONANALYSIS_WATERFALL as

    with all_gain_loss as
    (

        select distinct
            /*cohort.is_recharge_native,
            cohort.is_imported,
            cohort.is_recurly_native,
            cohort.RECHARGE_SUBSCRIPTION_ID,
            cohort.RECURLY_SUBSCRIPTION_ID,*/

            recharge.subscription_id as recharge_subscription_id,
            recurly.subscription_id as recurly_subscription_id,

            -- if RECHARGE ID exists, default to RECHARGE FIRST_CHARGED_DATE
            case when recharge.subscription_id is not null then
                recharge.first_charged_date
            else
                recurly.first_charged_date
            end as first_charged_date,

            -- if RECURLY ID exists, default to RECURLY CANCELLED_AT
            case when recurly.subscription_id is not null then
                recurly.canceled_at
            else
                recharge.cancelled_at
            end as cancelled_at,

            -- if RECURLY ID exists, default to RECURLY QUANTITY
            case when recurly.subscription_id is not null then
                recurly.total_quantity
            else
                recharge.total_quantity
            end as total_quantity,  
            recurly.total_quantity as recurly_total_quantity,
            recharge.total_quantity as recharge_total_quantity

        from (select a.email, b.*
                from ""MARKETING_DATABASE"".""DOH_GOOGLE_SHEETS_TEST"".""RETENTIONANALYSIS"" as a
                join ""MARKETING_DATABASE"".""PUBLIC"".""V_MERGEDRECHARGEANDRECURLYSUBSCRIPTIONS_FORCOHORTS_V2.1"" as b on a.email = customer_email) as cohort

        left join
        (
            select to_varchar(s.id) as subscription_id, 
                    min(c.processed_at) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.cancelled_at
            from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
            join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli on c.id = cli.charge_id
            left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" csl on csl.charge_id = c.id
            join ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" s on cli.subscription_id = s.id
            where c.status = 'SUCCESS'
            and (ifnull(c.total_price,0.0) - ifnull(c.total_tax,0.0) - ifnull(csl.price,0.0)) > 0
            group by to_varchar(s.id), s.quantity, s.cancelled_at
            order by to_varchar(s.id)

        ) as recharge on lower(to_varchar(recharge.subscription_id)) = lower(to_varchar(cohort.recharge_subscription_id))

        left join 
        (
            select to_varchar(s.uuid) as subscription_id, 
                    min(t.date) as first_charged_date, 
                    s.quantity as total_quantity,
                    s.canceled_at
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on s.uuid = a.subscription_id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" i on a.invoice_id = i.id
            join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" t on t.invoice_id = i.id
            where a.invoice_type in ('purchase', 'renewal')
            and i.status in ('closed', 'paid')
            and t.type = 'purchase' and t.status = 'success' and t.test = 'FALSE'
            and a.adjustment_product_code != 'free_shipping'
            and (ifnull(t.amount,0) - ifnull(a.adjustment_tax,0) - ifnull(a.adjustment_discount,0)) > 0
            group by to_varchar(s.uuid), s.quantity, s.canceled_at
            order by to_varchar(s.uuid)          

        ) as recurly on lower(to_varchar(recurly.subscription_id)) = lower(to_varchar(cohort.recurly_subscription_id))

    )

    select *
    from
    (

        select left(created_at, 7) as cohort_id, sum(total_quantity) as total_quantity
        from
        (

              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx

              )  as a
              
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )
              




        ) as _cohort
        group by cohort_id

    ) as initial_gain
    join 
    (
      select *
      from 
      (


        select left(created_at, 7) as cohort_id_losses, total_quantity, left(cancelled_at, 7) as cancelled_at_month
        from
        (
              -- The guts
              select *
              from
              (
                      -- Mapping Table Data
                      select to_varchar(map.RECURLY_SUBSCRIPTION_ID) as recurly_id,
                              case when dave.RECHARGE_SUBSCRIPTION_ID is null then to_date(map.first_charged_date) else to_date(dave.REVISED_CREATED_AT) end as created_at,
                              to_date(map.cancelled_at) as cancelled_at,
                              map.total_quantity
                      from all_gain_loss map
                      -- left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id
                      left join ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""MAPPING_TABLE_DAVE_ADJUSTMENTS_FEB_16"" dave on dave.RECHARGE_SUBSCRIPTION_ID = map.recharge_subscription_id

                      union all

                      -- Recharge Manual Sheet Data (RERUN DATES)
                      select to_varchar(rec.customer_id) as recurly_id, 
                              to_date(rec.REVISED_CREATED_AT) as created_at,
                              to_date(rec.REVISED_CANCELLED_AT) as cancelled_at,
                              rec.quantity
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""RECHARGE_INPUTS"" rec

                      union all

                      -- OceanX Manual Sheet Data
                      select to_varchar(ocx.Membership_ID) as recurly_id, 
                              to_date(ocx.Membership_Start_Date) as created_at,
                              to_date(ocx.Membership_End_Date) as cancelled_at,
                              ocx.Membership_Count
                      from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OCX_INPUTS"" ocx

              )  as a
              where to_varchar(recurly_id) not in 
              (
                select case when to_varchar(recurly_subscription_id) is null then '-1' else to_varchar(recurly_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
                union all
                select case when to_varchar(recharge_subscription_id) is null then '-1' else to_varchar(recharge_subscription_id) end as id from ""MARKETING_DATABASE"".""PUBLIC"".""V_ZERO_LTR_SUBSCRIPTIONS""
              )


        ) as _cohort    


      ) as agg
                      pivot (
                          sum(total_quantity) for cancelled_at_month in 
                          ('2018-06','2018-07','2018-08','2018-09','2018-10','2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12','2020-01','2020-02','2020-03','2020-04','2020-05','2020-06','2020-07','2020-08','2020-09','2020-10','2020-11','2020-12','2021-01','2021-02','2021-03','2021-04','2021-05','2021-06','2021-07')
                      )
    ) as losses on initial_gain.cohort_id  = losses.cohort_id_losses
    order by losses.cohort_id_losses;"
"OPS_DAILY_RECURLY_QUANTS","create or replace view MARKETING_DATABASE.PUBLIC.OPS_DAILY_RECURLY_QUANTS
as

select 
non_replacement_quantities.day,
zeroifnull(""'syn-wk'"") as WK,
zeroifnull(""'syn-rf'"") as RF,
zeroifnull(""'syn-rf-3mo'"") as three_mo,
zeroifnull(""'syn-rf-2mo'"") as two_mo,
zeroifnull(""'(Replacement) Vial)'"") as replacement_vial,
zeroifnull(""'(Replacement) Jar + Vial'"") as replacement_jar_and_vial,
zeroifnull(""'(Replacement) Daily Synbiotic'"") as replacement_wk,
zeroifnull(""'(Replacement) Jar'"") as replacement_jar,
zeroifnull(""'(Replacement) Daily Synbiotic—Refill'"") as replacement_rf,
zeroifnull(""'(Replacement) Jar Lid'"") as replacement_jar_lid

from (
    
    
    
    select*

      from(
          select to_date(t.date) as day, 
          sum(adjustment_quantity) as quantity,
          adjustment_product_code as sku
          from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
          join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
          where t.type = 'purchase'
          and t.status = 'success'
          and sku not ilike '%shipping%'
          group by day, sku) as non_replacement

              pivot (sum(quantity) for sku in 
                     ('syn-wk',
                      'syn-rf', 
                      'syn-rf-3mo', 
                      'syn-rf-2mo'
                     )
                    )

          order by day 
  
  ) as non_replacement_quantities left join (
  
      select*

        from(
        select to_date(a.adjustment_created_at) as day, 
        sum(adjustment_quantity) as quantity,
        adjustment_description as sku
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a 
        where sku ilike '%replacement%'
        group by day, sku) as replacement
        
            pivot (sum(quantity) for sku in 
                   ('(Replacement) Vial)',
                    '(Replacement) Jar + Vial',
                    '(Replacement) Daily Synbiotic',
                    '(Replacement) Jar',
                    '(Replacement) Daily Synbiotic—Refill',
                    '(Replacement) Jar Lid'
                   )
                  )

         order by day 
  
  ) as replacement_quants on replacement_quants.day = non_replacement_quantities.day
  order by non_replacement_quantities.day desc;"
"PRE_ORDERS_APRIL_2021","create or replace view MARKETING_DATABASE.PUBLIC.PRE_ORDERS_APRIL_2021 as

select first_adjustment_product_code as first_sku,
s.*
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s
join ""MARKETING_DATABASE"".""PUBLIC"".""d_first_recurly_adjustment"" as a 
on s.uuid = a.subscription_id
where s.created_at > '2021-03-26'"
"PRE_ORDERS_APRIL_2021","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.PRE_ORDERS_APRIL_2021 as

select first_adjustment_product_code as first_sku,
s.*
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s
join ""MARKETING_DATABASE"".""PUBLIC"".""d_first_recurly_adjustment"" as a 
on s.uuid = a.subscription_id
where s.created_at > '2021-03-26'"
"SHIPPING_AVERAGES","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.SHIPPING_AVERAGES as

select a.adjustment_product_code as sku, avg(s.shipping_cost) as avg_shipping_cost, 'USPS' as carrier 
  from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""USPS_SHIPPING"" as s
  join (select*
       from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
       where adjustment_description not ilike '%shipping%') as a on s.order_ = a.invoice_number
  group by sku

  
  union 
  

  select a.adjustment_product_code as sku, avg(s.total) as avg_shipping_cost, 'UPS' as carrier
  from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""UPS_SHIPPING"" as s
  join (select*
       from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
       where adjustment_description not ilike '%shipping%') as a on substr(s.package_reference_number_1,1,6) = a.invoice_number
  group by sku

  
  union 
  
  select a.adjustment_product_code as sku, avg(s.total_charge) as avg_shipping_cost, 'OSM' as carrier
  from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OSM_SHIPPING"" as s
  join (select*
       from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
       where adjustment_description not ilike '%shipping%') as a on s.order_number = a.invoice_number
  group by sku"
"SHIPPING_AVERAGES","create or replace view marketing_database.public.shipping_averages as

select a.adjustment_product_code as sku, avg(s.shipping_cost) as avg_shipping_cost, 'USPS' as carrier 
  from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""USPS_SHIPPING"" as s
  join (select*
       from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
       where adjustment_description not ilike '%shipping%') as a on s.order_ = a.invoice_number
  group by sku

  
  union 
  

  select a.adjustment_product_code as sku, avg(s.total) as avg_shipping_cost, 'UPS' as carrier
  from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""UPS_SHIPPING"" as s
  join (select*
       from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
       where adjustment_description not ilike '%shipping%') as a on substr(s.package_reference_number_1,1,6) = a.invoice_number
  group by sku

  
  union 
  
  select a.adjustment_product_code as sku, avg(s.total_charge) as avg_shipping_cost, 'OSM' as carrier
  from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""OSM_SHIPPING"" as s
  join (select*
       from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
       where adjustment_description not ilike '%shipping%') as a on s.order_number = a.invoice_number
  group by sku"
"FULFILLMENT_REPORT","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.FULFILLMENT_REPORT
as

select 
received.day as day,
shipped.pcode as product_code,
received.qty as received_qty,
processed.qty as processed_qty,
shipped.qty as shipped_qty

from (

  select sum(product_qty) as qty, to_date(order_received_date) as day, upper(product_code) as pcode
  from ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""VW_RPT_ORDER_v1.0""
  group by day, pcode
  order by day desc, pcode) as received 
  
  left join (
  
  select sum(product_qty) as qty, to_date(ship_date) as day, upper(product_code) as pcode
  from ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""VW_RPT_ORDER_v1.0""
  group by day, pcode
  order by day desc, pcode) as shipped on shipped.day = received.day and shipped.pcode = received.pcode
  
  join (
    
  select sum(product_qty) as qty, to_date(order_processed_date) as day, upper(product_code) as pcode
  from ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""VW_RPT_ORDER_v1.0""
  group by day, pcode
  
  ) as processed on processed.day = shipped.day and processed.pcode = shipped.pcode
  
  order by day desc, product_code"
"PO_SUMMARY","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.PO_SUMMARY
as

/*refills*/
select*
from (

select REFILL_POUCH as material, date_ as eta, PO_NUMBER as po_number, arrived_total as total
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_RF""
where arrived_total > 0 

union

select REFILL_POUCH_MAILER as material, date_ as eta, PO_NUMBER_1 as po_number, arrived_total_1 as total
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_RF""
where arrived_total_1 > 0 

union

select GREEN_CELL_CORN_FOAM as material, date_ as eta, PO_NUMBER_2 as po_number, arrived_total_2 as total
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_RF""
where arrived_total_2 > 0 

union

/*welcome kit*/


select GREEN_GLASS_JAR_LUMI_ as material, DATE_ as day, PO_NUMBER as po, arrived_total as arriving
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total > 0

union

select JAR_CAP_SEAL_LUMI_ as material, DATE_ as day, PO_NUMBER_1 as po, arrived_total_1 as arriving
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total_1 > 0

union

select GREEN_GLASS_TRAVEL_VIAL_LUMI_ as material, DATE_ as day, PO_NUMBER_2 as po, arrived_total_2 as arriving
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total_2 is not null

union

select TRAVEL_VIAL_CAP_SEAL_LUMI_ as material, DATE_ as day, PO_NUMBER_3 as po, arrived_total_3
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total_3 > 0

union 

select PAPERFOAM_TRAY as material, DATE_ as day, PO_NUMBER_4 as po, arrived_total_4
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total_4 > 0

union

select ALGAE_PAPER_WELCOME_BOX as material, DATE_ as day, PO_NUMBER_5 as po, arrived_total_5
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total_5 > 0 

union

select WELCOME_BOX_STICKER as material, DATE_ as day, PO_NUMBER_6 as po, arrived_total_6
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total_6 > 0

union

select  WELCOME_BOOKLET_ALGAE_PAPER_ as material, DATE_ as day, PO_NUMBER_7 as po, arrived_total_7
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total_7 > 0 

union

select  JAR_LABEL as material, DATE_ as day, PO_NUMBER_8 as po, arrived_total_8
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_WK""
where arrived_total_8 > 0

/*blended*/
union

select DESSICANT_DESSICARE_ as material, DATE_ as day, PO_NUMBER as po, arrived_total_kg_
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_ > 0

union

select MXP_222_200_B_ as material, DATE_ as day, PO_NUMBER_1 as po, arrived_total_kg_1
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_1 > 0

union 

select VESALE_BLEND_100_B_ as material, DATE_ as day, PO_NUMBER_2 as po, arrived_total_kg_2
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_2 > 0

union

select B_LONGUM_120_B_ as material, DATE_ as day, PO_NUMBER_3 as po, arrived_total_kg_3
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_3 > 0

union 

select B_INFANTIS_M_63_80_B_ as material, DATE_ as day, PO_NUMBER_4 as po, arrived_total_kg_4
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_4 > 0

union


select L_PLANTARUM_400_B_ as material, DATE_ as day, PO_NUMBER_5 as po, arrived_total_kg_5
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_5 > 0

union

select ADM_BLEND_50_B_ as material, DATE_ as day, PO_NUMBER_6 as po, arrived_total_kg_6
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_6 > 0

union 

select B_BREVE_300_B_ as material, DATE_ as day, PO_NUMBER_7 as po, arrived_total_kg_7
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_7 > 0

union

select L_RHAMNOSUS_500_B_ as material, DATE_ as day, PO_NUMBER_8 as po, arrived_total_kg_8
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_8 > 0

union


select B_LACTIS_500_B_ as material, DATE_ as day, PO_NUMBER_9 as po, arrived_total_kg_9
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_9 > 0

union 

select L_CASEI_300_B_ as material, DATE_ as day, PO_NUMBER_10 as po, arrived_total_kg_10
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_10 > 0

union

select B_LONGUM_120_B_ as material, DATE_ as day, PO_NUMBER_11 as po, arrived_total_kg_11
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_11 > 0

union

select POMELLA as material, DATE_ as day, PO_NUMBER_12 as po, arrived_total_kg_12
from ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_BLENDED""
where arrived_total_kg_12 > 0 ) as agg join ""MARKETING_DATABASE"".""SUPPLYCHAIN"".""SUPPLYCHAIN_MAP"" as map on map.raw_material = agg.material"
"PREORDERS","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.PREORDERS
as

select
to_date(map.created_at) as subscription_created_at,
to_date(map.activated_at) as subscription_activated_at,
to_date(map.cancelled_at) as subscription_canceled_at,
orders_adj.*

from(
select o.email_address as email,
a.account_code as acct_code, 
a.subscription_id as subscription_id, 
a.invoice_number as invoice_number, 
to_date(a.adjustment_created_at) as adj_date,
to_date(o.order_date) as ocx_order_date,
to_date(o.order_received_date) as ocx_order_received,
to_date(o.ship_date) as ocx_order_shipped,
a.adjustment_total as total, 
a.adjustment_discount as discount, 
a.adjustment_quantity as quantity, 
a.adjustment_description as description,
a.adjustment_product_code as sku,
o.order_status as order_status
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a 
left join ""MARKETING_DATABASE"".""OCEANX_PRODUCTION"".""VW_RPT_ORDER_v1.0"" as o on a.invoice_number = o.order_number
where a.adjustment_description not ilike '%shipping%') as orders_adj
join ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map on 
orders_adj.subscription_id = map.RECURLY_SUBSCRIPTION_ID and
orders_adj.acct_code = map.customer_id
where subscription_created_at > '2021-03-24'
order by orders_adj.acct_code asc,subscription_created_at desc,orders_adj.subscription_id desc"
"V_ORDER_REPORT","create or replace view V_ORDER_REPORT as

select 
non_replacement_quantities.day as day,
dgt_gains.dgt_gain as dgt_gains,
zeroifnull(""'syn-wk'"") as WK,
zeroifnull(""'syn-rf'"") as RF,
zeroifnull(""'syn-rf-3mo'"") as three_mo,
zeroifnull(""'syn-rf-2mo'"") as two_mo,
zeroifnull(""'(Replacement) Vial'"") as replacement_vial,
zeroifnull(""'(Replacement) Jar + Vial'"") as replacement_jar_and_vial,
zeroifnull(""'(Replacement) Daily Synbiotic'"") as replacement_wk,
zeroifnull(""'(Replacement) Jar'"") as replacement_jar,
zeroifnull(""'(Replacement) Daily Synbiotic—Refill'"") as replacement_rf,
zeroifnull(""'(Replacement) Jar Lid'"") as replacement_jar_lid,
zeroifnull(wk_refunds.wk_refund_amount) as wk_refund_amount,
zeroifnull(wk_refunds.wk_refund_quantity) as wk_refund_quantity,
zeroifnull(rf_refunds.rf_refund_amount) as rf_refund_amount,
zeroifnull(rf_refunds.rf_refund_quantity) as rf_refund_quantity

from (
    
    
    
    select*

      from(
          select to_date(t.date) as day, 
          sum(adjustment_quantity) as quantity,
          adjustment_product_code as sku
          from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
          join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
          where t.type = 'purchase'
          and t.status = 'success'
          and adjustment_description not ilike '%shipping%'
          group by day, sku) as non_replacement

              pivot (sum(quantity) for sku in 
                     ('syn-wk',
                      'syn-rf', 
                      'syn-rf-3mo', 
                      'syn-rf-2mo'
                     )
                    )

          order by day 
  
  ) as non_replacement_quantities left join (
  
      select*

        from(
        select to_date(a.adjustment_created_at) as day, 
        sum(adjustment_quantity) as quantity,
        adjustment_description as sku
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a 
        where sku ilike '%replacement%'
        group by day, sku) as replacement
        
            pivot (sum(quantity) for sku in 
                   ('(Replacement) Vial',
                    '(Replacement) Jar + Vial',
                    '(Replacement) Daily Synbiotic',
                    '(Replacement) Jar',
                    '(Replacement) Daily Synbiotic—Refill',
                    '(Replacement) Jar Lid'
                   )
                  )

         order by day 
  
  ) as replacement_quants on replacement_quants.day = non_replacement_quantities.day   
  
      right join
    (
        select to_date(map.created_at) as day, 
            sum(quantity) as dgt_gain
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING"" as map
        where map.created_at is not null
        and to_date(map.created_at) > '2021-01-31'
        group by day
    ) as dgt_gains on dgt_gains.day = non_replacement_quantities.day
  
   left join -- just in case there are days with no refunds
    (
       select to_date(t.date) as day, 
           sum(amount) as wk_refund_amount, 
           sum(adjustment_quantity) as wk_refund_quantity
       from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
       join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
       where t.type = 'refund'
       and t.status = 'success'
       and adjustment_description not ilike '%shipping%'
       and adjustment_product_code  = 'syn-wk'
       group by day, adjustment_product_code
    ) as wk_refunds on dgt_gains.day = wk_refunds.day

    left join (
    
       select to_date(t.date) as day, 
             sum(amount) as rf_refund_amount, 
             sum(adjustment_quantity) as rf_refund_quantity
         from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
         join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
         where t.type = 'refund'
         and t.status = 'success'
         and adjustment_description not ilike '%shipping%'
         and adjustment_product_code  = 'syn-rf'
         group by day, adjustment_product_code
    ) as rf_refunds on dgt_gains.day = rf_refunds.day  
order by non_replacement_quantities.day desc;"
"OPS_DAILY_RECURLY_QUANTS","create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.OPS_DAILY_RECURLY_QUANTS
as

select 
non_replacement_quantities.day,
zeroifnull(""'syn-wk'"") as WK,
zeroifnull(""'syn-rf'"") as RF,
zeroifnull(""'syn-rf-3mo'"") as three_mo,
zeroifnull(""'syn-rf-2mo'"") as two_mo,
zeroifnull(""'(Replacement) Vial)'"") as replacement_vial,
zeroifnull(""'(Replacement) Jar + Vial'"") as replacement_jar_and_vial,
zeroifnull(""'(Replacement) Daily Synbiotic'"") as replacement_wk,
zeroifnull(""'(Replacement) Jar'"") as replacement_jar,
zeroifnull(""'(Replacement) Daily Synbiotic—Refill'"") as replacement_rf,
zeroifnull(""'(Replacement) Jar Lid'"") as replacement_jar_lid

from (
    
    
    
    select*

      from(
          select to_date(t.date) as day, 
          sum(adjustment_quantity) as quantity,
          adjustment_product_code as sku
          from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
          join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
          where t.type = 'purchase'
          and t.status = 'success'
          and sku not ilike '%shipping%'
          group by day, sku) as non_replacement

              pivot (sum(quantity) for sku in 
                     ('syn-wk',
                      'syn-rf', 
                      'syn-rf-3mo', 
                      'syn-rf-2mo'
                     )
                    )

          order by day 
  
  ) as non_replacement_quantities left join (
  
      select*

        from(
        select to_date(a.adjustment_created_at) as day, 
        sum(adjustment_quantity) as quantity,
        adjustment_description as sku
        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a 
        where sku ilike '%replacement%'
        group by day, sku) as replacement
        
            pivot (sum(quantity) for sku in 
                   ('(Replacement) Vial)',
                    '(Replacement) Jar + Vial',
                    '(Replacement) Daily Synbiotic',
                    '(Replacement) Jar',
                    '(Replacement) Daily Synbiotic—Refill',
                    '(Replacement) Jar Lid'
                   )
                  )

         order by day 
  
  ) as replacement_quants on replacement_quants.day = non_replacement_quantities.day
  order by non_replacement_quantities.day desc;"
"AMPLITUDE__USER_ENHANCED","create or replace  view MARKETING_DATABASE.amplitude_amplitude.amplitude__user_enhanced
  
   as (
    with event_enhanced as (

    select * 
    from MARKETING_DATABASE.amplitude_amplitude.amplitude__event_enhanced
),

session_data as (

    select *
    from MARKETING_DATABASE.amplitude_amplitude.amplitude__sessions
)

select
    event_enhanced.amplitude_user_id,
    min(event_enhanced.user_creation_time) as user_created_at,
    min(event_enhanced.session_started_at) as first_session_at,
    max(event_enhanced.session_ended_at) as last_session_at,
    count(distinct event_enhanced.unique_event_id) as total_events_per_user,
    count(distinct session_data.unique_session_id) as total_sessions_per_user,
    avg(session_data.session_length_in_minutes) as average_session_length_in_minutes,
    avg(session_data.minutes_in_between_sessions) as average_minutes_in_between_sessions

from event_enhanced
left join session_data
    on event_enhanced.unique_session_id = session_data.unique_session_id
group by 1
  );"
"STG_AMPLITUDE__EVENT_TMP","create or replace  view MARKETING_DATABASE.amplitude__source_amplitude.stg_amplitude__event_tmp
  
   as (
    select * 
from MARKETING_DATABASE.amplitude.event
  );"
"STG_AMPLITUDE__EVENT_TYPE_TMP","create or replace  view MARKETING_DATABASE.amplitude__source_amplitude.stg_amplitude__event_type_tmp
  
   as (
    select * 
from MARKETING_DATABASE.amplitude.event_type
  );"
"TABLES","\N"
"COLUMNS","\N"
"ELEMENT_TYPES","\N"
"FIELDS","\N"
"SCHEMATA","\N"
"SEQUENCES","\N"
"VIEWS","\N"
"TABLE_PRIVILEGES","\N"
"USAGE_PRIVILEGES","\N"
"DATABASES","\N"
"REPLICATION_DATABASES","\N"
"REPLICATION_GROUPS","\N"
"FUNCTIONS","\N"
"PROCEDURES","\N"
"OBJECT_PRIVILEGES","\N"
"FILE_FORMATS","\N"
"APPLICABLE_ROLES","\N"
"ENABLED_ROLES","\N"
"STAGES","\N"
"REFERENTIAL_CONSTRAINTS","\N"
"TABLE_CONSTRAINTS","\N"
"CLASS_INSTANCES","\N"
"CLASSES","\N"
"CLASS_INSTANCE_FUNCTIONS","\N"
"CLASS_INSTANCE_PROCEDURES","\N"
"INFORMATION_SCHEMA_CATALOG_NAME","\N"
"LOAD_HISTORY","\N"
"TABLE_STORAGE_METRICS","\N"
"PIPES","\N"
"EXTERNAL_TABLES","\N"
"EVENT_TABLES","\N"
"PACKAGES","\N"
"CURRENT_PACKAGES_POLICY","\N"
"STREAMLITS","\N"
