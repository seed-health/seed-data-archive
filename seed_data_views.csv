"TABLE_NAME","VIEW_DEFINITION"
"V_AUDIENCE_PROFILING","create or replace view ""SEED_DATA"".""DEV"".""V_AUDIENCE_PROFILING"" (
--create or replace view MARKETING_DATABASE.PRODUCTION_VIEWS.V_AUDIENCE_PROFILING_01(
	RECURLY_SUBSCRIPTION_ID,
	CUSTOMER_EMAIL,
	FIRST_NAME,
	LAST_NAME,
	CURRENT_STATUS,
	CREATED_AT,
	ACTIVATED_AT,
	CANCELLED_AT,
	BILLING_COUNTRY,
	BILLING_CITY,
	BILLING_STATE,
	IS_INTERNATIONAL,
	SKU,
	DATE_FLAG,
	TOTAL_NO_OF_TRANSACTION,
	TOTAL_TRANSACTION_BEFORE_3MO,
	TOTAL_TRANSACTION_BEFORE_6MO,
	TOTAL_TRANSACTION_BEFORE_12MO,
	TOTAL_MONTHLY_SUPPLIES,
	TOTAL_MONTHLY_SUPPLIES_BEFORE_3MO,
	TOTAL_MONTHLY_SUPPLIES_BEFORE_6MO,
	TOTAL_MONTHLY_SUPPLIES_BEFORE_12MO,
	ACTIVE_DAYS,
	ACTIVE_MONTHS,
	ORDER_RATE,
	ORDER_RATE_BEFORE_3MO,
	ORDER_RATE_BEFORE_6MO,
	ORDER_RATE_BEFORE_12MO,
	SUPPLY_RATE,
	SUPPLY_RATE_BEFORE_3MO,
	SUPPLY_RATE_BEFORE_6MO,
	SUPPLY_RATE_BEFORE_12MO,
	SKIP_SHIPMENT,
	SKIP_SHIPMENT_BEFORE3MO,
	SKIP_SHIPMENT_BEFORE6MO,
	SKIP_SHIPMENT_BEFORE12MO,
	CHURN_FLAG,
	SRP_ADOPTATION,
	LAST_LOGIN,
	LOGIN_COUNT,
	COUPON_CODE,
	DISCOUNT_AMOUNT,
	DISCOUNT_PERCENT,
	COUPON_TYPE,
	DISCOUNT_TYPE
) as


      with DS_01_Map as 
      (
      select RECURLY_SUBSCRIPTION_ID,CUSTOMER_EMAIL,FIRST_NAME,LAST_NAME,CURRENT_STATUS,CREATED_AT,ACTIVATED_AT,CANCELLED_AT,
        BILLING_COUNTRY,BILLING_CITY,BILLING_STATE,IS_INTERNATIONAL,SKU
        from ""MARKETING_DATABASE"".""PUBLIC"".""V_SUBSCRIPTION_MAPPING_DS_01""
        where RECHARGE_SUBSCRIPTION_ID is null
      ),

      all_transactions as 
      (
      select s.UUID as subscription_id , t.date as transaction_date,adjustment_quantity as quantity,ADJUSTMENT_PRODUCT_CODE as SKU, activated_at as subscription_start_date, 
        case when sku ilike '%3mo' then 3 
             when sku ilike '%6mo%' then 6
             else 1 end as sku_month_count,
        case when transaction_date <= dateadd(month,3,activated_at) then 1 else 0 end as transaction_before3mo,
        case when transaction_date <= dateadd(month,6,activated_at) then 1 else 0 end as transaction_before6mo,
        case when transaction_date <= dateadd(month,12,activated_at) then 1 else 0 end as transaction_before12mo--,d.activated_at 
      from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
                              join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id
                              left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as s on t.subscription_id = s.uuid
                              where t.type = 'purchase'
                                  and t.status = 'success'
                                  and adjustment_description not ilike '%shipping%' 
                                  and adjustment_description not ilike '%Replacement%'
                                  and adjustment_description not ilike '%preorder%'
                                  and (s.plan_name ilike '%DS-01%' or s.plan_name ilike 'Daily Synbiotic%')
      ),

      transaction_summary as 
      (
      select subscription_id, count(*) as total_no_of_transaction, sum(TRANSACTION_BEFORE3MO) as total_transaction_before_3mo,
            sum(TRANSACTION_BEFORE6MO) as total_transaction_before_6mo,sum(TRANSACTION_BEFORE12MO) as total_transaction_before_12mo,
            sum(sku_month_count) as total_monthly_supplies, sum(sku_month_count*TRANSACTION_BEFORE3MO) as total_monthly_supplies_before_3mo,
            sum(sku_month_count*TRANSACTION_BEFORE6MO) as total_monthly_supplies_before_6mo,sum(sku_month_count*TRANSACTION_BEFORE12MO) as total_monthly_supplies_before_12mo

      from all_transactions 
      group by subscription_id
      ),

      order_rate_skip as
      (
      select d.*,ifnull(cancelled_at,current_date()) as date_flag,total_no_of_transaction, total_transaction_before_3mo,total_transaction_before_6mo,total_transaction_before_12mo,
                 total_monthly_supplies,total_monthly_supplies_before_3mo,total_monthly_supplies_before_6mo,total_monthly_supplies_before_12mo,
                 case when datediff(days,ACTIVATED_AT,date_flag) = 0 then 1
                      else datediff(days,ACTIVATED_AT,date_flag) end as active_days, 
                 ceil(active_days/30) as active_months,
                 round(TOTAL_NO_OF_TRANSACTION/active_months,2) as order_rate, case when active_months >= 3 then round(TOTAL_TRANSACTION_BEFORE_3MO/active_months,2) else null end as order_rate_before_3mo,
                  case when active_months >= 6 then round(TOTAL_TRANSACTION_BEFORE_6MO/active_months,2) else null end as order_rate_before_6mo,
                  case when active_months >= 12 then round(TOTAL_TRANSACTION_BEFORE_12MO/active_months,2) else null end as order_rate_before_12mo,
                 round(TOTAL_MONTHLY_SUPPLIES/active_months,2) as supply_rate, case when active_months >= 3 then round(TOTAL_MONTHLY_SUPPLIES_BEFORE_3MO/active_months,2) else null end as supply_rate_before_3mo,
                  case when active_months >= 6 then round(TOTAL_MONTHLY_SUPPLIES_BEFORE_6MO/active_months,2) else null end as supply_rate_before_6mo,
                  case when active_months >= 12 then round(TOTAL_MONTHLY_SUPPLIES_BEFORE_12MO/active_months,2) else null end as supply_rate_before_12mo,
                  case when supply_rate < 1 then 1 else 0 end as skip_shipment, 
                  case when supply_rate_before_3mo is not null and supply_rate_before_3mo < 1 then 1
                       when supply_rate_before_3mo is not null and supply_rate_before_3mo >= 1 then 0
                       else null end as skip_shipment_before3mo,
                  case when supply_rate_before_6mo is not null and supply_rate_before_6mo < 1 then 1
                       when supply_rate_before_6mo is not null and supply_rate_before_6mo >= 1 then 0
                       else null end as skip_shipment_before6mo,
                  case when supply_rate_before_12mo is not null and supply_rate_before_12mo < 1 then 1
                       when supply_rate_before_12mo is not null and supply_rate_before_12mo >= 1 then 0
                       else null end as skip_shipment_before12mo

      from DS_01_Map as d left join transaction_summary as trn on d.recurly_subscription_id = trn.subscription_id
      ),

      churn_before as 
      (
      select distinct customer_email,1 as churn_flag
      from ds_01_map
      where cancelled_at is not null
      ),

      srp_adoptation as 
      (
      select distinct subscription_id, 1 as SRP_adoptation
      from all_transactions 
      where sku_month_count > 1
      ),
      
      customer_login as 
      (
      select email, max(to_date(original_timestamp)) as last_login, count(original_timestamp) as login_count
      from ""SEGMENT_EVENTS"".""SEED_COM"".""USERS"" as u left join ""SEGMENT_EVENTS"".""SEED_COM"".""LOGIN"" as l on u.ID = l.user_id
      group by email
      ),
      
      coupons as 
      (
        with first_row as 
        (
        select row_number() over(partition by subscription_id order by INVOICE_BILLED_DATE asc) as row_number,
          subscription_id, invoice_billed_date,ADJUSTMENT_COUPON_CODE 
          from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
          where adjustment_description not ilike '%shipping%'
        )

        select subscription_id, adjustment_coupon_code, discount, discount_percent,coupon_type,discount_type
        from first_row as fr left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""COUPONS"" as c on fr.adjustment_coupon_code = c.coupon_code
        where row_number = 1 
      )
      
      select o.*,ifnull(c.churn_flag,0) as churn_flag, ifnull(SRP_adoptation,0) as SRP_adoptation, cl.last_login, cl.login_count, 
             cp.adjustment_coupon_code as coupon_code, cp.discount as discount_amount, cp.discount_percent as discount_percent, cp.coupon_type,cp.discount_type
      from order_rate_skip as o 
          left join churn_before as c on o.customer_email = c.customer_email
          left join srp_adoptation as s on o.recurly_subscription_id = s.subscription_id
          left join customer_login as cl on o.customer_email = cl.email
          left join coupons as cp on o.recurly_subscription_id = cp.subscription_id;"
"V_CANCELLATION_TRANSACTION_HISTORY","create or replace view SEED_DATA.DEV.V_CANCELLATION_TRANSACTION_HISTORY(
	SUBSCRIPTION_ID,
	RECURLY_SUBSCRIPTION_ID,
	SUBSCRIPTION_CANCELED_AT,
	SKU,
	QUANTITY,
	CANCELATION_FORM_CREATED_AT,
	PRIMARY_REASON_ID,
	PRIMARY_REASON,
	SECONDARY_REASON_ID,
	SECONDARY_REASON,
	REASON_GROUP,
	DATE_MATCH_FLAG
) as 

--- Cancellation form was created 2022-02-23 onwards hence only recurly data is sufficent				
				
with cancellation as				
(				
select 
  user_cancel.subscription_id
, subscription_uuid as recurly_subscription_id
, recurly_sub.canceled_at as subscription_canceled_at
, recurly_sub.plan_code as sku
, recurly_sub.quantity as quantity
, user_cancel.created as cancelation_form_created_at
, reason_id as primary_reason_id
, map.reason as primary_reason
, secondary_reason_id
, sr.reason as secondary_reason
, rank() over(partition by user_cancel.subscription_id order by user_cancel.created desc) as created_rank	
---- ADDING RECURLY SUBSCRIPTION ID	
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly_sub	
---- ADDING SUBSCRIPTION INFO	
left join ""MARKETING_DATABASE"".""SEED_CORE_PUBLIC"".""SEED_ECOMMERCE_SUBSCRIPTION"" as user_sub	
on user_sub.subscription_uuid = recurly_sub.uuid	
left join ""MARKETING_DATABASE"".""SEED_CORE_PUBLIC"".""SEED_ECOMMERCE_USERSUBSCRIPTIONCANCELLATIONREASON"" as user_cancel	
on user_sub.id = user_cancel.subscription_id				
---- ADDING PRIMARY REASON				
left join ""MARKETING_DATABASE"".""SEED_CORE_PUBLIC"".""SEED_ECOMMERCE_CANCELLATIONREASON"" as map				
on user_cancel.reason_id = map.ID				
---- ADDING SECONDARY REASON				
left join (SELECT ID, REASON				
FROM ""MARKETING_DATABASE"".""SEED_CORE_PUBLIC"".""SEED_ECOMMERCE_CANCELLATIONREASON"" where IS_SECONDARY_REASON = 'TRUE')as SR				
on user_cancel.SECONDARY_REASON_ID = SR.ID													
							
qualify created_rank = 1		
)				
     
, cancellation_final as (
select 
  c.subscription_id
, c.recurly_subscription_id
, c.subscription_canceled_at
, c.sku
, c.quantity
, c.cancelation_form_created_at
, c.primary_reason_id
, c.primary_reason
, c.secondary_reason_id
, c.secondary_reason
, coalesce(scrg.REASON_GROUP,'Other') as reason_group	
, case when to_date(c.subscription_canceled_at) = to_date(c.cancelation_form_created_at) then TRUE else FALSE end as date_match_flag

from cancellation as c				
---- ADDING CANCEL REASONS GROUPS				
left join MARKETING_DATABASE.GOOGLE_SHEETS.SUB_CANCEL_REASONS_GROUPS as scrg				
on c.primary_reason = scrg.PRIMARY_REASON and				
ifnull(c.SECONDARY_REASON,'none') = ifnull(scrg.SECONDARY_REASON,'none')				

) 

select * from cancellation_final;"
"V_COHORT_DS01_CUS_COHORT","create or replace view SEED_DATA.DEV.V_COHORT_DS01_CUS_COHORT as 

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_SKU_ADJUSTED ---- all orders and adjusted orders for SRP
    where product = 'DS-01'
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.invoice_date))/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    where first_product = 'DS-01'
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.invoice_date))/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
    where first_product = 'DS-01'
), 

sub_inv_flag as
(
    select customer_id, account_activated_at,
       max(case when invoice_month = 0 or invoice_month = -1 then 1 else null end) as invoice_month_0_flag,
        max(case when cancelled_month <= 0 and invoice_month = 1 then 1
                when cancelled_month <= 0 then 0
                when invoice_month = 0 or invoice_month = 1 then 1 
                else null end) as invoice_month_1_flag,
        max(case when cancelled_month <= 1 and invoice_month = 2 then 1
                when cancelled_month <= 1 then 0
                when invoice_month = 1 or invoice_month = 2 then 1
                else null end) as invoice_month_2_flag,
        max(case when cancelled_month <= 2 and invoice_month = 3 then 1 
                when cancelled_month <= 2 then 0
                when invoice_month = 2 or invoice_month = 3 then 1 
                else null end) as invoice_month_3_flag,
        max(case when cancelled_month <= 3 and invoice_month = 4 then 1
                when cancelled_month <= 3 then 0
                when invoice_month = 3 or invoice_month = 4 then 1
                else null end) as invoice_month_4_flag,
        max(case when cancelled_month <= 4 and invoice_month = 5 then 1
                when cancelled_month <= 4 then 0
                when invoice_month = 4 or invoice_month = 5 then 1 
                else null end) as invoice_month_5_flag,
        max(case when cancelled_month <= 5 and invoice_month = 6 then 1
                when cancelled_month <= 5 then 0
                when invoice_month = 5 or invoice_month = 6 then 1
                else null end) as invoice_month_6_flag,
        max(case when cancelled_month <= 6 and invoice_month = 7 then 1
                when cancelled_month <= 6 then 0
                when invoice_month = 6 or invoice_month = 7 then 1 
                else null end) as invoice_month_7_flag,
        max(case when cancelled_month <= 7 and invoice_month = 8 then 1
                when cancelled_month <= 7 then 0
                when invoice_month = 7 or invoice_month = 8 then 1
                else null end) as invoice_month_8_flag,
        max(case when cancelled_month <= 8 and invoice_month = 9 then 1
                when cancelled_month <= 8 then 0
                when invoice_month = 8 or invoice_month = 9 then 1 
                else null end) as invoice_month_9_flag,
        max(case when cancelled_month <= 9 and invoice_month = 10 then 1
                when cancelled_month <= 9 then 0
                when invoice_month = 9 or invoice_month = 10 then 1
                else null end) as invoice_month_10_flag,
        max(case when cancelled_month <= 10 and invoice_month = 11 then 1
                when cancelled_month <= 10 then 0
                when invoice_month = 10 or invoice_month = 11 then 1 
                else null end) as invoice_month_11_flag,
        max(case when cancelled_month <= 11 and invoice_month = 12 then 1
                when cancelled_month <= 11 then 0
                when invoice_month = 11 or invoice_month = 12 then 1
                else null end) as invoice_month_12_flag,
        max(case when cancelled_month <= 12 and invoice_month = 13 then 1
                when cancelled_month <= 12 then 0
                when invoice_month = 12 or invoice_month = 13 then 1 
                else null end) as invoice_month_13_flag,
        max(case when cancelled_month <= 13 and invoice_month = 14 then 1
                when cancelled_month <= 13 then 0
                when invoice_month = 13 or invoice_month = 14 then 1
                else null end) as invoice_month_14_flag,
        max(case when cancelled_month <= 14 and invoice_month = 15 then 1
                when cancelled_month <= 14 then 0
                when invoice_month = 14 or invoice_month = 15 then 1 
                else null end) as invoice_month_15_flag,
        max(case when cancelled_month <= 15 and invoice_month = 16 then 1
                when cancelled_month <= 15 then 0
                when invoice_month = 15 or invoice_month = 16 then 1
                else null end) as invoice_month_16_flag,
        max(case when cancelled_month <= 16 and invoice_month = 17 then 1 
                when cancelled_month <= 16 then 0
                when invoice_month = 16 or invoice_month = 17 then 1 
                else null end) as invoice_month_17_flag,
        max(case when cancelled_month <= 17 and invoice_month = 18 then 1
                when cancelled_month <= 17 then 0
                when invoice_month = 17 or invoice_month = 18 then 1
                else null end) as invoice_month_18_flag,
        max(case when cancelled_month <= 18 and invoice_month = 19 then 1
                when cancelled_month <= 18 then 0
                when invoice_month = 18 or invoice_month = 19 then 1 
                else null end) as invoice_month_19_flag,
        max(case when cancelled_month <= 19 and invoice_month = 20 then 1
                when cancelled_month <= 19 then 0
                when invoice_month = 19 or invoice_month = 20 then 1
                else null end) as invoice_month_20_flag,
        max(case when cancelled_month <= 20 and invoice_month = 21 then 1
                when cancelled_month <= 20 then 0
                when invoice_month = 20 or invoice_month = 21 then 1 
                else null end) as invoice_month_21_flag,
        max(case when cancelled_month <= 21 and invoice_month = 22 then 1
                when cancelled_month <= 21 then 0
                when invoice_month = 21 or invoice_month = 22 then 1
                else null end) as invoice_month_22_flag,
        max(case when cancelled_month <= 22 and invoice_month = 23 then 1
                when cancelled_month <= 22 then 0
                when invoice_month = 22 or invoice_month = 23 then 1 
                else null end) as invoice_month_23_flag,
        max(case when cancelled_month <= 23 and invoice_month = 24 then 1
                when cancelled_month <= 23 then 0
                when invoice_month = 23 or invoice_month = 24 then 1
                else null end) as invoice_month_24_flag,
        max(case when cancelled_month <= 24 and invoice_month = 25 then 1
                when cancelled_month <= 24 then 0
                when invoice_month = 24 or invoice_month = 25 then 1 
                else null end) as invoice_month_25_flag,
        max(case when cancelled_month <= 25 and invoice_month = 26 then 1
                when cancelled_month <= 25 then 0
                when invoice_month = 25 or invoice_month = 26 then 1
                else null end) as invoice_month_26_flag,
        max(case when cancelled_month <= 26 and invoice_month = 27 then 1
                when cancelled_month <= 26 then 0
                when invoice_month = 26 or invoice_month = 27 then 1 
                else null end) as invoice_month_27_flag,
        max(case when cancelled_month <= 27 and invoice_month = 28 then 1
                when cancelled_month <= 27 then 0
                when invoice_month = 27 or invoice_month = 28 then 1
                else null end) as invoice_month_28_flag,
        max(case when cancelled_month <= 28 and invoice_month = 29 then 1
                when cancelled_month <= 28 then 0
                when invoice_month = 28 or invoice_month = 29 then 1 
                else null end) as invoice_month_29_flag,
        max(case when cancelled_month <= 29 and invoice_month = 30 then 1
                when cancelled_month <= 29 then 0
                when invoice_month = 29 or invoice_month = 30 then 1
                else null end) as invoice_month_30_flag,
        max(case when cancelled_month <= 30 and invoice_month = 31 then 1
                when cancelled_month <= 30 then 0
                when invoice_month = 30 or invoice_month = 31 then 1 
                else null end) as invoice_month_31_flag,
        max(case when cancelled_month <= 31 and invoice_month = 32 then 1
                when cancelled_month <= 31 then 0
                when invoice_month = 31 or invoice_month = 32 then 1
                else null end) as invoice_month_32_flag,
        max(case when cancelled_month <= 32 and invoice_month = 33 then 1
                when cancelled_month <= 32 then 0
                when invoice_month = 32 or invoice_month = 33 then 1 
                else null end) as invoice_month_33_flag,
        max(case when cancelled_month <= 33 and invoice_month = 34 then 1
                when cancelled_month <= 33 then 0
                when invoice_month = 33 or invoice_month = 34 then 1
                else null end) as invoice_month_34_flag,
        max(case when cancelled_month <= 34 and invoice_month = 35 then 1
                when cancelled_month <= 34 then 0
                when invoice_month = 34 or invoice_month = 35 then 1 
                else null end) as invoice_month_35_flag,
        max(case when cancelled_month <= 35 and invoice_month = 36 then 1
                when cancelled_month <= 35 then 0
                when invoice_month = 35 or invoice_month = 36 then 1
                else null end) as invoice_month_36_flag,
        max(case when cancelled_month <= 36 and invoice_month = 37 then 1
                when cancelled_month <= 36 then 0
                when invoice_month = 36 or invoice_month = 37 then 1 
                else null end) as invoice_month_37_flag,
        max(case when cancelled_month <= 37 and invoice_month = 38 then 1
                when cancelled_month <= 37 then 0
                when invoice_month = 37 or invoice_month = 38 then 1
                else null end) as invoice_month_38_flag,
        max(case when cancelled_month <= 38 and invoice_month = 39 then 1
                when cancelled_month <= 38 then 0
                when invoice_month = 38 or invoice_month = 39 then 1 
                else null end) as invoice_month_39_flag,
        max(case when cancelled_month <= 39 and invoice_month = 40 then 1
                when cancelled_month <= 39 then 0
                when invoice_month = 39 or invoice_month = 40 then 1
                else null end) as invoice_month_40_flag,
        max(case when cancelled_month <= 40 and invoice_month = 41 then 1 
                when cancelled_month <= 40 then 0
                when invoice_month = 40 or invoice_month = 41 then 1 
                else null end) as invoice_month_41_flag,
        max(case when cancelled_month <= 41 and invoice_month = 42 then 1
                when cancelled_month <= 41 then 0
                when invoice_month = 41 or invoice_month = 42 then 1
                else null end) as invoice_month_42_flag,
        max(case when cancelled_month <= 42 and invoice_month = 43 then 1
                when cancelled_month <= 42 then 0
                when invoice_month = 42 or invoice_month = 43 then 1 
                else null end) as invoice_month_43_flag,
        max(case when cancelled_month <= 43 and invoice_month = 44 then 1
                when cancelled_month <= 43 then 0
                when invoice_month = 43 or invoice_month = 44 then 1
                else null end) as invoice_month_44_flag,
        max(case when cancelled_month <= 44 and invoice_month = 45 then 1
                when cancelled_month <= 44 then 0
                when invoice_month = 44 or invoice_month = 45 then 1 
                else null end) as invoice_month_45_flag,
        max(case when cancelled_month <= 45 and invoice_month = 46 then 1
                when cancelled_month <= 45 then 0
                when invoice_month = 45 or invoice_month = 46 then 1
                else null end) as invoice_month_46_flag,
        max(case when cancelled_month <= 46 and invoice_month = 47 then 1
                when cancelled_month <= 46 then 0
                when invoice_month = 46 or invoice_month = 47 then 1 
                else null end) as invoice_month_47_flag,
        max(case when cancelled_month <= 47 and invoice_month = 48 then 1
                when cancelled_month <= 47 then 0
                when invoice_month = 47 or invoice_month = 48 then 1
                else null end) as invoice_month_48_flag,
        max(case when cancelled_month <= 48 and invoice_month = 49 then 1
                when cancelled_month <= 48 then 0
                when invoice_month = 48 or invoice_month = 49 then 1 
                else null end) as invoice_month_49_flag,
        max(case when cancelled_month <= 49 and invoice_month = 50 then 1
                when cancelled_month <= 49 then 0
                when invoice_month = 49 or invoice_month = 50 then 1
                else null end) as invoice_month_50_flag,
        max(case when cancelled_month <= 50 and invoice_month = 51 then 1
                when cancelled_month <= 50 then 0
                when invoice_month = 50 or invoice_month = 51 then 1 
                else null end) as invoice_month_51_flag,
        max(case when cancelled_month <= 51 and invoice_month = 52 then 1
                when cancelled_month <= 51 then 0
                when invoice_month = 51 or invoice_month = 52 then 1
                else null end) as invoice_month_52_flag,
        max(case when cancelled_month <= 52 and invoice_month = 53 then 1
                when cancelled_month <= 52 then 0
                when invoice_month = 52 or invoice_month = 53 then 1 
                else null end) as invoice_month_53_flag,
        max(case when cancelled_month <= 53 and invoice_month = 54 then 1
                when cancelled_month <= 53 then 0
                when invoice_month = 53 or invoice_month = 54 then 1
                else null end) as invoice_month_54_flag,
        max(case when cancelled_month <= 54 and invoice_month = 55 then 1
                when cancelled_month <= 54 then 0
                when invoice_month = 54 or invoice_month = 55 then 1 
                else null end) as invoice_month_55_flag,
        max(case when cancelled_month <= 55 and invoice_month = 56 then 1
                when cancelled_month <= 55 then 0
                when invoice_month = 55 or invoice_month = 56 then 1
                else null end) as invoice_month_56_flag,
        max(case when cancelled_month <= 56 and invoice_month = 57 then 1
                when cancelled_month <= 56 then 0
                when invoice_month = 56 or invoice_month = 57 then 1 
                else null end) as invoice_month_57_flag,
        max(case when cancelled_month <= 57 and invoice_month = 58 then 1
                when cancelled_month <= 57 then 0
                when invoice_month = 57 or invoice_month = 58 then 1
                else null end) as invoice_month_58_flag,
        max(case when cancelled_month <= 58 and invoice_month = 59 then 1
                when cancelled_month <= 58 then 0
                when invoice_month = 58 or invoice_month = 59 then 1 
                else null end) as invoice_month_59_flag,
        max(case when cancelled_month <= 59 and invoice_month = 60 then 1
                when cancelled_month <= 59 then 0
                when invoice_month = 59 or invoice_month = 60 then 1
                else null end) as invoice_month_60_flag,
        max(case when cancelled_month <= 60 and invoice_month = 61 then 1
                when cancelled_month <= 60 then 0
                when invoice_month = 60 or invoice_month = 61 then 1 
                else null end) as invoice_month_61_flag,
        max(case when cancelled_month <= 61 and invoice_month = 62 then 1
                when cancelled_month <= 61 then 0
                when invoice_month = 61 or invoice_month = 62 then 1
                else null end) as invoice_month_62_flag,
        max(case when cancelled_month <= 62 and invoice_month = 63 then 1
                when cancelled_month <= 62 then 0
                when invoice_month = 62 or invoice_month = 63 then 1 
                else null end) as invoice_month_63_flag,
        max(case when cancelled_month <= 63 and invoice_month = 64 then 1
                when cancelled_month <= 63 then 0
                when invoice_month = 63 or invoice_month = 64 then 1
                else null end) as invoice_month_64_flag,
        max(case when cancelled_month <= 64 and invoice_month = 65 then 1
                when cancelled_month <= 64 then 0
                when invoice_month = 64 or invoice_month = 65 then 1 
                else null end) as invoice_month_65_flag,
        max(case when cancelled_month <= 65 and invoice_month = 66 then 1
                when cancelled_month <= 65 then 0
                when invoice_month = 65 or invoice_month = 66 then 1
                else null end) as invoice_month_66_flag,
        max(case when cancelled_month <= 66 and invoice_month = 67 then 1
                when cancelled_month <= 66 then 0
                when invoice_month = 66 or invoice_month = 67 then 1 
                else null end) as invoice_month_67_flag,
        max(case when cancelled_month <= 67 and invoice_month = 68 then 1
                when cancelled_month <= 67 then 0
                when invoice_month = 67 or invoice_month = 68 then 1
                else null end) as invoice_month_68_flag,
        max(case when cancelled_month <= 68 and invoice_month = 69 then 1
                when cancelled_month <= 68 then 0
                when invoice_month = 68 or invoice_month = 69 then 1 
                else null end) as invoice_month_69_flag,
        max(case when cancelled_month <= 69 and invoice_month = 70 then 1
                when cancelled_month <= 69 then 0
                when invoice_month = 69 or invoice_month = 70 then 1
                else null end) as invoice_month_70_flag
    from sub_inv
    
    group by customer_id,account_activated_at
)

select 
    date_trunc('month',to_date(account_activated_at)) as created_month_year,
    ---left(to_date(account_activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_flag end) as active_month_61,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_flag end) as active_month_62,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_flag end) as active_month_63,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_flag end) as active_month_64,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_flag end) as active_month_65,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_flag end) as active_month_66,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_flag end) as active_month_67,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_flag end) as active_month_68,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_flag end) as active_month_69,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_flag end) as active_month_70

from sub_inv_flag
where date_trunc('month',to_date(account_activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1;"
"V_COHORT_DS01_CUS_COHORT_LTV","create or replace view SEED_DATA.DEV.V_COHORT_DS01_CUS_COHORT_LTV as 

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_COGS_UPDATE
    where product = 'DS-01'
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.order_date))/30) as invoice_month,
        o.quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid_less_cogs + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as ltv,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    where first_product = 'DS-01'
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.order_date))/30) as invoice_month,
        o.quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid_less_cogs + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as ltv,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
    where first_product = 'DS-01'
), 

sub_inv_flag as
(
    select recharge_subscription_id,recurly_subscription_id,activated_at,
        sum(case when invoice_month = 0 or invoice_month = -1 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_0_flag,
        sum(case when invoice_month = 1 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_1_flag,
        sum(case when invoice_month = 2 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_2_flag,
        sum(case when invoice_month = 3 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_3_flag,
        sum(case when invoice_month = 4 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_4_flag,
        sum(case when invoice_month = 5 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_5_flag,
        sum(case when invoice_month = 6 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_6_flag,
        sum(case when invoice_month = 7 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_7_flag,
        sum(case when invoice_month = 8 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_8_flag,
        sum(case when invoice_month = 9 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_9_flag,
        sum(case when invoice_month = 10 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_10_flag,
        sum(case when invoice_month = 11 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_11_flag,
        sum(case when invoice_month = 12 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_12_flag,
        sum(case when invoice_month = 13 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_13_flag,
        sum(case when invoice_month = 14 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_14_flag,
        sum(case when invoice_month = 15 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_15_flag,
        sum(case when invoice_month = 16 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_16_flag,
        sum(case when invoice_month = 17 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_17_flag,
        sum(case when invoice_month = 18 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_18_flag,
        sum(case when invoice_month = 19 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_19_flag,
        sum(case when invoice_month = 20 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_20_flag,
        sum(case when invoice_month = 21 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_21_flag,
        sum(case when invoice_month = 22 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_22_flag,
        sum(case when invoice_month = 23 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_23_flag,
        sum(case when invoice_month = 24 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_24_flag,
        sum(case when invoice_month = 25 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_25_flag,
        sum(case when invoice_month = 26 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_26_flag,
        sum(case when invoice_month = 27 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_27_flag,
        sum(case when invoice_month = 28 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_28_flag,
        sum(case when invoice_month = 29 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_29_flag,
        sum(case when invoice_month = 30 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_30_flag,
        sum(case when invoice_month = 31 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_31_flag,
        sum(case when invoice_month = 32 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_32_flag,
        sum(case when invoice_month = 33 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_33_flag,
        sum(case when invoice_month = 34 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_34_flag,
        sum(case when invoice_month = 35 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_35_flag,
        sum(case when invoice_month = 36 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_36_flag,
        sum(case when invoice_month = 37 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_37_flag,
        sum(case when invoice_month = 38 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_38_flag,
        sum(case when invoice_month = 39 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_39_flag,
        sum(case when invoice_month = 40 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_40_flag,
        sum(case when invoice_month = 41 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_41_flag,
        sum(case when invoice_month = 42 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_42_flag,
        sum(case when invoice_month = 43 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_43_flag,
        sum(case when invoice_month = 44 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_44_flag,
        sum(case when invoice_month = 45 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_45_flag,
        sum(case when invoice_month = 46 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_46_flag,
        sum(case when invoice_month = 47 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_47_flag,
        sum(case when invoice_month = 48 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_48_flag,
        sum(case when invoice_month = 49 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_49_flag,
        sum(case when invoice_month = 50 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_50_flag,
        sum(case when invoice_month = 51 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_51_flag,
        sum(case when invoice_month = 52 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_52_flag,
        sum(case when invoice_month = 53 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_53_flag,
        sum(case when invoice_month = 54 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_54_flag,
        sum(case when invoice_month = 55 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_55_flag,
        sum(case when invoice_month = 56 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_56_flag,
        sum(case when invoice_month = 57 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_57_flag,
        sum(case when invoice_month = 58 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_58_flag,
        sum(case when invoice_month = 59 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_59_flag,
        sum(case when invoice_month = 60 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_60_flag,
        sum(case when invoice_month = 61 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_61_flag,
        sum(case when invoice_month = 62 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_62_flag,
        sum(case when invoice_month = 63 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_63_flag,
        sum(case when invoice_month = 64 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_64_flag,
        sum(case when invoice_month = 65 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_65_flag,
        sum(case when invoice_month = 66 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_66_flag,
        sum(case when invoice_month = 67 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_67_flag,
        sum(case when invoice_month = 68 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_68_flag,
        sum(case when invoice_month = 69 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_69_flag,
        sum(case when invoice_month = 70 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_70_flag
        
    from sub_inv
    group by recharge_subscription_id,recurly_subscription_id,activated_at
)

select 
    date_trunc('month',to_date(activated_at)) as created_month_year,
    ---left(to_date(activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward-looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_flag end) as active_month_61,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_flag end) as active_month_62,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_flag end) as active_month_63,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_flag end) as active_month_64,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_flag end) as active_month_65,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_flag end) as active_month_66,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_flag end) as active_month_67,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_flag end) as active_month_68,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_flag end) as active_month_69,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_flag end) as active_month_70
    
from sub_inv_flag
where date_trunc('month',to_date(activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1;"
"V_COHORT_DS01_CUS_COHORT_REVENUE","create or replace view SEED_DATA.DEV.V_COHORT_DS01_CUS_COHORT_REVENUE(
	CREATED_MONTH_YEAR,
	COHORT_QUANTITY,
	ACTIVE_MONTH_0,
	ACTIVE_MONTH_1,
	ACTIVE_MONTH_2,
	ACTIVE_MONTH_3,
	ACTIVE_MONTH_4,
	ACTIVE_MONTH_5,
	ACTIVE_MONTH_6,
	ACTIVE_MONTH_7,
	ACTIVE_MONTH_8,
	ACTIVE_MONTH_9,
	ACTIVE_MONTH_10,
	ACTIVE_MONTH_11,
	ACTIVE_MONTH_12,
	ACTIVE_MONTH_13,
	ACTIVE_MONTH_14,
	ACTIVE_MONTH_15,
	ACTIVE_MONTH_16,
	ACTIVE_MONTH_17,
	ACTIVE_MONTH_18,
	ACTIVE_MONTH_19,
	ACTIVE_MONTH_20,
	ACTIVE_MONTH_21,
	ACTIVE_MONTH_22,
	ACTIVE_MONTH_23,
	ACTIVE_MONTH_24,
	ACTIVE_MONTH_25,
	ACTIVE_MONTH_26,
	ACTIVE_MONTH_27,
	ACTIVE_MONTH_28,
	ACTIVE_MONTH_29,
	ACTIVE_MONTH_30,
	ACTIVE_MONTH_31,
	ACTIVE_MONTH_32,
	ACTIVE_MONTH_33,
	ACTIVE_MONTH_34,
	ACTIVE_MONTH_35,
	ACTIVE_MONTH_36,
	ACTIVE_MONTH_37,
	ACTIVE_MONTH_38,
	ACTIVE_MONTH_39,
	ACTIVE_MONTH_40,
	ACTIVE_MONTH_41,
	ACTIVE_MONTH_42,
	ACTIVE_MONTH_43,
	ACTIVE_MONTH_44,
	ACTIVE_MONTH_45,
	ACTIVE_MONTH_46,
	ACTIVE_MONTH_47,
	ACTIVE_MONTH_48,
	ACTIVE_MONTH_49,
	ACTIVE_MONTH_50,
	ACTIVE_MONTH_51,
	ACTIVE_MONTH_52,
	ACTIVE_MONTH_53,
	ACTIVE_MONTH_54,
	ACTIVE_MONTH_55,
	ACTIVE_MONTH_56,
	ACTIVE_MONTH_57,
	ACTIVE_MONTH_58,
	ACTIVE_MONTH_59,
	ACTIVE_MONTH_60
) as 

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_COGS_UPDATE
    where product = 'DS-01'
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.order_date))/30) as invoice_month,
        o.quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month,
        Total_amount_paid as revenue
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    where first_product = 'DS-01'
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.order_date))/30) as invoice_month,
        o.quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month,
        Total_amount_paid as revenue
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
    where first_product = 'DS-01'
), 

sub_inv_flag as
(
    select recharge_subscription_id,recurly_subscription_id,activated_at,
        sum(case when invoice_month = 0 or invoice_month = -1 then revenue else null end) as invoice_month_0_flag,
        sum(case when cancelled_month <= 0 and invoice_month = 1 then revenue
                when cancelled_month <= 0 then 0
                when invoice_month = 0 or invoice_month = 1 then revenue 
                else null end) as invoice_month_1_flag,
        sum(case when cancelled_month <= 1 and invoice_month = 2 then revenue
                when cancelled_month <= 1 then 0
                when invoice_month = 1 or invoice_month = 2 then revenue
                else null end) as invoice_month_2_flag,
        sum(case when cancelled_month <= 2 and invoice_month = 3 then revenue 
                when cancelled_month <= 2 then 0
                when invoice_month = 2 or invoice_month = 3 then revenue 
                else null end) as invoice_month_3_flag,
        sum(case when cancelled_month <= 3 and invoice_month = 4 then revenue
                when cancelled_month <= 3 then 0
                when invoice_month = 3 or invoice_month = 4 then revenue
                else null end) as invoice_month_4_flag,
        sum(case when cancelled_month <= 4 and invoice_month = 5 then revenue
                when cancelled_month <= 4 then 0
                when invoice_month = 4 or invoice_month = 5 then revenue 
                else null end) as invoice_month_5_flag,
        sum(case when cancelled_month <= 5 and invoice_month = 6 then revenue
                when cancelled_month <= 5 then 0
                when invoice_month = 5 or invoice_month = 6 then revenue
                else null end) as invoice_month_6_flag,
        sum(case when cancelled_month <= 6 and invoice_month = 7 then revenue
                when cancelled_month <= 6 then 0
                when invoice_month = 6 or invoice_month = 7 then revenue 
                else null end) as invoice_month_7_flag,
        sum(case when cancelled_month <= 7 and invoice_month = 8 then revenue
                when cancelled_month <= 7 then 0
                when invoice_month = 7 or invoice_month = 8 then revenue
                else null end) as invoice_month_8_flag,
        sum(case when cancelled_month <= 8 and invoice_month = 9 then revenue
                when cancelled_month <= 8 then 0
                when invoice_month = 8 or invoice_month = 9 then revenue 
                else null end) as invoice_month_9_flag,
        sum(case when cancelled_month <= 9 and invoice_month = 10 then revenue
                when cancelled_month <= 9 then 0
                when invoice_month = 9 or invoice_month = 10 then revenue
                else null end) as invoice_month_10_flag,
        sum(case when cancelled_month <= 10 and invoice_month = 11 then revenue
                when cancelled_month <= 10 then 0
                when invoice_month = 10 or invoice_month = 11 then revenue 
                else null end) as invoice_month_11_flag,
        sum(case when cancelled_month <= 11 and invoice_month = 12 then revenue
                when cancelled_month <= 11 then 0
                when invoice_month = 11 or invoice_month = 12 then revenue
                else null end) as invoice_month_12_flag,
        sum(case when cancelled_month <= 12 and invoice_month = 13 then revenue
                when cancelled_month <= 12 then 0
                when invoice_month = 12 or invoice_month = 13 then revenue 
                else null end) as invoice_month_13_flag,
        sum(case when cancelled_month <= 13 and invoice_month = 14 then revenue
                when cancelled_month <= 13 then 0
                when invoice_month = 13 or invoice_month = 14 then revenue
                else null end) as invoice_month_14_flag,
        sum(case when cancelled_month <= 14 and invoice_month = 15 then revenue
                when cancelled_month <= 14 then 0
                when invoice_month = 14 or invoice_month = 15 then revenue 
                else null end) as invoice_month_15_flag,
        sum(case when cancelled_month <= 15 and invoice_month = 16 then revenue
                when cancelled_month <= 15 then 0
                when invoice_month = 15 or invoice_month = 16 then revenue
                else null end) as invoice_month_16_flag,
        sum(case when cancelled_month <= 16 and invoice_month = 17 then revenue 
                when cancelled_month <= 16 then 0
                when invoice_month = 16 or invoice_month = 17 then revenue 
                else null end) as invoice_month_17_flag,
        sum(case when cancelled_month <= 17 and invoice_month = 18 then revenue
                when cancelled_month <= 17 then 0
                when invoice_month = 17 or invoice_month = 18 then revenue
                else null end) as invoice_month_18_flag,
        sum(case when cancelled_month <= 18 and invoice_month = 19 then revenue
                when cancelled_month <= 18 then 0
                when invoice_month = 18 or invoice_month = 19 then revenue 
                else null end) as invoice_month_19_flag,
        sum(case when cancelled_month <= 19 and invoice_month = 20 then revenue
                when cancelled_month <= 19 then 0
                when invoice_month = 19 or invoice_month = 20 then revenue
                else null end) as invoice_month_20_flag,
        sum(case when cancelled_month <= 20 and invoice_month = 21 then revenue
                when cancelled_month <= 20 then 0
                when invoice_month = 20 or invoice_month = 21 then revenue 
                else null end) as invoice_month_21_flag,
        sum(case when cancelled_month <= 21 and invoice_month = 22 then revenue
                when cancelled_month <= 21 then 0
                when invoice_month = 21 or invoice_month = 22 then revenue
                else null end) as invoice_month_22_flag,
        sum(case when cancelled_month <= 22 and invoice_month = 23 then revenue
                when cancelled_month <= 22 then 0
                when invoice_month = 22 or invoice_month = 23 then revenue 
                else null end) as invoice_month_23_flag,
        sum(case when cancelled_month <= 23 and invoice_month = 24 then revenue
                when cancelled_month <= 23 then 0
                when invoice_month = 23 or invoice_month = 24 then revenue
                else null end) as invoice_month_24_flag,
        sum(case when cancelled_month <= 24 and invoice_month = 25 then revenue
                when cancelled_month <= 24 then 0
                when invoice_month = 24 or invoice_month = 25 then revenue 
                else null end) as invoice_month_25_flag,
        sum(case when cancelled_month <= 25 and invoice_month = 26 then revenue
                when cancelled_month <= 25 then 0
                when invoice_month = 25 or invoice_month = 26 then revenue
                else null end) as invoice_month_26_flag,
        sum(case when cancelled_month <= 26 and invoice_month = 27 then revenue
                when cancelled_month <= 26 then 0
                when invoice_month = 26 or invoice_month = 27 then revenue 
                else null end) as invoice_month_27_flag,
        sum(case when cancelled_month <= 27 and invoice_month = 28 then revenue
                when cancelled_month <= 27 then 0
                when invoice_month = 27 or invoice_month = 28 then revenue
                else null end) as invoice_month_28_flag,
        sum(case when cancelled_month <= 28 and invoice_month = 29 then revenue
                when cancelled_month <= 28 then 0
                when invoice_month = 28 or invoice_month = 29 then revenue 
                else null end) as invoice_month_29_flag,
        sum(case when cancelled_month <= 29 and invoice_month = 30 then revenue
                when cancelled_month <= 29 then 0
                when invoice_month = 29 or invoice_month = 30 then revenue
                else null end) as invoice_month_30_flag,
        sum(case when cancelled_month <= 30 and invoice_month = 31 then revenue
                when cancelled_month <= 30 then 0
                when invoice_month = 30 or invoice_month = 31 then revenue 
                else null end) as invoice_month_31_flag,
        sum(case when cancelled_month <= 31 and invoice_month = 32 then revenue
                when cancelled_month <= 31 then 0
                when invoice_month = 31 or invoice_month = 32 then revenue
                else null end) as invoice_month_32_flag,
        sum(case when cancelled_month <= 32 and invoice_month = 33 then revenue
                when cancelled_month <= 32 then 0
                when invoice_month = 32 or invoice_month = 33 then revenue 
                else null end) as invoice_month_33_flag,
        sum(case when cancelled_month <= 33 and invoice_month = 34 then revenue
                when cancelled_month <= 33 then 0
                when invoice_month = 33 or invoice_month = 34 then revenue
                else null end) as invoice_month_34_flag,
        sum(case when cancelled_month <= 34 and invoice_month = 35 then revenue
                when cancelled_month <= 34 then 0
                when invoice_month = 34 or invoice_month = 35 then revenue 
                else null end) as invoice_month_35_flag,
        sum(case when cancelled_month <= 35 and invoice_month = 36 then revenue
                when cancelled_month <= 35 then 0
                when invoice_month = 35 or invoice_month = 36 then revenue
                else null end) as invoice_month_36_flag,
        sum(case when cancelled_month <= 36 and invoice_month = 37 then revenue
                when cancelled_month <= 36 then 0
                when invoice_month = 36 or invoice_month = 37 then revenue 
                else null end) as invoice_month_37_flag,
        sum(case when cancelled_month <= 37 and invoice_month = 38 then revenue
                when cancelled_month <= 37 then 0
                when invoice_month = 37 or invoice_month = 38 then revenue
                else null end) as invoice_month_38_flag,
        sum(case when cancelled_month <= 38 and invoice_month = 39 then revenue
                when cancelled_month <= 38 then 0
                when invoice_month = 38 or invoice_month = 39 then revenue 
                else null end) as invoice_month_39_flag,
        sum(case when cancelled_month <= 39 and invoice_month = 40 then revenue
                when cancelled_month <= 39 then 0
                when invoice_month = 39 or invoice_month = 40 then revenue
                else null end) as invoice_month_40_flag,
        sum(case when cancelled_month <= 40 and invoice_month = 41 then revenue 
                when cancelled_month <= 40 then 0
                when invoice_month = 40 or invoice_month = 41 then revenue 
                else null end) as invoice_month_41_flag,
        sum(case when cancelled_month <= 41 and invoice_month = 42 then revenue
                when cancelled_month <= 41 then 0
                when invoice_month = 41 or invoice_month = 42 then revenue
                else null end) as invoice_month_42_flag,
        sum(case when cancelled_month <= 42 and invoice_month = 43 then revenue
                when cancelled_month <= 42 then 0
                when invoice_month = 42 or invoice_month = 43 then revenue 
                else null end) as invoice_month_43_flag,
        sum(case when cancelled_month <= 43 and invoice_month = 44 then revenue
                when cancelled_month <= 43 then 0
                when invoice_month = 43 or invoice_month = 44 then revenue
                else null end) as invoice_month_44_flag,
        sum(case when cancelled_month <= 44 and invoice_month = 45 then revenue
                when cancelled_month <= 44 then 0
                when invoice_month = 44 or invoice_month = 45 then revenue 
                else null end) as invoice_month_45_flag,
        sum(case when cancelled_month <= 45 and invoice_month = 46 then revenue
                when cancelled_month <= 45 then 0
                when invoice_month = 45 or invoice_month = 46 then revenue
                else null end) as invoice_month_46_flag,
        sum(case when cancelled_month <= 46 and invoice_month = 47 then revenue
                when cancelled_month <= 46 then 0
                when invoice_month = 46 or invoice_month = 47 then revenue 
                else null end) as invoice_month_47_flag,
        sum(case when cancelled_month <= 47 and invoice_month = 48 then revenue
                when cancelled_month <= 47 then 0
                when invoice_month = 47 or invoice_month = 48 then revenue
                else null end) as invoice_month_48_flag,
        sum(case when cancelled_month <= 48 and invoice_month = 49 then revenue
                when cancelled_month <= 48 then 0
                when invoice_month = 48 or invoice_month = 49 then revenue 
                else null end) as invoice_month_49_flag,
        sum(case when cancelled_month <= 49 and invoice_month = 50 then revenue
                when cancelled_month <= 49 then 0
                when invoice_month = 49 or invoice_month = 50 then revenue
                else null end) as invoice_month_50_flag,
        sum(case when cancelled_month <= 50 and invoice_month = 51 then revenue
                when cancelled_month <= 50 then 0
                when invoice_month = 50 or invoice_month = 51 then revenue 
                else null end) as invoice_month_51_flag,
        sum(case when cancelled_month <= 51 and invoice_month = 52 then revenue
                when cancelled_month <= 51 then 0
                when invoice_month = 51 or invoice_month = 52 then revenue
                else null end) as invoice_month_52_flag,
        sum(case when cancelled_month <= 52 and invoice_month = 53 then revenue
                when cancelled_month <= 52 then 0
                when invoice_month = 52 or invoice_month = 53 then revenue 
                else null end) as invoice_month_53_flag,
        sum(case when cancelled_month <= 53 and invoice_month = 54 then revenue
                when cancelled_month <= 53 then 0
                when invoice_month = 53 or invoice_month = 54 then revenue
                else null end) as invoice_month_54_flag,
        sum(case when cancelled_month <= 54 and invoice_month = 55 then revenue
                when cancelled_month <= 54 then 0
                when invoice_month = 54 or invoice_month = 55 then revenue 
                else null end) as invoice_month_55_flag,
        sum(case when cancelled_month <= 55 and invoice_month = 56 then revenue
                when cancelled_month <= 55 then 0
                when invoice_month = 55 or invoice_month = 56 then revenue
                else null end) as invoice_month_56_flag,
        sum(case when cancelled_month <= 56 and invoice_month = 57 then revenue
                when cancelled_month <= 56 then 0
                when invoice_month = 56 or invoice_month = 57 then revenue 
                else null end) as invoice_month_57_flag,
        sum(case when cancelled_month <= 57 and invoice_month = 58 then revenue
                when cancelled_month <= 57 then 0
                when invoice_month = 57 or invoice_month = 58 then revenue
                else null end) as invoice_month_58_flag,
        sum(case when cancelled_month <= 58 and invoice_month = 59 then revenue
                when cancelled_month <= 58 then 0
                when invoice_month = 58 or invoice_month = 59 then revenue 
                else null end) as invoice_month_59_flag,
        sum(case when cancelled_month <= 59 and invoice_month = 60 then revenue
                when cancelled_month <= 59 then 0
                when invoice_month = 59 or invoice_month = 60 then revenue
                else null end) as invoice_month_60_flag,
        sum(case when cancelled_month <= 60 and invoice_month = 61 then revenue
                when cancelled_month <= 60 then 0
                when invoice_month = 60 or invoice_month = 61 then revenue
                else null end) as invoice_month_61_flag,
        sum(case when cancelled_month <= 61 and invoice_month = 62 then revenue
                when cancelled_month <= 61 then 0
                when invoice_month = 61 or invoice_month = 62 then revenue
                else null end) as invoice_month_62_flag
        
    from sub_inv
    group by recharge_subscription_id,recurly_subscription_id,activated_at
)

select 
    date_trunc('month',to_date(activated_at)) as created_month_year,
    ---left(to_date(activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward-looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60
    
from sub_inv_flag
where date_trunc('month',to_date(activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1;"
"V_COHORT_DS01_SUB_COHORT","create or replace view SEED_DATA.DEV.V_COHORT_DS01_SUB_COHORT as

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_SKU_ADJUSTED
    where product = 'DS-01'
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.invoice_date))/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    where first_product = 'DS-01'
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id, 
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.invoice_date))/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
    where first_product = 'DS-01'
),


sub_inv_flag as
(
    select recharge_subscription_id,recurly_subscription_id,activated_at,
        max(case when invoice_month = 0 or invoice_month = -1 then 1 else null end) as invoice_month_0_flag,
        max(case when cancelled_month <= 0 and invoice_month = 1 then 1
                when cancelled_month <= 0 then 0
                when invoice_month = 0 or invoice_month = 1 then 1 
                else null end) as invoice_month_1_flag,
        max(case when cancelled_month <= 1 and invoice_month = 2 then 1
                when cancelled_month <= 1 then 0
                when invoice_month = 1 or invoice_month = 2 then 1
                else null end) as invoice_month_2_flag,
        max(case when cancelled_month <= 2 and invoice_month = 3 then 1 
                when cancelled_month <= 2 then 0
                when invoice_month = 2 or invoice_month = 3 then 1 
                else null end) as invoice_month_3_flag,
        max(case when cancelled_month <= 3 and invoice_month = 4 then 1
                when cancelled_month <= 3 then 0
                when invoice_month = 3 or invoice_month = 4 then 1
                else null end) as invoice_month_4_flag,
        max(case when cancelled_month <= 4 and invoice_month = 5 then 1
                when cancelled_month <= 4 then 0
                when invoice_month = 4 or invoice_month = 5 then 1 
                else null end) as invoice_month_5_flag,
        max(case when cancelled_month <= 5 and invoice_month = 6 then 1
                when cancelled_month <= 5 then 0
                when invoice_month = 5 or invoice_month = 6 then 1
                else null end) as invoice_month_6_flag,
        max(case when cancelled_month <= 6 and invoice_month = 7 then 1
                when cancelled_month <= 6 then 0
                when invoice_month = 6 or invoice_month = 7 then 1 
                else null end) as invoice_month_7_flag,
        max(case when cancelled_month <= 7 and invoice_month = 8 then 1
                when cancelled_month <= 7 then 0
                when invoice_month = 7 or invoice_month = 8 then 1
                else null end) as invoice_month_8_flag,
        max(case when cancelled_month <= 8 and invoice_month = 9 then 1
                when cancelled_month <= 8 then 0
                when invoice_month = 8 or invoice_month = 9 then 1 
                else null end) as invoice_month_9_flag,
        max(case when cancelled_month <= 9 and invoice_month = 10 then 1
                when cancelled_month <= 9 then 0
                when invoice_month = 9 or invoice_month = 10 then 1
                else null end) as invoice_month_10_flag,
        max(case when cancelled_month <= 10 and invoice_month = 11 then 1
                when cancelled_month <= 10 then 0
                when invoice_month = 10 or invoice_month = 11 then 1 
                else null end) as invoice_month_11_flag,
        max(case when cancelled_month <= 11 and invoice_month = 12 then 1
                when cancelled_month <= 11 then 0
                when invoice_month = 11 or invoice_month = 12 then 1
                else null end) as invoice_month_12_flag,
        max(case when cancelled_month <= 12 and invoice_month = 13 then 1
                when cancelled_month <= 12 then 0
                when invoice_month = 12 or invoice_month = 13 then 1 
                else null end) as invoice_month_13_flag,
        max(case when cancelled_month <= 13 and invoice_month = 14 then 1
                when cancelled_month <= 13 then 0
                when invoice_month = 13 or invoice_month = 14 then 1
                else null end) as invoice_month_14_flag,
        max(case when cancelled_month <= 14 and invoice_month = 15 then 1
                when cancelled_month <= 14 then 0
                when invoice_month = 14 or invoice_month = 15 then 1 
                else null end) as invoice_month_15_flag,
        max(case when cancelled_month <= 15 and invoice_month = 16 then 1
                when cancelled_month <= 15 then 0
                when invoice_month = 15 or invoice_month = 16 then 1
                else null end) as invoice_month_16_flag,
        max(case when cancelled_month <= 16 and invoice_month = 17 then 1 
                when cancelled_month <= 16 then 0
                when invoice_month = 16 or invoice_month = 17 then 1 
                else null end) as invoice_month_17_flag,
        max(case when cancelled_month <= 17 and invoice_month = 18 then 1
                when cancelled_month <= 17 then 0
                when invoice_month = 17 or invoice_month = 18 then 1
                else null end) as invoice_month_18_flag,
        max(case when cancelled_month <= 18 and invoice_month = 19 then 1
                when cancelled_month <= 18 then 0
                when invoice_month = 18 or invoice_month = 19 then 1 
                else null end) as invoice_month_19_flag,
        max(case when cancelled_month <= 19 and invoice_month = 20 then 1
                when cancelled_month <= 19 then 0
                when invoice_month = 19 or invoice_month = 20 then 1
                else null end) as invoice_month_20_flag,
        max(case when cancelled_month <= 20 and invoice_month = 21 then 1
                when cancelled_month <= 20 then 0
                when invoice_month = 20 or invoice_month = 21 then 1 
                else null end) as invoice_month_21_flag,
        max(case when cancelled_month <= 21 and invoice_month = 22 then 1
                when cancelled_month <= 21 then 0
                when invoice_month = 21 or invoice_month = 22 then 1
                else null end) as invoice_month_22_flag,
        max(case when cancelled_month <= 22 and invoice_month = 23 then 1
                when cancelled_month <= 22 then 0
                when invoice_month = 22 or invoice_month = 23 then 1 
                else null end) as invoice_month_23_flag,
        max(case when cancelled_month <= 23 and invoice_month = 24 then 1
                when cancelled_month <= 23 then 0
                when invoice_month = 23 or invoice_month = 24 then 1
                else null end) as invoice_month_24_flag,
        max(case when cancelled_month <= 24 and invoice_month = 25 then 1
                when cancelled_month <= 24 then 0
                when invoice_month = 24 or invoice_month = 25 then 1 
                else null end) as invoice_month_25_flag,
        max(case when cancelled_month <= 25 and invoice_month = 26 then 1
                when cancelled_month <= 25 then 0
                when invoice_month = 25 or invoice_month = 26 then 1
                else null end) as invoice_month_26_flag,
        max(case when cancelled_month <= 26 and invoice_month = 27 then 1
                when cancelled_month <= 26 then 0
                when invoice_month = 26 or invoice_month = 27 then 1 
                else null end) as invoice_month_27_flag,
        max(case when cancelled_month <= 27 and invoice_month = 28 then 1
                when cancelled_month <= 27 then 0
                when invoice_month = 27 or invoice_month = 28 then 1
                else null end) as invoice_month_28_flag,
        max(case when cancelled_month <= 28 and invoice_month = 29 then 1
                when cancelled_month <= 28 then 0
                when invoice_month = 28 or invoice_month = 29 then 1 
                else null end) as invoice_month_29_flag,
        max(case when cancelled_month <= 29 and invoice_month = 30 then 1
                when cancelled_month <= 29 then 0
                when invoice_month = 29 or invoice_month = 30 then 1
                else null end) as invoice_month_30_flag,
        max(case when cancelled_month <= 30 and invoice_month = 31 then 1
                when cancelled_month <= 30 then 0
                when invoice_month = 30 or invoice_month = 31 then 1 
                else null end) as invoice_month_31_flag,
        max(case when cancelled_month <= 31 and invoice_month = 32 then 1
                when cancelled_month <= 31 then 0
                when invoice_month = 31 or invoice_month = 32 then 1
                else null end) as invoice_month_32_flag,
        max(case when cancelled_month <= 32 and invoice_month = 33 then 1
                when cancelled_month <= 32 then 0
                when invoice_month = 32 or invoice_month = 33 then 1 
                else null end) as invoice_month_33_flag,
        max(case when cancelled_month <= 33 and invoice_month = 34 then 1
                when cancelled_month <= 33 then 0
                when invoice_month = 33 or invoice_month = 34 then 1
                else null end) as invoice_month_34_flag,
        max(case when cancelled_month <= 34 and invoice_month = 35 then 1
                when cancelled_month <= 34 then 0
                when invoice_month = 34 or invoice_month = 35 then 1 
                else null end) as invoice_month_35_flag,
        max(case when cancelled_month <= 35 and invoice_month = 36 then 1
                when cancelled_month <= 35 then 0
                when invoice_month = 35 or invoice_month = 36 then 1
                else null end) as invoice_month_36_flag,
        max(case when cancelled_month <= 36 and invoice_month = 37 then 1
                when cancelled_month <= 36 then 0
                when invoice_month = 36 or invoice_month = 37 then 1 
                else null end) as invoice_month_37_flag,
        max(case when cancelled_month <= 37 and invoice_month = 38 then 1
                when cancelled_month <= 37 then 0
                when invoice_month = 37 or invoice_month = 38 then 1
                else null end) as invoice_month_38_flag,
        max(case when cancelled_month <= 38 and invoice_month = 39 then 1
                when cancelled_month <= 38 then 0
                when invoice_month = 38 or invoice_month = 39 then 1 
                else null end) as invoice_month_39_flag,
        max(case when cancelled_month <= 39 and invoice_month = 40 then 1
                when cancelled_month <= 39 then 0
                when invoice_month = 39 or invoice_month = 40 then 1
                else null end) as invoice_month_40_flag,
        max(case when cancelled_month <= 40 and invoice_month = 41 then 1 
                when cancelled_month <= 40 then 0
                when invoice_month = 40 or invoice_month = 41 then 1 
                else null end) as invoice_month_41_flag,
        max(case when cancelled_month <= 41 and invoice_month = 42 then 1
                when cancelled_month <= 41 then 0
                when invoice_month = 41 or invoice_month = 42 then 1
                else null end) as invoice_month_42_flag,
        max(case when cancelled_month <= 42 and invoice_month = 43 then 1
                when cancelled_month <= 42 then 0
                when invoice_month = 42 or invoice_month = 43 then 1 
                else null end) as invoice_month_43_flag,
        max(case when cancelled_month <= 43 and invoice_month = 44 then 1
                when cancelled_month <= 43 then 0
                when invoice_month = 43 or invoice_month = 44 then 1
                else null end) as invoice_month_44_flag,
        max(case when cancelled_month <= 44 and invoice_month = 45 then 1
                when cancelled_month <= 44 then 0
                when invoice_month = 44 or invoice_month = 45 then 1 
                else null end) as invoice_month_45_flag,
        max(case when cancelled_month <= 45 and invoice_month = 46 then 1
                when cancelled_month <= 45 then 0
                when invoice_month = 45 or invoice_month = 46 then 1
                else null end) as invoice_month_46_flag,
        max(case when cancelled_month <= 46 and invoice_month = 47 then 1
                when cancelled_month <= 46 then 0
                when invoice_month = 46 or invoice_month = 47 then 1 
                else null end) as invoice_month_47_flag,
        max(case when cancelled_month <= 47 and invoice_month = 48 then 1
                when cancelled_month <= 47 then 0
                when invoice_month = 47 or invoice_month = 48 then 1
                else null end) as invoice_month_48_flag,
        max(case when cancelled_month <= 48 and invoice_month = 49 then 1
                when cancelled_month <= 48 then 0
                when invoice_month = 48 or invoice_month = 49 then 1 
                else null end) as invoice_month_49_flag,
        max(case when cancelled_month <= 49 and invoice_month = 50 then 1
                when cancelled_month <= 49 then 0
                when invoice_month = 49 or invoice_month = 50 then 1
                else null end) as invoice_month_50_flag,
        max(case when cancelled_month <= 50 and invoice_month = 51 then 1
                when cancelled_month <= 50 then 0
                when invoice_month = 50 or invoice_month = 51 then 1 
                else null end) as invoice_month_51_flag,
        max(case when cancelled_month <= 51 and invoice_month = 52 then 1
                when cancelled_month <= 51 then 0
                when invoice_month = 51 or invoice_month = 52 then 1
                else null end) as invoice_month_52_flag,
        max(case when cancelled_month <= 52 and invoice_month = 53 then 1
                when cancelled_month <= 52 then 0
                when invoice_month = 52 or invoice_month = 53 then 1 
                else null end) as invoice_month_53_flag,
        max(case when cancelled_month <= 53 and invoice_month = 54 then 1
                when cancelled_month <= 53 then 0
                when invoice_month = 53 or invoice_month = 54 then 1
                else null end) as invoice_month_54_flag,
        max(case when cancelled_month <= 54 and invoice_month = 55 then 1
                when cancelled_month <= 54 then 0
                when invoice_month = 54 or invoice_month = 55 then 1 
                else null end) as invoice_month_55_flag,
        max(case when cancelled_month <= 55 and invoice_month = 56 then 1
                when cancelled_month <= 55 then 0
                when invoice_month = 55 or invoice_month = 56 then 1
                else null end) as invoice_month_56_flag,
        max(case when cancelled_month <= 56 and invoice_month = 57 then 1
                when cancelled_month <= 56 then 0
                when invoice_month = 56 or invoice_month = 57 then 1 
                else null end) as invoice_month_57_flag,
        max(case when cancelled_month <= 57 and invoice_month = 58 then 1
                when cancelled_month <= 57 then 0
                when invoice_month = 57 or invoice_month = 58 then 1
                else null end) as invoice_month_58_flag,
        max(case when cancelled_month <= 58 and invoice_month = 59 then 1
                when cancelled_month <= 58 then 0
                when invoice_month = 58 or invoice_month = 59 then 1 
                else null end) as invoice_month_59_flag,
        max(case when cancelled_month <= 59 and invoice_month = 60 then 1
                when cancelled_month <= 59 then 0
                when invoice_month = 59 or invoice_month = 60 then 1
                else null end) as invoice_month_60_flag,
        max(case when cancelled_month <= 60 and invoice_month = 61 then 1
                when cancelled_month <= 60 then 0
                when invoice_month = 60 or invoice_month = 61 then 1
                else null end) as invoice_month_61_flag,
        max(case when cancelled_month <= 61 and invoice_month = 62 then 1
                when cancelled_month <= 61 then 0
                when invoice_month = 61 or invoice_month = 62 then 1
                else null end) as invoice_month_62_flag,
        max(case when cancelled_month <= 62 and invoice_month = 63 then 1
                when cancelled_month <= 62 then 0
                when invoice_month = 62 or invoice_month = 63 then 1 
                else null end) as invoice_month_63_flag,
        max(case when cancelled_month <= 63 and invoice_month = 64 then 1
                when cancelled_month <= 63 then 0
                when invoice_month = 63 or invoice_month = 64 then 1
                else null end) as invoice_month_64_flag,
        max(case when cancelled_month <= 64 and invoice_month = 65 then 1
                when cancelled_month <= 64 then 0
                when invoice_month = 64 or invoice_month = 65 then 1 
                else null end) as invoice_month_65_flag,
        max(case when cancelled_month <= 65 and invoice_month = 66 then 1
                when cancelled_month <= 65 then 0
                when invoice_month = 65 or invoice_month = 66 then 1
                else null end) as invoice_month_66_flag,
        max(case when cancelled_month <= 66 and invoice_month = 67 then 1
                when cancelled_month <= 66 then 0
                when invoice_month = 66 or invoice_month = 67 then 1 
                else null end) as invoice_month_67_flag,
        max(case when cancelled_month <= 67 and invoice_month = 68 then 1
                when cancelled_month <= 67 then 0
                when invoice_month = 67 or invoice_month = 68 then 1
                else null end) as invoice_month_68_flag,
        max(case when cancelled_month <= 68 and invoice_month = 69 then 1
                when cancelled_month <= 68 then 0
                when invoice_month = 68 or invoice_month = 69 then 1 
                else null end) as invoice_month_69_flag,
        max(case when cancelled_month <= 69 and invoice_month = 70 then 1
                when cancelled_month <= 69 then 0
                when invoice_month = 69 or invoice_month = 70 then 1
                else null end) as invoice_month_70_flag
        
    from sub_inv
    group by recharge_subscription_id,recurly_subscription_id,activated_at
)

select 
    date_trunc('month',to_date(activated_at)) as created_month_year,
    ---left(to_date(activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_flag end) as active_month_61,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_flag end) as active_month_62,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_flag end) as active_month_63,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_flag end) as active_month_64,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_flag end) as active_month_65,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_flag end) as active_month_66,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_flag end) as active_month_67,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_flag end) as active_month_68,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_flag end) as active_month_69,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_flag end) as active_month_70

from sub_inv_flag
where date_trunc('month',to_date(activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1;"
"V_COHORT_DS01_SUB_COHORT_LTV","create or replace view SEED_DATA.DEV.V_COHORT_DS01_SUB_COHORT_LTV as

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_COGS_UPDATE
    where product = 'DS-01'
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.order_date))/30) as invoice_month,
        o.quantity as invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid_less_cogs + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as ltv,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    where first_product = 'DS-01'
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.order_date))/30) as invoice_month,
        o.quantity as invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid_less_cogs + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as ltv,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
    where first_product = 'DS-01'
)

,sub_inv_flag as
(
    select recharge_subscription_id,recurly_subscription_id,activated_at,
        sum(case when invoice_month = 0 or invoice_month = -1 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_0_flag,
        sum(case when invoice_month = 1 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_1_flag,
        sum(case when invoice_month = 2 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_2_flag,
        sum(case when invoice_month = 3 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_3_flag,
        sum(case when invoice_month = 4 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_4_flag,
        sum(case when invoice_month = 5 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_5_flag,
        sum(case when invoice_month = 6 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_6_flag,
        sum(case when invoice_month = 7 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_7_flag,
        sum(case when invoice_month = 8 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_8_flag,
        sum(case when invoice_month = 9 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_9_flag,
        sum(case when invoice_month = 10 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_10_flag,
        sum(case when invoice_month = 11 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_11_flag,
        sum(case when invoice_month = 12 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_12_flag,
        sum(case when invoice_month = 13 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_13_flag,
        sum(case when invoice_month = 14 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_14_flag,
        sum(case when invoice_month = 15 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_15_flag,
        sum(case when invoice_month = 16 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_16_flag,
        sum(case when invoice_month = 17 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_17_flag,
        sum(case when invoice_month = 18 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_18_flag,
        sum(case when invoice_month = 19 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_19_flag,
        sum(case when invoice_month = 20 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_20_flag,
        sum(case when invoice_month = 21 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_21_flag,
        sum(case when invoice_month = 22 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_22_flag,
        sum(case when invoice_month = 23 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_23_flag,
        sum(case when invoice_month = 24 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_24_flag,
        sum(case when invoice_month = 25 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_25_flag,
        sum(case when invoice_month = 26 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_26_flag,
        sum(case when invoice_month = 27 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_27_flag,
        sum(case when invoice_month = 28 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_28_flag,
        sum(case when invoice_month = 29 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_29_flag,
        sum(case when invoice_month = 30 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_30_flag,
        sum(case when invoice_month = 31 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_31_flag,
        sum(case when invoice_month = 32 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_32_flag,
        sum(case when invoice_month = 33 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_33_flag,
        sum(case when invoice_month = 34 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_34_flag,
        sum(case when invoice_month = 35 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_35_flag,
        sum(case when invoice_month = 36 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_36_flag,
        sum(case when invoice_month = 37 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_37_flag,
        sum(case when invoice_month = 38 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_38_flag,
        sum(case when invoice_month = 39 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_39_flag,
        sum(case when invoice_month = 40 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_40_flag,
        sum(case when invoice_month = 41 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_41_flag,
        sum(case when invoice_month = 42 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_42_flag,
        sum(case when invoice_month = 43 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_43_flag,
        sum(case when invoice_month = 44 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_44_flag,
        sum(case when invoice_month = 45 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_45_flag,
        sum(case when invoice_month = 46 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_46_flag,
        sum(case when invoice_month = 47 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_47_flag,
        sum(case when invoice_month = 48 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_48_flag,
        sum(case when invoice_month = 49 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_49_flag,
        sum(case when invoice_month = 50 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_50_flag,
        sum(case when invoice_month = 51 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_51_flag,
        sum(case when invoice_month = 52 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_52_flag,
        sum(case when invoice_month = 53 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_53_flag,
        sum(case when invoice_month = 54 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_54_flag,
        sum(case when invoice_month = 55 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_55_flag,
        sum(case when invoice_month = 56 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_56_flag,
        sum(case when invoice_month = 57 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_57_flag,
        sum(case when invoice_month = 58 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_58_flag,
        sum(case when invoice_month = 59 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_59_flag,
        sum(case when invoice_month = 60 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_60_flag,
        sum(case when invoice_month = 61 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_61_flag,
        sum(case when invoice_month = 62 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_62_flag,
        sum(case when invoice_month = 63 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_63_flag,
        sum(case when invoice_month = 64 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_64_flag,
        sum(case when invoice_month = 65 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_65_flag,
        sum(case when invoice_month = 66 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_66_flag,
        sum(case when invoice_month = 67 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_67_flag,
        sum(case when invoice_month = 68 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_68_flag,
        sum(case when invoice_month = 69 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_69_flag,
        sum(case when invoice_month = 70 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_70_flag
              
    from sub_inv
    group by recharge_subscription_id,recurly_subscription_id,activated_at
)

,final_data as 
(
select 
    date_trunc('month',to_date(activated_at)) as created_month_year,
    ---left(to_date(activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_flag end) as active_month_61,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_flag end) as active_month_62,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_flag end) as active_month_63,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_flag end) as active_month_64,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_flag end) as active_month_65,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_flag end) as active_month_66,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_flag end) as active_month_67,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_flag end) as active_month_68,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_flag end) as active_month_69,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_flag end) as active_month_70
from sub_inv_flag
where date_trunc('month',to_date(activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1
)

select f.*,round((c.total_spend/f.cohort_quantity),2) as CAC
from final_data as f 
    left join SEED_DATA.DEV.V_MARKETING_SPEND_CAC as c
    on f.created_month_year = c.month_year
where product = 'DS-01';"
"V_COHORT_DS01_SUB_COHORT_REVENUE","create or replace view SEED_DATA.DEV.V_COHORT_DS01_SUB_COHORT_REVENUE as

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_COGS_UPDATE
    where product = 'DS-01'
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.order_date))/30) as invoice_month,
        o.quantity as invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as revenue,
        invoice_refund_flag

    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    where first_product = 'DS-01'
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.order_date))/30) as invoice_month,
        o.quantity as invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as revenue,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
    where first_product = 'DS-01'
)


,sub_inv_flag as
(
    select recharge_subscription_id,recurly_subscription_id,activated_at,
        sum(case when invoice_month = 0 or invoice_month = -1 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_0_flag,
        sum(case when invoice_month = 1 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_1_flag,
        sum(case when invoice_month = 2 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_2_flag,
        sum(case when invoice_month = 3 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_3_flag,
        sum(case when invoice_month = 4 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_4_flag,
        sum(case when invoice_month = 5 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_5_flag,
        sum(case when invoice_month = 6 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_6_flag,
        sum(case when invoice_month = 7 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_7_flag,
        sum(case when invoice_month = 8 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_8_flag,
        sum(case when invoice_month = 9 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_9_flag,
        sum(case when invoice_month = 10 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_10_flag,
        sum(case when invoice_month = 11 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_11_flag,
        sum(case when invoice_month = 12 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_12_flag,
        sum(case when invoice_month = 13 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_13_flag,
        sum(case when invoice_month = 14 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_14_flag,
        sum(case when invoice_month = 15 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_15_flag,
        sum(case when invoice_month = 16 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_16_flag,
        sum(case when invoice_month = 17 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_17_flag,
        sum(case when invoice_month = 18 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_18_flag,
        sum(case when invoice_month = 19 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_19_flag,
        sum(case when invoice_month = 20 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_20_flag,
        sum(case when invoice_month = 21 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_21_flag,
        sum(case when invoice_month = 22 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_22_flag,
        sum(case when invoice_month = 23 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_23_flag,
        sum(case when invoice_month = 24 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_24_flag,
        sum(case when invoice_month = 25 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_25_flag,
        sum(case when invoice_month = 26 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_26_flag,
        sum(case when invoice_month = 27 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_27_flag,
        sum(case when invoice_month = 28 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_28_flag,
        sum(case when invoice_month = 29 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_29_flag,
        sum(case when invoice_month = 30 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_30_flag,
        sum(case when invoice_month = 31 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_31_flag,
        sum(case when invoice_month = 32 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_32_flag,
        sum(case when invoice_month = 33 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_33_flag,
        sum(case when invoice_month = 34 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_34_flag,
        sum(case when invoice_month = 35 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_35_flag,
        sum(case when invoice_month = 36 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_36_flag,
        sum(case when invoice_month = 37 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_37_flag,
        sum(case when invoice_month = 38 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_38_flag,
        sum(case when invoice_month = 39 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_39_flag,
        sum(case when invoice_month = 40 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_40_flag,
        sum(case when invoice_month = 41 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_41_flag,
        sum(case when invoice_month = 42 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_42_flag,
        sum(case when invoice_month = 43 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_43_flag,
        sum(case when invoice_month = 44 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_44_flag,
        sum(case when invoice_month = 45 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_45_flag,
        sum(case when invoice_month = 46 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_46_flag,
        sum(case when invoice_month = 47 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_47_flag,
        sum(case when invoice_month = 48 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_48_flag,
        sum(case when invoice_month = 49 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_49_flag,
        sum(case when invoice_month = 50 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_50_flag,
        sum(case when invoice_month = 51 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_51_flag,
        sum(case when invoice_month = 52 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_52_flag,
        sum(case when invoice_month = 53 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_53_flag,
        sum(case when invoice_month = 54 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_54_flag,
        sum(case when invoice_month = 55 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_55_flag,
        sum(case when invoice_month = 56 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_56_flag,
        sum(case when invoice_month = 57 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_57_flag,
        sum(case when invoice_month = 58 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_58_flag,
        sum(case when invoice_month = 59 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_59_flag,
        sum(case when invoice_month = 60 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_60_flag
              
    from sub_inv
    group by recharge_subscription_id,recurly_subscription_id,activated_at
)

,final_data as 
(
select 
    date_trunc('month',to_date(activated_at)) as created_month_year,
    ---left(to_date(activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward-looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60
    
from sub_inv_flag
where date_trunc('month',to_date(activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1
)

select f.*,round((c.total_spend/f.cohort_quantity),2) as CAC
from final_data as f 
    left join SEED_DATA.DEV.V_MARKETING_SPEND_CAC as c
    on f.created_month_year = c.month_year
where product = 'DS-01';"
"V_COHORT_DS01_SUB_COHORT_TABLEAU","create or replace view SEED_DATA.DEV.V_COHORT_DS01_SUB_COHORT_Tableau as

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_SKU_ADJUSTED
    where product = 'DS-01'
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,s.activated_at,o.invoice_date)/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,s.activated_at,s.cancelled_at)/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    where first_product = 'DS-01'
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id, 
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,s.activated_at,o.invoice_date)/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,s.activated_at,s.cancelled_at)/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
    where first_product = 'DS-01'
),

 

sub_inv_flag as
(
    select recharge_subscription_id,recurly_subscription_id,activated_at,
        max(case when invoice_month = 0 or invoice_month = -1 then 1 else null end) as invoice_month_0_flag,
        max(case when cancelled_month <= 0 and invoice_month = 1 then 1
                when cancelled_month <= 0 then 0
                when invoice_month = 0 or invoice_month = 1 then 1 
                else null end) as invoice_month_1_flag,
        max(case when cancelled_month <= 1 and invoice_month = 2 then 1
                when cancelled_month <= 1 then 0
                when invoice_month = 1 or invoice_month = 2 then 1
                else null end) as invoice_month_2_flag,
        max(case when cancelled_month <= 2 and invoice_month = 3 then 1 
                when cancelled_month <= 2 then 0
                when invoice_month = 2 or invoice_month = 3 then 1 
                else null end) as invoice_month_3_flag,
        max(case when cancelled_month <= 3 and invoice_month = 4 then 1
                when cancelled_month <= 3 then 0
                when invoice_month = 3 or invoice_month = 4 then 1
                else null end) as invoice_month_4_flag,
        max(case when cancelled_month <= 4 and invoice_month = 5 then 1
                when cancelled_month <= 4 then 0
                when invoice_month = 4 or invoice_month = 5 then 1 
                else null end) as invoice_month_5_flag,
        max(case when cancelled_month <= 5 and invoice_month = 6 then 1
                when cancelled_month <= 5 then 0
                when invoice_month = 5 or invoice_month = 6 then 1
                else null end) as invoice_month_6_flag,
        max(case when cancelled_month <= 6 and invoice_month = 7 then 1
                when cancelled_month <= 6 then 0
                when invoice_month = 6 or invoice_month = 7 then 1 
                else null end) as invoice_month_7_flag,
        max(case when cancelled_month <= 7 and invoice_month = 8 then 1
                when cancelled_month <= 7 then 0
                when invoice_month = 7 or invoice_month = 8 then 1
                else null end) as invoice_month_8_flag,
        max(case when cancelled_month <= 8 and invoice_month = 9 then 1
                when cancelled_month <= 8 then 0
                when invoice_month = 8 or invoice_month = 9 then 1 
                else null end) as invoice_month_9_flag,
        max(case when cancelled_month <= 9 and invoice_month = 10 then 1
                when cancelled_month <= 9 then 0
                when invoice_month = 9 or invoice_month = 10 then 1
                else null end) as invoice_month_10_flag,
        max(case when cancelled_month <= 10 and invoice_month = 11 then 1
                when cancelled_month <= 10 then 0
                when invoice_month = 10 or invoice_month = 11 then 1 
                else null end) as invoice_month_11_flag,
        max(case when cancelled_month <= 11 and invoice_month = 12 then 1
                when cancelled_month <= 11 then 0
                when invoice_month = 11 or invoice_month = 12 then 1
                else null end) as invoice_month_12_flag,
        max(case when cancelled_month <= 12 and invoice_month = 13 then 1
                when cancelled_month <= 12 then 0
                when invoice_month = 12 or invoice_month = 13 then 1 
                else null end) as invoice_month_13_flag,
        max(case when cancelled_month <= 13 and invoice_month = 14 then 1
                when cancelled_month <= 13 then 0
                when invoice_month = 13 or invoice_month = 14 then 1
                else null end) as invoice_month_14_flag,
        max(case when cancelled_month <= 14 and invoice_month = 15 then 1
                when cancelled_month <= 14 then 0
                when invoice_month = 14 or invoice_month = 15 then 1 
                else null end) as invoice_month_15_flag,
        max(case when cancelled_month <= 15 and invoice_month = 16 then 1
                when cancelled_month <= 15 then 0
                when invoice_month = 15 or invoice_month = 16 then 1
                else null end) as invoice_month_16_flag,
        max(case when cancelled_month <= 16 and invoice_month = 17 then 1 
                when cancelled_month <= 16 then 0
                when invoice_month = 16 or invoice_month = 17 then 1 
                else null end) as invoice_month_17_flag,
        max(case when cancelled_month <= 17 and invoice_month = 18 then 1
                when cancelled_month <= 17 then 0
                when invoice_month = 17 or invoice_month = 18 then 1
                else null end) as invoice_month_18_flag,
        max(case when cancelled_month <= 18 and invoice_month = 19 then 1
                when cancelled_month <= 18 then 0
                when invoice_month = 18 or invoice_month = 19 then 1 
                else null end) as invoice_month_19_flag,
        max(case when cancelled_month <= 19 and invoice_month = 20 then 1
                when cancelled_month <= 19 then 0
                when invoice_month = 19 or invoice_month = 20 then 1
                else null end) as invoice_month_20_flag,
        max(case when cancelled_month <= 20 and invoice_month = 21 then 1
                when cancelled_month <= 20 then 0
                when invoice_month = 20 or invoice_month = 21 then 1 
                else null end) as invoice_month_21_flag,
        max(case when cancelled_month <= 21 and invoice_month = 22 then 1
                when cancelled_month <= 21 then 0
                when invoice_month = 21 or invoice_month = 22 then 1
                else null end) as invoice_month_22_flag,
        max(case when cancelled_month <= 22 and invoice_month = 23 then 1
                when cancelled_month <= 22 then 0
                when invoice_month = 22 or invoice_month = 23 then 1 
                else null end) as invoice_month_23_flag,
        max(case when cancelled_month <= 23 and invoice_month = 24 then 1
                when cancelled_month <= 23 then 0
                when invoice_month = 23 or invoice_month = 24 then 1
                else null end) as invoice_month_24_flag,
        max(case when cancelled_month <= 24 and invoice_month = 25 then 1
                when cancelled_month <= 24 then 0
                when invoice_month = 24 or invoice_month = 25 then 1 
                else null end) as invoice_month_25_flag,
        max(case when cancelled_month <= 25 and invoice_month = 26 then 1
                when cancelled_month <= 25 then 0
                when invoice_month = 25 or invoice_month = 26 then 1
                else null end) as invoice_month_26_flag,
        max(case when cancelled_month <= 26 and invoice_month = 27 then 1
                when cancelled_month <= 26 then 0
                when invoice_month = 26 or invoice_month = 27 then 1 
                else null end) as invoice_month_27_flag,
        max(case when cancelled_month <= 27 and invoice_month = 28 then 1
                when cancelled_month <= 27 then 0
                when invoice_month = 27 or invoice_month = 28 then 1
                else null end) as invoice_month_28_flag,
        max(case when cancelled_month <= 28 and invoice_month = 29 then 1
                when cancelled_month <= 28 then 0
                when invoice_month = 28 or invoice_month = 29 then 1 
                else null end) as invoice_month_29_flag,
        max(case when cancelled_month <= 29 and invoice_month = 30 then 1
                when cancelled_month <= 29 then 0
                when invoice_month = 29 or invoice_month = 30 then 1
                else null end) as invoice_month_30_flag,
        max(case when cancelled_month <= 30 and invoice_month = 31 then 1
                when cancelled_month <= 30 then 0
                when invoice_month = 30 or invoice_month = 31 then 1 
                else null end) as invoice_month_31_flag,
        max(case when cancelled_month <= 31 and invoice_month = 32 then 1
                when cancelled_month <= 31 then 0
                when invoice_month = 31 or invoice_month = 32 then 1
                else null end) as invoice_month_32_flag,
        max(case when cancelled_month <= 32 and invoice_month = 33 then 1
                when cancelled_month <= 32 then 0
                when invoice_month = 32 or invoice_month = 33 then 1 
                else null end) as invoice_month_33_flag,
        max(case when cancelled_month <= 33 and invoice_month = 34 then 1
                when cancelled_month <= 33 then 0
                when invoice_month = 33 or invoice_month = 34 then 1
                else null end) as invoice_month_34_flag,
        max(case when cancelled_month <= 34 and invoice_month = 35 then 1
                when cancelled_month <= 34 then 0
                when invoice_month = 34 or invoice_month = 35 then 1 
                else null end) as invoice_month_35_flag,
        max(case when cancelled_month <= 35 and invoice_month = 36 then 1
                when cancelled_month <= 35 then 0
                when invoice_month = 35 or invoice_month = 36 then 1
                else null end) as invoice_month_36_flag,
        max(case when cancelled_month <= 36 and invoice_month = 37 then 1
                when cancelled_month <= 36 then 0
                when invoice_month = 36 or invoice_month = 37 then 1 
                else null end) as invoice_month_37_flag,
        max(case when cancelled_month <= 37 and invoice_month = 38 then 1
                when cancelled_month <= 37 then 0
                when invoice_month = 37 or invoice_month = 38 then 1
                else null end) as invoice_month_38_flag,
        max(case when cancelled_month <= 38 and invoice_month = 39 then 1
                when cancelled_month <= 38 then 0
                when invoice_month = 38 or invoice_month = 39 then 1 
                else null end) as invoice_month_39_flag,
        max(case when cancelled_month <= 39 and invoice_month = 40 then 1
                when cancelled_month <= 39 then 0
                when invoice_month = 39 or invoice_month = 40 then 1
                else null end) as invoice_month_40_flag,
        max(case when cancelled_month <= 40 and invoice_month = 41 then 1 
                when cancelled_month <= 40 then 0
                when invoice_month = 40 or invoice_month = 41 then 1 
                else null end) as invoice_month_41_flag,
        max(case when cancelled_month <= 41 and invoice_month = 42 then 1
                when cancelled_month <= 41 then 0
                when invoice_month = 41 or invoice_month = 42 then 1
                else null end) as invoice_month_42_flag,
        max(case when cancelled_month <= 42 and invoice_month = 43 then 1
                when cancelled_month <= 42 then 0
                when invoice_month = 42 or invoice_month = 43 then 1 
                else null end) as invoice_month_43_flag,
        max(case when cancelled_month <= 43 and invoice_month = 44 then 1
                when cancelled_month <= 43 then 0
                when invoice_month = 43 or invoice_month = 44 then 1
                else null end) as invoice_month_44_flag,
        max(case when cancelled_month <= 44 and invoice_month = 45 then 1
                when cancelled_month <= 44 then 0
                when invoice_month = 44 or invoice_month = 45 then 1 
                else null end) as invoice_month_45_flag,
        max(case when cancelled_month <= 45 and invoice_month = 46 then 1
                when cancelled_month <= 45 then 0
                when invoice_month = 45 or invoice_month = 46 then 1
                else null end) as invoice_month_46_flag,
        max(case when cancelled_month <= 46 and invoice_month = 47 then 1
                when cancelled_month <= 46 then 0
                when invoice_month = 46 or invoice_month = 47 then 1 
                else null end) as invoice_month_47_flag,
        max(case when cancelled_month <= 47 and invoice_month = 48 then 1
                when cancelled_month <= 47 then 0
                when invoice_month = 47 or invoice_month = 48 then 1
                else null end) as invoice_month_48_flag,
        max(case when cancelled_month <= 48 and invoice_month = 49 then 1
                when cancelled_month <= 48 then 0
                when invoice_month = 48 or invoice_month = 49 then 1 
                else null end) as invoice_month_49_flag,
        max(case when cancelled_month <= 49 and invoice_month = 50 then 1
                when cancelled_month <= 49 then 0
                when invoice_month = 49 or invoice_month = 50 then 1
                else null end) as invoice_month_50_flag,
        max(case when cancelled_month <= 50 and invoice_month = 51 then 1
                when cancelled_month <= 50 then 0
                when invoice_month = 50 or invoice_month = 51 then 1 
                else null end) as invoice_month_51_flag,
        max(case when cancelled_month <= 51 and invoice_month = 52 then 1
                when cancelled_month <= 51 then 0
                when invoice_month = 51 or invoice_month = 52 then 1
                else null end) as invoice_month_52_flag,
        max(case when cancelled_month <= 52 and invoice_month = 53 then 1
                when cancelled_month <= 52 then 0
                when invoice_month = 52 or invoice_month = 53 then 1 
                else null end) as invoice_month_53_flag,
        max(case when cancelled_month <= 53 and invoice_month = 54 then 1
                when cancelled_month <= 53 then 0
                when invoice_month = 53 or invoice_month = 54 then 1
                else null end) as invoice_month_54_flag,
        max(case when cancelled_month <= 54 and invoice_month = 55 then 1
                when cancelled_month <= 54 then 0
                when invoice_month = 54 or invoice_month = 55 then 1 
                else null end) as invoice_month_55_flag,
        max(case when cancelled_month <= 55 and invoice_month = 56 then 1
                when cancelled_month <= 55 then 0
                when invoice_month = 55 or invoice_month = 56 then 1
                else null end) as invoice_month_56_flag,
        max(case when cancelled_month <= 56 and invoice_month = 57 then 1
                when cancelled_month <= 56 then 0
                when invoice_month = 56 or invoice_month = 57 then 1 
                else null end) as invoice_month_57_flag,
        max(case when cancelled_month <= 57 and invoice_month = 58 then 1
                when cancelled_month <= 57 then 0
                when invoice_month = 57 or invoice_month = 58 then 1
                else null end) as invoice_month_58_flag,
        max(case when cancelled_month <= 58 and invoice_month = 59 then 1
                when cancelled_month <= 58 then 0
                when invoice_month = 58 or invoice_month = 59 then 1 
                else null end) as invoice_month_59_flag,
        max(case when cancelled_month <= 59 and invoice_month = 60 then 1
                when cancelled_month <= 59 then 0
                when invoice_month = 59 or invoice_month = 60 then 1
                else null end) as invoice_month_60_flag
        
    from sub_inv
    group by recharge_subscription_id,recurly_subscription_id,activated_at
)


select agg_tbl.*,
    s.CUSTOMER_ID,
	CUSTOMER_EMAIL,
	QUANTITY,
	CANCELLED_AT,
	SKU,
	CANCELLED_PRIMARY_REASON,
	CANCELLED_SECONDARY_REASON,
	REASON_GROUP,
	ORIGINATION_PLATFORM,
	FIRST_SUBSCRIPTION_DATE_DS01,
	FIRST_SUBSCRIPTION_DATE_PDS08,
	FIRST_SUBSCRIPTION_DATE,
	LAST_SUBSCRIPTION_DATE_DS01,
	LAST_SUBSCRIPTION_DATE_PDS08,
	LAST_SUBSCRIPTION_DATE,
	FIRST_CANCEL_DATE_DS01,
	FIRST_CANCEL_DATE_PDS08,
	FIRST_CANCEL_DATE,
	LAST_CANCEL_DATE_DS01,
	LAST_CANCEL_DATE_PDS08,
	LAST_CANCEL_DATE,
	FIRST_ORDER_DATE_DS01,
	FIRST_ORDER_DATE_PDS08,
	FIRST_ORDER_DATE,
	FIRST_PRODUCT,
	FIRST_SKU,
	FIRST_QUANTITY,
	LAST_ORDER_DATE_DS01,
	LAST_ORDER_DATE_PDS08,
	LAST_ORDER_DATE,
	LAST_PRODUCT,
	LAST_SKU,
	LAST_QUANTITY,
	MONTHS_ACTIVE,
	MONTHS_ACTIVE_CUSTOMER,
	PAUSE_START_DATE,
	PAUSE_END_DATE,
	NEXT_BILL_DATE,
	FIRST_ENROLL_DATE_SRP_3MO,
	LAST_ENROLL_DATE_SRP_3MO,
	FIRST_ENROLL_DATE_SRP_6MO,
	LAST_ENROLL_DATE_SRP_6MO,
	SRP_3MO_EVER_FLAG,
	SRP_6MO_EVER_FLAG,
	SRP_3MO_CURRENTLY,
	SRP_6MO_CURRENTLY,
	REACTIVATION_FLAG 
from sub_inv_flag as agg_tbl
    left join ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION_MASTER"" as s 
        on coalesce(agg_tbl.recharge_subscription_id,'')  = coalesce(s.recharge_subscription_id,'') and 
            coalesce(agg_tbl.recurly_subscription_id,'') = coalesce(s.recurly_subscription_id,'');"
"V_COHORT_PDS08_CUS_COHORT","create or replace view SEED_DATA.DEV.V_COHORT_PDS08_CUS_COHORT as 

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_SKU_ADJUSTED ---- all orders and adjusted orders for SRP
    where product = 'PDS-08'
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date_pds08) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date_pds08),to_date(o.invoice_date))/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,to_date(s.first_subscription_date_pds08),to_date(s.cancelled_at))/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    where first_product = 'PDS-08'
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date_pds08) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date_pds08),to_date(o.invoice_date))/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,to_date(s.first_subscription_date_pds08),to_date(s.cancelled_at))/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
    where first_product = 'PDS-08'
), 

sub_inv_flag as
(
    select customer_id, account_activated_at,
       max(case when invoice_month = 0 or invoice_month = -1 then 1 else null end) as invoice_month_0_flag,
        max(case when cancelled_month <= 0 and invoice_month = 1 then 1
                when cancelled_month <= 0 then 0
                when invoice_month = 0 or invoice_month = 1 then 1 
                else null end) as invoice_month_1_flag,
        max(case when cancelled_month <= 1 and invoice_month = 2 then 1
                when cancelled_month <= 1 then 0
                when invoice_month = 1 or invoice_month = 2 then 1
                else null end) as invoice_month_2_flag,
        max(case when cancelled_month <= 2 and invoice_month = 3 then 1 
                when cancelled_month <= 2 then 0
                when invoice_month = 2 or invoice_month = 3 then 1 
                else null end) as invoice_month_3_flag,
        max(case when cancelled_month <= 3 and invoice_month = 4 then 1
                when cancelled_month <= 3 then 0
                when invoice_month = 3 or invoice_month = 4 then 1
                else null end) as invoice_month_4_flag,
        max(case when cancelled_month <= 4 and invoice_month = 5 then 1
                when cancelled_month <= 4 then 0
                when invoice_month = 4 or invoice_month = 5 then 1 
                else null end) as invoice_month_5_flag,
        max(case when cancelled_month <= 5 and invoice_month = 6 then 1
                when cancelled_month <= 5 then 0
                when invoice_month = 5 or invoice_month = 6 then 1
                else null end) as invoice_month_6_flag,
        max(case when cancelled_month <= 6 and invoice_month = 7 then 1
                when cancelled_month <= 6 then 0
                when invoice_month = 6 or invoice_month = 7 then 1 
                else null end) as invoice_month_7_flag,
        max(case when cancelled_month <= 7 and invoice_month = 8 then 1
                when cancelled_month <= 7 then 0
                when invoice_month = 7 or invoice_month = 8 then 1
                else null end) as invoice_month_8_flag,
        max(case when cancelled_month <= 8 and invoice_month = 9 then 1
                when cancelled_month <= 8 then 0
                when invoice_month = 8 or invoice_month = 9 then 1 
                else null end) as invoice_month_9_flag,
        max(case when cancelled_month <= 9 and invoice_month = 10 then 1
                when cancelled_month <= 9 then 0
                when invoice_month = 9 or invoice_month = 10 then 1
                else null end) as invoice_month_10_flag,
        max(case when cancelled_month <= 10 and invoice_month = 11 then 1
                when cancelled_month <= 10 then 0
                when invoice_month = 10 or invoice_month = 11 then 1 
                else null end) as invoice_month_11_flag,
        max(case when cancelled_month <= 11 and invoice_month = 12 then 1
                when cancelled_month <= 11 then 0
                when invoice_month = 11 or invoice_month = 12 then 1
                else null end) as invoice_month_12_flag,
        max(case when cancelled_month <= 12 and invoice_month = 13 then 1
                when cancelled_month <= 12 then 0
                when invoice_month = 12 or invoice_month = 13 then 1 
                else null end) as invoice_month_13_flag,
        max(case when cancelled_month <= 13 and invoice_month = 14 then 1
                when cancelled_month <= 13 then 0
                when invoice_month = 13 or invoice_month = 14 then 1
                else null end) as invoice_month_14_flag,
        max(case when cancelled_month <= 14 and invoice_month = 15 then 1
                when cancelled_month <= 14 then 0
                when invoice_month = 14 or invoice_month = 15 then 1 
                else null end) as invoice_month_15_flag,
        max(case when cancelled_month <= 15 and invoice_month = 16 then 1
                when cancelled_month <= 15 then 0
                when invoice_month = 15 or invoice_month = 16 then 1
                else null end) as invoice_month_16_flag,
        max(case when cancelled_month <= 16 and invoice_month = 17 then 1 
                when cancelled_month <= 16 then 0
                when invoice_month = 16 or invoice_month = 17 then 1 
                else null end) as invoice_month_17_flag,
        max(case when cancelled_month <= 17 and invoice_month = 18 then 1
                when cancelled_month <= 17 then 0
                when invoice_month = 17 or invoice_month = 18 then 1
                else null end) as invoice_month_18_flag,
        max(case when cancelled_month <= 18 and invoice_month = 19 then 1
                when cancelled_month <= 18 then 0
                when invoice_month = 18 or invoice_month = 19 then 1 
                else null end) as invoice_month_19_flag,
        max(case when cancelled_month <= 19 and invoice_month = 20 then 1
                when cancelled_month <= 19 then 0
                when invoice_month = 19 or invoice_month = 20 then 1
                else null end) as invoice_month_20_flag,
        max(case when cancelled_month <= 20 and invoice_month = 21 then 1
                when cancelled_month <= 20 then 0
                when invoice_month = 20 or invoice_month = 21 then 1 
                else null end) as invoice_month_21_flag,
        max(case when cancelled_month <= 21 and invoice_month = 22 then 1
                when cancelled_month <= 21 then 0
                when invoice_month = 21 or invoice_month = 22 then 1
                else null end) as invoice_month_22_flag,
        max(case when cancelled_month <= 22 and invoice_month = 23 then 1
                when cancelled_month <= 22 then 0
                when invoice_month = 22 or invoice_month = 23 then 1 
                else null end) as invoice_month_23_flag,
        max(case when cancelled_month <= 23 and invoice_month = 24 then 1
                when cancelled_month <= 23 then 0
                when invoice_month = 23 or invoice_month = 24 then 1
                else null end) as invoice_month_24_flag,
        max(case when cancelled_month <= 24 and invoice_month = 25 then 1
                when cancelled_month <= 24 then 0
                when invoice_month = 24 or invoice_month = 25 then 1 
                else null end) as invoice_month_25_flag,
        max(case when cancelled_month <= 25 and invoice_month = 26 then 1
                when cancelled_month <= 25 then 0
                when invoice_month = 25 or invoice_month = 26 then 1
                else null end) as invoice_month_26_flag,
        max(case when cancelled_month <= 26 and invoice_month = 27 then 1
                when cancelled_month <= 26 then 0
                when invoice_month = 26 or invoice_month = 27 then 1 
                else null end) as invoice_month_27_flag,
        max(case when cancelled_month <= 27 and invoice_month = 28 then 1
                when cancelled_month <= 27 then 0
                when invoice_month = 27 or invoice_month = 28 then 1
                else null end) as invoice_month_28_flag,
        max(case when cancelled_month <= 28 and invoice_month = 29 then 1
                when cancelled_month <= 28 then 0
                when invoice_month = 28 or invoice_month = 29 then 1 
                else null end) as invoice_month_29_flag,
        max(case when cancelled_month <= 29 and invoice_month = 30 then 1
                when cancelled_month <= 29 then 0
                when invoice_month = 29 or invoice_month = 30 then 1
                else null end) as invoice_month_30_flag,
        max(case when cancelled_month <= 30 and invoice_month = 31 then 1
                when cancelled_month <= 30 then 0
                when invoice_month = 30 or invoice_month = 31 then 1 
                else null end) as invoice_month_31_flag,
        max(case when cancelled_month <= 31 and invoice_month = 32 then 1
                when cancelled_month <= 31 then 0
                when invoice_month = 31 or invoice_month = 32 then 1
                else null end) as invoice_month_32_flag,
        max(case when cancelled_month <= 32 and invoice_month = 33 then 1
                when cancelled_month <= 32 then 0
                when invoice_month = 32 or invoice_month = 33 then 1 
                else null end) as invoice_month_33_flag,
        max(case when cancelled_month <= 33 and invoice_month = 34 then 1
                when cancelled_month <= 33 then 0
                when invoice_month = 33 or invoice_month = 34 then 1
                else null end) as invoice_month_34_flag,
        max(case when cancelled_month <= 34 and invoice_month = 35 then 1
                when cancelled_month <= 34 then 0
                when invoice_month = 34 or invoice_month = 35 then 1 
                else null end) as invoice_month_35_flag,
        max(case when cancelled_month <= 35 and invoice_month = 36 then 1
                when cancelled_month <= 35 then 0
                when invoice_month = 35 or invoice_month = 36 then 1
                else null end) as invoice_month_36_flag,
        max(case when cancelled_month <= 36 and invoice_month = 37 then 1
                when cancelled_month <= 36 then 0
                when invoice_month = 36 or invoice_month = 37 then 1 
                else null end) as invoice_month_37_flag,
        max(case when cancelled_month <= 37 and invoice_month = 38 then 1
                when cancelled_month <= 37 then 0
                when invoice_month = 37 or invoice_month = 38 then 1
                else null end) as invoice_month_38_flag,
        max(case when cancelled_month <= 38 and invoice_month = 39 then 1
                when cancelled_month <= 38 then 0
                when invoice_month = 38 or invoice_month = 39 then 1 
                else null end) as invoice_month_39_flag,
        max(case when cancelled_month <= 39 and invoice_month = 40 then 1
                when cancelled_month <= 39 then 0
                when invoice_month = 39 or invoice_month = 40 then 1
                else null end) as invoice_month_40_flag,
        max(case when cancelled_month <= 40 and invoice_month = 41 then 1 
                when cancelled_month <= 40 then 0
                when invoice_month = 40 or invoice_month = 41 then 1 
                else null end) as invoice_month_41_flag,
        max(case when cancelled_month <= 41 and invoice_month = 42 then 1
                when cancelled_month <= 41 then 0
                when invoice_month = 41 or invoice_month = 42 then 1
                else null end) as invoice_month_42_flag,
        max(case when cancelled_month <= 42 and invoice_month = 43 then 1
                when cancelled_month <= 42 then 0
                when invoice_month = 42 or invoice_month = 43 then 1 
                else null end) as invoice_month_43_flag,
        max(case when cancelled_month <= 43 and invoice_month = 44 then 1
                when cancelled_month <= 43 then 0
                when invoice_month = 43 or invoice_month = 44 then 1
                else null end) as invoice_month_44_flag,
        max(case when cancelled_month <= 44 and invoice_month = 45 then 1
                when cancelled_month <= 44 then 0
                when invoice_month = 44 or invoice_month = 45 then 1 
                else null end) as invoice_month_45_flag,
        max(case when cancelled_month <= 45 and invoice_month = 46 then 1
                when cancelled_month <= 45 then 0
                when invoice_month = 45 or invoice_month = 46 then 1
                else null end) as invoice_month_46_flag,
        max(case when cancelled_month <= 46 and invoice_month = 47 then 1
                when cancelled_month <= 46 then 0
                when invoice_month = 46 or invoice_month = 47 then 1 
                else null end) as invoice_month_47_flag,
        max(case when cancelled_month <= 47 and invoice_month = 48 then 1
                when cancelled_month <= 47 then 0
                when invoice_month = 47 or invoice_month = 48 then 1
                else null end) as invoice_month_48_flag,
        max(case when cancelled_month <= 48 and invoice_month = 49 then 1
                when cancelled_month <= 48 then 0
                when invoice_month = 48 or invoice_month = 49 then 1 
                else null end) as invoice_month_49_flag,
        max(case when cancelled_month <= 49 and invoice_month = 50 then 1
                when cancelled_month <= 49 then 0
                when invoice_month = 49 or invoice_month = 50 then 1
                else null end) as invoice_month_50_flag,
        max(case when cancelled_month <= 50 and invoice_month = 51 then 1
                when cancelled_month <= 50 then 0
                when invoice_month = 50 or invoice_month = 51 then 1 
                else null end) as invoice_month_51_flag,
        max(case when cancelled_month <= 51 and invoice_month = 52 then 1
                when cancelled_month <= 51 then 0
                when invoice_month = 51 or invoice_month = 52 then 1
                else null end) as invoice_month_52_flag,
        max(case when cancelled_month <= 52 and invoice_month = 53 then 1
                when cancelled_month <= 52 then 0
                when invoice_month = 52 or invoice_month = 53 then 1 
                else null end) as invoice_month_53_flag,
        max(case when cancelled_month <= 53 and invoice_month = 54 then 1
                when cancelled_month <= 53 then 0
                when invoice_month = 53 or invoice_month = 54 then 1
                else null end) as invoice_month_54_flag,
        max(case when cancelled_month <= 54 and invoice_month = 55 then 1
                when cancelled_month <= 54 then 0
                when invoice_month = 54 or invoice_month = 55 then 1 
                else null end) as invoice_month_55_flag,
        max(case when cancelled_month <= 55 and invoice_month = 56 then 1
                when cancelled_month <= 55 then 0
                when invoice_month = 55 or invoice_month = 56 then 1
                else null end) as invoice_month_56_flag,
        max(case when cancelled_month <= 56 and invoice_month = 57 then 1
                when cancelled_month <= 56 then 0
                when invoice_month = 56 or invoice_month = 57 then 1 
                else null end) as invoice_month_57_flag,
        max(case when cancelled_month <= 57 and invoice_month = 58 then 1
                when cancelled_month <= 57 then 0
                when invoice_month = 57 or invoice_month = 58 then 1
                else null end) as invoice_month_58_flag,
        max(case when cancelled_month <= 58 and invoice_month = 59 then 1
                when cancelled_month <= 58 then 0
                when invoice_month = 58 or invoice_month = 59 then 1 
                else null end) as invoice_month_59_flag,
        max(case when cancelled_month <= 59 and invoice_month = 60 then 1
                when cancelled_month <= 59 then 0
                when invoice_month = 59 or invoice_month = 60 then 1
                else null end) as invoice_month_60_flag,
        max(case when cancelled_month <= 60 and invoice_month = 61 then 1
                when cancelled_month <= 60 then 0
                when invoice_month = 60 or invoice_month = 61 then 1
                else null end) as invoice_month_61_flag,
        max(case when cancelled_month <= 61 and invoice_month = 62 then 1
                when cancelled_month <= 61 then 0
                when invoice_month = 61 or invoice_month = 62 then 1
                else null end) as invoice_month_62_flag,
        max(case when cancelled_month <= 62 and invoice_month = 63 then 1
                when cancelled_month <= 62 then 0
                when invoice_month = 62 or invoice_month = 63 then 1 
                else null end) as invoice_month_63_flag,
        max(case when cancelled_month <= 63 and invoice_month = 64 then 1
                when cancelled_month <= 63 then 0
                when invoice_month = 63 or invoice_month = 64 then 1
                else null end) as invoice_month_64_flag,
        max(case when cancelled_month <= 64 and invoice_month = 65 then 1
                when cancelled_month <= 64 then 0
                when invoice_month = 64 or invoice_month = 65 then 1 
                else null end) as invoice_month_65_flag,
        max(case when cancelled_month <= 65 and invoice_month = 66 then 1
                when cancelled_month <= 65 then 0
                when invoice_month = 65 or invoice_month = 66 then 1
                else null end) as invoice_month_66_flag,
        max(case when cancelled_month <= 66 and invoice_month = 67 then 1
                when cancelled_month <= 66 then 0
                when invoice_month = 66 or invoice_month = 67 then 1 
                else null end) as invoice_month_67_flag,
        max(case when cancelled_month <= 67 and invoice_month = 68 then 1
                when cancelled_month <= 67 then 0
                when invoice_month = 67 or invoice_month = 68 then 1
                else null end) as invoice_month_68_flag,
        max(case when cancelled_month <= 68 and invoice_month = 69 then 1
                when cancelled_month <= 68 then 0
                when invoice_month = 68 or invoice_month = 69 then 1 
                else null end) as invoice_month_69_flag,
        max(case when cancelled_month <= 69 and invoice_month = 70 then 1
                when cancelled_month <= 69 then 0
                when invoice_month = 69 or invoice_month = 70 then 1
                else null end) as invoice_month_70_flag
    from sub_inv
    
    group by customer_id,account_activated_at
)

select 
    date_trunc('month',to_date(account_activated_at)) as created_month_year,
    ---left(to_date(account_activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_flag end) as active_month_61,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_flag end) as active_month_62,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_flag end) as active_month_63,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_flag end) as active_month_64,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_flag end) as active_month_65,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_flag end) as active_month_66,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_flag end) as active_month_67,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_flag end) as active_month_68,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_flag end) as active_month_69,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_flag end) as active_month_70
    
from sub_inv_flag
where date_trunc('month',to_date(account_activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1;"
"V_COHORT_PDS08_CUS_COHORT_LTV","create or replace view SEED_DATA.DEV.V_COHORT_PDS08_CUS_COHORT_LTV as 

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_COGS_UPDATE
    where product = 'PDS-08'
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.order_date))/30) as invoice_month,
        o.quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid_less_cogs + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as ltv,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    where first_product = 'PDS-08'
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.order_date))/30) as invoice_month,
        o.quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid_less_cogs + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as ltv,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
    where first_product = 'PDS-08'
), 

sub_inv_flag as
(
    select recharge_subscription_id,recurly_subscription_id,activated_at,
        sum(case when invoice_month = 0 or invoice_month = -1 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_0_flag,
        sum(case when invoice_month = 1 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_1_flag,
        sum(case when invoice_month = 2 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_2_flag,
        sum(case when invoice_month = 3 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_3_flag,
        sum(case when invoice_month = 4 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_4_flag,
        sum(case when invoice_month = 5 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_5_flag,
        sum(case when invoice_month = 6 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_6_flag,
        sum(case when invoice_month = 7 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_7_flag,
        sum(case when invoice_month = 8 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_8_flag,
        sum(case when invoice_month = 9 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_9_flag,
        sum(case when invoice_month = 10 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_10_flag,
        sum(case when invoice_month = 11 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_11_flag,
        sum(case when invoice_month = 12 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_12_flag,
        sum(case when invoice_month = 13 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_13_flag,
        sum(case when invoice_month = 14 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_14_flag,
        sum(case when invoice_month = 15 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_15_flag,
        sum(case when invoice_month = 16 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_16_flag,
        sum(case when invoice_month = 17 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_17_flag,
        sum(case when invoice_month = 18 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_18_flag,
        sum(case when invoice_month = 19 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_19_flag,
        sum(case when invoice_month = 20 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_20_flag,
        sum(case when invoice_month = 21 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_21_flag,
        sum(case when invoice_month = 22 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_22_flag,
        sum(case when invoice_month = 23 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_23_flag,
        sum(case when invoice_month = 24 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_24_flag,
        sum(case when invoice_month = 25 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_25_flag,
        sum(case when invoice_month = 26 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_26_flag,
        sum(case when invoice_month = 27 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_27_flag,
        sum(case when invoice_month = 28 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_28_flag,
        sum(case when invoice_month = 29 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_29_flag,
        sum(case when invoice_month = 30 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_30_flag,
        sum(case when invoice_month = 31 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_31_flag,
        sum(case when invoice_month = 32 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_32_flag,
        sum(case when invoice_month = 33 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_33_flag,
        sum(case when invoice_month = 34 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_34_flag,
        sum(case when invoice_month = 35 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_35_flag,
        sum(case when invoice_month = 36 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_36_flag,
        sum(case when invoice_month = 37 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_37_flag,
        sum(case when invoice_month = 38 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_38_flag,
        sum(case when invoice_month = 39 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_39_flag,
        sum(case when invoice_month = 40 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_40_flag,
        sum(case when invoice_month = 41 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_41_flag,
        sum(case when invoice_month = 42 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_42_flag,
        sum(case when invoice_month = 43 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_43_flag,
        sum(case when invoice_month = 44 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_44_flag,
        sum(case when invoice_month = 45 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_45_flag,
        sum(case when invoice_month = 46 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_46_flag,
        sum(case when invoice_month = 47 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_47_flag,
        sum(case when invoice_month = 48 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_48_flag,
        sum(case when invoice_month = 49 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_49_flag,
        sum(case when invoice_month = 50 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_50_flag,
        sum(case when invoice_month = 51 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_51_flag,
        sum(case when invoice_month = 52 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_52_flag,
        sum(case when invoice_month = 53 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_53_flag,
        sum(case when invoice_month = 54 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_54_flag,
        sum(case when invoice_month = 55 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_55_flag,
        sum(case when invoice_month = 56 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_56_flag,
        sum(case when invoice_month = 57 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_57_flag,
        sum(case when invoice_month = 58 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_58_flag,
        sum(case when invoice_month = 59 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_59_flag,
        sum(case when invoice_month = 60 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_60_flag,
        sum(case when invoice_month = 61 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_61_flag,
        sum(case when invoice_month = 62 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_62_flag,
        sum(case when invoice_month = 63 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_63_flag,
        sum(case when invoice_month = 64 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_64_flag,
        sum(case when invoice_month = 65 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_65_flag,
        sum(case when invoice_month = 66 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_66_flag,
        sum(case when invoice_month = 67 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_67_flag,
        sum(case when invoice_month = 68 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_68_flag,
        sum(case when invoice_month = 69 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_69_flag,
        sum(case when invoice_month = 70 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_70_flag
        
    from sub_inv
    group by recharge_subscription_id,recurly_subscription_id,activated_at
)

select 
    date_trunc('month',to_date(activated_at)) as created_month_year,
    ---left(to_date(activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward-looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_flag end) as active_month_61,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_flag end) as active_month_62,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_flag end) as active_month_63,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_flag end) as active_month_64,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_flag end) as active_month_65,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_flag end) as active_month_66,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_flag end) as active_month_67,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_flag end) as active_month_68,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_flag end) as active_month_69,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_flag end) as active_month_70
    
from sub_inv_flag
where date_trunc('month',to_date(activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1;"
"V_COHORT_PDS08_CUS_COHORT_REVENUE","create or replace view SEED_DATA.DEV.V_COHORT_PDS08_CUS_COHORT_REVENUE(
	CREATED_MONTH_YEAR,
	COHORT_QUANTITY,
	ACTIVE_MONTH_0,
	ACTIVE_MONTH_1,
	ACTIVE_MONTH_2,
	ACTIVE_MONTH_3,
	ACTIVE_MONTH_4,
	ACTIVE_MONTH_5,
	ACTIVE_MONTH_6,
	ACTIVE_MONTH_7,
	ACTIVE_MONTH_8,
	ACTIVE_MONTH_9,
	ACTIVE_MONTH_10,
	ACTIVE_MONTH_11,
	ACTIVE_MONTH_12,
	ACTIVE_MONTH_13,
	ACTIVE_MONTH_14,
	ACTIVE_MONTH_15,
	ACTIVE_MONTH_16,
	ACTIVE_MONTH_17,
	ACTIVE_MONTH_18,
	ACTIVE_MONTH_19,
	ACTIVE_MONTH_20,
	ACTIVE_MONTH_21,
	ACTIVE_MONTH_22,
	ACTIVE_MONTH_23,
	ACTIVE_MONTH_24,
	ACTIVE_MONTH_25,
	ACTIVE_MONTH_26,
	ACTIVE_MONTH_27,
	ACTIVE_MONTH_28,
	ACTIVE_MONTH_29,
	ACTIVE_MONTH_30,
	ACTIVE_MONTH_31,
	ACTIVE_MONTH_32,
	ACTIVE_MONTH_33,
	ACTIVE_MONTH_34,
	ACTIVE_MONTH_35,
	ACTIVE_MONTH_36,
	ACTIVE_MONTH_37,
	ACTIVE_MONTH_38,
	ACTIVE_MONTH_39,
	ACTIVE_MONTH_40,
	ACTIVE_MONTH_41,
	ACTIVE_MONTH_42,
	ACTIVE_MONTH_43,
	ACTIVE_MONTH_44,
	ACTIVE_MONTH_45,
	ACTIVE_MONTH_46,
	ACTIVE_MONTH_47,
	ACTIVE_MONTH_48,
	ACTIVE_MONTH_49,
	ACTIVE_MONTH_50,
	ACTIVE_MONTH_51,
	ACTIVE_MONTH_52,
	ACTIVE_MONTH_53,
	ACTIVE_MONTH_54,
	ACTIVE_MONTH_55,
	ACTIVE_MONTH_56,
	ACTIVE_MONTH_57,
	ACTIVE_MONTH_58,
	ACTIVE_MONTH_59,
	ACTIVE_MONTH_60
) as 

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_COGS_UPDATE
    where product = 'PDS-08'
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.order_date))/30) as invoice_month,
        o.quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month,
        Total_amount_paid as revenue
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    where first_product = 'PDS-08'
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.order_date))/30) as invoice_month,
        o.quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month,
        Total_amount_paid as revenue
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
    where first_product = 'PDS-08'
), 

sub_inv_flag as
(
    select recharge_subscription_id,recurly_subscription_id,activated_at,
        sum(case when invoice_month = 0 or invoice_month = -1 then revenue else null end) as invoice_month_0_flag,
        sum(case when cancelled_month <= 0 and invoice_month = 1 then revenue
                when cancelled_month <= 0 then 0
                when invoice_month = 0 or invoice_month = 1 then revenue 
                else null end) as invoice_month_1_flag,
        sum(case when cancelled_month <= 1 and invoice_month = 2 then revenue
                when cancelled_month <= 1 then 0
                when invoice_month = 1 or invoice_month = 2 then revenue
                else null end) as invoice_month_2_flag,
        sum(case when cancelled_month <= 2 and invoice_month = 3 then revenue 
                when cancelled_month <= 2 then 0
                when invoice_month = 2 or invoice_month = 3 then revenue 
                else null end) as invoice_month_3_flag,
        sum(case when cancelled_month <= 3 and invoice_month = 4 then revenue
                when cancelled_month <= 3 then 0
                when invoice_month = 3 or invoice_month = 4 then revenue
                else null end) as invoice_month_4_flag,
        sum(case when cancelled_month <= 4 and invoice_month = 5 then revenue
                when cancelled_month <= 4 then 0
                when invoice_month = 4 or invoice_month = 5 then revenue 
                else null end) as invoice_month_5_flag,
        sum(case when cancelled_month <= 5 and invoice_month = 6 then revenue
                when cancelled_month <= 5 then 0
                when invoice_month = 5 or invoice_month = 6 then revenue
                else null end) as invoice_month_6_flag,
        sum(case when cancelled_month <= 6 and invoice_month = 7 then revenue
                when cancelled_month <= 6 then 0
                when invoice_month = 6 or invoice_month = 7 then revenue 
                else null end) as invoice_month_7_flag,
        sum(case when cancelled_month <= 7 and invoice_month = 8 then revenue
                when cancelled_month <= 7 then 0
                when invoice_month = 7 or invoice_month = 8 then revenue
                else null end) as invoice_month_8_flag,
        sum(case when cancelled_month <= 8 and invoice_month = 9 then revenue
                when cancelled_month <= 8 then 0
                when invoice_month = 8 or invoice_month = 9 then revenue 
                else null end) as invoice_month_9_flag,
        sum(case when cancelled_month <= 9 and invoice_month = 10 then revenue
                when cancelled_month <= 9 then 0
                when invoice_month = 9 or invoice_month = 10 then revenue
                else null end) as invoice_month_10_flag,
        sum(case when cancelled_month <= 10 and invoice_month = 11 then revenue
                when cancelled_month <= 10 then 0
                when invoice_month = 10 or invoice_month = 11 then revenue 
                else null end) as invoice_month_11_flag,
        sum(case when cancelled_month <= 11 and invoice_month = 12 then revenue
                when cancelled_month <= 11 then 0
                when invoice_month = 11 or invoice_month = 12 then revenue
                else null end) as invoice_month_12_flag,
        sum(case when cancelled_month <= 12 and invoice_month = 13 then revenue
                when cancelled_month <= 12 then 0
                when invoice_month = 12 or invoice_month = 13 then revenue 
                else null end) as invoice_month_13_flag,
        sum(case when cancelled_month <= 13 and invoice_month = 14 then revenue
                when cancelled_month <= 13 then 0
                when invoice_month = 13 or invoice_month = 14 then revenue
                else null end) as invoice_month_14_flag,
        sum(case when cancelled_month <= 14 and invoice_month = 15 then revenue
                when cancelled_month <= 14 then 0
                when invoice_month = 14 or invoice_month = 15 then revenue 
                else null end) as invoice_month_15_flag,
        sum(case when cancelled_month <= 15 and invoice_month = 16 then revenue
                when cancelled_month <= 15 then 0
                when invoice_month = 15 or invoice_month = 16 then revenue
                else null end) as invoice_month_16_flag,
        sum(case when cancelled_month <= 16 and invoice_month = 17 then revenue 
                when cancelled_month <= 16 then 0
                when invoice_month = 16 or invoice_month = 17 then revenue 
                else null end) as invoice_month_17_flag,
        sum(case when cancelled_month <= 17 and invoice_month = 18 then revenue
                when cancelled_month <= 17 then 0
                when invoice_month = 17 or invoice_month = 18 then revenue
                else null end) as invoice_month_18_flag,
        sum(case when cancelled_month <= 18 and invoice_month = 19 then revenue
                when cancelled_month <= 18 then 0
                when invoice_month = 18 or invoice_month = 19 then revenue 
                else null end) as invoice_month_19_flag,
        sum(case when cancelled_month <= 19 and invoice_month = 20 then revenue
                when cancelled_month <= 19 then 0
                when invoice_month = 19 or invoice_month = 20 then revenue
                else null end) as invoice_month_20_flag,
        sum(case when cancelled_month <= 20 and invoice_month = 21 then revenue
                when cancelled_month <= 20 then 0
                when invoice_month = 20 or invoice_month = 21 then revenue 
                else null end) as invoice_month_21_flag,
        sum(case when cancelled_month <= 21 and invoice_month = 22 then revenue
                when cancelled_month <= 21 then 0
                when invoice_month = 21 or invoice_month = 22 then revenue
                else null end) as invoice_month_22_flag,
        sum(case when cancelled_month <= 22 and invoice_month = 23 then revenue
                when cancelled_month <= 22 then 0
                when invoice_month = 22 or invoice_month = 23 then revenue 
                else null end) as invoice_month_23_flag,
        sum(case when cancelled_month <= 23 and invoice_month = 24 then revenue
                when cancelled_month <= 23 then 0
                when invoice_month = 23 or invoice_month = 24 then revenue
                else null end) as invoice_month_24_flag,
        sum(case when cancelled_month <= 24 and invoice_month = 25 then revenue
                when cancelled_month <= 24 then 0
                when invoice_month = 24 or invoice_month = 25 then revenue 
                else null end) as invoice_month_25_flag,
        sum(case when cancelled_month <= 25 and invoice_month = 26 then revenue
                when cancelled_month <= 25 then 0
                when invoice_month = 25 or invoice_month = 26 then revenue
                else null end) as invoice_month_26_flag,
        sum(case when cancelled_month <= 26 and invoice_month = 27 then revenue
                when cancelled_month <= 26 then 0
                when invoice_month = 26 or invoice_month = 27 then revenue 
                else null end) as invoice_month_27_flag,
        sum(case when cancelled_month <= 27 and invoice_month = 28 then revenue
                when cancelled_month <= 27 then 0
                when invoice_month = 27 or invoice_month = 28 then revenue
                else null end) as invoice_month_28_flag,
        sum(case when cancelled_month <= 28 and invoice_month = 29 then revenue
                when cancelled_month <= 28 then 0
                when invoice_month = 28 or invoice_month = 29 then revenue 
                else null end) as invoice_month_29_flag,
        sum(case when cancelled_month <= 29 and invoice_month = 30 then revenue
                when cancelled_month <= 29 then 0
                when invoice_month = 29 or invoice_month = 30 then revenue
                else null end) as invoice_month_30_flag,
        sum(case when cancelled_month <= 30 and invoice_month = 31 then revenue
                when cancelled_month <= 30 then 0
                when invoice_month = 30 or invoice_month = 31 then revenue 
                else null end) as invoice_month_31_flag,
        sum(case when cancelled_month <= 31 and invoice_month = 32 then revenue
                when cancelled_month <= 31 then 0
                when invoice_month = 31 or invoice_month = 32 then revenue
                else null end) as invoice_month_32_flag,
        sum(case when cancelled_month <= 32 and invoice_month = 33 then revenue
                when cancelled_month <= 32 then 0
                when invoice_month = 32 or invoice_month = 33 then revenue 
                else null end) as invoice_month_33_flag,
        sum(case when cancelled_month <= 33 and invoice_month = 34 then revenue
                when cancelled_month <= 33 then 0
                when invoice_month = 33 or invoice_month = 34 then revenue
                else null end) as invoice_month_34_flag,
        sum(case when cancelled_month <= 34 and invoice_month = 35 then revenue
                when cancelled_month <= 34 then 0
                when invoice_month = 34 or invoice_month = 35 then revenue 
                else null end) as invoice_month_35_flag,
        sum(case when cancelled_month <= 35 and invoice_month = 36 then revenue
                when cancelled_month <= 35 then 0
                when invoice_month = 35 or invoice_month = 36 then revenue
                else null end) as invoice_month_36_flag,
        sum(case when cancelled_month <= 36 and invoice_month = 37 then revenue
                when cancelled_month <= 36 then 0
                when invoice_month = 36 or invoice_month = 37 then revenue 
                else null end) as invoice_month_37_flag,
        sum(case when cancelled_month <= 37 and invoice_month = 38 then revenue
                when cancelled_month <= 37 then 0
                when invoice_month = 37 or invoice_month = 38 then revenue
                else null end) as invoice_month_38_flag,
        sum(case when cancelled_month <= 38 and invoice_month = 39 then revenue
                when cancelled_month <= 38 then 0
                when invoice_month = 38 or invoice_month = 39 then revenue 
                else null end) as invoice_month_39_flag,
        sum(case when cancelled_month <= 39 and invoice_month = 40 then revenue
                when cancelled_month <= 39 then 0
                when invoice_month = 39 or invoice_month = 40 then revenue
                else null end) as invoice_month_40_flag,
        sum(case when cancelled_month <= 40 and invoice_month = 41 then revenue 
                when cancelled_month <= 40 then 0
                when invoice_month = 40 or invoice_month = 41 then revenue 
                else null end) as invoice_month_41_flag,
        sum(case when cancelled_month <= 41 and invoice_month = 42 then revenue
                when cancelled_month <= 41 then 0
                when invoice_month = 41 or invoice_month = 42 then revenue
                else null end) as invoice_month_42_flag,
        sum(case when cancelled_month <= 42 and invoice_month = 43 then revenue
                when cancelled_month <= 42 then 0
                when invoice_month = 42 or invoice_month = 43 then revenue 
                else null end) as invoice_month_43_flag,
        sum(case when cancelled_month <= 43 and invoice_month = 44 then revenue
                when cancelled_month <= 43 then 0
                when invoice_month = 43 or invoice_month = 44 then revenue
                else null end) as invoice_month_44_flag,
        sum(case when cancelled_month <= 44 and invoice_month = 45 then revenue
                when cancelled_month <= 44 then 0
                when invoice_month = 44 or invoice_month = 45 then revenue 
                else null end) as invoice_month_45_flag,
        sum(case when cancelled_month <= 45 and invoice_month = 46 then revenue
                when cancelled_month <= 45 then 0
                when invoice_month = 45 or invoice_month = 46 then revenue
                else null end) as invoice_month_46_flag,
        sum(case when cancelled_month <= 46 and invoice_month = 47 then revenue
                when cancelled_month <= 46 then 0
                when invoice_month = 46 or invoice_month = 47 then revenue 
                else null end) as invoice_month_47_flag,
        sum(case when cancelled_month <= 47 and invoice_month = 48 then revenue
                when cancelled_month <= 47 then 0
                when invoice_month = 47 or invoice_month = 48 then revenue
                else null end) as invoice_month_48_flag,
        sum(case when cancelled_month <= 48 and invoice_month = 49 then revenue
                when cancelled_month <= 48 then 0
                when invoice_month = 48 or invoice_month = 49 then revenue 
                else null end) as invoice_month_49_flag,
        sum(case when cancelled_month <= 49 and invoice_month = 50 then revenue
                when cancelled_month <= 49 then 0
                when invoice_month = 49 or invoice_month = 50 then revenue
                else null end) as invoice_month_50_flag,
        sum(case when cancelled_month <= 50 and invoice_month = 51 then revenue
                when cancelled_month <= 50 then 0
                when invoice_month = 50 or invoice_month = 51 then revenue 
                else null end) as invoice_month_51_flag,
        sum(case when cancelled_month <= 51 and invoice_month = 52 then revenue
                when cancelled_month <= 51 then 0
                when invoice_month = 51 or invoice_month = 52 then revenue
                else null end) as invoice_month_52_flag,
        sum(case when cancelled_month <= 52 and invoice_month = 53 then revenue
                when cancelled_month <= 52 then 0
                when invoice_month = 52 or invoice_month = 53 then revenue 
                else null end) as invoice_month_53_flag,
        sum(case when cancelled_month <= 53 and invoice_month = 54 then revenue
                when cancelled_month <= 53 then 0
                when invoice_month = 53 or invoice_month = 54 then revenue
                else null end) as invoice_month_54_flag,
        sum(case when cancelled_month <= 54 and invoice_month = 55 then revenue
                when cancelled_month <= 54 then 0
                when invoice_month = 54 or invoice_month = 55 then revenue 
                else null end) as invoice_month_55_flag,
        sum(case when cancelled_month <= 55 and invoice_month = 56 then revenue
                when cancelled_month <= 55 then 0
                when invoice_month = 55 or invoice_month = 56 then revenue
                else null end) as invoice_month_56_flag,
        sum(case when cancelled_month <= 56 and invoice_month = 57 then revenue
                when cancelled_month <= 56 then 0
                when invoice_month = 56 or invoice_month = 57 then revenue 
                else null end) as invoice_month_57_flag,
        sum(case when cancelled_month <= 57 and invoice_month = 58 then revenue
                when cancelled_month <= 57 then 0
                when invoice_month = 57 or invoice_month = 58 then revenue
                else null end) as invoice_month_58_flag,
        sum(case when cancelled_month <= 58 and invoice_month = 59 then revenue
                when cancelled_month <= 58 then 0
                when invoice_month = 58 or invoice_month = 59 then revenue 
                else null end) as invoice_month_59_flag,
        sum(case when cancelled_month <= 59 and invoice_month = 60 then revenue
                when cancelled_month <= 59 then 0
                when invoice_month = 59 or invoice_month = 60 then revenue
                else null end) as invoice_month_60_flag,
        sum(case when cancelled_month <= 60 and invoice_month = 61 then revenue
                when cancelled_month <= 60 then 0
                when invoice_month = 60 or invoice_month = 61 then revenue
                else null end) as invoice_month_61_flag,
        sum(case when cancelled_month <= 61 and invoice_month = 62 then revenue
                when cancelled_month <= 61 then 0
                when invoice_month = 61 or invoice_month = 62 then revenue
                else null end) as invoice_month_62_flag
        
    from sub_inv
    group by recharge_subscription_id,recurly_subscription_id,activated_at
)

select 
    date_trunc('month',to_date(activated_at)) as created_month_year,
    ---left(to_date(activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward-looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60
    
from sub_inv_flag
where date_trunc('month',to_date(activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1;"
"V_COHORT_PDS08_SUB_COHORT","create or replace view SEED_DATA.DEV.V_COHORT_PDS08_SUB_COHORT as

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_SKU_ADJUSTED
    where product = 'PDS-08'
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id, 
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.invoice_date))/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    where first_product = 'PDS-08'
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id, 
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.invoice_date))/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
    where first_product = 'PDS-08'
), 

sub_inv_flag as
(
    select recharge_subscription_id,recurly_subscription_id,activated_at,
        max(case when invoice_month = 0 or invoice_month = -1 then 1 else null end) as invoice_month_0_flag,
        max(case when cancelled_month <= 0 and invoice_month = 1 then 1
                when cancelled_month <= 0 then 0
                when invoice_month = 0 or invoice_month = 1 then 1 
                else null end) as invoice_month_1_flag,
        max(case when cancelled_month <= 1 and invoice_month = 2 then 1
                when cancelled_month <= 1 then 0
                when invoice_month = 1 or invoice_month = 2 then 1
                else null end) as invoice_month_2_flag,
        max(case when cancelled_month <= 2 and invoice_month = 3 then 1 
                when cancelled_month <= 2 then 0
                when invoice_month = 2 or invoice_month = 3 then 1 
                else null end) as invoice_month_3_flag,
        max(case when cancelled_month <= 3 and invoice_month = 4 then 1
                when cancelled_month <= 3 then 0
                when invoice_month = 3 or invoice_month = 4 then 1
                else null end) as invoice_month_4_flag,
        max(case when cancelled_month <= 4 and invoice_month = 5 then 1
                when cancelled_month <= 4 then 0
                when invoice_month = 4 or invoice_month = 5 then 1 
                else null end) as invoice_month_5_flag,
        max(case when cancelled_month <= 5 and invoice_month = 6 then 1
                when cancelled_month <= 5 then 0
                when invoice_month = 5 or invoice_month = 6 then 1
                else null end) as invoice_month_6_flag,
        max(case when cancelled_month <= 6 and invoice_month = 7 then 1
                when cancelled_month <= 6 then 0
                when invoice_month = 6 or invoice_month = 7 then 1 
                else null end) as invoice_month_7_flag,
        max(case when cancelled_month <= 7 and invoice_month = 8 then 1
                when cancelled_month <= 7 then 0
                when invoice_month = 7 or invoice_month = 8 then 1
                else null end) as invoice_month_8_flag,
        max(case when cancelled_month <= 8 and invoice_month = 9 then 1
                when cancelled_month <= 8 then 0
                when invoice_month = 8 or invoice_month = 9 then 1 
                else null end) as invoice_month_9_flag,
        max(case when cancelled_month <= 9 and invoice_month = 10 then 1
                when cancelled_month <= 9 then 0
                when invoice_month = 9 or invoice_month = 10 then 1
                else null end) as invoice_month_10_flag,
        max(case when cancelled_month <= 10 and invoice_month = 11 then 1
                when cancelled_month <= 10 then 0
                when invoice_month = 10 or invoice_month = 11 then 1 
                else null end) as invoice_month_11_flag,
        max(case when cancelled_month <= 11 and invoice_month = 12 then 1
                when cancelled_month <= 11 then 0
                when invoice_month = 11 or invoice_month = 12 then 1
                else null end) as invoice_month_12_flag,
        max(case when cancelled_month <= 12 and invoice_month = 13 then 1
                when cancelled_month <= 12 then 0
                when invoice_month = 12 or invoice_month = 13 then 1 
                else null end) as invoice_month_13_flag,
        max(case when cancelled_month <= 13 and invoice_month = 14 then 1
                when cancelled_month <= 13 then 0
                when invoice_month = 13 or invoice_month = 14 then 1
                else null end) as invoice_month_14_flag,
        max(case when cancelled_month <= 14 and invoice_month = 15 then 1
                when cancelled_month <= 14 then 0
                when invoice_month = 14 or invoice_month = 15 then 1 
                else null end) as invoice_month_15_flag,
        max(case when cancelled_month <= 15 and invoice_month = 16 then 1
                when cancelled_month <= 15 then 0
                when invoice_month = 15 or invoice_month = 16 then 1
                else null end) as invoice_month_16_flag,
        max(case when cancelled_month <= 16 and invoice_month = 17 then 1 
                when cancelled_month <= 16 then 0
                when invoice_month = 16 or invoice_month = 17 then 1 
                else null end) as invoice_month_17_flag,
        max(case when cancelled_month <= 17 and invoice_month = 18 then 1
                when cancelled_month <= 17 then 0
                when invoice_month = 17 or invoice_month = 18 then 1
                else null end) as invoice_month_18_flag,
        max(case when cancelled_month <= 18 and invoice_month = 19 then 1
                when cancelled_month <= 18 then 0
                when invoice_month = 18 or invoice_month = 19 then 1 
                else null end) as invoice_month_19_flag,
        max(case when cancelled_month <= 19 and invoice_month = 20 then 1
                when cancelled_month <= 19 then 0
                when invoice_month = 19 or invoice_month = 20 then 1
                else null end) as invoice_month_20_flag,
        max(case when cancelled_month <= 20 and invoice_month = 21 then 1
                when cancelled_month <= 20 then 0
                when invoice_month = 20 or invoice_month = 21 then 1 
                else null end) as invoice_month_21_flag,
        max(case when cancelled_month <= 21 and invoice_month = 22 then 1
                when cancelled_month <= 21 then 0
                when invoice_month = 21 or invoice_month = 22 then 1
                else null end) as invoice_month_22_flag,
        max(case when cancelled_month <= 22 and invoice_month = 23 then 1
                when cancelled_month <= 22 then 0
                when invoice_month = 22 or invoice_month = 23 then 1 
                else null end) as invoice_month_23_flag,
        max(case when cancelled_month <= 23 and invoice_month = 24 then 1
                when cancelled_month <= 23 then 0
                when invoice_month = 23 or invoice_month = 24 then 1
                else null end) as invoice_month_24_flag,
        max(case when cancelled_month <= 24 and invoice_month = 25 then 1
                when cancelled_month <= 24 then 0
                when invoice_month = 24 or invoice_month = 25 then 1 
                else null end) as invoice_month_25_flag,
        max(case when cancelled_month <= 25 and invoice_month = 26 then 1
                when cancelled_month <= 25 then 0
                when invoice_month = 25 or invoice_month = 26 then 1
                else null end) as invoice_month_26_flag,
        max(case when cancelled_month <= 26 and invoice_month = 27 then 1
                when cancelled_month <= 26 then 0
                when invoice_month = 26 or invoice_month = 27 then 1 
                else null end) as invoice_month_27_flag,
        max(case when cancelled_month <= 27 and invoice_month = 28 then 1
                when cancelled_month <= 27 then 0
                when invoice_month = 27 or invoice_month = 28 then 1
                else null end) as invoice_month_28_flag,
        max(case when cancelled_month <= 28 and invoice_month = 29 then 1
                when cancelled_month <= 28 then 0
                when invoice_month = 28 or invoice_month = 29 then 1 
                else null end) as invoice_month_29_flag,
        max(case when cancelled_month <= 29 and invoice_month = 30 then 1
                when cancelled_month <= 29 then 0
                when invoice_month = 29 or invoice_month = 30 then 1
                else null end) as invoice_month_30_flag,
        max(case when cancelled_month <= 30 and invoice_month = 31 then 1
                when cancelled_month <= 30 then 0
                when invoice_month = 30 or invoice_month = 31 then 1 
                else null end) as invoice_month_31_flag,
        max(case when cancelled_month <= 31 and invoice_month = 32 then 1
                when cancelled_month <= 31 then 0
                when invoice_month = 31 or invoice_month = 32 then 1
                else null end) as invoice_month_32_flag,
        max(case when cancelled_month <= 32 and invoice_month = 33 then 1
                when cancelled_month <= 32 then 0
                when invoice_month = 32 or invoice_month = 33 then 1 
                else null end) as invoice_month_33_flag,
        max(case when cancelled_month <= 33 and invoice_month = 34 then 1
                when cancelled_month <= 33 then 0
                when invoice_month = 33 or invoice_month = 34 then 1
                else null end) as invoice_month_34_flag,
        max(case when cancelled_month <= 34 and invoice_month = 35 then 1
                when cancelled_month <= 34 then 0
                when invoice_month = 34 or invoice_month = 35 then 1 
                else null end) as invoice_month_35_flag,
        max(case when cancelled_month <= 35 and invoice_month = 36 then 1
                when cancelled_month <= 35 then 0
                when invoice_month = 35 or invoice_month = 36 then 1
                else null end) as invoice_month_36_flag,
        max(case when cancelled_month <= 36 and invoice_month = 37 then 1
                when cancelled_month <= 36 then 0
                when invoice_month = 36 or invoice_month = 37 then 1 
                else null end) as invoice_month_37_flag,
        max(case when cancelled_month <= 37 and invoice_month = 38 then 1
                when cancelled_month <= 37 then 0
                when invoice_month = 37 or invoice_month = 38 then 1
                else null end) as invoice_month_38_flag,
        max(case when cancelled_month <= 38 and invoice_month = 39 then 1
                when cancelled_month <= 38 then 0
                when invoice_month = 38 or invoice_month = 39 then 1 
                else null end) as invoice_month_39_flag,
        max(case when cancelled_month <= 39 and invoice_month = 40 then 1
                when cancelled_month <= 39 then 0
                when invoice_month = 39 or invoice_month = 40 then 1
                else null end) as invoice_month_40_flag,
        max(case when cancelled_month <= 40 and invoice_month = 41 then 1 
                when cancelled_month <= 40 then 0
                when invoice_month = 40 or invoice_month = 41 then 1 
                else null end) as invoice_month_41_flag,
        max(case when cancelled_month <= 41 and invoice_month = 42 then 1
                when cancelled_month <= 41 then 0
                when invoice_month = 41 or invoice_month = 42 then 1
                else null end) as invoice_month_42_flag,
        max(case when cancelled_month <= 42 and invoice_month = 43 then 1
                when cancelled_month <= 42 then 0
                when invoice_month = 42 or invoice_month = 43 then 1 
                else null end) as invoice_month_43_flag,
        max(case when cancelled_month <= 43 and invoice_month = 44 then 1
                when cancelled_month <= 43 then 0
                when invoice_month = 43 or invoice_month = 44 then 1
                else null end) as invoice_month_44_flag,
        max(case when cancelled_month <= 44 and invoice_month = 45 then 1
                when cancelled_month <= 44 then 0
                when invoice_month = 44 or invoice_month = 45 then 1 
                else null end) as invoice_month_45_flag,
        max(case when cancelled_month <= 45 and invoice_month = 46 then 1
                when cancelled_month <= 45 then 0
                when invoice_month = 45 or invoice_month = 46 then 1
                else null end) as invoice_month_46_flag,
        max(case when cancelled_month <= 46 and invoice_month = 47 then 1
                when cancelled_month <= 46 then 0
                when invoice_month = 46 or invoice_month = 47 then 1 
                else null end) as invoice_month_47_flag,
        max(case when cancelled_month <= 47 and invoice_month = 48 then 1
                when cancelled_month <= 47 then 0
                when invoice_month = 47 or invoice_month = 48 then 1
                else null end) as invoice_month_48_flag,
        max(case when cancelled_month <= 48 and invoice_month = 49 then 1
                when cancelled_month <= 48 then 0
                when invoice_month = 48 or invoice_month = 49 then 1 
                else null end) as invoice_month_49_flag,
        max(case when cancelled_month <= 49 and invoice_month = 50 then 1
                when cancelled_month <= 49 then 0
                when invoice_month = 49 or invoice_month = 50 then 1
                else null end) as invoice_month_50_flag,
        max(case when cancelled_month <= 50 and invoice_month = 51 then 1
                when cancelled_month <= 50 then 0
                when invoice_month = 50 or invoice_month = 51 then 1 
                else null end) as invoice_month_51_flag,
        max(case when cancelled_month <= 51 and invoice_month = 52 then 1
                when cancelled_month <= 51 then 0
                when invoice_month = 51 or invoice_month = 52 then 1
                else null end) as invoice_month_52_flag,
        max(case when cancelled_month <= 52 and invoice_month = 53 then 1
                when cancelled_month <= 52 then 0
                when invoice_month = 52 or invoice_month = 53 then 1 
                else null end) as invoice_month_53_flag,
        max(case when cancelled_month <= 53 and invoice_month = 54 then 1
                when cancelled_month <= 53 then 0
                when invoice_month = 53 or invoice_month = 54 then 1
                else null end) as invoice_month_54_flag,
        max(case when cancelled_month <= 54 and invoice_month = 55 then 1
                when cancelled_month <= 54 then 0
                when invoice_month = 54 or invoice_month = 55 then 1 
                else null end) as invoice_month_55_flag,
        max(case when cancelled_month <= 55 and invoice_month = 56 then 1
                when cancelled_month <= 55 then 0
                when invoice_month = 55 or invoice_month = 56 then 1
                else null end) as invoice_month_56_flag,
        max(case when cancelled_month <= 56 and invoice_month = 57 then 1
                when cancelled_month <= 56 then 0
                when invoice_month = 56 or invoice_month = 57 then 1 
                else null end) as invoice_month_57_flag,
        max(case when cancelled_month <= 57 and invoice_month = 58 then 1
                when cancelled_month <= 57 then 0
                when invoice_month = 57 or invoice_month = 58 then 1
                else null end) as invoice_month_58_flag,
        max(case when cancelled_month <= 58 and invoice_month = 59 then 1
                when cancelled_month <= 58 then 0
                when invoice_month = 58 or invoice_month = 59 then 1 
                else null end) as invoice_month_59_flag,
        max(case when cancelled_month <= 59 and invoice_month = 60 then 1
                when cancelled_month <= 59 then 0
                when invoice_month = 59 or invoice_month = 60 then 1
                else null end) as invoice_month_60_flag,
        max(case when cancelled_month <= 60 and invoice_month = 61 then 1
                when cancelled_month <= 60 then 0
                when invoice_month = 60 or invoice_month = 61 then 1
                else null end) as invoice_month_61_flag,
        max(case when cancelled_month <= 61 and invoice_month = 62 then 1
                when cancelled_month <= 61 then 0
                when invoice_month = 61 or invoice_month = 62 then 1
                else null end) as invoice_month_62_flag,
        max(case when cancelled_month <= 62 and invoice_month = 63 then 1
                when cancelled_month <= 62 then 0
                when invoice_month = 62 or invoice_month = 63 then 1 
                else null end) as invoice_month_63_flag,
        max(case when cancelled_month <= 63 and invoice_month = 64 then 1
                when cancelled_month <= 63 then 0
                when invoice_month = 63 or invoice_month = 64 then 1
                else null end) as invoice_month_64_flag,
        max(case when cancelled_month <= 64 and invoice_month = 65 then 1
                when cancelled_month <= 64 then 0
                when invoice_month = 64 or invoice_month = 65 then 1 
                else null end) as invoice_month_65_flag,
        max(case when cancelled_month <= 65 and invoice_month = 66 then 1
                when cancelled_month <= 65 then 0
                when invoice_month = 65 or invoice_month = 66 then 1
                else null end) as invoice_month_66_flag,
        max(case when cancelled_month <= 66 and invoice_month = 67 then 1
                when cancelled_month <= 66 then 0
                when invoice_month = 66 or invoice_month = 67 then 1 
                else null end) as invoice_month_67_flag,
        max(case when cancelled_month <= 67 and invoice_month = 68 then 1
                when cancelled_month <= 67 then 0
                when invoice_month = 67 or invoice_month = 68 then 1
                else null end) as invoice_month_68_flag,
        max(case when cancelled_month <= 68 and invoice_month = 69 then 1
                when cancelled_month <= 68 then 0
                when invoice_month = 68 or invoice_month = 69 then 1 
                else null end) as invoice_month_69_flag,
        max(case when cancelled_month <= 69 and invoice_month = 70 then 1
                when cancelled_month <= 69 then 0
                when invoice_month = 69 or invoice_month = 70 then 1
                else null end) as invoice_month_70_flag
        
    from sub_inv
    group by recharge_subscription_id,recurly_subscription_id,activated_at
)

select 
    date_trunc('month',to_date(activated_at)) as created_month_year,
    ---left(to_date(activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_flag end) as active_month_61,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_flag end) as active_month_62,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_flag end) as active_month_63,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_flag end) as active_month_64,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_flag end) as active_month_65,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_flag end) as active_month_66,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_flag end) as active_month_67,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_flag end) as active_month_68,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_flag end) as active_month_69,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_flag end) as active_month_70

from sub_inv_flag
where date_trunc('month',to_date(activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1;"
"V_COHORT_PDS08_SUB_COHORT_LTV","create or replace view SEED_DATA.DEV.V_COHORT_PDS08_SUB_COHORT_LTV as

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_COGS_UPDATE
    where product = 'PDS-08'
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.order_date))/30) as invoice_month,
        o.quantity as invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid_less_cogs + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as ltv,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    where first_product = 'PDS-08'
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.order_date))/30) as invoice_month,
        o.quantity as invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid_less_cogs + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as ltv,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
    where first_product = 'PDS-08'
)

,sub_inv_flag as
(
    select recharge_subscription_id,recurly_subscription_id,activated_at,
        sum(case when invoice_month = 0 or invoice_month = -1 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_0_flag,
        sum(case when invoice_month = 1 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_1_flag,
        sum(case when invoice_month = 2 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_2_flag,
        sum(case when invoice_month = 3 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_3_flag,
        sum(case when invoice_month = 4 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_4_flag,
        sum(case when invoice_month = 5 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_5_flag,
        sum(case when invoice_month = 6 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_6_flag,
        sum(case when invoice_month = 7 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_7_flag,
        sum(case when invoice_month = 8 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_8_flag,
        sum(case when invoice_month = 9 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_9_flag,
        sum(case when invoice_month = 10 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_10_flag,
        sum(case when invoice_month = 11 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_11_flag,
        sum(case when invoice_month = 12 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_12_flag,
        sum(case when invoice_month = 13 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_13_flag,
        sum(case when invoice_month = 14 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_14_flag,
        sum(case when invoice_month = 15 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_15_flag,
        sum(case when invoice_month = 16 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_16_flag,
        sum(case when invoice_month = 17 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_17_flag,
        sum(case when invoice_month = 18 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_18_flag,
        sum(case when invoice_month = 19 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_19_flag,
        sum(case when invoice_month = 20 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_20_flag,
        sum(case when invoice_month = 21 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_21_flag,
        sum(case when invoice_month = 22 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_22_flag,
        sum(case when invoice_month = 23 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_23_flag,
        sum(case when invoice_month = 24 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_24_flag,
        sum(case when invoice_month = 25 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_25_flag,
        sum(case when invoice_month = 26 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_26_flag,
        sum(case when invoice_month = 27 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_27_flag,
        sum(case when invoice_month = 28 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_28_flag,
        sum(case when invoice_month = 29 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_29_flag,
        sum(case when invoice_month = 30 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_30_flag,
        sum(case when invoice_month = 31 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_31_flag,
        sum(case when invoice_month = 32 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_32_flag,
        sum(case when invoice_month = 33 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_33_flag,
        sum(case when invoice_month = 34 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_34_flag,
        sum(case when invoice_month = 35 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_35_flag,
        sum(case when invoice_month = 36 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_36_flag,
        sum(case when invoice_month = 37 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_37_flag,
        sum(case when invoice_month = 38 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_38_flag,
        sum(case when invoice_month = 39 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_39_flag,
        sum(case when invoice_month = 40 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_40_flag,
        sum(case when invoice_month = 41 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_41_flag,
        sum(case when invoice_month = 42 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_42_flag,
        sum(case when invoice_month = 43 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_43_flag,
        sum(case when invoice_month = 44 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_44_flag,
        sum(case when invoice_month = 45 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_45_flag,
        sum(case when invoice_month = 46 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_46_flag,
        sum(case when invoice_month = 47 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_47_flag,
        sum(case when invoice_month = 48 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_48_flag,
        sum(case when invoice_month = 49 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_49_flag,
        sum(case when invoice_month = 50 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_50_flag,
        sum(case when invoice_month = 51 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_51_flag,
        sum(case when invoice_month = 52 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_52_flag,
        sum(case when invoice_month = 53 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_53_flag,
        sum(case when invoice_month = 54 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_54_flag,
        sum(case when invoice_month = 55 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_55_flag,
        sum(case when invoice_month = 56 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_56_flag,
        sum(case when invoice_month = 57 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_57_flag,
        sum(case when invoice_month = 58 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_58_flag,
        sum(case when invoice_month = 59 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_59_flag,
        sum(case when invoice_month = 60 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_60_flag,
        sum(case when invoice_month = 61 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_61_flag,
        sum(case when invoice_month = 62 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_62_flag,
        sum(case when invoice_month = 63 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_63_flag,
        sum(case when invoice_month = 64 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_64_flag,
        sum(case when invoice_month = 65 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_65_flag,
        sum(case when invoice_month = 66 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_66_flag,
        sum(case when invoice_month = 67 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_67_flag,
        sum(case when invoice_month = 68 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_68_flag,
        sum(case when invoice_month = 69 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_69_flag,
        sum(case when invoice_month = 70 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_70_flag
        
              
    from sub_inv
    group by recharge_subscription_id,recurly_subscription_id,activated_at
)

select 
    date_trunc('month',to_date(activated_at)) as created_month_year,
    ---left(to_date(activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_flag end) as active_month_61,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_flag end) as active_month_62,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_flag end) as active_month_63,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_flag end) as active_month_64,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_flag end) as active_month_65,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_flag end) as active_month_66,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_flag end) as active_month_67,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_flag end) as active_month_68,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_flag end) as active_month_69,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_flag end) as active_month_70
from sub_inv_flag
where date_trunc('month',to_date(activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1;"
"V_COHORT_SUB_CUST_GROUPS","create or replace view SEED_DATA.DEV.V_COHORT_SUB_CUST_GROUPS(
	COHORT_GROUP,
	CREATED_MONTH_YEAR,
	COHORT_QUANTITY,
	ACTIVE_MONTH_0,
	ACTIVE_MONTH_1,
	ACTIVE_MONTH_2,
	ACTIVE_MONTH_3,
	ACTIVE_MONTH_4,
	ACTIVE_MONTH_5,
	ACTIVE_MONTH_6,
	ACTIVE_MONTH_7,
	ACTIVE_MONTH_8,
	ACTIVE_MONTH_9,
	ACTIVE_MONTH_10,
	ACTIVE_MONTH_11,
	ACTIVE_MONTH_12,
	ACTIVE_MONTH_13,
	ACTIVE_MONTH_14,
	ACTIVE_MONTH_15,
	ACTIVE_MONTH_16,
	ACTIVE_MONTH_17,
	ACTIVE_MONTH_18,
	ACTIVE_MONTH_19,
	ACTIVE_MONTH_20,
	ACTIVE_MONTH_21,
	ACTIVE_MONTH_22,
	ACTIVE_MONTH_23,
	ACTIVE_MONTH_24,
	ACTIVE_MONTH_25,
	ACTIVE_MONTH_26,
	ACTIVE_MONTH_27,
	ACTIVE_MONTH_28,
	ACTIVE_MONTH_29,
	ACTIVE_MONTH_30,
	ACTIVE_MONTH_31,
	ACTIVE_MONTH_32,
	ACTIVE_MONTH_33,
	ACTIVE_MONTH_34,
	ACTIVE_MONTH_35,
	ACTIVE_MONTH_36,
	ACTIVE_MONTH_37,
	ACTIVE_MONTH_38,
	ACTIVE_MONTH_39,
	ACTIVE_MONTH_40,
	ACTIVE_MONTH_41,
	ACTIVE_MONTH_42,
	ACTIVE_MONTH_43,
	ACTIVE_MONTH_44,
	ACTIVE_MONTH_45,
	ACTIVE_MONTH_46,
	ACTIVE_MONTH_47,
	ACTIVE_MONTH_48,
	ACTIVE_MONTH_49,
	ACTIVE_MONTH_50,
	ACTIVE_MONTH_51,
	ACTIVE_MONTH_52,
	ACTIVE_MONTH_53,
	ACTIVE_MONTH_54,
	ACTIVE_MONTH_55,
	ACTIVE_MONTH_56,
	ACTIVE_MONTH_57,
	ACTIVE_MONTH_58,
	ACTIVE_MONTH_59,
	ACTIVE_MONTH_60,
	ACTIVE_MONTH_61,
    ACTIVE_MONTH_62,
    ACTIVE_MONTH_63
) as 
with cohorts as (
SELECT
  'Total Customers' as COHORT_GROUP
, CREATED_MONTH_YEAR
, COHORT_QUANTITY
, ACTIVE_MONTH_0
, ACTIVE_MONTH_1
, ACTIVE_MONTH_2
, ACTIVE_MONTH_3
, ACTIVE_MONTH_4
, ACTIVE_MONTH_5
, ACTIVE_MONTH_6
, ACTIVE_MONTH_7
, ACTIVE_MONTH_8
, ACTIVE_MONTH_9
, ACTIVE_MONTH_10
, ACTIVE_MONTH_11
, ACTIVE_MONTH_12
, ACTIVE_MONTH_13
, ACTIVE_MONTH_14
, ACTIVE_MONTH_15
, ACTIVE_MONTH_16
, ACTIVE_MONTH_17
, ACTIVE_MONTH_18
, ACTIVE_MONTH_19
, ACTIVE_MONTH_20
, ACTIVE_MONTH_21
, ACTIVE_MONTH_22
, ACTIVE_MONTH_23
, ACTIVE_MONTH_24
, ACTIVE_MONTH_25
, ACTIVE_MONTH_26
, ACTIVE_MONTH_27
, ACTIVE_MONTH_28
, ACTIVE_MONTH_29
, ACTIVE_MONTH_30
, ACTIVE_MONTH_31
, ACTIVE_MONTH_32
, ACTIVE_MONTH_33
, ACTIVE_MONTH_34
, ACTIVE_MONTH_35
, ACTIVE_MONTH_36
, ACTIVE_MONTH_37
, ACTIVE_MONTH_38
, ACTIVE_MONTH_39
, ACTIVE_MONTH_40
, ACTIVE_MONTH_41
, ACTIVE_MONTH_42
, ACTIVE_MONTH_43
, ACTIVE_MONTH_44
, ACTIVE_MONTH_45
, ACTIVE_MONTH_46
, ACTIVE_MONTH_47
, ACTIVE_MONTH_48
, ACTIVE_MONTH_49
, ACTIVE_MONTH_50
, ACTIVE_MONTH_51
, ACTIVE_MONTH_52
, ACTIVE_MONTH_53
, ACTIVE_MONTH_54
, ACTIVE_MONTH_55
, ACTIVE_MONTH_56
, ACTIVE_MONTH_57
, ACTIVE_MONTH_58
, ACTIVE_MONTH_59
, ACTIVE_MONTH_60
, ACTIVE_MONTH_61
, ACTIVE_MONTH_62
, ACTIVE_MONTH_63
FROM SEED_DATA.DEV.COHORT_TOTAL_CUS_COHORT
UNION ALL
SELECT
'Total Subscribers' as COHORT_GROUP
, CREATED_MONTH_YEAR
, COHORT_QUANTITY
, ACTIVE_MONTH_0
, ACTIVE_MONTH_1
, ACTIVE_MONTH_2
, ACTIVE_MONTH_3
, ACTIVE_MONTH_4
, ACTIVE_MONTH_5
, ACTIVE_MONTH_6
, ACTIVE_MONTH_7
, ACTIVE_MONTH_8
, ACTIVE_MONTH_9
, ACTIVE_MONTH_10
, ACTIVE_MONTH_11
, ACTIVE_MONTH_12
, ACTIVE_MONTH_13
, ACTIVE_MONTH_14
, ACTIVE_MONTH_15
, ACTIVE_MONTH_16
, ACTIVE_MONTH_17
, ACTIVE_MONTH_18
, ACTIVE_MONTH_19
, ACTIVE_MONTH_20
, ACTIVE_MONTH_21
, ACTIVE_MONTH_22
, ACTIVE_MONTH_23
, ACTIVE_MONTH_24
, ACTIVE_MONTH_25
, ACTIVE_MONTH_26
, ACTIVE_MONTH_27
, ACTIVE_MONTH_28
, ACTIVE_MONTH_29
, ACTIVE_MONTH_30
, ACTIVE_MONTH_31
, ACTIVE_MONTH_32
, ACTIVE_MONTH_33
, ACTIVE_MONTH_34
, ACTIVE_MONTH_35
, ACTIVE_MONTH_36
, ACTIVE_MONTH_37
, ACTIVE_MONTH_38
, ACTIVE_MONTH_39
, ACTIVE_MONTH_40
, ACTIVE_MONTH_41
, ACTIVE_MONTH_42
, ACTIVE_MONTH_43
, ACTIVE_MONTH_44
, ACTIVE_MONTH_45
, ACTIVE_MONTH_46
, ACTIVE_MONTH_47
, ACTIVE_MONTH_48
, ACTIVE_MONTH_49
, ACTIVE_MONTH_50
, ACTIVE_MONTH_51
, ACTIVE_MONTH_52
, ACTIVE_MONTH_53
, ACTIVE_MONTH_54
, ACTIVE_MONTH_55
, ACTIVE_MONTH_56
, ACTIVE_MONTH_57
, ACTIVE_MONTH_58
, ACTIVE_MONTH_59
, ACTIVE_MONTH_60
, ACTIVE_MONTH_61
, ACTIVE_MONTH_62
, ACTIVE_MONTH_63
FROM SEED_DATA.DEV.COHORT_TOTAL_SUB_COHORT
UNION ALL
SELECT
'DS-01 Customers' as COHORT_GROUP
, CREATED_MONTH_YEAR
, COHORT_QUANTITY
, ACTIVE_MONTH_0
, ACTIVE_MONTH_1
, ACTIVE_MONTH_2
, ACTIVE_MONTH_3
, ACTIVE_MONTH_4
, ACTIVE_MONTH_5
, ACTIVE_MONTH_6
, ACTIVE_MONTH_7
, ACTIVE_MONTH_8
, ACTIVE_MONTH_9
, ACTIVE_MONTH_10
, ACTIVE_MONTH_11
, ACTIVE_MONTH_12
, ACTIVE_MONTH_13
, ACTIVE_MONTH_14
, ACTIVE_MONTH_15
, ACTIVE_MONTH_16
, ACTIVE_MONTH_17
, ACTIVE_MONTH_18
, ACTIVE_MONTH_19
, ACTIVE_MONTH_20
, ACTIVE_MONTH_21
, ACTIVE_MONTH_22
, ACTIVE_MONTH_23
, ACTIVE_MONTH_24
, ACTIVE_MONTH_25
, ACTIVE_MONTH_26
, ACTIVE_MONTH_27
, ACTIVE_MONTH_28
, ACTIVE_MONTH_29
, ACTIVE_MONTH_30
, ACTIVE_MONTH_31
, ACTIVE_MONTH_32
, ACTIVE_MONTH_33
, ACTIVE_MONTH_34
, ACTIVE_MONTH_35
, ACTIVE_MONTH_36
, ACTIVE_MONTH_37
, ACTIVE_MONTH_38
, ACTIVE_MONTH_39
, ACTIVE_MONTH_40
, ACTIVE_MONTH_41
, ACTIVE_MONTH_42
, ACTIVE_MONTH_43
, ACTIVE_MONTH_44
, ACTIVE_MONTH_45
, ACTIVE_MONTH_46
, ACTIVE_MONTH_47
, ACTIVE_MONTH_48
, ACTIVE_MONTH_49
, ACTIVE_MONTH_50
, ACTIVE_MONTH_51
, ACTIVE_MONTH_52
, ACTIVE_MONTH_53
, ACTIVE_MONTH_54
, ACTIVE_MONTH_55
, ACTIVE_MONTH_56
, ACTIVE_MONTH_57
, ACTIVE_MONTH_58
, ACTIVE_MONTH_59
, ACTIVE_MONTH_60
, ACTIVE_MONTH_61
, ACTIVE_MONTH_62
, ACTIVE_MONTH_63
FROM SEED_DATA.DEV.COHORT_DS01_CUS_COHORT
UNION ALL
SELECT
'DS-01 Subscribers' as COHORT_GROUP
, CREATED_MONTH_YEAR
, COHORT_QUANTITY
, ACTIVE_MONTH_0
, ACTIVE_MONTH_1
, ACTIVE_MONTH_2
, ACTIVE_MONTH_3
, ACTIVE_MONTH_4
, ACTIVE_MONTH_5
, ACTIVE_MONTH_6
, ACTIVE_MONTH_7
, ACTIVE_MONTH_8
, ACTIVE_MONTH_9
, ACTIVE_MONTH_10
, ACTIVE_MONTH_11
, ACTIVE_MONTH_12
, ACTIVE_MONTH_13
, ACTIVE_MONTH_14
, ACTIVE_MONTH_15
, ACTIVE_MONTH_16
, ACTIVE_MONTH_17
, ACTIVE_MONTH_18
, ACTIVE_MONTH_19
, ACTIVE_MONTH_20
, ACTIVE_MONTH_21
, ACTIVE_MONTH_22
, ACTIVE_MONTH_23
, ACTIVE_MONTH_24
, ACTIVE_MONTH_25
, ACTIVE_MONTH_26
, ACTIVE_MONTH_27
, ACTIVE_MONTH_28
, ACTIVE_MONTH_29
, ACTIVE_MONTH_30
, ACTIVE_MONTH_31
, ACTIVE_MONTH_32
, ACTIVE_MONTH_33
, ACTIVE_MONTH_34
, ACTIVE_MONTH_35
, ACTIVE_MONTH_36
, ACTIVE_MONTH_37
, ACTIVE_MONTH_38
, ACTIVE_MONTH_39
, ACTIVE_MONTH_40
, ACTIVE_MONTH_41
, ACTIVE_MONTH_42
, ACTIVE_MONTH_43
, ACTIVE_MONTH_44
, ACTIVE_MONTH_45
, ACTIVE_MONTH_46
, ACTIVE_MONTH_47
, ACTIVE_MONTH_48
, ACTIVE_MONTH_49
, ACTIVE_MONTH_50
, ACTIVE_MONTH_51
, ACTIVE_MONTH_52
, ACTIVE_MONTH_53
, ACTIVE_MONTH_54
, ACTIVE_MONTH_55
, ACTIVE_MONTH_56
, ACTIVE_MONTH_57
, ACTIVE_MONTH_58
, ACTIVE_MONTH_59
, ACTIVE_MONTH_60
, ACTIVE_MONTH_61
, ACTIVE_MONTH_62
, ACTIVE_MONTH_63
FROM SEED_DATA.DEV.COHORT_DS01_SUB_COHORT
UNION ALL
SELECT
'PDS-08 Customers' as COHORT_GROUP
, CREATED_MONTH_YEAR
, COHORT_QUANTITY
, ACTIVE_MONTH_0
, ACTIVE_MONTH_1
, ACTIVE_MONTH_2
, ACTIVE_MONTH_3
, ACTIVE_MONTH_4
, ACTIVE_MONTH_5
, ACTIVE_MONTH_6
, ACTIVE_MONTH_7
, ACTIVE_MONTH_8
, ACTIVE_MONTH_9
, ACTIVE_MONTH_10
, ACTIVE_MONTH_11
, ACTIVE_MONTH_12
, ACTIVE_MONTH_13
, ACTIVE_MONTH_14
, ACTIVE_MONTH_15
, ACTIVE_MONTH_16
, ACTIVE_MONTH_17
, ACTIVE_MONTH_18
, ACTIVE_MONTH_19
, ACTIVE_MONTH_20
, ACTIVE_MONTH_21
, ACTIVE_MONTH_22
, ACTIVE_MONTH_23
, ACTIVE_MONTH_24
, ACTIVE_MONTH_25
, ACTIVE_MONTH_26
, ACTIVE_MONTH_27
, ACTIVE_MONTH_28
, ACTIVE_MONTH_29
, ACTIVE_MONTH_30
, ACTIVE_MONTH_31
, ACTIVE_MONTH_32
, ACTIVE_MONTH_33
, ACTIVE_MONTH_34
, ACTIVE_MONTH_35
, ACTIVE_MONTH_36
, ACTIVE_MONTH_37
, ACTIVE_MONTH_38
, ACTIVE_MONTH_39
, ACTIVE_MONTH_40
, ACTIVE_MONTH_41
, ACTIVE_MONTH_42
, ACTIVE_MONTH_43
, ACTIVE_MONTH_44
, ACTIVE_MONTH_45
, ACTIVE_MONTH_46
, ACTIVE_MONTH_47
, ACTIVE_MONTH_48
, ACTIVE_MONTH_49
, ACTIVE_MONTH_50
, ACTIVE_MONTH_51
, ACTIVE_MONTH_52
, ACTIVE_MONTH_53
, ACTIVE_MONTH_54
, ACTIVE_MONTH_55
, ACTIVE_MONTH_56
, ACTIVE_MONTH_57
, ACTIVE_MONTH_58
, ACTIVE_MONTH_59
, ACTIVE_MONTH_60
, ACTIVE_MONTH_61
, ACTIVE_MONTH_62
, ACTIVE_MONTH_63
FROM SEED_DATA.DEV.COHORT_PDS08_CUS_COHORT
UNION ALL
SELECT
'PDS-08 Subscribers' as COHORT_GROUP
, CREATED_MONTH_YEAR
, COHORT_QUANTITY
, ACTIVE_MONTH_0
, ACTIVE_MONTH_1
, ACTIVE_MONTH_2
, ACTIVE_MONTH_3
, ACTIVE_MONTH_4
, ACTIVE_MONTH_5
, ACTIVE_MONTH_6
, ACTIVE_MONTH_7
, ACTIVE_MONTH_8
, ACTIVE_MONTH_9
, ACTIVE_MONTH_10
, ACTIVE_MONTH_11
, ACTIVE_MONTH_12
, ACTIVE_MONTH_13
, ACTIVE_MONTH_14
, ACTIVE_MONTH_15
, ACTIVE_MONTH_16
, ACTIVE_MONTH_17
, ACTIVE_MONTH_18
, ACTIVE_MONTH_19
, ACTIVE_MONTH_20
, ACTIVE_MONTH_21
, ACTIVE_MONTH_22
, ACTIVE_MONTH_23
, ACTIVE_MONTH_24
, ACTIVE_MONTH_25
, ACTIVE_MONTH_26
, ACTIVE_MONTH_27
, ACTIVE_MONTH_28
, ACTIVE_MONTH_29
, ACTIVE_MONTH_30
, ACTIVE_MONTH_31
, ACTIVE_MONTH_32
, ACTIVE_MONTH_33
, ACTIVE_MONTH_34
, ACTIVE_MONTH_35
, ACTIVE_MONTH_36
, ACTIVE_MONTH_37
, ACTIVE_MONTH_38
, ACTIVE_MONTH_39
, ACTIVE_MONTH_40
, ACTIVE_MONTH_41
, ACTIVE_MONTH_42
, ACTIVE_MONTH_43
, ACTIVE_MONTH_44
, ACTIVE_MONTH_45
, ACTIVE_MONTH_46
, ACTIVE_MONTH_47
, ACTIVE_MONTH_48
, ACTIVE_MONTH_49
, ACTIVE_MONTH_50
, ACTIVE_MONTH_51
, ACTIVE_MONTH_52
, ACTIVE_MONTH_53
, ACTIVE_MONTH_54
, ACTIVE_MONTH_55
, ACTIVE_MONTH_56
, ACTIVE_MONTH_57
, ACTIVE_MONTH_58
, ACTIVE_MONTH_59
, ACTIVE_MONTH_60
, ACTIVE_MONTH_61
, ACTIVE_MONTH_62
, ACTIVE_MONTH_63
FROM SEED_DATA.DEV.COHORT_PDS08_SUB_COHORT

UNION ALL
SELECT
'Transacted Subscribers (Revenue Retention)' as COHORT_GROUP
, CREATED_MONTH_YEAR
, COHORT_QUANTITY
, ACTIVE_MONTH_0
, ACTIVE_MONTH_1
, ACTIVE_MONTH_2
, ACTIVE_MONTH_3
, ACTIVE_MONTH_4
, ACTIVE_MONTH_5
, ACTIVE_MONTH_6
, ACTIVE_MONTH_7
, ACTIVE_MONTH_8
, ACTIVE_MONTH_9
, ACTIVE_MONTH_10
, ACTIVE_MONTH_11
, ACTIVE_MONTH_12
, ACTIVE_MONTH_13
, ACTIVE_MONTH_14
, ACTIVE_MONTH_15
, ACTIVE_MONTH_16
, ACTIVE_MONTH_17
, ACTIVE_MONTH_18
, ACTIVE_MONTH_19
, ACTIVE_MONTH_20
, ACTIVE_MONTH_21
, ACTIVE_MONTH_22
, ACTIVE_MONTH_23
, ACTIVE_MONTH_24
, ACTIVE_MONTH_25
, ACTIVE_MONTH_26
, ACTIVE_MONTH_27
, ACTIVE_MONTH_28
, ACTIVE_MONTH_29
, ACTIVE_MONTH_30
, ACTIVE_MONTH_31
, ACTIVE_MONTH_32
, ACTIVE_MONTH_33
, ACTIVE_MONTH_34
, ACTIVE_MONTH_35
, ACTIVE_MONTH_36
, ACTIVE_MONTH_37
, ACTIVE_MONTH_38
, ACTIVE_MONTH_39
, ACTIVE_MONTH_40
, ACTIVE_MONTH_41
, ACTIVE_MONTH_42
, ACTIVE_MONTH_43
, ACTIVE_MONTH_44
, ACTIVE_MONTH_45
, ACTIVE_MONTH_46
, ACTIVE_MONTH_47
, ACTIVE_MONTH_48
, ACTIVE_MONTH_49
, ACTIVE_MONTH_50
, ACTIVE_MONTH_51
, ACTIVE_MONTH_52
, ACTIVE_MONTH_53
, ACTIVE_MONTH_54
, ACTIVE_MONTH_55
, ACTIVE_MONTH_56
, ACTIVE_MONTH_57
, ACTIVE_MONTH_58
, ACTIVE_MONTH_59
, ACTIVE_MONTH_60
, ACTIVE_MONTH_61
, ACTIVE_MONTH_62
, ACTIVE_MONTH_63
FROM SEED_DATA.DEV.COHORT_TOTAL_SUB_COHORT_NO_PAUSE

UNION ALL
SELECT
'Transacted Customers (Revenue Retention)' as COHORT_GROUP
, CREATED_MONTH_YEAR
, COHORT_QUANTITY
, ACTIVE_MONTH_0
, ACTIVE_MONTH_1
, ACTIVE_MONTH_2
, ACTIVE_MONTH_3
, ACTIVE_MONTH_4
, ACTIVE_MONTH_5
, ACTIVE_MONTH_6
, ACTIVE_MONTH_7
, ACTIVE_MONTH_8
, ACTIVE_MONTH_9
, ACTIVE_MONTH_10
, ACTIVE_MONTH_11
, ACTIVE_MONTH_12
, ACTIVE_MONTH_13
, ACTIVE_MONTH_14
, ACTIVE_MONTH_15
, ACTIVE_MONTH_16
, ACTIVE_MONTH_17
, ACTIVE_MONTH_18
, ACTIVE_MONTH_19
, ACTIVE_MONTH_20
, ACTIVE_MONTH_21
, ACTIVE_MONTH_22
, ACTIVE_MONTH_23
, ACTIVE_MONTH_24
, ACTIVE_MONTH_25
, ACTIVE_MONTH_26
, ACTIVE_MONTH_27
, ACTIVE_MONTH_28
, ACTIVE_MONTH_29
, ACTIVE_MONTH_30
, ACTIVE_MONTH_31
, ACTIVE_MONTH_32
, ACTIVE_MONTH_33
, ACTIVE_MONTH_34
, ACTIVE_MONTH_35
, ACTIVE_MONTH_36
, ACTIVE_MONTH_37
, ACTIVE_MONTH_38
, ACTIVE_MONTH_39
, ACTIVE_MONTH_40
, ACTIVE_MONTH_41
, ACTIVE_MONTH_42
, ACTIVE_MONTH_43
, ACTIVE_MONTH_44
, ACTIVE_MONTH_45
, ACTIVE_MONTH_46
, ACTIVE_MONTH_47
, ACTIVE_MONTH_48
, ACTIVE_MONTH_49
, ACTIVE_MONTH_50
, ACTIVE_MONTH_51
, ACTIVE_MONTH_52
, ACTIVE_MONTH_53
, ACTIVE_MONTH_54
, ACTIVE_MONTH_55
, ACTIVE_MONTH_56
, ACTIVE_MONTH_57
, ACTIVE_MONTH_58
, ACTIVE_MONTH_59
, ACTIVE_MONTH_60
, ACTIVE_MONTH_61
, ACTIVE_MONTH_62
, ACTIVE_MONTH_63
FROM SEED_DATA.DEV.COHORT_TOTAL_CUS_COHORT_NO_PAUSE
) 
select 
*
from cohorts
--where CREATED_MONTH_YEAR <= DATEADD(month, -1, date_trunc('month',to_date(current_date())))
order by 1,2;"
"V_COHORT_SUB_MASTER","create or replace view SEED_DATA.DEV.V_COHORT_SUB_MASTER as

    with all_orders as 
    (
        --select * from SEED_DATA.DEV.V_ORDER_HISTORY_SKU_ADJUSTED
        select * from SEED_DATA.DEV.V_ORDER_HISTORY_COGS_UPDATE
    ),
    
    sub_inv as 
    (
        -- joining recharge invoices
        select 
            s.recharge_subscription_id,
            s.recurly_subscription_id,
            to_date(s.activated_at) as activated_at,
            coalesce(s.first_quantity,s.quantity) as subscription_quantity,
            to_date(o.order_date) as invoice_date,
            to_date(s.cancelled_at) as cancelled_at,
            floor(datediff(days,to_date(s.activated_at),to_date(o.order_date))/30) as invoice_month,
            floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month,
            ------ dimensions 
            channel_grouping,
            channel_platform,
            ------ metrics
            o.quantity as invoiced_quantity,
            (Total_amount_paid + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as revenue,
            (Total_amount_paid_less_cogs + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as ltv,
            invoice_refund_flag
        from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
            join all_orders as o on s.recharge_subscription_id = o.subscription_id 
        union all 
        --- joining recurly invoices
        select 
            s.recharge_subscription_id, 
            s.recurly_subscription_id,
            to_date(s.activated_at) as activated_at,
            coalesce(s.first_quantity,s.quantity) as subscription_quantity,
            to_date(o.order_date) as invoice_date,
            to_date(s.cancelled_at) as cancelled_at,
            floor(datediff(days,to_date(s.activated_at),to_date(o.order_date))/30) as invoice_month,
            floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month,
            ------ dimensions 
            channel_grouping,
            channel_platform,
            ------ metrics
            o.quantity as invoiced_quantity,
            (Total_amount_paid + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as revenue,
            (Total_amount_paid_less_cogs + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as ltv,
            invoice_refund_flag
        from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
            join all_orders as o on s.recurly_subscription_id = o.subscription_id 
    ), 
    
    sub_inv_flag as
    (
        select recharge_subscription_id,recurly_subscription_id,activated_at,
            channel_grouping,
            channel_platform,
        ----- seed retention volume
            max(case when invoice_month = 0 or invoice_month = -1 then 1 else null end) as invoice_month_0_volume,
            max(case when cancelled_month <= 0 and invoice_month = 1 then 1 when cancelled_month <= 0 then 0 when invoice_month = 0 or invoice_month = 1 then 1  else null end) as invoice_month_1_volume,
            max(case when cancelled_month <= 1 and invoice_month = 2 then 1 when cancelled_month <= 1 then 0 when invoice_month = 1 or invoice_month = 2 then 1 else null end) as invoice_month_2_volume,
            max(case when cancelled_month <= 2 and invoice_month = 3 then 1 when cancelled_month <= 2 then 0 when invoice_month = 2 or invoice_month = 3 then 1  else null end) as invoice_month_3_volume,
            max(case when cancelled_month <= 3 and invoice_month = 4 then 1 when cancelled_month <= 3 then 0 when invoice_month = 3 or invoice_month = 4 then 1 else null end) as invoice_month_4_volume,
            max(case when cancelled_month <= 4 and invoice_month = 5 then 1 when cancelled_month <= 4 then 0 when invoice_month = 4 or invoice_month = 5 then 1  else null end) as invoice_month_5_volume,
            max(case when cancelled_month <= 5 and invoice_month = 6 then 1 when cancelled_month <= 5 then 0 when invoice_month = 5 or invoice_month = 6 then 1 else null end) as invoice_month_6_volume,
            max(case when cancelled_month <= 6 and invoice_month = 7 then 1 when cancelled_month <= 6 then 0 when invoice_month = 6 or invoice_month = 7 then 1  else null end) as invoice_month_7_volume,
            max(case when cancelled_month <= 7 and invoice_month = 8 then 1 when cancelled_month <= 7 then 0 when invoice_month = 7 or invoice_month = 8 then 1 else null end) as invoice_month_8_volume,
            max(case when cancelled_month <= 8 and invoice_month = 9 then 1 when cancelled_month <= 8 then 0 when invoice_month = 8 or invoice_month = 9 then 1  else null end) as invoice_month_9_volume,
            max(case when cancelled_month <= 9 and invoice_month = 10 then 1 when cancelled_month <= 9 then 0 when invoice_month = 9 or invoice_month = 10 then 1 else null end) as invoice_month_10_volume,
            max(case when cancelled_month <= 10 and invoice_month = 11 then 1 when cancelled_month <= 10 then 0 when invoice_month = 10 or invoice_month = 11 then 1 else null end) as invoice_month_11_volume,
            max(case when cancelled_month <= 11 and invoice_month = 12 then 1 when cancelled_month <= 11 then 0 when invoice_month = 11 or invoice_month = 12 then 1 else null end) as invoice_month_12_volume,
            max(case when cancelled_month <= 12 and invoice_month = 13 then 1 when cancelled_month <= 12 then 0 when invoice_month = 12 or invoice_month = 13 then 1 else null end) as invoice_month_13_volume,
            max(case when cancelled_month <= 13 and invoice_month = 14 then 1 when cancelled_month <= 13 then 0 when invoice_month = 13 or invoice_month = 14 then 1 else null end) as invoice_month_14_volume,
            max(case when cancelled_month <= 14 and invoice_month = 15 then 1 when cancelled_month <= 14 then 0 when invoice_month = 14 or invoice_month = 15 then 1 else null end) as invoice_month_15_volume,
            max(case when cancelled_month <= 15 and invoice_month = 16 then 1 when cancelled_month <= 15 then 0 when invoice_month = 15 or invoice_month = 16 then 1 else null end) as invoice_month_16_volume,
            max(case when cancelled_month <= 16 and invoice_month = 17 then 1 when cancelled_month <= 16 then 0 when invoice_month = 16 or invoice_month = 17 then 1 else null end) as invoice_month_17_volume,
            max(case when cancelled_month <= 17 and invoice_month = 18 then 1 when cancelled_month <= 17 then 0 when invoice_month = 17 or invoice_month = 18 then 1 else null end) as invoice_month_18_volume,
            max(case when cancelled_month <= 18 and invoice_month = 19 then 1 when cancelled_month <= 18 then 0 when invoice_month = 18 or invoice_month = 19 then 1 else null end) as invoice_month_19_volume,
            max(case when cancelled_month <= 19 and invoice_month = 20 then 1 when cancelled_month <= 19 then 0 when invoice_month = 19 or invoice_month = 20 then 1 else null end) as invoice_month_20_volume,
            max(case when cancelled_month <= 20 and invoice_month = 21 then 1 when cancelled_month <= 20 then 0 when invoice_month = 20 or invoice_month = 21 then 1 else null end) as invoice_month_21_volume,
            max(case when cancelled_month <= 21 and invoice_month = 22 then 1 when cancelled_month <= 21 then 0 when invoice_month = 21 or invoice_month = 22 then 1 else null end) as invoice_month_22_volume,
            max(case when cancelled_month <= 22 and invoice_month = 23 then 1 when cancelled_month <= 22 then 0 when invoice_month = 22 or invoice_month = 23 then 1 else null end) as invoice_month_23_volume,
            max(case when cancelled_month <= 23 and invoice_month = 24 then 1 when cancelled_month <= 23 then 0 when invoice_month = 23 or invoice_month = 24 then 1 else null end) as invoice_month_24_volume,
            max(case when cancelled_month <= 24 and invoice_month = 25 then 1 when cancelled_month <= 24 then 0 when invoice_month = 24 or invoice_month = 25 then 1 else null end) as invoice_month_25_volume,
            max(case when cancelled_month <= 25 and invoice_month = 26 then 1 when cancelled_month <= 25 then 0 when invoice_month = 25 or invoice_month = 26 then 1 else null end) as invoice_month_26_volume,
            max(case when cancelled_month <= 26 and invoice_month = 27 then 1 when cancelled_month <= 26 then 0 when invoice_month = 26 or invoice_month = 27 then 1 else null end) as invoice_month_27_volume,
            max(case when cancelled_month <= 27 and invoice_month = 28 then 1 when cancelled_month <= 27 then 0 when invoice_month = 27 or invoice_month = 28 then 1 else null end) as invoice_month_28_volume,
            max(case when cancelled_month <= 28 and invoice_month = 29 then 1 when cancelled_month <= 28 then 0 when invoice_month = 28 or invoice_month = 29 then 1 else null end) as invoice_month_29_volume,
            max(case when cancelled_month <= 29 and invoice_month = 30 then 1 when cancelled_month <= 29 then 0 when invoice_month = 29 or invoice_month = 30 then 1 else null end) as invoice_month_30_volume,
            max(case when cancelled_month <= 30 and invoice_month = 31 then 1 when cancelled_month <= 30 then 0 when invoice_month = 30 or invoice_month = 31 then 1 else null end) as invoice_month_31_volume,
            max(case when cancelled_month <= 31 and invoice_month = 32 then 1 when cancelled_month <= 31 then 0 when invoice_month = 31 or invoice_month = 32 then 1 else null end) as invoice_month_32_volume,
            max(case when cancelled_month <= 32 and invoice_month = 33 then 1 when cancelled_month <= 32 then 0 when invoice_month = 32 or invoice_month = 33 then 1 else null end) as invoice_month_33_volume,
            max(case when cancelled_month <= 33 and invoice_month = 34 then 1 when cancelled_month <= 33 then 0 when invoice_month = 33 or invoice_month = 34 then 1 else null end) as invoice_month_34_volume,
            max(case when cancelled_month <= 34 and invoice_month = 35 then 1 when cancelled_month <= 34 then 0 when invoice_month = 34 or invoice_month = 35 then 1 else null end) as invoice_month_35_volume,
            max(case when cancelled_month <= 35 and invoice_month = 36 then 1 when cancelled_month <= 35 then 0 when invoice_month = 35 or invoice_month = 36 then 1 else null end) as invoice_month_36_volume,
            max(case when cancelled_month <= 36 and invoice_month = 37 then 1 when cancelled_month <= 36 then 0 when invoice_month = 36 or invoice_month = 37 then 1 else null end) as invoice_month_37_volume,
            max(case when cancelled_month <= 37 and invoice_month = 38 then 1 when cancelled_month <= 37 then 0 when invoice_month = 37 or invoice_month = 38 then 1 else null end) as invoice_month_38_volume,
            max(case when cancelled_month <= 38 and invoice_month = 39 then 1 when cancelled_month <= 38 then 0 when invoice_month = 38 or invoice_month = 39 then 1 else null end) as invoice_month_39_volume,
            max(case when cancelled_month <= 39 and invoice_month = 40 then 1 when cancelled_month <= 39 then 0 when invoice_month = 39 or invoice_month = 40 then 1 else null end) as invoice_month_40_volume,
            max(case when cancelled_month <= 40 and invoice_month = 41 then 1 when cancelled_month <= 40 then 0 when invoice_month = 40 or invoice_month = 41 then 1 else null end) as invoice_month_41_volume,
            max(case when cancelled_month <= 41 and invoice_month = 42 then 1 when cancelled_month <= 41 then 0 when invoice_month = 41 or invoice_month = 42 then 1 else null end) as invoice_month_42_volume,
            max(case when cancelled_month <= 42 and invoice_month = 43 then 1 when cancelled_month <= 42 then 0 when invoice_month = 42 or invoice_month = 43 then 1 else null end) as invoice_month_43_volume,
            max(case when cancelled_month <= 43 and invoice_month = 44 then 1 when cancelled_month <= 43 then 0 when invoice_month = 43 or invoice_month = 44 then 1 else null end) as invoice_month_44_volume,
            max(case when cancelled_month <= 44 and invoice_month = 45 then 1 when cancelled_month <= 44 then 0 when invoice_month = 44 or invoice_month = 45 then 1 else null end) as invoice_month_45_volume,
            max(case when cancelled_month <= 45 and invoice_month = 46 then 1 when cancelled_month <= 45 then 0 when invoice_month = 45 or invoice_month = 46 then 1 else null end) as invoice_month_46_volume,
            max(case when cancelled_month <= 46 and invoice_month = 47 then 1 when cancelled_month <= 46 then 0 when invoice_month = 46 or invoice_month = 47 then 1 else null end) as invoice_month_47_volume,
            max(case when cancelled_month <= 47 and invoice_month = 48 then 1 when cancelled_month <= 47 then 0 when invoice_month = 47 or invoice_month = 48 then 1 else null end) as invoice_month_48_volume,
            max(case when cancelled_month <= 48 and invoice_month = 49 then 1 when cancelled_month <= 48 then 0 when invoice_month = 48 or invoice_month = 49 then 1 else null end) as invoice_month_49_volume,
            max(case when cancelled_month <= 49 and invoice_month = 50 then 1 when cancelled_month <= 49 then 0 when invoice_month = 49 or invoice_month = 50 then 1 else null end) as invoice_month_50_volume,
            max(case when cancelled_month <= 50 and invoice_month = 51 then 1 when cancelled_month <= 50 then 0 when invoice_month = 50 or invoice_month = 51 then 1 else null end) as invoice_month_51_volume,
            max(case when cancelled_month <= 51 and invoice_month = 52 then 1 when cancelled_month <= 51 then 0 when invoice_month = 51 or invoice_month = 52 then 1 else null end) as invoice_month_52_volume,
            max(case when cancelled_month <= 52 and invoice_month = 53 then 1 when cancelled_month <= 52 then 0 when invoice_month = 52 or invoice_month = 53 then 1 else null end) as invoice_month_53_volume,
            max(case when cancelled_month <= 53 and invoice_month = 54 then 1 when cancelled_month <= 53 then 0 when invoice_month = 53 or invoice_month = 54 then 1 else null end) as invoice_month_54_volume,
            max(case when cancelled_month <= 54 and invoice_month = 55 then 1 when cancelled_month <= 54 then 0 when invoice_month = 54 or invoice_month = 55 then 1 else null end) as invoice_month_55_volume,
            max(case when cancelled_month <= 55 and invoice_month = 56 then 1 when cancelled_month <= 55 then 0 when invoice_month = 55 or invoice_month = 56 then 1 else null end) as invoice_month_56_volume,
            max(case when cancelled_month <= 56 and invoice_month = 57 then 1 when cancelled_month <= 56 then 0 when invoice_month = 56 or invoice_month = 57 then 1 else null end) as invoice_month_57_volume,
            max(case when cancelled_month <= 57 and invoice_month = 58 then 1 when cancelled_month <= 57 then 0 when invoice_month = 57 or invoice_month = 58 then 1 else null end) as invoice_month_58_volume,
            max(case when cancelled_month <= 58 and invoice_month = 59 then 1 when cancelled_month <= 58 then 0 when invoice_month = 58 or invoice_month = 59 then 1 else null end) as invoice_month_59_volume,
            max(case when cancelled_month <= 59 and invoice_month = 60 then 1 when cancelled_month <= 59 then 0 when invoice_month = 59 or invoice_month = 60 then 1 else null end) as invoice_month_60_volume,
            max(case when cancelled_month <= 60 and invoice_month = 61 then 1 when cancelled_month <= 60 then 0 when invoice_month = 60 or invoice_month = 61 then 1 else null end) as invoice_month_61_volume,
            max(case when cancelled_month <= 61 and invoice_month = 62 then 1 when cancelled_month <= 61 then 0 when invoice_month = 61 or invoice_month = 62 then 1 else null end) as invoice_month_62_volume,
            max(case when cancelled_month <= 62 and invoice_month = 63 then 1 when cancelled_month <= 62 then 0 when invoice_month = 62 or invoice_month = 63 then 1 else null end) as invoice_month_63_volume,
            max(case when cancelled_month <= 63 and invoice_month = 64 then 1 when cancelled_month <= 63 then 0 when invoice_month = 63 or invoice_month = 64 then 1 else null end) as invoice_month_64_volume,
            max(case when cancelled_month <= 64 and invoice_month = 65 then 1 when cancelled_month <= 64 then 0 when invoice_month = 64 or invoice_month = 65 then 1 else null end) as invoice_month_65_volume,
            max(case when cancelled_month <= 65 and invoice_month = 66 then 1 when cancelled_month <= 65 then 0 when invoice_month = 65 or invoice_month = 66 then 1 else null end) as invoice_month_66_volume,
            max(case when cancelled_month <= 66 and invoice_month = 67 then 1 when cancelled_month <= 66 then 0 when invoice_month = 66 or invoice_month = 67 then 1 else null end) as invoice_month_67_volume,
            max(case when cancelled_month <= 67 and invoice_month = 68 then 1 when cancelled_month <= 67 then 0 when invoice_month = 67 or invoice_month = 68 then 1 else null end) as invoice_month_68_volume,
            max(case when cancelled_month <= 68 and invoice_month = 69 then 1 when cancelled_month <= 68 then 0 when invoice_month = 68 or invoice_month = 69 then 1 else null end) as invoice_month_69_volume,
            max(case when cancelled_month <= 69 and invoice_month = 70 then 1 when cancelled_month <= 69 then 0 when invoice_month = 69 or invoice_month = 70 then 1 else null end) as invoice_month_70_volume,
        ---- revenue retention
            max(case when invoice_month = 0 or invoice_month = -1 then 1 else null end) as invoice_month_0_volume_transc,
            max(case when invoice_month = 1 then 1 else null end) as invoice_month_1_volume_transc,
            max(case when invoice_month = 2 then 1 else null end) as invoice_month_2_volume_transc,
            max(case when invoice_month = 3 then 1 else null end) as invoice_month_3_volume_transc,
            max(case when invoice_month = 4 then 1 else null end) as invoice_month_4_volume_transc,
            max(case when invoice_month = 5 then 1 else null end) as invoice_month_5_volume_transc,
            max(case when invoice_month = 6 then 1 else null end) as invoice_month_6_volume_transc,
            max(case when invoice_month = 7 then 1 else null end) as invoice_month_7_volume_transc,
            max(case when invoice_month = 8 then 1 else null end) as invoice_month_8_volume_transc,
            max(case when invoice_month = 9 then 1 else null end) as invoice_month_9_volume_transc,
            max(case when invoice_month = 10 then 1 else null end) as invoice_month_10_volume_transc,
            max(case when invoice_month = 11 then 1 else null end) as invoice_month_11_volume_transc,
            max(case when invoice_month = 12 then 1 else null end) as invoice_month_12_volume_transc,
            max(case when invoice_month = 13 then 1 else null end) as invoice_month_13_volume_transc,
            max(case when invoice_month = 14 then 1 else null end) as invoice_month_14_volume_transc,
            max(case when invoice_month = 15 then 1 else null end) as invoice_month_15_volume_transc,
            max(case when invoice_month = 16 then 1 else null end) as invoice_month_16_volume_transc,
            max(case when invoice_month = 17 then 1 else null end) as invoice_month_17_volume_transc,
            max(case when invoice_month = 18 then 1 else null end) as invoice_month_18_volume_transc,
            max(case when invoice_month = 19 then 1 else null end) as invoice_month_19_volume_transc,
            max(case when invoice_month = 20 then 1 else null end) as invoice_month_20_volume_transc,
            max(case when invoice_month = 21 then 1 else null end) as invoice_month_21_volume_transc,
            max(case when invoice_month = 22 then 1 else null end) as invoice_month_22_volume_transc,
            max(case when invoice_month = 23 then 1 else null end) as invoice_month_23_volume_transc,
            max(case when invoice_month = 24 then 1 else null end) as invoice_month_24_volume_transc,
            max(case when invoice_month = 25 then 1 else null end) as invoice_month_25_volume_transc,
            max(case when invoice_month = 26 then 1 else null end) as invoice_month_26_volume_transc,
            max(case when invoice_month = 27 then 1 else null end) as invoice_month_27_volume_transc,
            max(case when invoice_month = 28 then 1 else null end) as invoice_month_28_volume_transc,
            max(case when invoice_month = 29 then 1 else null end) as invoice_month_29_volume_transc,
            max(case when invoice_month = 30 then 1 else null end) as invoice_month_30_volume_transc,
            max(case when invoice_month = 31 then 1 else null end) as invoice_month_31_volume_transc,
            max(case when invoice_month = 32 then 1 else null end) as invoice_month_32_volume_transc,
            max(case when invoice_month = 33 then 1 else null end) as invoice_month_33_volume_transc,
            max(case when invoice_month = 34 then 1 else null end) as invoice_month_34_volume_transc,
            max(case when invoice_month = 35 then 1 else null end) as invoice_month_35_volume_transc,
            max(case when invoice_month = 36 then 1 else null end) as invoice_month_36_volume_transc,
            max(case when invoice_month = 37 then 1 else null end) as invoice_month_37_volume_transc,
            max(case when invoice_month = 38 then 1 else null end) as invoice_month_38_volume_transc,
            max(case when invoice_month = 39 then 1 else null end) as invoice_month_39_volume_transc,
            max(case when invoice_month = 40 then 1 else null end) as invoice_month_40_volume_transc,
            max(case when invoice_month = 41 then 1 else null end) as invoice_month_41_volume_transc,
            max(case when invoice_month = 42 then 1 else null end) as invoice_month_42_volume_transc,
            max(case when invoice_month = 43 then 1 else null end) as invoice_month_43_volume_transc,
            max(case when invoice_month = 44 then 1 else null end) as invoice_month_44_volume_transc,
            max(case when invoice_month = 45 then 1 else null end) as invoice_month_45_volume_transc,
            max(case when invoice_month = 46 then 1 else null end) as invoice_month_46_volume_transc,
            max(case when invoice_month = 47 then 1 else null end) as invoice_month_47_volume_transc,
            max(case when invoice_month = 48 then 1 else null end) as invoice_month_48_volume_transc,
            max(case when invoice_month = 49 then 1 else null end) as invoice_month_49_volume_transc,
            max(case when invoice_month = 50 then 1 else null end) as invoice_month_50_volume_transc,
            max(case when invoice_month = 51 then 1 else null end) as invoice_month_51_volume_transc,
            max(case when invoice_month = 52 then 1 else null end) as invoice_month_52_volume_transc,
            max(case when invoice_month = 53 then 1 else null end) as invoice_month_53_volume_transc,
            max(case when invoice_month = 54 then 1 else null end) as invoice_month_54_volume_transc,
            max(case when invoice_month = 55 then 1 else null end) as invoice_month_55_volume_transc,
            max(case when invoice_month = 56 then 1 else null end) as invoice_month_56_volume_transc,
            max(case when invoice_month = 57 then 1 else null end) as invoice_month_57_volume_transc,
            max(case when invoice_month = 58 then 1 else null end) as invoice_month_58_volume_transc,
            max(case when invoice_month = 59 then 1 else null end) as invoice_month_59_volume_transc,
            max(case when invoice_month = 60 then 1 else null end) as invoice_month_60_volume_transc,
            max(case when invoice_month = 61 then 1 else null end) as invoice_month_61_volume_transc,
            max(case when invoice_month = 62 then 1 else null end) as invoice_month_62_volume_transc,
            max(case when invoice_month = 63 then 1 else null end) as invoice_month_63_volume_transc,
            max(case when invoice_month = 64 then 1 else null end) as invoice_month_64_volume_transc,
            max(case when invoice_month = 65 then 1 else null end) as invoice_month_65_volume_transc,
            max(case when invoice_month = 66 then 1 else null end) as invoice_month_66_volume_transc,
            max(case when invoice_month = 67 then 1 else null end) as invoice_month_67_volume_transc,
            max(case when invoice_month = 68 then 1 else null end) as invoice_month_68_volume_transc,
            max(case when invoice_month = 69 then 1 else null end) as invoice_month_69_volume_transc,
            max(case when invoice_month = 70 then 1 else null end) as invoice_month_70_volume_transc,
        ---- revenue 
            sum(case when invoice_month = 0 or invoice_month = -1 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_0_revenue,
            sum(case when invoice_month = 1 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_1_revenue,
            sum(case when invoice_month = 2 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_2_revenue,
            sum(case when invoice_month = 3 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_3_revenue,
            sum(case when invoice_month = 4 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_4_revenue,
            sum(case when invoice_month = 5 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_5_revenue,
            sum(case when invoice_month = 6 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_6_revenue,
            sum(case when invoice_month = 7 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_7_revenue,
            sum(case when invoice_month = 8 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_8_revenue,
            sum(case when invoice_month = 9 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_9_revenue,
            sum(case when invoice_month = 10 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_10_revenue,
            sum(case when invoice_month = 11 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_11_revenue,
            sum(case when invoice_month = 12 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_12_revenue,
            sum(case when invoice_month = 13 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_13_revenue,
            sum(case when invoice_month = 14 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_14_revenue,
            sum(case when invoice_month = 15 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_15_revenue,
            sum(case when invoice_month = 16 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_16_revenue,
            sum(case when invoice_month = 17 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_17_revenue,
            sum(case when invoice_month = 18 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_18_revenue,
            sum(case when invoice_month = 19 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_19_revenue,
            sum(case when invoice_month = 20 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_20_revenue,
            sum(case when invoice_month = 21 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_21_revenue,
            sum(case when invoice_month = 22 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_22_revenue,
            sum(case when invoice_month = 23 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_23_revenue,
            sum(case when invoice_month = 24 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_24_revenue,
            sum(case when invoice_month = 25 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_25_revenue,
            sum(case when invoice_month = 26 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_26_revenue,
            sum(case when invoice_month = 27 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_27_revenue,
            sum(case when invoice_month = 28 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_28_revenue,
            sum(case when invoice_month = 29 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_29_revenue,
            sum(case when invoice_month = 30 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_30_revenue,
            sum(case when invoice_month = 31 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_31_revenue,
            sum(case when invoice_month = 32 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_32_revenue,
            sum(case when invoice_month = 33 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_33_revenue,
            sum(case when invoice_month = 34 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_34_revenue,
            sum(case when invoice_month = 35 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_35_revenue,
            sum(case when invoice_month = 36 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_36_revenue,
            sum(case when invoice_month = 37 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_37_revenue,
            sum(case when invoice_month = 38 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_38_revenue,
            sum(case when invoice_month = 39 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_39_revenue,
            sum(case when invoice_month = 40 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_40_revenue,
            sum(case when invoice_month = 41 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_41_revenue,
            sum(case when invoice_month = 42 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_42_revenue,
            sum(case when invoice_month = 43 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_43_revenue,
            sum(case when invoice_month = 44 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_44_revenue,
            sum(case when invoice_month = 45 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_45_revenue,
            sum(case when invoice_month = 46 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_46_revenue,
            sum(case when invoice_month = 47 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_47_revenue,
            sum(case when invoice_month = 48 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_48_revenue,
            sum(case when invoice_month = 49 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_49_revenue,
            sum(case when invoice_month = 50 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_50_revenue,
            sum(case when invoice_month = 51 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_51_revenue,
            sum(case when invoice_month = 52 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_52_revenue,
            sum(case when invoice_month = 53 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_53_revenue,
            sum(case when invoice_month = 54 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_54_revenue,
            sum(case when invoice_month = 55 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_55_revenue,
            sum(case when invoice_month = 56 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_56_revenue,
            sum(case when invoice_month = 57 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_57_revenue,
            sum(case when invoice_month = 58 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_58_revenue,
            sum(case when invoice_month = 59 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_59_revenue,
            sum(case when invoice_month = 60 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_60_revenue,
            sum(case when invoice_month = 61 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_61_revenue,
            sum(case when invoice_month = 62 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_62_revenue,
            sum(case when invoice_month = 63 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_63_revenue,
            sum(case when invoice_month = 64 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_64_revenue,
            sum(case when invoice_month = 65 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_65_revenue,
            sum(case when invoice_month = 66 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_66_revenue,
            sum(case when invoice_month = 67 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_67_revenue,
            sum(case when invoice_month = 68 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_68_revenue,
            sum(case when invoice_month = 69 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_69_revenue,
            sum(case when invoice_month = 70 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_70_revenue,
        ----- cumulative revenue
            sum(case when invoice_month = 0 or invoice_month = -1 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_0_revenue_cuml,
            sum(case when invoice_month <= 1 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_1_revenue_cuml,
            sum(case when invoice_month <= 2 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_2_revenue_cuml,
            sum(case when invoice_month <= 3 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_3_revenue_cuml,
            sum(case when invoice_month <= 4 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_4_revenue_cuml,
            sum(case when invoice_month <= 5 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_5_revenue_cuml,
            sum(case when invoice_month <= 6 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_6_revenue_cuml,
            sum(case when invoice_month <= 7 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_7_revenue_cuml,
            sum(case when invoice_month <= 8 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_8_revenue_cuml,
            sum(case when invoice_month <= 9 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_9_revenue_cuml,
            sum(case when invoice_month <= 10 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_10_revenue_cuml,
            sum(case when invoice_month <= 11 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_11_revenue_cuml,
            sum(case when invoice_month <= 12 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_12_revenue_cuml,
            sum(case when invoice_month <= 13 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_13_revenue_cuml,
            sum(case when invoice_month <= 14 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_14_revenue_cuml,
            sum(case when invoice_month <= 15 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_15_revenue_cuml,
            sum(case when invoice_month <= 16 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_16_revenue_cuml,
            sum(case when invoice_month <= 17 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_17_revenue_cuml,
            sum(case when invoice_month <= 18 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_18_revenue_cuml,
            sum(case when invoice_month <= 19 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_19_revenue_cuml,
            sum(case when invoice_month <= 20 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_20_revenue_cuml,
            sum(case when invoice_month <= 21 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_21_revenue_cuml,
            sum(case when invoice_month <= 22 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_22_revenue_cuml,
            sum(case when invoice_month <= 23 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_23_revenue_cuml,
            sum(case when invoice_month <= 24 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_24_revenue_cuml,
            sum(case when invoice_month <= 25 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_25_revenue_cuml,
            sum(case when invoice_month <= 26 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_26_revenue_cuml,
            sum(case when invoice_month <= 27 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_27_revenue_cuml,
            sum(case when invoice_month <= 28 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_28_revenue_cuml,
            sum(case when invoice_month <= 29 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_29_revenue_cuml,
            sum(case when invoice_month <= 30 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_30_revenue_cuml,
            sum(case when invoice_month <= 31 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_31_revenue_cuml,
            sum(case when invoice_month <= 32 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_32_revenue_cuml,
            sum(case when invoice_month <= 33 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_33_revenue_cuml,
            sum(case when invoice_month <= 34 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_34_revenue_cuml,
            sum(case when invoice_month <= 35 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_35_revenue_cuml,
            sum(case when invoice_month <= 36 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_36_revenue_cuml,
            sum(case when invoice_month <= 37 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_37_revenue_cuml,
            sum(case when invoice_month <= 38 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_38_revenue_cuml,
            sum(case when invoice_month <= 39 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_39_revenue_cuml,
            sum(case when invoice_month <= 40 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_40_revenue_cuml,
            sum(case when invoice_month <= 41 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_41_revenue_cuml,
            sum(case when invoice_month <= 42 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_42_revenue_cuml,
            sum(case when invoice_month <= 43 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_43_revenue_cuml,
            sum(case when invoice_month <= 44 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_44_revenue_cuml,
            sum(case when invoice_month <= 45 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_45_revenue_cuml,
            sum(case when invoice_month <= 46 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_46_revenue_cuml,
            sum(case when invoice_month <= 47 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_47_revenue_cuml,
            sum(case when invoice_month <= 48 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_48_revenue_cuml,
            sum(case when invoice_month <= 49 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_49_revenue_cuml,
            sum(case when invoice_month <= 50 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_50_revenue_cuml,
            sum(case when invoice_month <= 51 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_51_revenue_cuml,
            sum(case when invoice_month <= 52 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_52_revenue_cuml,
            sum(case when invoice_month <= 53 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_53_revenue_cuml,
            sum(case when invoice_month <= 54 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_54_revenue_cuml,
            sum(case when invoice_month <= 55 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_55_revenue_cuml,
            sum(case when invoice_month <= 56 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_56_revenue_cuml,
            sum(case when invoice_month <= 57 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_57_revenue_cuml,
            sum(case when invoice_month <= 58 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_58_revenue_cuml,
            sum(case when invoice_month <= 59 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_59_revenue_cuml,
            sum(case when invoice_month <= 60 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_60_revenue_cuml,
            sum(case when invoice_month <= 61 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_61_revenue_cuml,
            sum(case when invoice_month <= 62 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_62_revenue_cuml,
            sum(case when invoice_month <= 63 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_63_revenue_cuml,
            sum(case when invoice_month <= 64 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_64_revenue_cuml,
            sum(case when invoice_month <= 65 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_65_revenue_cuml,
            sum(case when invoice_month <= 66 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_66_revenue_cuml,
            sum(case when invoice_month <= 67 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_67_revenue_cuml,
            sum(case when invoice_month <= 68 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_68_revenue_cuml,
            sum(case when invoice_month <= 69 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as  invoice_month_69_revenue_cuml,
            sum(case when invoice_month <= 70 and invoice_refund_flag = 'not_fully_refunded' then revenue  else 0 end) as invoice_month_70_revenue_cuml,
        ----- ltv
            sum(case when invoice_month = 0 or invoice_month = -1 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_0_ltv,
            sum(case when invoice_month = 1 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_1_ltv,
            sum(case when invoice_month = 2 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_2_ltv,
            sum(case when invoice_month = 3 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_3_ltv,
            sum(case when invoice_month = 4 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_4_ltv,
            sum(case when invoice_month = 5 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_5_ltv,
            sum(case when invoice_month = 6 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_6_ltv,
            sum(case when invoice_month = 7 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_7_ltv,
            sum(case when invoice_month = 8 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_8_ltv,
            sum(case when invoice_month = 9 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_9_ltv,
            sum(case when invoice_month = 10 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_10_ltv,
            sum(case when invoice_month = 11 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_11_ltv,
            sum(case when invoice_month = 12 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_12_ltv,
            sum(case when invoice_month = 13 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_13_ltv,
            sum(case when invoice_month = 14 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_14_ltv,
            sum(case when invoice_month = 15 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_15_ltv,
            sum(case when invoice_month = 16 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_16_ltv,
            sum(case when invoice_month = 17 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_17_ltv,
            sum(case when invoice_month = 18 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_18_ltv,
            sum(case when invoice_month = 19 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_19_ltv,
            sum(case when invoice_month = 20 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_20_ltv,
            sum(case when invoice_month = 21 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_21_ltv,
            sum(case when invoice_month = 22 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_22_ltv,
            sum(case when invoice_month = 23 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_23_ltv,
            sum(case when invoice_month = 24 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_24_ltv,
            sum(case when invoice_month = 25 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_25_ltv,
            sum(case when invoice_month = 26 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_26_ltv,
            sum(case when invoice_month = 27 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_27_ltv,
            sum(case when invoice_month = 28 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_28_ltv,
            sum(case when invoice_month = 29 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_29_ltv,
            sum(case when invoice_month = 30 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_30_ltv,
            sum(case when invoice_month = 31 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_31_ltv,
            sum(case when invoice_month = 32 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_32_ltv,
            sum(case when invoice_month = 33 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_33_ltv,
            sum(case when invoice_month = 34 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_34_ltv,
            sum(case when invoice_month = 35 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_35_ltv,
            sum(case when invoice_month = 36 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_36_ltv,
            sum(case when invoice_month = 37 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_37_ltv,
            sum(case when invoice_month = 38 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_38_ltv,
            sum(case when invoice_month = 39 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_39_ltv,
            sum(case when invoice_month = 40 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_40_ltv,
            sum(case when invoice_month = 41 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_41_ltv,
            sum(case when invoice_month = 42 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_42_ltv,
            sum(case when invoice_month = 43 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_43_ltv,
            sum(case when invoice_month = 44 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_44_ltv,
            sum(case when invoice_month = 45 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_45_ltv,
            sum(case when invoice_month = 46 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_46_ltv,
            sum(case when invoice_month = 47 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_47_ltv,
            sum(case when invoice_month = 48 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_48_ltv,
            sum(case when invoice_month = 49 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_49_ltv,
            sum(case when invoice_month = 50 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_50_ltv,
            sum(case when invoice_month = 51 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_51_ltv,
            sum(case when invoice_month = 52 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_52_ltv,
            sum(case when invoice_month = 53 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_53_ltv,
            sum(case when invoice_month = 54 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_54_ltv,
            sum(case when invoice_month = 55 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_55_ltv,
            sum(case when invoice_month = 56 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_56_ltv,
            sum(case when invoice_month = 57 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_57_ltv,
            sum(case when invoice_month = 58 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_58_ltv,
            sum(case when invoice_month = 59 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_59_ltv,
            sum(case when invoice_month = 60 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_60_ltv,
            sum(case when invoice_month = 61 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_61_ltv,
            sum(case when invoice_month = 62 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_62_ltv,
            sum(case when invoice_month = 63 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_63_ltv,
            sum(case when invoice_month = 64 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_64_ltv,
            sum(case when invoice_month = 65 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_65_ltv,
            sum(case when invoice_month = 66 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_66_ltv,
            sum(case when invoice_month = 67 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_67_ltv,
            sum(case when invoice_month = 68 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_68_ltv,
            sum(case when invoice_month = 69 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_69_ltv,
            sum(case when invoice_month = 70 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_70_ltv,
            ----- cumulative ltv
            sum(case when invoice_month = 0 or invoice_month = -1 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_0_ltv_cuml,
            sum(case when invoice_month <= 1 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_1_ltv_cuml,
            sum(case when invoice_month <= 2 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_2_ltv_cuml,
            sum(case when invoice_month <= 3 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_3_ltv_cuml,
            sum(case when invoice_month <= 4 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_4_ltv_cuml,
            sum(case when invoice_month <= 5 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_5_ltv_cuml,
            sum(case when invoice_month <= 6 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_6_ltv_cuml,
            sum(case when invoice_month <= 7 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_7_ltv_cuml,
            sum(case when invoice_month <= 8 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_8_ltv_cuml,
            sum(case when invoice_month <= 9 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_9_ltv_cuml,
            sum(case when invoice_month <= 10 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_10_ltv_cuml,
            sum(case when invoice_month <= 11 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_11_ltv_cuml,
            sum(case when invoice_month <= 12 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_12_ltv_cuml,
            sum(case when invoice_month <= 13 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_13_ltv_cuml,
            sum(case when invoice_month <= 14 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_14_ltv_cuml,
            sum(case when invoice_month <= 15 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_15_ltv_cuml,
            sum(case when invoice_month <= 16 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_16_ltv_cuml,
            sum(case when invoice_month <= 17 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_17_ltv_cuml,
            sum(case when invoice_month <= 18 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_18_ltv_cuml,
            sum(case when invoice_month <= 19 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_19_ltv_cuml,
            sum(case when invoice_month <= 20 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_20_ltv_cuml,
            sum(case when invoice_month <= 21 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_21_ltv_cuml,
            sum(case when invoice_month <= 22 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_22_ltv_cuml,
            sum(case when invoice_month <= 23 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_23_ltv_cuml,
            sum(case when invoice_month <= 24 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_24_ltv_cuml,
            sum(case when invoice_month <= 25 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_25_ltv_cuml,
            sum(case when invoice_month <= 26 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_26_ltv_cuml,
            sum(case when invoice_month <= 27 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_27_ltv_cuml,
            sum(case when invoice_month <= 28 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_28_ltv_cuml,
            sum(case when invoice_month <= 29 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_29_ltv_cuml,
            sum(case when invoice_month <= 30 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_30_ltv_cuml,
            sum(case when invoice_month <= 31 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_31_ltv_cuml,
            sum(case when invoice_month <= 32 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_32_ltv_cuml,
            sum(case when invoice_month <= 33 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_33_ltv_cuml,
            sum(case when invoice_month <= 34 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_34_ltv_cuml,
            sum(case when invoice_month <= 35 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_35_ltv_cuml,
            sum(case when invoice_month <= 36 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_36_ltv_cuml,
            sum(case when invoice_month <= 37 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_37_ltv_cuml,
            sum(case when invoice_month <= 38 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_38_ltv_cuml,
            sum(case when invoice_month <= 39 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_39_ltv_cuml,
            sum(case when invoice_month <= 40 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_40_ltv_cuml,
            sum(case when invoice_month <= 41 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_41_ltv_cuml,
            sum(case when invoice_month <= 42 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_42_ltv_cuml,
            sum(case when invoice_month <= 43 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_43_ltv_cuml,
            sum(case when invoice_month <= 44 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_44_ltv_cuml,
            sum(case when invoice_month <= 45 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_45_ltv_cuml,
            sum(case when invoice_month <= 46 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_46_ltv_cuml,
            sum(case when invoice_month <= 47 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_47_ltv_cuml,
            sum(case when invoice_month <= 48 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_48_ltv_cuml,
            sum(case when invoice_month <= 49 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_49_ltv_cuml,
            sum(case when invoice_month <= 50 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_50_ltv_cuml,
            sum(case when invoice_month <= 51 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_51_ltv_cuml,
            sum(case when invoice_month <= 52 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_52_ltv_cuml,
            sum(case when invoice_month <= 53 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_53_ltv_cuml,
            sum(case when invoice_month <= 54 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_54_ltv_cuml,
            sum(case when invoice_month <= 55 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_55_ltv_cuml,
            sum(case when invoice_month <= 56 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_56_ltv_cuml,
            sum(case when invoice_month <= 57 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_57_ltv_cuml,
            sum(case when invoice_month <= 58 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_58_ltv_cuml,
            sum(case when invoice_month <= 59 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_59_ltv_cuml,
            sum(case when invoice_month <= 60 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_60_ltv_cuml,
            sum(case when invoice_month <= 61 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_61_ltv_cuml,
            sum(case when invoice_month <= 62 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_62_ltv_cuml,
            sum(case when invoice_month <= 63 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_63_ltv_cuml,
            sum(case when invoice_month <= 64 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_64_ltv_cuml,
            sum(case when invoice_month <= 65 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_65_ltv_cuml,
            sum(case when invoice_month <= 66 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_66_ltv_cuml,
            sum(case when invoice_month <= 67 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_67_ltv_cuml,
            sum(case when invoice_month <= 68 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_68_ltv_cuml,
            sum(case when invoice_month <= 69 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_69_ltv_cuml,
            sum(case when invoice_month <= 70 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_70_ltv_cuml
            
        from sub_inv
        group by 1,2,3,4,5
    ), 
    
    final as
    (select 
        date_trunc('month',to_date(activated_at)) as created_month_year,
        channel_grouping, channel_platform,
        count(*) as cohort_volume,
        ----- seed retention volume
        sum(invoice_month_0_volume) as ""M0 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_volume end) as ""M01 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_volume end) as ""M02 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_volume end) as ""M03 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_volume end) as ""M04 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_volume end) as ""M05 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_volume end) as ""M06 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_volume end) as ""M07 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_volume end) as ""M08 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_volume end) as ""M09 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_volume end) as ""M10 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_volume end) as ""M11 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_volume end) as ""M12 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_volume end) as ""M13 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_volume end) as ""M14 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_volume end) as ""M15 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_volume end) as ""M16 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_volume end) as ""M17 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_volume end) as ""M18 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_volume end) as ""M19 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_volume end) as ""M20 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_volume end) as ""M21 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_volume end) as ""M22 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_volume end) as ""M23 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_volume end) as ""M24 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_volume end) as ""M25 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_volume end) as ""M26 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_volume end) as ""M27 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_volume end) as ""M28 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_volume end) as ""M29 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_volume end) as ""M30 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_volume end) as ""M31 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_volume end) as ""M32 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_volume end) as ""M33 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_volume end) as ""M34 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_volume end) as ""M35 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_volume end) as ""M36 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_volume end) as ""M37 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_volume end) as ""M38 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_volume end) as ""M39 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_volume end) as ""M40 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_volume end) as ""M41 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_volume end) as ""M42 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_volume end) as ""M43 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_volume end) as ""M44 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_volume end) as ""M45 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_volume end) as ""M46 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_volume end) as ""M47 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_volume end) as ""M48 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_volume end) as ""M49 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_volume end) as ""M50 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_volume end) as ""M51 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_volume end) as ""M52 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_volume end) as ""M53 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_volume end) as ""M54 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_volume end) as ""M55 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_volume end) as ""M56 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_volume end) as ""M57 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_volume end) as ""M58 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_volume end) as ""M59 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_volume end) as ""M60 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_volume end) as ""M61 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_volume end) as ""M62 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_volume end) as ""M63 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_volume end) as ""M64 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_volume end) as ""M65 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_volume end) as ""M66 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_volume end) as ""M67 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_volume end) as ""M68 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_volume end) as ""M69 Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_volume end) as ""M70 Vol"",
        ----- transactional retention volume
        sum(invoice_month_0_volume_transc) as ""M0 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_volume_transc end) as ""M01 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_volume_transc end) as ""M02 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_volume_transc end) as ""M03 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_volume_transc end) as ""M04 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_volume_transc end) as ""M05 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_volume_transc end) as ""M06 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_volume_transc end) as ""M07 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_volume_transc end) as ""M08 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_volume_transc end) as ""M09 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_volume_transc end) as ""M10 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_volume_transc end) as ""M11 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_volume_transc end) as ""M12 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_volume_transc end) as ""M13 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_volume_transc end) as ""M14 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_volume_transc end) as ""M15 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_volume_transc end) as ""M16 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_volume_transc end) as ""M17 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_volume_transc end) as ""M18 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_volume_transc end) as ""M19 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_volume_transc end) as ""M20 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_volume_transc end) as ""M21 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_volume_transc end) as ""M22 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_volume_transc end) as ""M23 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_volume_transc end) as ""M24 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_volume_transc end) as ""M25 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_volume_transc end) as ""M26 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_volume_transc end) as ""M27 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_volume_transc end) as ""M28 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_volume_transc end) as ""M29 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_volume_transc end) as ""M30 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_volume_transc end) as ""M31 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_volume_transc end) as ""M32 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_volume_transc end) as ""M33 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_volume_transc end) as ""M34 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_volume_transc end) as ""M35 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_volume_transc end) as ""M36 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_volume_transc end) as ""M37 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_volume_transc end) as ""M38 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_volume_transc end) as ""M39 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_volume_transc end) as ""M40 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_volume_transc end) as ""M41 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_volume_transc end) as ""M42 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_volume_transc end) as ""M43 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_volume_transc end) as ""M44 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_volume_transc end) as ""M45 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_volume_transc end) as ""M46 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_volume_transc end) as ""M47 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_volume_transc end) as ""M48 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_volume_transc end) as ""M49 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_volume_transc end) as ""M50 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_volume_transc end) as ""M51 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_volume_transc end) as ""M52 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_volume_transc end) as ""M53 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_volume_transc end) as ""M54 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_volume_transc end) as ""M55 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_volume_transc end) as ""M56 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_volume_transc end) as ""M57 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_volume_transc end) as ""M58 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_volume_transc end) as ""M59 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_volume_transc end) as ""M60 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_volume_transc end) as ""M61 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_volume_transc end) as ""M62 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_volume_transc end) as ""M63 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_volume_transc end) as ""M64 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_volume_transc end) as ""M65 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_volume_transc end) as ""M66 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_volume_transc end) as ""M67 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_volume_transc end) as ""M68 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_volume_transc end) as ""M69 Trnsc Vol"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_volume_transc end) as ""M70 Trnsc Vol"",
        ----- revenue
        sum(invoice_month_0_revenue) as ""M0 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_revenue end) as ""M01 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_revenue end) as ""M02 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_revenue end) as ""M03 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_revenue end) as ""M04 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_revenue end) as ""M05 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_revenue end) as ""M06 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_revenue end) as ""M07 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_revenue end) as ""M08 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_revenue end) as ""M09 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_revenue end) as ""M10 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_revenue end) as ""M11 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_revenue end) as ""M12 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_revenue end) as ""M13 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_revenue end) as ""M14 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_revenue end) as ""M15 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_revenue end) as ""M16 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_revenue end) as ""M17 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_revenue end) as ""M18 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_revenue end) as ""M19 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_revenue end) as ""M20 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_revenue end) as ""M21 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_revenue end) as ""M22 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_revenue end) as ""M23 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_revenue end) as ""M24 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_revenue end) as ""M25 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_revenue end) as ""M26 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_revenue end) as ""M27 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_revenue end) as ""M28 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_revenue end) as ""M29 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_revenue end) as ""M30 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_revenue end) as ""M31 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_revenue end) as ""M32 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_revenue end) as ""M33 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_revenue end) as ""M34 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_revenue end) as ""M35 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_revenue end) as ""M36 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_revenue end) as ""M37 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_revenue end) as ""M38 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_revenue end) as ""M39 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_revenue end) as ""M40 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_revenue end) as ""M41 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_revenue end) as ""M42 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_revenue end) as ""M43 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_revenue end) as ""M44 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_revenue end) as ""M45 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_revenue end) as ""M46 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_revenue end) as ""M47 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_revenue end) as ""M48 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_revenue end) as ""M49 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_revenue end) as ""M50 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_revenue end) as ""M51 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_revenue end) as ""M52 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_revenue end) as ""M53 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_revenue end) as ""M54 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_revenue end) as ""M55 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_revenue end) as ""M56 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_revenue end) as ""M57 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_revenue end) as ""M58 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_revenue end) as ""M59 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_revenue end) as ""M60 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_revenue end) as ""M61 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_revenue end) as ""M62 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_revenue end) as ""M63 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_revenue end) as ""M64 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_revenue end) as ""M65 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_revenue end) as ""M66 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_revenue end) as ""M67 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_revenue end) as ""M68 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_revenue end) as ""M69 Rev $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_revenue end) as ""M70 Rev $"",
        ----- cumulative revenue
        sum(invoice_month_0_revenue_cuml) as ""M0 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_revenue_cuml end) as ""M01 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_revenue_cuml end) as ""M02 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_revenue_cuml end) as ""M03 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_revenue_cuml end) as ""M04 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_revenue_cuml end) as ""M05 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_revenue_cuml end) as ""M06 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_revenue_cuml end) as ""M07 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_revenue_cuml end) as ""M08 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_revenue_cuml end) as ""M09 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_revenue_cuml end) as ""M10 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_revenue_cuml end) as ""M11 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_revenue_cuml end) as ""M12 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_revenue_cuml end) as ""M13 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_revenue_cuml end) as ""M14 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_revenue_cuml end) as ""M15 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_revenue_cuml end) as ""M16 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_revenue_cuml end) as ""M17 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_revenue_cuml end) as ""M18 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_revenue_cuml end) as ""M19 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_revenue_cuml end) as ""M20 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_revenue_cuml end) as ""M21 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_revenue_cuml end) as ""M22 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_revenue_cuml end) as ""M23 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_revenue_cuml end) as ""M24 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_revenue_cuml end) as ""M25 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_revenue_cuml end) as ""M26 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_revenue_cuml end) as ""M27 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_revenue_cuml end) as ""M28 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_revenue_cuml end) as ""M29 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_revenue_cuml end) as ""M30 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_revenue_cuml end) as ""M31 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_revenue_cuml end) as ""M32 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_revenue_cuml end) as ""M33 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_revenue_cuml end) as ""M34 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_revenue_cuml end) as ""M35 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_revenue_cuml end) as ""M36 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_revenue_cuml end) as ""M37 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_revenue_cuml end) as ""M38 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_revenue_cuml end) as ""M39 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_revenue_cuml end) as ""M40 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_revenue_cuml end) as ""M41 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_revenue_cuml end) as ""M42 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_revenue_cuml end) as ""M43 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_revenue_cuml end) as ""M44 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_revenue_cuml end) as ""M45 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_revenue_cuml end) as ""M46 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_revenue_cuml end) as ""M47 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_revenue_cuml end) as ""M48 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_revenue_cuml end) as ""M49 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_revenue_cuml end) as ""M50 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_revenue_cuml end) as ""M51 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_revenue_cuml end) as ""M52 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_revenue_cuml end) as ""M53 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_revenue_cuml end) as ""M54 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_revenue_cuml end) as ""M55 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_revenue_cuml end) as ""M56 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_revenue_cuml end) as ""M57 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_revenue_cuml end) as ""M58 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_revenue_cuml end) as ""M59 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_revenue_cuml end) as ""M60 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_revenue_cuml end) as ""M61 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_revenue_cuml end) as ""M62 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_revenue_cuml end) as ""M63 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_revenue_cuml end) as ""M64 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_revenue_cuml end) as ""M65 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_revenue_cuml end) as ""M66 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_revenue_cuml end) as ""M67 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_revenue_cuml end) as ""M68 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_revenue_cuml end) as ""M69 Rev Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_revenue_cuml end) as ""M70 Rev Cuml. $"",
        ----- ltv
        sum(invoice_month_0_ltv) as ""M0 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_ltv end) as ""M01 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_ltv end) as ""M02 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_ltv end) as ""M03 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_ltv end) as ""M04 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_ltv end) as ""M05 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_ltv end) as ""M06 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_ltv end) as ""M07 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_ltv end) as ""M08 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_ltv end) as ""M09 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_ltv end) as ""M10 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_ltv end) as ""M11 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_ltv end) as ""M12 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_ltv end) as ""M13 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_ltv end) as ""M14 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_ltv end) as ""M15 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_ltv end) as ""M16 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_ltv end) as ""M17 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_ltv end) as ""M18 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_ltv end) as ""M19 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_ltv end) as ""M20 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_ltv end) as ""M21 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_ltv end) as ""M22 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_ltv end) as ""M23 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_ltv end) as ""M24 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_ltv end) as ""M25 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_ltv end) as ""M26 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_ltv end) as ""M27 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_ltv end) as ""M28 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_ltv end) as ""M29 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_ltv end) as ""M30 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_ltv end) as ""M31 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_ltv end) as ""M32 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_ltv end) as ""M33 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_ltv end) as ""M34 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_ltv end) as ""M35 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_ltv end) as ""M36 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_ltv end) as ""M37 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_ltv end) as ""M38 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_ltv end) as ""M39 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_ltv end) as ""M40 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_ltv end) as ""M41 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_ltv end) as ""M42 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_ltv end) as ""M43 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_ltv end) as ""M44 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_ltv end) as ""M45 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_ltv end) as ""M46 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_ltv end) as ""M47 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_ltv end) as ""M48 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_ltv end) as ""M49 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_ltv end) as ""M50 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_ltv end) as ""M51 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_ltv end) as ""M52 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_ltv end) as ""M53 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_ltv end) as ""M54 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_ltv end) as ""M55 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_ltv end) as ""M56 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_ltv end) as ""M57 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_ltv end) as ""M58 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_ltv end) as ""M59 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_ltv end) as ""M60 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_ltv end) as ""M61 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_ltv end) as ""M62 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_ltv end) as ""M63 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_ltv end) as ""M64 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_ltv end) as ""M65 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_ltv end) as ""M66 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_ltv end) as ""M67 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_ltv end) as ""M68 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_ltv end) as ""M69 LTV $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_ltv end) as ""M70 LTV $"",
        ----- cumulative ltv
        sum(invoice_month_0_ltv_cuml) as ""M0 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_ltv_cuml end) as ""M01 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_ltv_cuml end) as ""M02 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_ltv_cuml end) as ""M03 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_ltv_cuml end) as ""M04 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_ltv_cuml end) as ""M05 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_ltv_cuml end) as ""M06 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_ltv_cuml end) as ""M07 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_ltv_cuml end) as ""M08 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_ltv_cuml end) as ""M09 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_ltv_cuml end) as ""M10 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_ltv_cuml end) as ""M11 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_ltv_cuml end) as ""M12 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_ltv_cuml end) as ""M13 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_ltv_cuml end) as ""M14 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_ltv_cuml end) as ""M15 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_ltv_cuml end) as ""M16 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_ltv_cuml end) as ""M17 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_ltv_cuml end) as ""M18 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_ltv_cuml end) as ""M19 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_ltv_cuml end) as ""M20 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_ltv_cuml end) as ""M21 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_ltv_cuml end) as ""M22 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_ltv_cuml end) as ""M23 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_ltv_cuml end) as ""M24 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_ltv_cuml end) as ""M25 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_ltv_cuml end) as ""M26 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_ltv_cuml end) as ""M27 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_ltv_cuml end) as ""M28 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_ltv_cuml end) as ""M29 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_ltv_cuml end) as ""M30 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_ltv_cuml end) as ""M31 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_ltv_cuml end) as ""M32 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_ltv_cuml end) as ""M33 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_ltv_cuml end) as ""M34 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_ltv_cuml end) as ""M35 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_ltv_cuml end) as ""M36 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_ltv_cuml end) as ""M37 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_ltv_cuml end) as ""M38 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_ltv_cuml end) as ""M39 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_ltv_cuml end) as ""M40 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_ltv_cuml end) as ""M41 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_ltv_cuml end) as ""M42 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_ltv_cuml end) as ""M43 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_ltv_cuml end) as ""M44 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_ltv_cuml end) as ""M45 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_ltv_cuml end) as ""M46 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_ltv_cuml end) as ""M47 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_ltv_cuml end) as ""M48 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_ltv_cuml end) as ""M49 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_ltv_cuml end) as ""M50 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_ltv_cuml end) as ""M51 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_ltv_cuml end) as ""M52 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_ltv_cuml end) as ""M53 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_ltv_cuml end) as ""M54 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_ltv_cuml end) as ""M55 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_ltv_cuml end) as ""M56 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_ltv_cuml end) as ""M57 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_ltv_cuml end) as ""M58 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_ltv_cuml end) as ""M59 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_ltv_cuml end) as ""M60 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_ltv_cuml end) as ""M61 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_ltv_cuml end) as ""M62 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_ltv_cuml end) as ""M63 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_ltv_cuml end) as ""M64 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_ltv_cuml end) as ""M65 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_ltv_cuml end) as ""M66 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_ltv_cuml end) as ""M67 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_ltv_cuml end) as ""M68 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_ltv_cuml end) as ""M69 LTV Cuml. $"",
        sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_ltv_cuml end) as ""M70 LTV Cuml. $""
        
    
    from sub_inv_flag
    where date_trunc('month',to_date(activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
    group by 1,2,3)

    select
      *
    ---- seed retention rate
    , div0(""M0 Vol"", cohort_volume)  as ""M0 Ret. Rate""
    , div0(""M01 Vol"", cohort_volume) as ""M01 Ret. Rate""
    , div0(""M02 Vol"", cohort_volume) as ""M02 Ret. Rate""
    , div0(""M03 Vol"", cohort_volume) as ""M03 Ret. Rate""
    , div0(""M04 Vol"", cohort_volume) as ""M04 Ret. Rate""
    , div0(""M05 Vol"", cohort_volume) as ""M05 Ret. Rate""
    , div0(""M06 Vol"", cohort_volume) as ""M06 Ret. Rate""
    , div0(""M07 Vol"", cohort_volume) as ""M07 Ret. Rate""
    , div0(""M08 Vol"", cohort_volume) as ""M08 Ret. Rate""
    , div0(""M09 Vol"", cohort_volume) as ""M09 Ret. Rate""
    , div0(""M10 Vol"", cohort_volume) as ""M10 Ret. Rate""
    , div0(""M11 Vol"", cohort_volume) as ""M11 Ret. Rate""
    , div0(""M12 Vol"", cohort_volume) as ""M12 Ret. Rate""
    , div0(""M13 Vol"", cohort_volume) as ""M13 Ret. Rate""
    , div0(""M14 Vol"", cohort_volume) as ""M14 Ret. Rate""
    , div0(""M15 Vol"", cohort_volume) as ""M15 Ret. Rate""
    , div0(""M16 Vol"", cohort_volume) as ""M16 Ret. Rate""
    , div0(""M17 Vol"", cohort_volume) as ""M17 Ret. Rate""
    , div0(""M18 Vol"", cohort_volume) as ""M18 Ret. Rate""
    , div0(""M19 Vol"", cohort_volume) as ""M19 Ret. Rate""
    , div0(""M20 Vol"", cohort_volume) as ""M20 Ret. Rate""
    , div0(""M21 Vol"", cohort_volume) as ""M21 Ret. Rate""
    , div0(""M22 Vol"", cohort_volume) as ""M22 Ret. Rate""
    , div0(""M23 Vol"", cohort_volume) as ""M23 Ret. Rate""
    , div0(""M24 Vol"", cohort_volume) as ""M24 Ret. Rate""
    , div0(""M25 Vol"", cohort_volume) as ""M25 Ret. Rate""
    , div0(""M26 Vol"", cohort_volume) as ""M26 Ret. Rate""
    , div0(""M27 Vol"", cohort_volume) as ""M27 Ret. Rate""
    , div0(""M28 Vol"", cohort_volume) as ""M28 Ret. Rate""
    , div0(""M29 Vol"", cohort_volume) as ""M29 Ret. Rate""
    , div0(""M30 Vol"", cohort_volume) as ""M30 Ret. Rate""
    , div0(""M31 Vol"", cohort_volume) as ""M31 Ret. Rate""
    , div0(""M32 Vol"", cohort_volume) as ""M32 Ret. Rate""
    , div0(""M33 Vol"", cohort_volume) as ""M33 Ret. Rate""
    , div0(""M34 Vol"", cohort_volume) as ""M34 Ret. Rate""
    , div0(""M35 Vol"", cohort_volume) as ""M35 Ret. Rate""
    , div0(""M36 Vol"", cohort_volume) as ""M36 Ret. Rate""
    , div0(""M37 Vol"", cohort_volume) as ""M37 Ret. Rate""
    , div0(""M38 Vol"", cohort_volume) as ""M38 Ret. Rate""
    , div0(""M39 Vol"", cohort_volume) as ""M39 Ret. Rate""
    , div0(""M40 Vol"", cohort_volume) as ""M40 Ret. Rate""
    , div0(""M41 Vol"", cohort_volume) as ""M41 Ret. Rate""
    , div0(""M42 Vol"", cohort_volume) as ""M42 Ret. Rate""
    , div0(""M43 Vol"", cohort_volume) as ""M43 Ret. Rate""
    , div0(""M44 Vol"", cohort_volume) as ""M44 Ret. Rate""
    , div0(""M45 Vol"", cohort_volume) as ""M45 Ret. Rate""
    , div0(""M46 Vol"", cohort_volume) as ""M46 Ret. Rate""
    , div0(""M47 Vol"", cohort_volume) as ""M47 Ret. Rate""
    , div0(""M48 Vol"", cohort_volume) as ""M48 Ret. Rate""
    , div0(""M49 Vol"", cohort_volume) as ""M49 Ret. Rate""
    , div0(""M50 Vol"", cohort_volume) as ""M50 Ret. Rate""
    , div0(""M51 Vol"", cohort_volume) as ""M51 Ret. Rate""
    , div0(""M52 Vol"", cohort_volume) as ""M52 Ret. Rate""
    , div0(""M53 Vol"", cohort_volume) as ""M53 Ret. Rate""
    , div0(""M54 Vol"", cohort_volume) as ""M54 Ret. Rate""
    , div0(""M55 Vol"", cohort_volume) as ""M55 Ret. Rate""
    , div0(""M56 Vol"", cohort_volume) as ""M56 Ret. Rate""
    , div0(""M57 Vol"", cohort_volume) as ""M57 Ret. Rate""
    , div0(""M58 Vol"", cohort_volume) as ""M58 Ret. Rate""
    , div0(""M59 Vol"", cohort_volume) as ""M59 Ret. Rate""
    , div0(""M60 Vol"", cohort_volume) as ""M60 Ret. Rate""
    , div0(""M61 Vol"", cohort_volume) as ""M61 Ret. Rate""
    , div0(""M62 Vol"", cohort_volume) as ""M62 Ret. Rate""
    , div0(""M63 Vol"", cohort_volume) as ""M63 Ret. Rate""
    , div0(""M64 Vol"", cohort_volume) as ""M64 Ret. Rate""
    , div0(""M65 Vol"", cohort_volume) as ""M65 Ret. Rate""
    , div0(""M66 Vol"", cohort_volume) as ""M66 Ret. Rate""
    , div0(""M67 Vol"", cohort_volume) as ""M67 Ret. Rate""
    , div0(""M68 Vol"", cohort_volume) as ""M68 Ret. Rate""
    , div0(""M69 Vol"", cohort_volume) as ""M69 Ret. Rate""
    , div0(""M70 Vol"", cohort_volume) as ""M70 Ret. Rate""
    ---- transaction retention rate
    , div0(""M0 Trnsc Vol"", cohort_volume)  as ""M0 Trnsc Ret. Rate""
    , div0(""M01 Trnsc Vol"", cohort_volume) as ""M01 Trnsc Ret. Rate""
    , div0(""M02 Trnsc Vol"", cohort_volume) as ""M02 Trnsc Ret. Rate""
    , div0(""M03 Trnsc Vol"", cohort_volume) as ""M03 Trnsc Ret. Rate""
    , div0(""M04 Trnsc Vol"", cohort_volume) as ""M04 Trnsc Ret. Rate""
    , div0(""M05 Trnsc Vol"", cohort_volume) as ""M05 Trnsc Ret. Rate""
    , div0(""M06 Trnsc Vol"", cohort_volume) as ""M06 Trnsc Ret. Rate""
    , div0(""M07 Trnsc Vol"", cohort_volume) as ""M07 Trnsc Ret. Rate""
    , div0(""M08 Trnsc Vol"", cohort_volume) as ""M08 Trnsc Ret. Rate""
    , div0(""M09 Trnsc Vol"", cohort_volume) as ""M09 Trnsc Ret. Rate""
    , div0(""M10 Trnsc Vol"", cohort_volume) as ""M10 Trnsc Ret. Rate""
    , div0(""M11 Trnsc Vol"", cohort_volume) as ""M11 Trnsc Ret. Rate""
    , div0(""M12 Trnsc Vol"", cohort_volume) as ""M12 Trnsc Ret. Rate""
    , div0(""M13 Trnsc Vol"", cohort_volume) as ""M13 Trnsc Ret. Rate""
    , div0(""M14 Trnsc Vol"", cohort_volume) as ""M14 Trnsc Ret. Rate""
    , div0(""M15 Trnsc Vol"", cohort_volume) as ""M15 Trnsc Ret. Rate""
    , div0(""M16 Trnsc Vol"", cohort_volume) as ""M16 Trnsc Ret. Rate""
    , div0(""M17 Trnsc Vol"", cohort_volume) as ""M17 Trnsc Ret. Rate""
    , div0(""M18 Trnsc Vol"", cohort_volume) as ""M18 Trnsc Ret. Rate""
    , div0(""M19 Trnsc Vol"", cohort_volume) as ""M19 Trnsc Ret. Rate""
    , div0(""M20 Trnsc Vol"", cohort_volume) as ""M20 Trnsc Ret. Rate""
    , div0(""M21 Trnsc Vol"", cohort_volume) as ""M21 Trnsc Ret. Rate""
    , div0(""M22 Trnsc Vol"", cohort_volume) as ""M22 Trnsc Ret. Rate""
    , div0(""M23 Trnsc Vol"", cohort_volume) as ""M23 Trnsc Ret. Rate""
    , div0(""M24 Trnsc Vol"", cohort_volume) as ""M24 Trnsc Ret. Rate""
    , div0(""M25 Trnsc Vol"", cohort_volume) as ""M25 Trnsc Ret. Rate""
    , div0(""M26 Trnsc Vol"", cohort_volume) as ""M26 Trnsc Ret. Rate""
    , div0(""M27 Trnsc Vol"", cohort_volume) as ""M27 Trnsc Ret. Rate""
    , div0(""M28 Trnsc Vol"", cohort_volume) as ""M28 Trnsc Ret. Rate""
    , div0(""M29 Trnsc Vol"", cohort_volume) as ""M29 Trnsc Ret. Rate""
    , div0(""M30 Trnsc Vol"", cohort_volume) as ""M30 Trnsc Ret. Rate""
    , div0(""M31 Trnsc Vol"", cohort_volume) as ""M31 Trnsc Ret. Rate""
    , div0(""M32 Trnsc Vol"", cohort_volume) as ""M32 Trnsc Ret. Rate""
    , div0(""M33 Trnsc Vol"", cohort_volume) as ""M33 Trnsc Ret. Rate""
    , div0(""M34 Trnsc Vol"", cohort_volume) as ""M34 Trnsc Ret. Rate""
    , div0(""M35 Trnsc Vol"", cohort_volume) as ""M35 Trnsc Ret. Rate""
    , div0(""M36 Trnsc Vol"", cohort_volume) as ""M36 Trnsc Ret. Rate""
    , div0(""M37 Trnsc Vol"", cohort_volume) as ""M37 Trnsc Ret. Rate""
    , div0(""M38 Trnsc Vol"", cohort_volume) as ""M38 Trnsc Ret. Rate""
    , div0(""M39 Trnsc Vol"", cohort_volume) as ""M39 Trnsc Ret. Rate""
    , div0(""M40 Trnsc Vol"", cohort_volume) as ""M40 Trnsc Ret. Rate""
    , div0(""M41 Trnsc Vol"", cohort_volume) as ""M41 Trnsc Ret. Rate""
    , div0(""M42 Trnsc Vol"", cohort_volume) as ""M42 Trnsc Ret. Rate""
    , div0(""M43 Trnsc Vol"", cohort_volume) as ""M43 Trnsc Ret. Rate""
    , div0(""M44 Trnsc Vol"", cohort_volume) as ""M44 Trnsc Ret. Rate""
    , div0(""M45 Trnsc Vol"", cohort_volume) as ""M45 Trnsc Ret. Rate""
    , div0(""M46 Trnsc Vol"", cohort_volume) as ""M46 Trnsc Ret. Rate""
    , div0(""M47 Trnsc Vol"", cohort_volume) as ""M47 Trnsc Ret. Rate""
    , div0(""M48 Trnsc Vol"", cohort_volume) as ""M48 Trnsc Ret. Rate""
    , div0(""M49 Trnsc Vol"", cohort_volume) as ""M49 Trnsc Ret. Rate""
    , div0(""M50 Trnsc Vol"", cohort_volume) as ""M50 Trnsc Ret. Rate""
    , div0(""M51 Trnsc Vol"", cohort_volume) as ""M51 Trnsc Ret. Rate""
    , div0(""M52 Trnsc Vol"", cohort_volume) as ""M52 Trnsc Ret. Rate""
    , div0(""M53 Trnsc Vol"", cohort_volume) as ""M53 Trnsc Ret. Rate""
    , div0(""M54 Trnsc Vol"", cohort_volume) as ""M54 Trnsc Ret. Rate""
    , div0(""M55 Trnsc Vol"", cohort_volume) as ""M55 Trnsc Ret. Rate""
    , div0(""M56 Trnsc Vol"", cohort_volume) as ""M56 Trnsc Ret. Rate""
    , div0(""M57 Trnsc Vol"", cohort_volume) as ""M57 Trnsc Ret. Rate""
    , div0(""M58 Trnsc Vol"", cohort_volume) as ""M58 Trnsc Ret. Rate""
    , div0(""M59 Trnsc Vol"", cohort_volume) as ""M59 Trnsc Ret. Rate""
    , div0(""M60 Trnsc Vol"", cohort_volume) as ""M60 Trnsc Ret. Rate""
    , div0(""M61 Trnsc Vol"", cohort_volume) as ""M61 Trnsc Ret. Rate""
    , div0(""M62 Trnsc Vol"", cohort_volume) as ""M62 Trnsc Ret. Rate""
    , div0(""M63 Trnsc Vol"", cohort_volume) as ""M63 Trnsc Ret. Rate""
    , div0(""M64 Trnsc Vol"", cohort_volume) as ""M64 Trnsc Ret. Rate""
    , div0(""M65 Trnsc Vol"", cohort_volume) as ""M65 Trnsc Ret. Rate""
    , div0(""M66 Trnsc Vol"", cohort_volume) as ""M66 Trnsc Ret. Rate""
    , div0(""M67 Trnsc Vol"", cohort_volume) as ""M67 Trnsc Ret. Rate""
    , div0(""M68 Trnsc Vol"", cohort_volume) as ""M68 Trnsc Ret. Rate""
    , div0(""M69 Trnsc Vol"", cohort_volume) as ""M69 Trnsc Ret. Rate""
    , div0(""M70 Trnsc Vol"", cohort_volume) as ""M70 Trnsc Ret. Rate""
     ---- cuml. revenue per volume
    , div0(""M0 Rev Cuml. $"", cohort_volume)  as ""M0 Rev Cuml. $ Per Vol.""
    , div0(""M01 Rev Cuml. $"", cohort_volume) as ""M01 Rev Cuml. $ Per Vol.""
    , div0(""M02 Rev Cuml. $"", cohort_volume) as ""M02 Rev Cuml. $ Per Vol.""
    , div0(""M03 Rev Cuml. $"", cohort_volume) as ""M03 Rev Cuml. $ Per Vol.""
    , div0(""M04 Rev Cuml. $"", cohort_volume) as ""M04 Rev Cuml. $ Per Vol.""
    , div0(""M05 Rev Cuml. $"", cohort_volume) as ""M05 Rev Cuml. $ Per Vol.""
    , div0(""M06 Rev Cuml. $"", cohort_volume) as ""M06 Rev Cuml. $ Per Vol.""
    , div0(""M07 Rev Cuml. $"", cohort_volume) as ""M07 Rev Cuml. $ Per Vol.""
    , div0(""M08 Rev Cuml. $"", cohort_volume) as ""M08 Rev Cuml. $ Per Vol.""
    , div0(""M09 Rev Cuml. $"", cohort_volume) as ""M09 Rev Cuml. $ Per Vol.""
    , div0(""M10 Rev Cuml. $"", cohort_volume) as ""M10 Rev Cuml. $ Per Vol.""
    , div0(""M11 Rev Cuml. $"", cohort_volume) as ""M11 Rev Cuml. $ Per Vol.""
    , div0(""M12 Rev Cuml. $"", cohort_volume) as ""M12 Rev Cuml. $ Per Vol.""
    , div0(""M13 Rev Cuml. $"", cohort_volume) as ""M13 Rev Cuml. $ Per Vol.""
    , div0(""M14 Rev Cuml. $"", cohort_volume) as ""M14 Rev Cuml. $ Per Vol.""
    , div0(""M15 Rev Cuml. $"", cohort_volume) as ""M15 Rev Cuml. $ Per Vol.""
    , div0(""M16 Rev Cuml. $"", cohort_volume) as ""M16 Rev Cuml. $ Per Vol.""
    , div0(""M17 Rev Cuml. $"", cohort_volume) as ""M17 Rev Cuml. $ Per Vol.""
    , div0(""M18 Rev Cuml. $"", cohort_volume) as ""M18 Rev Cuml. $ Per Vol.""
    , div0(""M19 Rev Cuml. $"", cohort_volume) as ""M19 Rev Cuml. $ Per Vol.""
    , div0(""M20 Rev Cuml. $"", cohort_volume) as ""M20 Rev Cuml. $ Per Vol.""
    , div0(""M21 Rev Cuml. $"", cohort_volume) as ""M21 Rev Cuml. $ Per Vol.""
    , div0(""M22 Rev Cuml. $"", cohort_volume) as ""M22 Rev Cuml. $ Per Vol.""
    , div0(""M23 Rev Cuml. $"", cohort_volume) as ""M23 Rev Cuml. $ Per Vol.""
    , div0(""M24 Rev Cuml. $"", cohort_volume) as ""M24 Rev Cuml. $ Per Vol.""
    , div0(""M25 Rev Cuml. $"", cohort_volume) as ""M25 Rev Cuml. $ Per Vol.""
    , div0(""M26 Rev Cuml. $"", cohort_volume) as ""M26 Rev Cuml. $ Per Vol.""
    , div0(""M27 Rev Cuml. $"", cohort_volume) as ""M27 Rev Cuml. $ Per Vol.""
    , div0(""M28 Rev Cuml. $"", cohort_volume) as ""M28 Rev Cuml. $ Per Vol.""
    , div0(""M29 Rev Cuml. $"", cohort_volume) as ""M29 Rev Cuml. $ Per Vol.""
    , div0(""M30 Rev Cuml. $"", cohort_volume) as ""M30 Rev Cuml. $ Per Vol.""
    , div0(""M31 Rev Cuml. $"", cohort_volume) as ""M31 Rev Cuml. $ Per Vol.""
    , div0(""M32 Rev Cuml. $"", cohort_volume) as ""M32 Rev Cuml. $ Per Vol.""
    , div0(""M33 Rev Cuml. $"", cohort_volume) as ""M33 Rev Cuml. $ Per Vol.""
    , div0(""M34 Rev Cuml. $"", cohort_volume) as ""M34 Rev Cuml. $ Per Vol.""
    , div0(""M35 Rev Cuml. $"", cohort_volume) as ""M35 Rev Cuml. $ Per Vol.""
    , div0(""M36 Rev Cuml. $"", cohort_volume) as ""M36 Rev Cuml. $ Per Vol.""
    , div0(""M37 Rev Cuml. $"", cohort_volume) as ""M37 Rev Cuml. $ Per Vol.""
    , div0(""M38 Rev Cuml. $"", cohort_volume) as ""M38 Rev Cuml. $ Per Vol.""
    , div0(""M39 Rev Cuml. $"", cohort_volume) as ""M39 Rev Cuml. $ Per Vol.""
    , div0(""M40 Rev Cuml. $"", cohort_volume) as ""M40 Rev Cuml. $ Per Vol.""
    , div0(""M41 Rev Cuml. $"", cohort_volume) as ""M41 Rev Cuml. $ Per Vol.""
    , div0(""M42 Rev Cuml. $"", cohort_volume) as ""M42 Rev Cuml. $ Per Vol.""
    , div0(""M43 Rev Cuml. $"", cohort_volume) as ""M43 Rev Cuml. $ Per Vol.""
    , div0(""M44 Rev Cuml. $"", cohort_volume) as ""M44 Rev Cuml. $ Per Vol.""
    , div0(""M45 Rev Cuml. $"", cohort_volume) as ""M45 Rev Cuml. $ Per Vol.""
    , div0(""M46 Rev Cuml. $"", cohort_volume) as ""M46 Rev Cuml. $ Per Vol.""
    , div0(""M47 Rev Cuml. $"", cohort_volume) as ""M47 Rev Cuml. $ Per Vol.""
    , div0(""M48 Rev Cuml. $"", cohort_volume) as ""M48 Rev Cuml. $ Per Vol.""
    , div0(""M49 Rev Cuml. $"", cohort_volume) as ""M49 Rev Cuml. $ Per Vol.""
    , div0(""M50 Rev Cuml. $"", cohort_volume) as ""M50 Rev Cuml. $ Per Vol.""
    , div0(""M51 Rev Cuml. $"", cohort_volume) as ""M51 Rev Cuml. $ Per Vol.""
    , div0(""M52 Rev Cuml. $"", cohort_volume) as ""M52 Rev Cuml. $ Per Vol.""
    , div0(""M53 Rev Cuml. $"", cohort_volume) as ""M53 Rev Cuml. $ Per Vol.""
    , div0(""M54 Rev Cuml. $"", cohort_volume) as ""M54 Rev Cuml. $ Per Vol.""
    , div0(""M55 Rev Cuml. $"", cohort_volume) as ""M55 Rev Cuml. $ Per Vol.""
    , div0(""M56 Rev Cuml. $"", cohort_volume) as ""M56 Rev Cuml. $ Per Vol.""
    , div0(""M57 Rev Cuml. $"", cohort_volume) as ""M57 Rev Cuml. $ Per Vol.""
    , div0(""M58 Rev Cuml. $"", cohort_volume) as ""M58 Rev Cuml. $ Per Vol.""
    , div0(""M59 Rev Cuml. $"", cohort_volume) as ""M59 Rev Cuml. $ Per Vol.""
    , div0(""M60 Rev Cuml. $"", cohort_volume) as ""M60 Rev Cuml. $ Per Vol.""
    , div0(""M61 Rev Cuml. $"", cohort_volume) as ""M61 Rev Cuml. $ Per Vol.""
    , div0(""M62 Rev Cuml. $"", cohort_volume) as ""M62 Rev Cuml. $ Per Vol.""
    , div0(""M63 Rev Cuml. $"", cohort_volume) as ""M63 Rev Cuml. $ Per Vol.""
    , div0(""M64 Rev Cuml. $"", cohort_volume) as ""M64 Rev Cuml. $ Per Vol.""
    , div0(""M65 Rev Cuml. $"", cohort_volume) as ""M65 Rev Cuml. $ Per Vol.""
    , div0(""M66 Rev Cuml. $"", cohort_volume) as ""M66 Rev Cuml. $ Per Vol.""
    , div0(""M67 Rev Cuml. $"", cohort_volume) as ""M67 Rev Cuml. $ Per Vol.""
    , div0(""M68 Rev Cuml. $"", cohort_volume) as ""M68 Rev Cuml. $ Per Vol.""
    , div0(""M69 Rev Cuml. $"", cohort_volume) as ""M69 Rev Cuml. $ Per Vol.""
    , div0(""M70 Rev Cuml. $"", cohort_volume) as ""M70 Rev Cuml. $ Per Vol.""
    ---- cuml. ltv per volume
    , div0(""M0 LTV Cuml. $"", cohort_volume)  as ""M0 LTV Cuml. $ Per Vol.""
    , div0(""M01 LTV Cuml. $"", cohort_volume) as ""M01 LTV Cuml. $ Per Vol.""
    , div0(""M02 LTV Cuml. $"", cohort_volume) as ""M02 LTV Cuml. $ Per Vol.""
    , div0(""M03 LTV Cuml. $"", cohort_volume) as ""M03 LTV Cuml. $ Per Vol.""
    , div0(""M04 LTV Cuml. $"", cohort_volume) as ""M04 LTV Cuml. $ Per Vol.""
    , div0(""M05 LTV Cuml. $"", cohort_volume) as ""M05 LTV Cuml. $ Per Vol.""
    , div0(""M06 LTV Cuml. $"", cohort_volume) as ""M06 LTV Cuml. $ Per Vol.""
    , div0(""M07 LTV Cuml. $"", cohort_volume) as ""M07 LTV Cuml. $ Per Vol.""
    , div0(""M08 LTV Cuml. $"", cohort_volume) as ""M08 LTV Cuml. $ Per Vol.""
    , div0(""M09 LTV Cuml. $"", cohort_volume) as ""M09 LTV Cuml. $ Per Vol.""
    , div0(""M10 LTV Cuml. $"", cohort_volume) as ""M10 LTV Cuml. $ Per Vol.""
    , div0(""M11 LTV Cuml. $"", cohort_volume) as ""M11 LTV Cuml. $ Per Vol.""
    , div0(""M12 LTV Cuml. $"", cohort_volume) as ""M12 LTV Cuml. $ Per Vol.""
    , div0(""M13 LTV Cuml. $"", cohort_volume) as ""M13 LTV Cuml. $ Per Vol.""
    , div0(""M14 LTV Cuml. $"", cohort_volume) as ""M14 LTV Cuml. $ Per Vol.""
    , div0(""M15 LTV Cuml. $"", cohort_volume) as ""M15 LTV Cuml. $ Per Vol.""
    , div0(""M16 LTV Cuml. $"", cohort_volume) as ""M16 LTV Cuml. $ Per Vol.""
    , div0(""M17 LTV Cuml. $"", cohort_volume) as ""M17 LTV Cuml. $ Per Vol.""
    , div0(""M18 LTV Cuml. $"", cohort_volume) as ""M18 LTV Cuml. $ Per Vol.""
    , div0(""M19 LTV Cuml. $"", cohort_volume) as ""M19 LTV Cuml. $ Per Vol.""
    , div0(""M20 LTV Cuml. $"", cohort_volume) as ""M20 LTV Cuml. $ Per Vol.""
    , div0(""M21 LTV Cuml. $"", cohort_volume) as ""M21 LTV Cuml. $ Per Vol.""
    , div0(""M22 LTV Cuml. $"", cohort_volume) as ""M22 LTV Cuml. $ Per Vol.""
    , div0(""M23 LTV Cuml. $"", cohort_volume) as ""M23 LTV Cuml. $ Per Vol.""
    , div0(""M24 LTV Cuml. $"", cohort_volume) as ""M24 LTV Cuml. $ Per Vol.""
    , div0(""M25 LTV Cuml. $"", cohort_volume) as ""M25 LTV Cuml. $ Per Vol.""
    , div0(""M26 LTV Cuml. $"", cohort_volume) as ""M26 LTV Cuml. $ Per Vol.""
    , div0(""M27 LTV Cuml. $"", cohort_volume) as ""M27 LTV Cuml. $ Per Vol.""
    , div0(""M28 LTV Cuml. $"", cohort_volume) as ""M28 LTV Cuml. $ Per Vol.""
    , div0(""M29 LTV Cuml. $"", cohort_volume) as ""M29 LTV Cuml. $ Per Vol.""
    , div0(""M30 LTV Cuml. $"", cohort_volume) as ""M30 LTV Cuml. $ Per Vol.""
    , div0(""M31 LTV Cuml. $"", cohort_volume) as ""M31 LTV Cuml. $ Per Vol.""
    , div0(""M32 LTV Cuml. $"", cohort_volume) as ""M32 LTV Cuml. $ Per Vol.""
    , div0(""M33 LTV Cuml. $"", cohort_volume) as ""M33 LTV Cuml. $ Per Vol.""
    , div0(""M34 LTV Cuml. $"", cohort_volume) as ""M34 LTV Cuml. $ Per Vol.""
    , div0(""M35 LTV Cuml. $"", cohort_volume) as ""M35 LTV Cuml. $ Per Vol.""
    , div0(""M36 LTV Cuml. $"", cohort_volume) as ""M36 LTV Cuml. $ Per Vol.""
    , div0(""M37 LTV Cuml. $"", cohort_volume) as ""M37 LTV Cuml. $ Per Vol.""
    , div0(""M38 LTV Cuml. $"", cohort_volume) as ""M38 LTV Cuml. $ Per Vol.""
    , div0(""M39 LTV Cuml. $"", cohort_volume) as ""M39 LTV Cuml. $ Per Vol.""
    , div0(""M40 LTV Cuml. $"", cohort_volume) as ""M40 LTV Cuml. $ Per Vol.""
    , div0(""M41 LTV Cuml. $"", cohort_volume) as ""M41 LTV Cuml. $ Per Vol.""
    , div0(""M42 LTV Cuml. $"", cohort_volume) as ""M42 LTV Cuml. $ Per Vol.""
    , div0(""M43 LTV Cuml. $"", cohort_volume) as ""M43 LTV Cuml. $ Per Vol.""
    , div0(""M44 LTV Cuml. $"", cohort_volume) as ""M44 LTV Cuml. $ Per Vol.""
    , div0(""M45 LTV Cuml. $"", cohort_volume) as ""M45 LTV Cuml. $ Per Vol.""
    , div0(""M46 LTV Cuml. $"", cohort_volume) as ""M46 LTV Cuml. $ Per Vol.""
    , div0(""M47 LTV Cuml. $"", cohort_volume) as ""M47 LTV Cuml. $ Per Vol.""
    , div0(""M48 LTV Cuml. $"", cohort_volume) as ""M48 LTV Cuml. $ Per Vol.""
    , div0(""M49 LTV Cuml. $"", cohort_volume) as ""M49 LTV Cuml. $ Per Vol.""
    , div0(""M50 LTV Cuml. $"", cohort_volume) as ""M50 LTV Cuml. $ Per Vol.""
    , div0(""M51 LTV Cuml. $"", cohort_volume) as ""M51 LTV Cuml. $ Per Vol.""
    , div0(""M52 LTV Cuml. $"", cohort_volume) as ""M52 LTV Cuml. $ Per Vol.""
    , div0(""M53 LTV Cuml. $"", cohort_volume) as ""M53 LTV Cuml. $ Per Vol.""
    , div0(""M54 LTV Cuml. $"", cohort_volume) as ""M54 LTV Cuml. $ Per Vol.""
    , div0(""M55 LTV Cuml. $"", cohort_volume) as ""M55 LTV Cuml. $ Per Vol.""
    , div0(""M56 LTV Cuml. $"", cohort_volume) as ""M56 LTV Cuml. $ Per Vol.""
    , div0(""M57 LTV Cuml. $"", cohort_volume) as ""M57 LTV Cuml. $ Per Vol.""
    , div0(""M58 LTV Cuml. $"", cohort_volume) as ""M58 LTV Cuml. $ Per Vol.""
    , div0(""M59 LTV Cuml. $"", cohort_volume) as ""M59 LTV Cuml. $ Per Vol.""
    , div0(""M60 LTV Cuml. $"", cohort_volume) as ""M60 LTV Cuml. $ Per Vol.""
    , div0(""M61 LTV Cuml. $"", cohort_volume) as ""M61 LTV Cuml. $ Per Vol.""
    , div0(""M62 LTV Cuml. $"", cohort_volume) as ""M62 LTV Cuml. $ Per Vol.""
    , div0(""M63 LTV Cuml. $"", cohort_volume) as ""M63 LTV Cuml. $ Per Vol.""
    , div0(""M64 LTV Cuml. $"", cohort_volume) as ""M64 LTV Cuml. $ Per Vol.""
    , div0(""M65 LTV Cuml. $"", cohort_volume) as ""M65 LTV Cuml. $ Per Vol.""
    , div0(""M66 LTV Cuml. $"", cohort_volume) as ""M66 LTV Cuml. $ Per Vol.""
    , div0(""M67 LTV Cuml. $"", cohort_volume) as ""M67 LTV Cuml. $ Per Vol.""
    , div0(""M68 LTV Cuml. $"", cohort_volume) as ""M68 LTV Cuml. $ Per Vol.""
    , div0(""M69 LTV Cuml. $"", cohort_volume) as ""M69 LTV Cuml. $ Per Vol.""
    , div0(""M70 LTV Cuml. $"", cohort_volume) as ""M70 LTV Cuml. $ Per Vol.""
    from final
    order by 1;"
"V_COHORT_TOTAL_CUS_COHORT","create or replace view SEED_DATA.DEV.V_COHORT_TOTAL_CUS_COHORT(
	CREATED_MONTH_YEAR,
	COHORT_QUANTITY,
	ACTIVE_MONTH_0,
	ACTIVE_MONTH_1,
	ACTIVE_MONTH_2,
	ACTIVE_MONTH_3,
	ACTIVE_MONTH_4,
	ACTIVE_MONTH_5,
	ACTIVE_MONTH_6,
	ACTIVE_MONTH_7,
	ACTIVE_MONTH_8,
	ACTIVE_MONTH_9,
	ACTIVE_MONTH_10,
	ACTIVE_MONTH_11,
	ACTIVE_MONTH_12,
	ACTIVE_MONTH_13,
	ACTIVE_MONTH_14,
	ACTIVE_MONTH_15,
	ACTIVE_MONTH_16,
	ACTIVE_MONTH_17,
	ACTIVE_MONTH_18,
	ACTIVE_MONTH_19,
	ACTIVE_MONTH_20,
	ACTIVE_MONTH_21,
	ACTIVE_MONTH_22,
	ACTIVE_MONTH_23,
	ACTIVE_MONTH_24,
	ACTIVE_MONTH_25,
	ACTIVE_MONTH_26,
	ACTIVE_MONTH_27,
	ACTIVE_MONTH_28,
	ACTIVE_MONTH_29,
	ACTIVE_MONTH_30,
	ACTIVE_MONTH_31,
	ACTIVE_MONTH_32,
	ACTIVE_MONTH_33,
	ACTIVE_MONTH_34,
	ACTIVE_MONTH_35,
	ACTIVE_MONTH_36,
	ACTIVE_MONTH_37,
	ACTIVE_MONTH_38,
	ACTIVE_MONTH_39,
	ACTIVE_MONTH_40,
	ACTIVE_MONTH_41,
	ACTIVE_MONTH_42,
	ACTIVE_MONTH_43,
	ACTIVE_MONTH_44,
	ACTIVE_MONTH_45,
	ACTIVE_MONTH_46,
	ACTIVE_MONTH_47,
	ACTIVE_MONTH_48,
	ACTIVE_MONTH_49,
	ACTIVE_MONTH_50,
	ACTIVE_MONTH_51,
	ACTIVE_MONTH_52,
	ACTIVE_MONTH_53,
	ACTIVE_MONTH_54,
	ACTIVE_MONTH_55,
	ACTIVE_MONTH_56,
	ACTIVE_MONTH_57,
	ACTIVE_MONTH_58,
	ACTIVE_MONTH_59,
	ACTIVE_MONTH_60,
	ACTIVE_MONTH_61,
	ACTIVE_MONTH_62,
	ACTIVE_MONTH_63,
	ACTIVE_MONTH_64,
	ACTIVE_MONTH_65,
	ACTIVE_MONTH_66,
	ACTIVE_MONTH_67,
	ACTIVE_MONTH_68,
	ACTIVE_MONTH_69,
	ACTIVE_MONTH_70
) as 

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_SKU_ADJUSTED ---- all orders and adjusted orders for SRP
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.invoice_date))/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.invoice_date))/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
), 

sub_inv_flag as
(
    select customer_id, account_activated_at,
       max(case when invoice_month = 0 or invoice_month = -1 then 1 else null end) as invoice_month_0_flag,
        max(case when cancelled_month <= 0 and invoice_month = 1 then 1
                when cancelled_month <= 0 then 0
                when invoice_month = 0 or invoice_month = 1 then 1 
                else null end) as invoice_month_1_flag,
        max(case when cancelled_month <= 1 and invoice_month = 2 then 1
                when cancelled_month <= 1 then 0
                when invoice_month = 1 or invoice_month = 2 then 1
                else null end) as invoice_month_2_flag,
        max(case when cancelled_month <= 2 and invoice_month = 3 then 1 
                when cancelled_month <= 2 then 0
                when invoice_month = 2 or invoice_month = 3 then 1 
                else null end) as invoice_month_3_flag,
        max(case when cancelled_month <= 3 and invoice_month = 4 then 1
                when cancelled_month <= 3 then 0
                when invoice_month = 3 or invoice_month = 4 then 1
                else null end) as invoice_month_4_flag,
        max(case when cancelled_month <= 4 and invoice_month = 5 then 1
                when cancelled_month <= 4 then 0
                when invoice_month = 4 or invoice_month = 5 then 1 
                else null end) as invoice_month_5_flag,
        max(case when cancelled_month <= 5 and invoice_month = 6 then 1
                when cancelled_month <= 5 then 0
                when invoice_month = 5 or invoice_month = 6 then 1
                else null end) as invoice_month_6_flag,
        max(case when cancelled_month <= 6 and invoice_month = 7 then 1
                when cancelled_month <= 6 then 0
                when invoice_month = 6 or invoice_month = 7 then 1 
                else null end) as invoice_month_7_flag,
        max(case when cancelled_month <= 7 and invoice_month = 8 then 1
                when cancelled_month <= 7 then 0
                when invoice_month = 7 or invoice_month = 8 then 1
                else null end) as invoice_month_8_flag,
        max(case when cancelled_month <= 8 and invoice_month = 9 then 1
                when cancelled_month <= 8 then 0
                when invoice_month = 8 or invoice_month = 9 then 1 
                else null end) as invoice_month_9_flag,
        max(case when cancelled_month <= 9 and invoice_month = 10 then 1
                when cancelled_month <= 9 then 0
                when invoice_month = 9 or invoice_month = 10 then 1
                else null end) as invoice_month_10_flag,
        max(case when cancelled_month <= 10 and invoice_month = 11 then 1
                when cancelled_month <= 10 then 0
                when invoice_month = 10 or invoice_month = 11 then 1 
                else null end) as invoice_month_11_flag,
        max(case when cancelled_month <= 11 and invoice_month = 12 then 1
                when cancelled_month <= 11 then 0
                when invoice_month = 11 or invoice_month = 12 then 1
                else null end) as invoice_month_12_flag,
        max(case when cancelled_month <= 12 and invoice_month = 13 then 1
                when cancelled_month <= 12 then 0
                when invoice_month = 12 or invoice_month = 13 then 1 
                else null end) as invoice_month_13_flag,
        max(case when cancelled_month <= 13 and invoice_month = 14 then 1
                when cancelled_month <= 13 then 0
                when invoice_month = 13 or invoice_month = 14 then 1
                else null end) as invoice_month_14_flag,
        max(case when cancelled_month <= 14 and invoice_month = 15 then 1
                when cancelled_month <= 14 then 0
                when invoice_month = 14 or invoice_month = 15 then 1 
                else null end) as invoice_month_15_flag,
        max(case when cancelled_month <= 15 and invoice_month = 16 then 1
                when cancelled_month <= 15 then 0
                when invoice_month = 15 or invoice_month = 16 then 1
                else null end) as invoice_month_16_flag,
        max(case when cancelled_month <= 16 and invoice_month = 17 then 1 
                when cancelled_month <= 16 then 0
                when invoice_month = 16 or invoice_month = 17 then 1 
                else null end) as invoice_month_17_flag,
        max(case when cancelled_month <= 17 and invoice_month = 18 then 1
                when cancelled_month <= 17 then 0
                when invoice_month = 17 or invoice_month = 18 then 1
                else null end) as invoice_month_18_flag,
        max(case when cancelled_month <= 18 and invoice_month = 19 then 1
                when cancelled_month <= 18 then 0
                when invoice_month = 18 or invoice_month = 19 then 1 
                else null end) as invoice_month_19_flag,
        max(case when cancelled_month <= 19 and invoice_month = 20 then 1
                when cancelled_month <= 19 then 0
                when invoice_month = 19 or invoice_month = 20 then 1
                else null end) as invoice_month_20_flag,
        max(case when cancelled_month <= 20 and invoice_month = 21 then 1
                when cancelled_month <= 20 then 0
                when invoice_month = 20 or invoice_month = 21 then 1 
                else null end) as invoice_month_21_flag,
        max(case when cancelled_month <= 21 and invoice_month = 22 then 1
                when cancelled_month <= 21 then 0
                when invoice_month = 21 or invoice_month = 22 then 1
                else null end) as invoice_month_22_flag,
        max(case when cancelled_month <= 22 and invoice_month = 23 then 1
                when cancelled_month <= 22 then 0
                when invoice_month = 22 or invoice_month = 23 then 1 
                else null end) as invoice_month_23_flag,
        max(case when cancelled_month <= 23 and invoice_month = 24 then 1
                when cancelled_month <= 23 then 0
                when invoice_month = 23 or invoice_month = 24 then 1
                else null end) as invoice_month_24_flag,
        max(case when cancelled_month <= 24 and invoice_month = 25 then 1
                when cancelled_month <= 24 then 0
                when invoice_month = 24 or invoice_month = 25 then 1 
                else null end) as invoice_month_25_flag,
        max(case when cancelled_month <= 25 and invoice_month = 26 then 1
                when cancelled_month <= 25 then 0
                when invoice_month = 25 or invoice_month = 26 then 1
                else null end) as invoice_month_26_flag,
        max(case when cancelled_month <= 26 and invoice_month = 27 then 1
                when cancelled_month <= 26 then 0
                when invoice_month = 26 or invoice_month = 27 then 1 
                else null end) as invoice_month_27_flag,
        max(case when cancelled_month <= 27 and invoice_month = 28 then 1
                when cancelled_month <= 27 then 0
                when invoice_month = 27 or invoice_month = 28 then 1
                else null end) as invoice_month_28_flag,
        max(case when cancelled_month <= 28 and invoice_month = 29 then 1
                when cancelled_month <= 28 then 0
                when invoice_month = 28 or invoice_month = 29 then 1 
                else null end) as invoice_month_29_flag,
        max(case when cancelled_month <= 29 and invoice_month = 30 then 1
                when cancelled_month <= 29 then 0
                when invoice_month = 29 or invoice_month = 30 then 1
                else null end) as invoice_month_30_flag,
        max(case when cancelled_month <= 30 and invoice_month = 31 then 1
                when cancelled_month <= 30 then 0
                when invoice_month = 30 or invoice_month = 31 then 1 
                else null end) as invoice_month_31_flag,
        max(case when cancelled_month <= 31 and invoice_month = 32 then 1
                when cancelled_month <= 31 then 0
                when invoice_month = 31 or invoice_month = 32 then 1
                else null end) as invoice_month_32_flag,
        max(case when cancelled_month <= 32 and invoice_month = 33 then 1
                when cancelled_month <= 32 then 0
                when invoice_month = 32 or invoice_month = 33 then 1 
                else null end) as invoice_month_33_flag,
        max(case when cancelled_month <= 33 and invoice_month = 34 then 1
                when cancelled_month <= 33 then 0
                when invoice_month = 33 or invoice_month = 34 then 1
                else null end) as invoice_month_34_flag,
        max(case when cancelled_month <= 34 and invoice_month = 35 then 1
                when cancelled_month <= 34 then 0
                when invoice_month = 34 or invoice_month = 35 then 1 
                else null end) as invoice_month_35_flag,
        max(case when cancelled_month <= 35 and invoice_month = 36 then 1
                when cancelled_month <= 35 then 0
                when invoice_month = 35 or invoice_month = 36 then 1
                else null end) as invoice_month_36_flag,
        max(case when cancelled_month <= 36 and invoice_month = 37 then 1
                when cancelled_month <= 36 then 0
                when invoice_month = 36 or invoice_month = 37 then 1 
                else null end) as invoice_month_37_flag,
        max(case when cancelled_month <= 37 and invoice_month = 38 then 1
                when cancelled_month <= 37 then 0
                when invoice_month = 37 or invoice_month = 38 then 1
                else null end) as invoice_month_38_flag,
        max(case when cancelled_month <= 38 and invoice_month = 39 then 1
                when cancelled_month <= 38 then 0
                when invoice_month = 38 or invoice_month = 39 then 1 
                else null end) as invoice_month_39_flag,
        max(case when cancelled_month <= 39 and invoice_month = 40 then 1
                when cancelled_month <= 39 then 0
                when invoice_month = 39 or invoice_month = 40 then 1
                else null end) as invoice_month_40_flag,
        max(case when cancelled_month <= 40 and invoice_month = 41 then 1 
                when cancelled_month <= 40 then 0
                when invoice_month = 40 or invoice_month = 41 then 1 
                else null end) as invoice_month_41_flag,
        max(case when cancelled_month <= 41 and invoice_month = 42 then 1
                when cancelled_month <= 41 then 0
                when invoice_month = 41 or invoice_month = 42 then 1
                else null end) as invoice_month_42_flag,
        max(case when cancelled_month <= 42 and invoice_month = 43 then 1
                when cancelled_month <= 42 then 0
                when invoice_month = 42 or invoice_month = 43 then 1 
                else null end) as invoice_month_43_flag,
        max(case when cancelled_month <= 43 and invoice_month = 44 then 1
                when cancelled_month <= 43 then 0
                when invoice_month = 43 or invoice_month = 44 then 1
                else null end) as invoice_month_44_flag,
        max(case when cancelled_month <= 44 and invoice_month = 45 then 1
                when cancelled_month <= 44 then 0
                when invoice_month = 44 or invoice_month = 45 then 1 
                else null end) as invoice_month_45_flag,
        max(case when cancelled_month <= 45 and invoice_month = 46 then 1
                when cancelled_month <= 45 then 0
                when invoice_month = 45 or invoice_month = 46 then 1
                else null end) as invoice_month_46_flag,
        max(case when cancelled_month <= 46 and invoice_month = 47 then 1
                when cancelled_month <= 46 then 0
                when invoice_month = 46 or invoice_month = 47 then 1 
                else null end) as invoice_month_47_flag,
        max(case when cancelled_month <= 47 and invoice_month = 48 then 1
                when cancelled_month <= 47 then 0
                when invoice_month = 47 or invoice_month = 48 then 1
                else null end) as invoice_month_48_flag,
        max(case when cancelled_month <= 48 and invoice_month = 49 then 1
                when cancelled_month <= 48 then 0
                when invoice_month = 48 or invoice_month = 49 then 1 
                else null end) as invoice_month_49_flag,
        max(case when cancelled_month <= 49 and invoice_month = 50 then 1
                when cancelled_month <= 49 then 0
                when invoice_month = 49 or invoice_month = 50 then 1
                else null end) as invoice_month_50_flag,
        max(case when cancelled_month <= 50 and invoice_month = 51 then 1
                when cancelled_month <= 50 then 0
                when invoice_month = 50 or invoice_month = 51 then 1 
                else null end) as invoice_month_51_flag,
        max(case when cancelled_month <= 51 and invoice_month = 52 then 1
                when cancelled_month <= 51 then 0
                when invoice_month = 51 or invoice_month = 52 then 1
                else null end) as invoice_month_52_flag,
        max(case when cancelled_month <= 52 and invoice_month = 53 then 1
                when cancelled_month <= 52 then 0
                when invoice_month = 52 or invoice_month = 53 then 1 
                else null end) as invoice_month_53_flag,
        max(case when cancelled_month <= 53 and invoice_month = 54 then 1
                when cancelled_month <= 53 then 0
                when invoice_month = 53 or invoice_month = 54 then 1
                else null end) as invoice_month_54_flag,
        max(case when cancelled_month <= 54 and invoice_month = 55 then 1
                when cancelled_month <= 54 then 0
                when invoice_month = 54 or invoice_month = 55 then 1 
                else null end) as invoice_month_55_flag,
        max(case when cancelled_month <= 55 and invoice_month = 56 then 1
                when cancelled_month <= 55 then 0
                when invoice_month = 55 or invoice_month = 56 then 1
                else null end) as invoice_month_56_flag,
        max(case when cancelled_month <= 56 and invoice_month = 57 then 1
                when cancelled_month <= 56 then 0
                when invoice_month = 56 or invoice_month = 57 then 1 
                else null end) as invoice_month_57_flag,
        max(case when cancelled_month <= 57 and invoice_month = 58 then 1
                when cancelled_month <= 57 then 0
                when invoice_month = 57 or invoice_month = 58 then 1
                else null end) as invoice_month_58_flag,
        max(case when cancelled_month <= 58 and invoice_month = 59 then 1
                when cancelled_month <= 58 then 0
                when invoice_month = 58 or invoice_month = 59 then 1 
                else null end) as invoice_month_59_flag,
        max(case when cancelled_month <= 59 and invoice_month = 60 then 1
                when cancelled_month <= 59 then 0
                when invoice_month = 59 or invoice_month = 60 then 1
                else null end) as invoice_month_60_flag,
        max(case when cancelled_month <= 60 and invoice_month = 61 then 1
                when cancelled_month <= 60 then 0
                when invoice_month = 60 or invoice_month = 61 then 1
                else null end) as invoice_month_61_flag,
        max(case when cancelled_month <= 61 and invoice_month = 62 then 1
                when cancelled_month <= 61 then 0
                when invoice_month = 61 or invoice_month = 62 then 1
                else null end) as invoice_month_62_flag,
        max(case when cancelled_month <= 62 and invoice_month = 63 then 1
                when cancelled_month <= 62 then 0
                when invoice_month = 62 or invoice_month = 63 then 1 
                else null end) as invoice_month_63_flag,
        max(case when cancelled_month <= 63 and invoice_month = 64 then 1
                when cancelled_month <= 63 then 0
                when invoice_month = 63 or invoice_month = 64 then 1
                else null end) as invoice_month_64_flag,
        max(case when cancelled_month <= 64 and invoice_month = 65 then 1
                when cancelled_month <= 64 then 0
                when invoice_month = 64 or invoice_month = 65 then 1 
                else null end) as invoice_month_65_flag,
        max(case when cancelled_month <= 65 and invoice_month = 66 then 1
                when cancelled_month <= 65 then 0
                when invoice_month = 65 or invoice_month = 66 then 1
                else null end) as invoice_month_66_flag,
        max(case when cancelled_month <= 66 and invoice_month = 67 then 1
                when cancelled_month <= 66 then 0
                when invoice_month = 66 or invoice_month = 67 then 1 
                else null end) as invoice_month_67_flag,
        max(case when cancelled_month <= 67 and invoice_month = 68 then 1
                when cancelled_month <= 67 then 0
                when invoice_month = 67 or invoice_month = 68 then 1
                else null end) as invoice_month_68_flag,
        max(case when cancelled_month <= 68 and invoice_month = 69 then 1
                when cancelled_month <= 68 then 0
                when invoice_month = 68 or invoice_month = 69 then 1 
                else null end) as invoice_month_69_flag,
        max(case when cancelled_month <= 69 and invoice_month = 70 then 1
                when cancelled_month <= 69 then 0
                when invoice_month = 69 or invoice_month = 70 then 1
                else null end) as invoice_month_70_flag
    from sub_inv
    
    group by customer_id,account_activated_at
)

select 
    date_trunc('month',to_date(account_activated_at)) as created_month_year,
    ---left(to_date(account_activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_flag end) as active_month_61,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_flag end) as active_month_62,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_flag end) as active_month_63,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_flag end) as active_month_64,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_flag end) as active_month_65,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_flag end) as active_month_66,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_flag end) as active_month_67,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_flag end) as active_month_68,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_flag end) as active_month_69,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_flag end) as active_month_70

from sub_inv_flag
where date_trunc('month',to_date(account_activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1;"
"V_COHORT_TOTAL_CUS_COHORT_NO_PAUSE","create or replace view SEED_DATA.DEV.V_COHORT_TOTAL_CUS_COHORT_NO_PAUSE(
	CREATED_MONTH_YEAR,
	COHORT_QUANTITY,
	ACTIVE_MONTH_0,
	ACTIVE_MONTH_1,
	ACTIVE_MONTH_2,
	ACTIVE_MONTH_3,
	ACTIVE_MONTH_4,
	ACTIVE_MONTH_5,
	ACTIVE_MONTH_6,
	ACTIVE_MONTH_7,
	ACTIVE_MONTH_8,
	ACTIVE_MONTH_9,
	ACTIVE_MONTH_10,
	ACTIVE_MONTH_11,
	ACTIVE_MONTH_12,
	ACTIVE_MONTH_13,
	ACTIVE_MONTH_14,
	ACTIVE_MONTH_15,
	ACTIVE_MONTH_16,
	ACTIVE_MONTH_17,
	ACTIVE_MONTH_18,
	ACTIVE_MONTH_19,
	ACTIVE_MONTH_20,
	ACTIVE_MONTH_21,
	ACTIVE_MONTH_22,
	ACTIVE_MONTH_23,
	ACTIVE_MONTH_24,
	ACTIVE_MONTH_25,
	ACTIVE_MONTH_26,
	ACTIVE_MONTH_27,
	ACTIVE_MONTH_28,
	ACTIVE_MONTH_29,
	ACTIVE_MONTH_30,
	ACTIVE_MONTH_31,
	ACTIVE_MONTH_32,
	ACTIVE_MONTH_33,
	ACTIVE_MONTH_34,
	ACTIVE_MONTH_35,
	ACTIVE_MONTH_36,
	ACTIVE_MONTH_37,
	ACTIVE_MONTH_38,
	ACTIVE_MONTH_39,
	ACTIVE_MONTH_40,
	ACTIVE_MONTH_41,
	ACTIVE_MONTH_42,
	ACTIVE_MONTH_43,
	ACTIVE_MONTH_44,
	ACTIVE_MONTH_45,
	ACTIVE_MONTH_46,
	ACTIVE_MONTH_47,
	ACTIVE_MONTH_48,
	ACTIVE_MONTH_49,
	ACTIVE_MONTH_50,
	ACTIVE_MONTH_51,
	ACTIVE_MONTH_52,
	ACTIVE_MONTH_53,
	ACTIVE_MONTH_54,
	ACTIVE_MONTH_55,
	ACTIVE_MONTH_56,
	ACTIVE_MONTH_57,
	ACTIVE_MONTH_58,
	ACTIVE_MONTH_59,
	ACTIVE_MONTH_60,
	ACTIVE_MONTH_61,
	ACTIVE_MONTH_62,
	ACTIVE_MONTH_63,
	ACTIVE_MONTH_64,
	ACTIVE_MONTH_65,
	ACTIVE_MONTH_66,
	ACTIVE_MONTH_67,
	ACTIVE_MONTH_68,
	ACTIVE_MONTH_69,
	ACTIVE_MONTH_70
) as

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_SKU_ADJUSTED
),

sub_inv as 
(
     -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.invoice_date))/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.invoice_date))/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
), 

sub_inv_flag as
(
    select customer_id, account_activated_at,
        max(case when invoice_month = 0 or invoice_month = -1 then 1 else null end) as invoice_month_0_flag,
        max(case when invoice_month = 1 then 1 
                else null end) as invoice_month_1_flag,
        max(case when invoice_month = 2 then 1 
                else null end) as invoice_month_2_flag,
        max(case when invoice_month = 3 then 1 
                else null end) as invoice_month_3_flag,
        max(case when invoice_month = 4 then 1 
                else null end) as invoice_month_4_flag,
        max(case when invoice_month = 5 then 1 
                else null end) as invoice_month_5_flag,
        max(case when invoice_month = 6 then 1 
                else null end) as invoice_month_6_flag,
        max(case when invoice_month = 7 then 1 
                else null end) as invoice_month_7_flag,
        max(case when invoice_month = 8 then 1 
                else null end) as invoice_month_8_flag,
        max(case when invoice_month = 9 then 1 
                else null end) as invoice_month_9_flag,
        max(case when invoice_month = 10 then 1 
                else null end) as invoice_month_10_flag,
        max(case when invoice_month = 11 then 1 
                else null end) as invoice_month_11_flag,
        max(case when invoice_month = 12 then 1 
                else null end) as invoice_month_12_flag,
        max(case when invoice_month = 13 then 1 
                else null end) as invoice_month_13_flag,
        max(case when invoice_month = 14 then 1 
                else null end) as invoice_month_14_flag,
        max(case when invoice_month = 15 then 1 
                else null end) as invoice_month_15_flag,
        max(case when invoice_month = 16 then 1 
                else null end) as invoice_month_16_flag,
        max(case when invoice_month = 17 then 1 
                else null end) as invoice_month_17_flag,
        max(case when invoice_month = 18 then 1 
                else null end) as invoice_month_18_flag,
        max(case when invoice_month = 19 then 1 
                else null end) as invoice_month_19_flag,
        max(case when invoice_month = 20 then 1 
                else null end) as invoice_month_20_flag,
        max(case when invoice_month = 21 then 1 
                else null end) as invoice_month_21_flag,
        max(case when invoice_month = 22 then 1 
                else null end) as invoice_month_22_flag,
        max(case when invoice_month = 23 then 1 
                else null end) as invoice_month_23_flag,
        max(case when invoice_month = 24 then 1 
                else null end) as invoice_month_24_flag,
        max(case when invoice_month = 25 then 1 
                else null end) as invoice_month_25_flag,
        max(case when invoice_month = 26 then 1 
                else null end) as invoice_month_26_flag,
        max(case when invoice_month = 27 then 1 
                else null end) as invoice_month_27_flag,
        max(case when invoice_month = 28 then 1 
                else null end) as invoice_month_28_flag,
        max(case when invoice_month = 29 then 1 
                else null end) as invoice_month_29_flag,
        max(case when invoice_month = 30 then 1 
                else null end) as invoice_month_30_flag,
        max(case when invoice_month = 31 then 1 
                else null end) as invoice_month_31_flag,
        max(case when invoice_month = 32 then 1 
                else null end) as invoice_month_32_flag,
        max(case when invoice_month = 33 then 1 
                else null end) as invoice_month_33_flag,
        max(case when invoice_month = 34 then 1 
                else null end) as invoice_month_34_flag,
        max(case when invoice_month = 35 then 1 
                else null end) as invoice_month_35_flag,
        max(case when invoice_month = 36 then 1 
                else null end) as invoice_month_36_flag,
        max(case when invoice_month = 37 then 1 
                else null end) as invoice_month_37_flag,
        max(case when invoice_month = 38 then 1 
                else null end) as invoice_month_38_flag,
        max(case when invoice_month = 39 then 1 
                else null end) as invoice_month_39_flag,
        max(case when invoice_month = 40 then 1 
                else null end) as invoice_month_40_flag,
        max(case when invoice_month = 41 then 1 
                else null end) as invoice_month_41_flag,
        max(case when invoice_month = 42 then 1 
                else null end) as invoice_month_42_flag,
        max(case when invoice_month = 43 then 1 
                else null end) as invoice_month_43_flag,
        max(case when invoice_month = 44 then 1 
                else null end) as invoice_month_44_flag,
        max(case when invoice_month = 45 then 1 
                else null end) as invoice_month_45_flag,
        max(case when invoice_month = 46 then 1 
                else null end) as invoice_month_46_flag,
        max(case when invoice_month = 47 then 1 
                else null end) as invoice_month_47_flag,
        max(case when invoice_month = 48 then 1 
                else null end) as invoice_month_48_flag,
        max(case when invoice_month = 49 then 1 
                else null end) as invoice_month_49_flag,
        max(case when invoice_month = 50 then 1 
                else null end) as invoice_month_50_flag,
        max(case when invoice_month = 51 then 1 
                else null end) as invoice_month_51_flag,
        max(case when invoice_month = 52 then 1 
                else null end) as invoice_month_52_flag,
        max(case when invoice_month = 53 then 1 
                else null end) as invoice_month_53_flag,
        max(case when invoice_month = 54 then 1 
                else null end) as invoice_month_54_flag,
        max(case when invoice_month = 55 then 1 
                else null end) as invoice_month_55_flag,
        max(case when invoice_month = 56 then 1 
                else null end) as invoice_month_56_flag,
        max(case when invoice_month = 57 then 1 
                else null end) as invoice_month_57_flag,
        max(case when invoice_month = 58 then 1 
                else null end) as invoice_month_58_flag,
        max(case when invoice_month = 59 then 1 
                else null end) as invoice_month_59_flag,
        max(case when invoice_month = 60 then 1 
                else null end) as invoice_month_60_flag,
        max(case when invoice_month = 61 then 1 
                else null end) as invoice_month_61_flag,
        max(case when invoice_month = 62 then 1 
                else null end) as invoice_month_62_flag,
        max(case when invoice_month = 63 then 1 
                else null end) as invoice_month_63_flag,
        max(case when invoice_month = 64 then 1 
                else null end) as invoice_month_64_flag,
        max(case when invoice_month = 65 then 1 
                else null end) as invoice_month_65_flag,
        max(case when invoice_month = 66 then 1 
                else null end) as invoice_month_66_flag,
        max(case when invoice_month = 67 then 1 
                else null end) as invoice_month_67_flag,
        max(case when invoice_month = 68 then 1 
                else null end) as invoice_month_68_flag,
        max(case when invoice_month = 69 then 1 
                else null end) as invoice_month_69_flag,
        max(case when invoice_month = 70 then 1 
                else null end) as invoice_month_70_flag

    from sub_inv
    group by customer_id, account_activated_at
)

select 
    date_trunc('month',to_date(account_activated_at)) as created_month_year,
    ---left(to_date(activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_flag end) as active_month_61,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_flag end) as active_month_62,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_flag end) as active_month_63,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_flag end) as active_month_64,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_flag end) as active_month_65,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_flag end) as active_month_66,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_flag end) as active_month_67,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_flag end) as active_month_68,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_flag end) as active_month_69,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_flag end) as active_month_70

from sub_inv_flag
where date_trunc('month',to_date(account_activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1;"
"V_COHORT_TOTAL_CUS_COHORT_REVENUE","create or replace view SEED_DATA.DEV.V_COHORT_TOTAL_CUS_COHORT_REVENUE(
	CREATED_MONTH_YEAR,
	COHORT_QUANTITY,
	ACTIVE_MONTH_0,
	ACTIVE_MONTH_1,
	ACTIVE_MONTH_2,
	ACTIVE_MONTH_3,
	ACTIVE_MONTH_4,
	ACTIVE_MONTH_5,
	ACTIVE_MONTH_6,
	ACTIVE_MONTH_7,
	ACTIVE_MONTH_8,
	ACTIVE_MONTH_9,
	ACTIVE_MONTH_10,
	ACTIVE_MONTH_11,
	ACTIVE_MONTH_12,
	ACTIVE_MONTH_13,
	ACTIVE_MONTH_14,
	ACTIVE_MONTH_15,
	ACTIVE_MONTH_16,
	ACTIVE_MONTH_17,
	ACTIVE_MONTH_18,
	ACTIVE_MONTH_19,
	ACTIVE_MONTH_20,
	ACTIVE_MONTH_21,
	ACTIVE_MONTH_22,
	ACTIVE_MONTH_23,
	ACTIVE_MONTH_24,
	ACTIVE_MONTH_25,
	ACTIVE_MONTH_26,
	ACTIVE_MONTH_27,
	ACTIVE_MONTH_28,
	ACTIVE_MONTH_29,
	ACTIVE_MONTH_30,
	ACTIVE_MONTH_31,
	ACTIVE_MONTH_32,
	ACTIVE_MONTH_33,
	ACTIVE_MONTH_34,
	ACTIVE_MONTH_35,
	ACTIVE_MONTH_36,
	ACTIVE_MONTH_37,
	ACTIVE_MONTH_38,
	ACTIVE_MONTH_39,
	ACTIVE_MONTH_40,
	ACTIVE_MONTH_41,
	ACTIVE_MONTH_42,
	ACTIVE_MONTH_43,
	ACTIVE_MONTH_44,
	ACTIVE_MONTH_45,
	ACTIVE_MONTH_46,
	ACTIVE_MONTH_47,
	ACTIVE_MONTH_48,
	ACTIVE_MONTH_49,
	ACTIVE_MONTH_50,
	ACTIVE_MONTH_51,
	ACTIVE_MONTH_52,
	ACTIVE_MONTH_53,
	ACTIVE_MONTH_54,
	ACTIVE_MONTH_55,
	ACTIVE_MONTH_56,
	ACTIVE_MONTH_57,
	ACTIVE_MONTH_58,
	ACTIVE_MONTH_59,
	ACTIVE_MONTH_60,
    ACTIVE_MONTH_61,
    ACTIVE_MONTH_62,
	CAC
) as 

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_COGS_UPDATE
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.order_date))/30) as invoice_month,
        o.quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as revenue,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.order_date))/30) as invoice_month,
        o.quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as revenue,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
), 

sub_inv_flag as
(
    select customer_id, account_activated_at,
    sum(case when invoice_month = 0 or invoice_month = -1 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_0_flag,
        sum(case when invoice_month = 1 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_1_flag,
        sum(case when invoice_month = 2 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_2_flag,
        sum(case when invoice_month = 3 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_3_flag,
        sum(case when invoice_month = 4 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_4_flag,
        sum(case when invoice_month = 5 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_5_flag,
        sum(case when invoice_month = 6 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_6_flag,
        sum(case when invoice_month = 7 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_7_flag,
        sum(case when invoice_month = 8 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_8_flag,
        sum(case when invoice_month = 9 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_9_flag,
        sum(case when invoice_month = 10 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_10_flag,
        sum(case when invoice_month = 11 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_11_flag,
        sum(case when invoice_month = 12 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_12_flag,
        sum(case when invoice_month = 13 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_13_flag,
        sum(case when invoice_month = 14 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_14_flag,
        sum(case when invoice_month = 15 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_15_flag,
        sum(case when invoice_month = 16 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_16_flag,
        sum(case when invoice_month = 17 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_17_flag,
        sum(case when invoice_month = 18 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_18_flag,
        sum(case when invoice_month = 19 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_19_flag,
        sum(case when invoice_month = 20 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_20_flag,
        sum(case when invoice_month = 21 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_21_flag,
        sum(case when invoice_month = 22 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_22_flag,
        sum(case when invoice_month = 23 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_23_flag,
        sum(case when invoice_month = 24 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_24_flag,
        sum(case when invoice_month = 25 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_25_flag,
        sum(case when invoice_month = 26 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_26_flag,
        sum(case when invoice_month = 27 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_27_flag,
        sum(case when invoice_month = 28 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_28_flag,
        sum(case when invoice_month = 29 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_29_flag,
        sum(case when invoice_month = 30 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_30_flag,
        sum(case when invoice_month = 31 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_31_flag,
        sum(case when invoice_month = 32 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_32_flag,
        sum(case when invoice_month = 33 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_33_flag,
        sum(case when invoice_month = 34 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_34_flag,
        sum(case when invoice_month = 35 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_35_flag,
        sum(case when invoice_month = 36 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_36_flag,
        sum(case when invoice_month = 37 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_37_flag,
        sum(case when invoice_month = 38 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_38_flag,
        sum(case when invoice_month = 39 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_39_flag,
        sum(case when invoice_month = 40 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_40_flag,
        sum(case when invoice_month = 41 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_41_flag,
        sum(case when invoice_month = 42 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_42_flag,
        sum(case when invoice_month = 43 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_43_flag,
        sum(case when invoice_month = 44 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_44_flag,
        sum(case when invoice_month = 45 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_45_flag,
        sum(case when invoice_month = 46 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_46_flag,
        sum(case when invoice_month = 47 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_47_flag,
        sum(case when invoice_month = 48 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_48_flag,
        sum(case when invoice_month = 49 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_49_flag,
        sum(case when invoice_month = 50 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_50_flag,
        sum(case when invoice_month = 51 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_51_flag,
        sum(case when invoice_month = 52 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_52_flag,
        sum(case when invoice_month = 53 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_53_flag,
        sum(case when invoice_month = 54 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_54_flag,
        sum(case when invoice_month = 55 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_55_flag,
        sum(case when invoice_month = 56 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_56_flag,
        sum(case when invoice_month = 57 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_57_flag,
        sum(case when invoice_month = 58 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_58_flag,
        sum(case when invoice_month = 59 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_59_flag,
        sum(case when invoice_month = 60 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_60_flag,
        sum(case when invoice_month = 61 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_61_flag,
        sum(case when invoice_month = 62 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_62_flag
    from sub_inv
    group by customer_id,account_activated_at
),

final_data as 
(
select 
    date_trunc('month',to_date(account_activated_at)) as created_month_year,
    ---left(to_date(activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward-looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_61_flag end) as active_month_61,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_62_flag end) as active_month_62
    
from sub_inv_flag
where date_trunc('month',to_date(account_activated_at)) <= DATEADD(month, -1,date_trunc('month',to_date(current_date()))) --- Only print until last month 
group by 1
order by 1
)

,marketing_spend as 
(
select month_year,sum(total_spend) as total_spend
    from SEED_DATA.DEV.V_MARKETING_SPEND_CAC
    group by 1
)

select f.*,round((m.total_spend/f.cohort_quantity),2) as CAC
from final_data as f 
    left join marketing_spend as m 
    on f.created_month_year = m.month_year
order by 1;"
"V_COHORT_TOTAL_SUB_COHORT_LTV","create or replace view SEED_DATA.DEV.V_COHORT_TOTAL_SUB_COHORT_LTV as

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_COGS_UPDATE
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.order_date))/30) as invoice_month,
        o.quantity as invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid_less_cogs + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as ltv,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.order_date))/30) as invoice_month,
        o.quantity as invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid_less_cogs + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as ltv,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
)

,sub_inv_flag as
(
    select recharge_subscription_id,recurly_subscription_id,activated_at,
        sum(case when invoice_month = 0 or invoice_month = -1 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_0_flag,
        sum(case when invoice_month = 1 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_1_flag,
        sum(case when invoice_month = 2 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_2_flag,
        sum(case when invoice_month = 3 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_3_flag,
        sum(case when invoice_month = 4 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_4_flag,
        sum(case when invoice_month = 5 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_5_flag,
        sum(case when invoice_month = 6 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_6_flag,
        sum(case when invoice_month = 7 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_7_flag,
        sum(case when invoice_month = 8 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_8_flag,
        sum(case when invoice_month = 9 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_9_flag,
        sum(case when invoice_month = 10 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_10_flag,
        sum(case when invoice_month = 11 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_11_flag,
        sum(case when invoice_month = 12 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_12_flag,
        sum(case when invoice_month = 13 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_13_flag,
        sum(case when invoice_month = 14 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_14_flag,
        sum(case when invoice_month = 15 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_15_flag,
        sum(case when invoice_month = 16 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_16_flag,
        sum(case when invoice_month = 17 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_17_flag,
        sum(case when invoice_month = 18 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_18_flag,
        sum(case when invoice_month = 19 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_19_flag,
        sum(case when invoice_month = 20 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_20_flag,
        sum(case when invoice_month = 21 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_21_flag,
        sum(case when invoice_month = 22 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_22_flag,
        sum(case when invoice_month = 23 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_23_flag,
        sum(case when invoice_month = 24 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_24_flag,
        sum(case when invoice_month = 25 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_25_flag,
        sum(case when invoice_month = 26 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_26_flag,
        sum(case when invoice_month = 27 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_27_flag,
        sum(case when invoice_month = 28 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_28_flag,
        sum(case when invoice_month = 29 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_29_flag,
        sum(case when invoice_month = 30 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_30_flag,
        sum(case when invoice_month = 31 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_31_flag,
        sum(case when invoice_month = 32 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_32_flag,
        sum(case when invoice_month = 33 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_33_flag,
        sum(case when invoice_month = 34 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_34_flag,
        sum(case when invoice_month = 35 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_35_flag,
        sum(case when invoice_month = 36 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_36_flag,
        sum(case when invoice_month = 37 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_37_flag,
        sum(case when invoice_month = 38 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_38_flag,
        sum(case when invoice_month = 39 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_39_flag,
        sum(case when invoice_month = 40 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_40_flag,
        sum(case when invoice_month = 41 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_41_flag,
        sum(case when invoice_month = 42 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_42_flag,
        sum(case when invoice_month = 43 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_43_flag,
        sum(case when invoice_month = 44 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_44_flag,
        sum(case when invoice_month = 45 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_45_flag,
        sum(case when invoice_month = 46 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_46_flag,
        sum(case when invoice_month = 47 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_47_flag,
        sum(case when invoice_month = 48 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_48_flag,
        sum(case when invoice_month = 49 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_49_flag,
        sum(case when invoice_month = 50 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_50_flag,
        sum(case when invoice_month = 51 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_51_flag,
        sum(case when invoice_month = 52 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_52_flag,
        sum(case when invoice_month = 53 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_53_flag,
        sum(case when invoice_month = 54 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_54_flag,
        sum(case when invoice_month = 55 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_55_flag,
        sum(case when invoice_month = 56 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_56_flag,
        sum(case when invoice_month = 57 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_57_flag,
        sum(case when invoice_month = 58 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_58_flag,
        sum(case when invoice_month = 59 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_59_flag,
        sum(case when invoice_month = 60 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_60_flag,
        sum(case when invoice_month = 61 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_61_flag,
        sum(case when invoice_month = 62 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_62_flag,
        sum(case when invoice_month = 63 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_63_flag,
        sum(case when invoice_month = 64 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_64_flag,
        sum(case when invoice_month = 65 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_65_flag,
        sum(case when invoice_month = 66 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_66_flag,
        sum(case when invoice_month = 67 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_67_flag,
        sum(case when invoice_month = 68 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_68_flag,
        sum(case when invoice_month = 69 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_69_flag,
        sum(case when invoice_month = 70 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_70_flag
              
    from sub_inv
    group by recharge_subscription_id,recurly_subscription_id,activated_at
)

,final_data as 
(
select 
    date_trunc('month',to_date(activated_at)) as created_month_year,
    ---left(to_date(activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_flag end) as active_month_61,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_flag end) as active_month_62,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_flag end) as active_month_63,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_flag end) as active_month_64,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_flag end) as active_month_65,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_flag end) as active_month_66,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_flag end) as active_month_67,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_flag end) as active_month_68,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_flag end) as active_month_69,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_flag end) as active_month_70
from sub_inv_flag
where date_trunc('month',to_date(activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1
)

,marketing_spend as 
(
select month_year,sum(total_spend) as total_spend
    from SEED_DATA.DEV.V_MARKETING_SPEND_CAC
    group by 1
)

select f.*,round((m.total_spend/f.cohort_quantity),2) as CAC
from final_data as f 
    left join marketing_spend as m 
    on f.created_month_year = m.month_year
order by 1;"
"V_COHORT_TOTAL_SUB_COHORT_REVENUE","create or replace view SEED_DATA.DEV.V_COHORT_TOTAL_SUB_COHORT_REVENUE(
	CREATED_MONTH_YEAR,
	COHORT_QUANTITY,
	ACTIVE_MONTH_0,
	ACTIVE_MONTH_1,
	ACTIVE_MONTH_2,
	ACTIVE_MONTH_3,
	ACTIVE_MONTH_4,
	ACTIVE_MONTH_5,
	ACTIVE_MONTH_6,
	ACTIVE_MONTH_7,
	ACTIVE_MONTH_8,
	ACTIVE_MONTH_9,
	ACTIVE_MONTH_10,
	ACTIVE_MONTH_11,
	ACTIVE_MONTH_12,
	ACTIVE_MONTH_13,
	ACTIVE_MONTH_14,
	ACTIVE_MONTH_15,
	ACTIVE_MONTH_16,
	ACTIVE_MONTH_17,
	ACTIVE_MONTH_18,
	ACTIVE_MONTH_19,
	ACTIVE_MONTH_20,
	ACTIVE_MONTH_21,
	ACTIVE_MONTH_22,
	ACTIVE_MONTH_23,
	ACTIVE_MONTH_24,
	ACTIVE_MONTH_25,
	ACTIVE_MONTH_26,
	ACTIVE_MONTH_27,
	ACTIVE_MONTH_28,
	ACTIVE_MONTH_29,
	ACTIVE_MONTH_30,
	ACTIVE_MONTH_31,
	ACTIVE_MONTH_32,
	ACTIVE_MONTH_33,
	ACTIVE_MONTH_34,
	ACTIVE_MONTH_35,
	ACTIVE_MONTH_36,
	ACTIVE_MONTH_37,
	ACTIVE_MONTH_38,
	ACTIVE_MONTH_39,
	ACTIVE_MONTH_40,
	ACTIVE_MONTH_41,
	ACTIVE_MONTH_42,
	ACTIVE_MONTH_43,
	ACTIVE_MONTH_44,
	ACTIVE_MONTH_45,
	ACTIVE_MONTH_46,
	ACTIVE_MONTH_47,
	ACTIVE_MONTH_48,
	ACTIVE_MONTH_49,
	ACTIVE_MONTH_50,
	ACTIVE_MONTH_51,
	ACTIVE_MONTH_52,
	ACTIVE_MONTH_53,
	ACTIVE_MONTH_54,
	ACTIVE_MONTH_55,
	ACTIVE_MONTH_56,
	ACTIVE_MONTH_57,
	ACTIVE_MONTH_58,
	ACTIVE_MONTH_59,
	ACTIVE_MONTH_60,
    ACTIVE_MONTH_61,
    ACTIVE_MONTH_62,
	CAC
) as

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_COGS_UPDATE
)

,sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.order_date))/30) as invoice_month,
        o.quantity as invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as revenue,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.order_date))/30) as invoice_month,
        o.quantity as invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as revenue,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
)

,sub_inv_flag as
(
    select recharge_subscription_id,recurly_subscription_id,activated_at,
        sum(case when invoice_month = 0 or invoice_month = -1 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_0_flag,
        sum(case when invoice_month = 1 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_1_flag,
        sum(case when invoice_month = 2 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_2_flag,
        sum(case when invoice_month = 3 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_3_flag,
        sum(case when invoice_month = 4 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_4_flag,
        sum(case when invoice_month = 5 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_5_flag,
        sum(case when invoice_month = 6 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_6_flag,
        sum(case when invoice_month = 7 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_7_flag,
        sum(case when invoice_month = 8 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_8_flag,
        sum(case when invoice_month = 9 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_9_flag,
        sum(case when invoice_month = 10 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_10_flag,
        sum(case when invoice_month = 11 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_11_flag,
        sum(case when invoice_month = 12 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_12_flag,
        sum(case when invoice_month = 13 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_13_flag,
        sum(case when invoice_month = 14 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_14_flag,
        sum(case when invoice_month = 15 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_15_flag,
        sum(case when invoice_month = 16 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_16_flag,
        sum(case when invoice_month = 17 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_17_flag,
        sum(case when invoice_month = 18 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_18_flag,
        sum(case when invoice_month = 19 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_19_flag,
        sum(case when invoice_month = 20 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_20_flag,
        sum(case when invoice_month = 21 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_21_flag,
        sum(case when invoice_month = 22 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_22_flag,
        sum(case when invoice_month = 23 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_23_flag,
        sum(case when invoice_month = 24 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_24_flag,
        sum(case when invoice_month = 25 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_25_flag,
        sum(case when invoice_month = 26 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_26_flag,
        sum(case when invoice_month = 27 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_27_flag,
        sum(case when invoice_month = 28 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_28_flag,
        sum(case when invoice_month = 29 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_29_flag,
        sum(case when invoice_month = 30 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_30_flag,
        sum(case when invoice_month = 31 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_31_flag,
        sum(case when invoice_month = 32 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_32_flag,
        sum(case when invoice_month = 33 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_33_flag,
        sum(case when invoice_month = 34 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_34_flag,
        sum(case when invoice_month = 35 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_35_flag,
        sum(case when invoice_month = 36 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_36_flag,
        sum(case when invoice_month = 37 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_37_flag,
        sum(case when invoice_month = 38 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_38_flag,
        sum(case when invoice_month = 39 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_39_flag,
        sum(case when invoice_month = 40 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_40_flag,
        sum(case when invoice_month = 41 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_41_flag,
        sum(case when invoice_month = 42 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_42_flag,
        sum(case when invoice_month = 43 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_43_flag,
        sum(case when invoice_month = 44 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_44_flag,
        sum(case when invoice_month = 45 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_45_flag,
        sum(case when invoice_month = 46 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_46_flag,
        sum(case when invoice_month = 47 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_47_flag,
        sum(case when invoice_month = 48 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_48_flag,
        sum(case when invoice_month = 49 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_49_flag,
        sum(case when invoice_month = 50 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_50_flag,
        sum(case when invoice_month = 51 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_51_flag,
        sum(case when invoice_month = 52 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_52_flag,
        sum(case when invoice_month = 53 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_53_flag,
        sum(case when invoice_month = 54 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_54_flag,
        sum(case when invoice_month = 55 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_55_flag,
        sum(case when invoice_month = 56 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_56_flag,
        sum(case when invoice_month = 57 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_57_flag,
        sum(case when invoice_month = 58 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_58_flag,
        sum(case when invoice_month = 59 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_59_flag,
        sum(case when invoice_month = 60 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_60_flag,
        sum(case when invoice_month = 61 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_61_flag,
        sum(case when invoice_month = 62 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_62_flag
        
              
    from sub_inv
    group by recharge_subscription_id,recurly_subscription_id,activated_at
)

,final_data as
(
select 
    date_trunc('month',to_date(activated_at)) as created_month_year,
    ---left(to_date(activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward-looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_flag end) as active_month_61,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_flag end) as active_month_62
    
from sub_inv_flag
where date_trunc('month',to_date(activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1)

,marketing_spend as 
(
select month_year,sum(total_spend) as TOTAL_SPEND
    from SEED_DATA.DEV.V_MARKETING_SPEND_CAC
    group by 1
)

select f.*,round((m.total_spend/f.cohort_quantity),2) as CAC
from final_data as f 
    left join marketing_spend as m 
    on f.created_month_year = m.month_year
order by 1;"
"V_CUSTOMER_ATTRIBUTES","create or replace view SEED_DATA.DEV.V_CUSTOMER_ATTRIBUTES as 
with customer as 
(select
        recharge_subscription_id,
        recurly_subscription_id,
        customer_id,
        UPPER(customer_email) as customer_email,
        first_name,
        last_name
        from 
        ""SEED_DATA"".""DEV"".""SUBSCRIPTION""
 )
   
, orders as 
    (
        with orders_clean as 
        (
            select subscription_id, 
                invoice_date, 
                lower(sku) as sku,
                case when sku ilike '%syn%' or sku ilike 'ds01%' then 'DS-01'
                    when sku ilike '%pds%' then 'PDS-08'
                    else null end as product,
               case when product = 'DS-01' and sku ilike '%wk%' then 'DS-01 Welcome Kit'
                    when product = 'DS-01' and sku ilike '%wk-3mo%' then 'DS-01 Welcome kit - 3 Months'
                    when product = 'DS-01' and sku ilike '%wk-6mo%' then 'DS-01 Welcome kit - 6 Months'
                    when product = 'DS-01' and sku ilike '%rf' then 'DS-01 Refill'
                    when product = 'DS-01' and sku ilike '%2mo%' then 'DS-01 Refill - 2 Months'
                    when product = 'DS-01' and sku ilike '%3mo%' then 'DS-01 SRP Refill - 3 Months'
                    when product = 'DS-01' and sku ilike '%6mo%' then 'DS-01 SRP Refill - 6 Months'
                    when product = 'DS-01' and sku ilike '%trial%' then 'DS-01 Trial'
                    when product = 'PDS-08' and sku ilike '%wk%' then 'PDS-08 Welcome Kit'
                    when product = 'PDS-08' and sku ilike '%rf' then 'PDS-08 Refill'
                    when product = 'PDS-08' and sku ilike '%2mo%' then 'PDS-08 Refill - 2 Months'
                    when product = 'PDS-08' and sku ilike '%3mo%' then 'PDS-08 SRP Refill - 3 Months'
                    when product = 'PDS-08' and sku ilike '%6mo%' then 'PDS-08 SRP Refill - 6 Months'
                    when product = 'PDS-08' and sku ilike '%trial%' then 'PDS-08 Trial'
                    else null                    
                    end as clean_sku,
          
                case when clean_sku ilike '%Trial%' then 1 
                    when clean_sku ilike '%Welcome Kit%' then 2 
                    when clean_sku ilike '%Refill - 2 Months' then 3
                    when clean_sku ilike '%Refill' then 4
                    when clean_sku ilike '%Refill - 3 Months' then 5
                    when clean_sku ilike '%Refill - 6 Months' then 6 
                    end as sku_ranking,
                row_number() over(partition by subscription_id,product order by invoice_date,sku_ranking) as first_invoice_product_rank,
                row_number() over (partition by subscription_id,product order by invoice_date desc ,sku_ranking desc) as last_invoice_product_rank,
                row_number() over (partition by subscription_id order by invoice_date,sku_ranking ) as first_invoice_rank,
                row_number() over (partition by subscription_id order by invoice_date desc, sku_ranking desc) as last_invoice_rank,
                case when first_invoice_rank = 1 then invoice_date 
                    else null end as first_order_date,
                case when last_invoice_rank = 1 then invoice_date 
                    else null end as last_order_date,
                case when first_invoice_rank = 1 then clean_sku
                    else null end as first_sku,
                case when first_invoice_rank = 1 then 
                round(div0((discount*100),(total_amount_paid - tax - total_shipping_cost + discount)),0) else null end as first_discount_percentage,
                ----- adding as part of a test for base price discount
                case when first_invoice_rank = 1 then 
                round(div0((discount*100),(base_price)),0) else null end as first_discount_percentage_base_price,
                case when first_invoice_rank = 1 then promotion_code end as first_promotion_code,
                case when last_invoice_rank = 1 then clean_sku
                    else null end as last_sku,
                case when last_invoice_rank = 1 then 
                round(div0((discount*100),(total_amount_paid - tax - total_shipping_cost +discount)),0)                       else null end as last_discount_percentage,
                case when last_invoice_rank = 1 then promotion_code end as last_promotion_code
            from ""SEED_DATA"".""DEV"".""ORDER_HISTORY"" as o 
            where subscription_id is not null
        ),
    
        order_summary as
        (
            select
                subscription_id, 
                min(first_order_date) as first_order_date,
                min(first_sku) as first_sku,
                min(first_discount_percentage) as first_discount_percentage,
                min(first_promotion_code) as first_promotion_code,
                max(last_order_date) as last_order_date,
                max(last_sku) as last_sku,
                max(last_discount_percentage) as last_discount_percentage,
                max(last_promotion_code) as last_promotion_code
            from orders_clean    
            group by subscription_id
        )

        
    
        select recharge_subscription_id,
            recurly_subscription_id,
            min(coalesce(order_recharge.first_order_date,order_recurly.first_order_date)) as first_order_date,
            min(coalesce(order_recharge.first_sku,order_recurly.first_sku)) as first_sku,
            min(coalesce(order_recharge.first_discount_percentage,order_recurly.first_discount_percentage)) as first_discount_percentage,
            min(coalesce(order_recharge.first_promotion_code,order_recurly.first_promotion_code)) as first_promotion_code,
            max(coalesce(order_recurly.last_order_date,order_recharge.last_order_date)) as last_order_date,
            max(coalesce(order_recurly.last_sku,order_recharge.last_sku)) as last_sku,
            max(coalesce(order_recurly.last_discount_percentage,order_recharge.last_discount_percentage)) as last_discount_percentage,
            max(coalesce(order_recurly.last_promotion_code,order_recharge.last_promotion_code)) as last_promotion_code
        from ""SEED_DATA"".""DEV"".""SUBSCRIPTION"" as s 
            left join order_summary as order_recharge on order_recharge.subscription_id = s.recharge_subscription_id
            left join order_summary as order_recurly on order_recurly.subscription_id = s.recurly_subscription_id
        group by recharge_subscription_id,recurly_subscription_id
       
      )
       
    , customer_sub_info as 
    (
        with subscription_product as 
        (
            select customer_id, 
                   activated_at,
                   cancelled_at,
                   datediff(month,activated_at,coalesce(cancelled_at,current_date()))+1 as months_active
        from ""SEED_DATA"".""DEV"".""SUBSCRIPTION""
        )

    select customer_id,
        min(activated_at) as first_subscription_date,
        max(activated_at) as last_subscription_date,
        min(cancelled_at) as first_cancel_date,
        max(cancelled_at) as last_cancel_date,
        sum(months_active) as months_active_customer -- overlaps are considered as multiple 
    from subscription_product
    group by customer_id
    )
     
   ,pause as 
    (
        select subscription_uuid as subscription_id,
            version_started_at as Last_pause_start_date, 
            version_ended_at_clean as Last_pause_end_date,
            row_number() over(partition by subscription_uuid order by version_started_at desc) as pause_rank
        from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_PAUSE_HISTORY""
        qualify pause_rank = 1 
    
    ),
    
    next_bill as 
    (
        select subscription_id, next_bill_date
        from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_NEXT_BILL_DATE""
    ),
    
    sku_history as 
    (
        select subscription_uuid as subscription_id, 
            min(case when (updated_plan_code ilike '%3mo%' or updated_plan_code ilike '%6mo%') then version_started_at else null end) as first_enroll_SRP_Date,
            max(case when (updated_plan_code ilike '%3mo%' or updated_plan_code ilike '%6mo%') then version_started_at else null end) as last_enroll_date_srp,
            case when first_enroll_srp_date is not null then 'Y' else 'N' end as Has_Enrolled_SRP

        from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_STATUS_HISTORY""
        group by subscription_uuid
    )
    ---------CHECKOUT SURVEY----------
    ,CO_Survey as
      
      (        
select 
  to_date(timestamp) as date
, date_trunc('month',to_date(timestamp)) as month_date
, upper(email) as email
, question
, response
, count(distinct user_id) as user_count
from SEGMENT_EVENTS.SEED_COM.SURVEY_QUESTION_ANSWERED
where question = 'How did you learn about Seed?'
group by 1,2,3,4,5
        )
     , LTA as 
     
     (
       select recurly_subscription_id,
              recharge_subscription_id,
              CHANNEL_PLATFORM, 
              CHANNEL_GROUPING 
              from 
              SEED_DATA.DEV.V_SUBSCRIPTION_ACTIVATION_LTA_DETAIL      
     )
        

    
    select 
        s.recharge_subscription_id,
        s.recurly_subscription_id,
        s.customer_id,
        s.customer_email,
        s.first_name,
        s.last_name,
        cus_sub.first_subscription_date,
        date_trunc(month,cus_sub.first_subscription_date) as first_subscription_month,
        cus_sub.last_subscription_date,
        date_trunc(month,cus_sub.last_subscription_date) as last_subscription_month,
        cus_sub.first_cancel_date,
        cus_sub.last_cancel_date,
        case when cus_sub.first_cancel_date is not null then 'Y' else 'N' end as Has_Cancelled,
        o.first_order_date,
        o.first_sku,
        o.first_discount_percentage,
        o.first_promotion_code,
        o.last_order_date,
        o.last_sku,
        o.last_discount_percentage,
        o.last_promotion_code,
        p.Last_pause_start_date,
        case when p.Last_pause_start_date is not null then 'Y' else 'N' end as Has_Paused,
        date_trunc(month, p.Last_pause_start_date) as Last_pause_month,
        p.Last_pause_end_date,
        case when (Has_Cancelled = 'Y' or has_paused = 'Y') then 'Y' else 'N' end as Has_Paused_or_Cancelled,
        first_enroll_SRP_Date,
        last_enroll_date_srp,
        Has_Enrolled_SRP,
        nb.next_bill_date,
        date_trunc(month,nb.next_bill_date) as next_bill_month,
        months_active_customer as customer_age,
        cs.date as checkout_survey_date,
        cs.month_date as checkout_survey_month,
        cs.RESPONSE as checkout_survey_response,
        lta.CHANNEL_PLATFORM, 
        lta.CHANNEL_GROUPING, 
        datediff(day,cus_sub.first_subscription_date,coalesce(cus_sub.last_cancel_date,current_date()))+1 as days_from_first_subscription_date_last_cancel_date,
        datediff(day,Last_pause_start_date,coalesce(p.Last_pause_end_date,current_date()))+1 as days_since_last_pause_date,
        datediff(day,cus_sub.last_cancel_date,current_date())+1 as days_since_last_cancel_date
        
    from customer s
        left join customer_sub_info as cus_sub on cus_sub.customer_id = s.customer_id
        left join orders as o on coalesce(s.recurly_subscription_id,'') = coalesce(o.recurly_subscription_id,'') and coalesce(s.recharge_subscription_id,'') = coalesce(o.recharge_subscription_id,'')
        left join pause as p on s.recurly_subscription_id = p.subscription_id
        left join next_bill as nb on s.recurly_subscription_id = nb.subscription_id
        left join sku_history as sku on sku.subscription_id = s.recurly_subscription_id
        left join co_survey as cs on s.customer_email = cs.email
        left join lta on coalesce(s.recurly_subscription_id,'') = coalesce(lta.recurly_subscription_id,'') and coalesce(s.recharge_subscription_id,'') = coalesce(lta.recharge_subscription_id,'')
       -- where s.recurly_subscription_id = '6bbccb88514f948d0250cb46f1b8eeb4'
        
        group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37"
"V_DIM_DATE","CREATE OR REPLACE VIEW SEED_DATA.DEV.V_DIM_DATE
AS
-- Leverage ROW_NUMBER to ensure a gap-free sequence.
-- This is a CTE to allow ""ROW_NUMBER"" to be leveraged in window functions.
WITH ""GAPLESS_ROW_NUMBERS"" AS (
  SELECT
    ROW_NUMBER() OVER (ORDER BY seq4()) - 1 as ""ROW_NUMBER"" 
  FROM TABLE(GENERATOR(rowcount => 366 * (2100 - 1970)) ) -- rowcount is 366 days x (2100 - 1970) years to cover leap years. A later filter can remove the spillover days
)
SELECT
    DATEADD('day', ""ROW_NUMBER"", DATE(0)) as ""DATE"" -- Dimension starts on 1970-01-01 but a different value can be entered if desired
  , EXTRACT(year FROM ""DATE"") as ""YEAR""
  , EXTRACT(month FROM ""DATE"") as ""MONTH""
  , EXTRACT(day FROM ""DATE"") as ""DAY""
  , EXTRACT(dayofweek FROM ""DATE"") as ""DAY_OF_WEEK""
  , EXTRACT(dayofyear FROM ""DATE"") as ""DAY_OF_YEAR""
  , EXTRACT(quarter FROM ""DATE"") as ""QUARTER""
  , MIN(""DAY_OF_YEAR"") OVER (PARTITION BY ""YEAR"", ""QUARTER"") as ""QUARTER_START_DAY_OF_YEAR""
  , ""DAY_OF_YEAR"" - ""QUARTER_START_DAY_OF_YEAR"" + 1 as ""DAY_OF_QUARTER""
  , TO_VARCHAR(""DATE"", 'MMMM') as ""MONTH_NAME""
  , TO_VARCHAR(""DATE"", 'MON') as ""MONTH_NAME_SHORT""
  , CASE ""DAY_OF_WEEK""
     WHEN 0 THEN 'Sunday'
     WHEN 1 THEN 'Monday'
     WHEN 2 THEN 'Tuesday'
     WHEN 3 THEN 'Wednesday'
     WHEN 4 THEN 'Thursday'
     WHEN 5 THEN 'Friday'
     WHEN 6 THEN 'Saturday'
    END as ""DAY_NAME""
  , TO_VARCHAR(""DATE"", 'DY') as ""DAY_NAME_SHORT""
  , EXTRACT(yearofweekiso FROM ""DATE"") as ""ISO_YEAR""
  , EXTRACT(weekiso FROM ""DATE"") as ""ISO_WEEK""
  , CASE
      WHEN ""ISO_WEEK"" <= 13 THEN 1
      WHEN ""ISO_WEEK"" <= 26 THEN 2
      WHEN ""ISO_WEEK"" <= 39 THEN 3
      ELSE 4
    END as ""ISO_QUARTER""
  , EXTRACT(dayofweekiso FROM ""DATE"") as ""ISO_DAY_OF_WEEK""
  , MAX(""DAY_OF_YEAR"") OVER (PARTITION BY ""YEAR"") as ""DAYS_IN_YEAR""
  , ""DAYS_IN_YEAR"" - ""DAY_OF_YEAR"" as ""DAYS_REMAINING_IN_YEAR""
FROM ""GAPLESS_ROW_NUMBERS""
WHERE ""YEAR"" < 2100 -- WHERE clause then restricts back to desired timeframe since 366 days per year when generating row numbers is too many
ORDER BY 1 DESC"
"V_DQM_TABLE_REFRESH_JOBS","create or replace view SEED_DATA.DEV.V_DQM_TABLE_REFRESH_JOBS as 

with dqm_build as (
select 
'SEED_DATA.DEV.ORDER_HISTORY' as source,
'SEED_DATA_TASK_ORDER_HISTORY' as task_name,
count(*) as row_count,
max(latest_refresh_time) as latest_refresh_time,
max( (timestamp_tz_from_parts(year(current_date), month(current_date), day(current_date), 7, 00, 00, 0, 'America/New_York')) ) as expected_time
from
SEED_DATA.DEV.ORDER_HISTORY

union all

select 
'SEED_DATA.DEV.SUBSCRIPTION_MASTER' as source,
'SEED_DATA_TASK_SUBSCRIPTION_MASTER' as task_name,
count(*) as row_count,
max(latest_refresh_time) as latest_refresh_time,
max( (timestamp_tz_from_parts(year(current_date), month(current_date), day(current_date), 7, 15, 00, 0, 'America/New_York')) ) as expected_time
from
 SEED_DATA.DEV.SUBSCRIPTION_MASTER

union all

select 
'SEED_DATA.DEV.SEED_ACQUISITION_ALL' as source,
'SEED_DATA_TASK_SEED_ACQUISITION_ALL' as task_name,
count(*) as row_count,
max(latest_refresh_time) as latest_refresh_time,
max( (timestamp_tz_from_parts(year(current_date), month(current_date), day(current_date), 7, 30, 00, 0, 'America/New_York')) ) as expected_time
from
SEED_DATA.DEV.SEED_ACQUISITION_ALL

union all

select 
'SEED_DATA.DEV.SEED_ACQUISITION_VERT' as source,
'SEED_DATA_TASK_SEED_ACQUISITION_VERT' as task_name,
count(*) as row_count,
max(latest_refresh_time) as latest_refresh_time,
max( (timestamp_tz_from_parts(year(current_date), month(current_date), day(current_date), 7, 45, 00, 0, 'America/New_York')) ) as expected_time
from
SEED_DATA.DEV.SEED_ACQUISITION_VERT

union all

select 
'SEED_DATA.DEV.CANCELLATION_TRANSACTION_HISTORY' as source,
'SEED_DATA_TASK_CANCELLATION_TRANSACTION_HISTORY' as task_name,
count(*) as row_count,
max(latest_refresh_time) as latest_refresh_time,
max( (timestamp_tz_from_parts(year(current_date), month(current_date), day(current_date), 7, 00, 00, 0, 'America/New_York')) ) as expected_time
from
SEED_DATA.DEV.CANCELLATION_TRANSACTION_HISTORY

union all

select 
'SEED_DATA.DEV.EVENTS_ORDER_COMPLETE' as source,
'SEED_DATA_TASK_EVENTS_ORDER_COMPLETE' as task_name,
count(*) as row_count,
max(latest_refresh_time) as latest_refresh_time,
max( (timestamp_tz_from_parts(year(current_date), month(current_date), day(current_date), 6, 00, 00, 0, 'America/New_York')) ) as expected_time
from
SEED_DATA.DEV.EVENTS_ORDER_COMPLETE

union all

select 
'SEED_DATA.DEV.SUBSCRIPTION_PAUSE_HISTORY' as source,
'SEED_DATA_TASK_PAUSE_HISTORY' as task_name,
count(*) as row_count,
max(latest_refresh_time) as latest_refresh_time,
max( (timestamp_tz_from_parts(year(current_date), month(current_date), day(current_date), 6, 00, 00, 0, 'America/New_York')) ) as expected_time
from
SEED_DATA.DEV.SUBSCRIPTION_PAUSE_HISTORY

union all

select 
'SEED_DATA.DEV.SHIPMENT_HISTORY' as source,
'SEED_DATA_TASK_SHIPMENT_HISTORY' as task_name,
count(*) as row_count,
max(latest_refresh_time) as latest_refresh_time,
max( (timestamp_tz_from_parts(year(current_date), month(current_date), day(current_date), 6, 00, 00, 0, 'America/New_York')) ) as expected_time
from
SEED_DATA.DEV.SHIPMENT_HISTORY

union all

select 
'SEED_DATA.DEV.SUBSCRIPTION' as source,
'SEED_DATA_TASK_SUBSCRIPTION' as task_name,
count(*) as row_count,
max(latest_refresh_time) as latest_refresh_time,
max( (timestamp_tz_from_parts(year(current_date), month(current_date), day(current_date), 6, 00, 00, 0, 'America/New_York')) ) as expected_time
from
SEED_DATA.DEV.SUBSCRIPTION

union all

select 
'SEED_DATA.DEV.SUBSCRIPTION_STATUS_HISTORY' as source,
'SEED_DATA_TASKSUBSCRIPTION_STATUS_HISTORY' as task_name,
count(*) as row_count,
max(latest_refresh_time) as latest_refresh_time,
max( (timestamp_tz_from_parts(year(current_date), month(current_date), day(current_date), 6, 00, 00, 0, 'America/New_York')) ) as expected_time
from
SEED_DATA.DEV.SUBSCRIPTION_STATUS_HISTORY

union all

select 
'SEED_DATA.DEV.SUBSCRIPTION_NEXT_BILL_DATE' as source,
'SEED_DATA_TASK_NEXT_BILL_DATE' as task_name,
count(*) as row_count,
max(latest_refresh_time) as latest_refresh_time,
max( (timestamp_tz_from_parts(year(current_date), month(current_date), day(current_date), 6, 00, 00, 0, 'America/New_York')) ) as expected_time
from
SEED_DATA.DEV.SUBSCRIPTION_NEXT_BILL_DATE

union all

select 
'SEED_DATA.DEV.REHCARGE_TRANSACTION_HISTORY' as source,
'SEED_DATA_TASK_REHCARGE_TRANSACTION_HISTORY' as task_name,
count(*) as row_count,
max(latest_refresh_time) as latest_refresh_time,
max( (timestamp_tz_from_parts(year(current_date), month(current_date), day(current_date), 6, 00, 00, 0, 'America/New_York')) ) as expected_time
from
SEED_DATA.DEV.REHCARGE_TRANSACTION_HISTORY

/*union all

select 
'SEED_DATA.DEV.RECURLY_TRANSACTION_HISTORY' as source,
'SEED_DATA_TASK_RECURLY_TRANSACTION_HISTORY' as task_name,
count(*) as row_count,
max(latest_refresh_time) as latest_refresh_time,
max( (timestamp_tz_from_parts(year(current_date), month(current_date), day(current_date), 6, 15, 00, 0, 'America/New_York')) ) as expected_time
from
SEED_DATA.DEV.RECURLY_TRANSACTION_HISTORY*/

union all

select 
'SEED_DATA.DEV.SUBSCRIPTION_TRANSACTION_HISTORY' as source,
'SEED_DATA_TASK_SUBSCRIPTION_TRANSACTION_HISTORY' as task_name,
count(*) as row_count,
max(latest_refresh_time) as latest_refresh_time,
max( (timestamp_tz_from_parts(year(current_date), month(current_date), day(current_date), 6, 30, 00, 0, 'America/New_York')) ) as expected_time
from
SEED_DATA.DEV.SUBSCRIPTION_TRANSACTION_HISTORY

union all

select 
'SEED_DATA.DEV.SUBSCRIPTION_ACTIVATION_LTA' as source,
'SEED_DATA_TASK_SUBSCRIPTION_ACTIVATION_LTA' as task_name,
count(*) as row_count,
max(latest_refresh_time) as latest_refresh_time,
max( (timestamp_tz_from_parts(year(current_date), month(current_date), day(current_date), 8, 00, 00, 0, 'America/New_York')) ) as expected_time
from
SEED_DATA.DEV.SUBSCRIPTION_ACTIVATION_LTA

union all

select 
'SEED_DATA.DEV.FINANCIAL_MODEL' as source,
'SEED_DATA_TASK_FINANCIAL_MODEL' as task_name,
count(*) as row_count,
max(latest_refresh_time) as latest_refresh_time,
max( (timestamp_tz_from_parts(year(current_date), month(current_date), day(current_date), 7, 30, 00, 0, 'America/New_York')) ) as expected_time
from
SEED_DATA.DEV.FINANCIAL_MODEL

union all

select 
'SEED_DATA.DEV.REBILL_ELIGIBLE_SNAPSHOT' as source,
'SEED_DATA_TASK_REBILL_ELIGIBLE_SNAPSHOT' as task_name,
count(*) as row_count,
max(snapshot_date) as latest_refresh_time,
max( (timestamp_tz_from_parts(year(current_date), month(current_date), day(current_date), 3, 00, 00, 0, 'America/New_York')) ) as expected_time
from
SEED_DATA.DEV.REBILL_ELIGIBLE_SNAPSHOT


)
select
source,
task_name,
row_count,
latest_refresh_time,
CONVERT_TIMEZONE('America/New_York',TO_TIMESTAMP_TZ(expected_time)) as expected_time,
datediff('sec', expected_time, latest_refresh_time) as run_time
from dqm_build
order by row_count desc


"
"V_EMAIL_CAMPAIGN_PERFORMANCE","create or replace view SEED_DATA.DEV.V_EMAIL_CAMPAIGN_PERFORMANCE as 

select 

    cast(CAMPAIGN_ID as VARCHAR) CAMPAIGN_ID,
	CAST(CAMPAIGN_NAME as VARCHAR) CAMPAIGN_NAME,
	CAST(DELIVERY_METHOD as VARCHAR) DELIVERY_METHOD,
	CAST(CAMPAIGN_TYPE as VARCHAR) CAMPAIGN_TYPE,
  	START_DATE,
	END_DATE,
	START_TIMESTAMP,
	END_TIMESTAMP,
	CAST(STATUS as VARCHAR) STATUS,
	CAST(TYPE as VARCHAR) TYPE,
	CAST(SUB_TYPE AS VARCHAR) SUB_TYPE,
	CAST(PRODUCT AS VARCHAR) PRODUCT ,
	CAST(DISCOUNT AS VARCHAR) DISCOUNT,
	CAST(SEGMENT AS VARCHAR) SEGMENT,
	CAST(FLOW_TYPE AS VARCHAR) FLOW_TYPE,
	CAST(FLOW_SUBTYPE AS VARCHAR) FLOW_SUBTYPE ,
	CAST(EMAIL_SUBJECT AS VARCHAR) EMAIL_SUBJECT,
	SENT,
	BOUNCED,
	OPENED,
	UNIQUE_OPENED,
	CLICKED,
	UNIQUE_CLICKED,
	UNSUBSCRIBED,
	DELIVERED,
	DELIVERD_RATE,
	BOUNCED_RATE,
	OPENED_RATE,
	CLICK_RATE,
	CLICK_TO_OPEN_RATE,
	UNSUBSCRIBED_RATE,
	CONVERSION_ACTIVE,
	CONVERSION_RATE_ACTIVE,
	CONVERSION_STP,
	CONVERSION_RATE_STP,
    'ITERABLE' as PLATFORM
 from
""SEED_DATA"".""DEV"".""V_ITERABLE_CAMPAIGN_PERFORMANCE"" icp

union all

select 
    null as CAMPAIGN_ID,
	CAST(CAMPAIGN_NAME as VARCHAR) CAMPAIGN_NAME,
	CAST(DELIVERY_METHOD as VARCHAR) DELIVERY_METHOD,
	CAST(CAMPAIGN_TYPE as VARCHAR) CAMPAIGN_TYPE,
  	START_DATE,
	END_DATE,
	START_TIMESTAMP,
	END_TIMESTAMP,
	CAST(STATUS as VARCHAR) STATUS,
    null as type,
    null as sub_type,
    null as product,
    null as discount,
    null as segment,
    null as flow_type,
    null as flow_subtype,
	CAST(EMAIL_SUBJECT AS VARCHAR) EMAIL_SUBJECT,
	SENT,
	BOUNCED,
	OPENED,
	UNIQUE_OPENED,
	CLICKED,
	UNIQUE_CLICKED,
	UNSUBSCRIBED,
	DELIVERED,
	DELIVERD_RATE,
	BOUNCED_RATE,
	OPENED_RATE,
	CLICK_RATE,
	CLICK_TO_OPEN_RATE,
	UNSUBSCRIBED_RATE,
	CONVERSION_ACTIVE,
	CONVERSION_RATE_ACTIVE,
	CONVERSION_STP,
	CONVERSION_RATE_STP,
    'KLAVIYO' as PLATFORM

 from
 ""SEED_DATA"".""DEV"".""V_KLAVIYO_CAMPAIGN_PERFORMANCE"" icp

union all

select  
    null as CAMPAIGN_ID,
	CAMPAIGN_NAME,
	DELIVERY_METHOD,
	CAMPAIGN_TYPE,
	START_DATE,
	END_DATE,
	START_TIMESTAMP,
	END_TIMESTAMP,
	STATUS,
    null as type,
    null as sub_type,
    null as product,
    null as discount,
    null as segment,
    null as flow_type,
    null as flow_subtype,
	null as EMAIL_SUBJECT,
	SENT,
	BOUNCED,
	OPENED,
	UNIQUE_OPENED,
	CLICKED,
	UNIQUE_CLICKED,
	UNSUBSCRIBED,
	DELIVERED,
	DELIVERD_RATE,
	BOUNCED_RATE,
	OPENED_RATE,
	CLICK_RATE,
	CLICK_TO_OPEN_RATE,
	UNSUBSCRIBED_RATE,
	CONVERSION_ACTIVE,
	CONVERSION_RATE_ACTIVE,
	CONVERSION_STP,
	CONVERSION_RATE_STP,
    'KLAVIYO' as PLATFORM

 from
 ""SEED_DATA"".""DEV"".""V_KLAVIYO_FLOW_PERFORMANCE"" icp

;"
"V_FINANCIAL_MODEL","create or replace view SEED_DATA.DEV.V_FINANCIAL_MODEL(
	DATE,
	MONTH_DATE,
	SKU,
	PRODUCT,
	SKU_CLEAN,
	TOTAL_CANCEL_QTY,
	TOTAL_PAUSE_QTY,
	TOTAL_CREATED_SUB_QTY,
	TOTAL_REACTIVATED_SUB_QTY,
	TOTAL_NEW_SUB_QTY,
	TOTAL_CREATED_ACCTS,
	TOTAL_CREATED_REACTIVATED_ACCTS,
	TOTAL_CREATED_NEW_ACCTS,
	TOTAL_CREATED_SUB_IDS,
	TOTAL_CREATED_NEW_SUB_ID,
	TOTAL_CREATED_REACTIVATED_SUB_ID,
	INV_TOTAL_SUB_QTY,
	INV_TOTAL_CREATED_SUB_QTY,
	INV_TOTAL_NEW_SUB_QTY,
	INV_TOTAL_REACTIVATED_SUB_QTY,
	INV_TOTAL_SUB_IDS,
	INV_TOTAL_CREATED_SUB_IDS,
	INV_TOTAL_CREATED_NEW_SUB_ID,
	INV_TOTAL_CREATED_REACTIVATED_SUB_ID,
	INV_TOTAL_ACCOUNTS,
	INV_TOTAL_CREATED_ACCTS,
	INV_TOTAL_CREATED_NEW_ACCTS,
	INV_TOTAL_CREATED_REACTIVATED_ACCTS,
	TOTAL_BASE_PRICE,
	ACTIVATED_BASE_PRICE,
	ACTIVATED_NEW_BASE_PRICE,
	ACTIVATED_REACTIVATE_BASE_PRICE,
	TOTAL_AMOUNT_PAID,
	ACTIVATED_TOTAL_AMOUNT_PAID,
	ACTIVATED_NEW_TOTAL_AMOUNT_PAID,
	ACTIVATED_REACTIVATE_TOTAL_AMOUNT_PAID,
	TOTAL_GROSS_REV,
	ACTIVATED_TOTAL_GROSS_REV,
	ACTIVATED_NEW_TOTAL_GROSS_REV,
	ACTIVATED_REACTIVATE_TOTAL_GROSS_REV,
	TOTAL_DISCOUNT,
	ACTIVATED_TOTAL_DISCOUNT,
	ACTIVATED_NEW_TOTAL_DISCOUNT,
	ACTIVATED_REACTIVATE_TOTAL_DISCOUNT,
	TOTAL_SHIPPING_COST,
	ACTIVATED_TOTAL_SHIPPING_COST,
	ACTIVATED_NEW_TOTAL_SHIPPING_COST,
	ACTIVATED_REACTIVATE_TOTAL_SHIPPING_COST,
	TOTAL_REFUNDED,
	ACTIVATED_TOTAL_REFUNDED,
	ACTIVATED_NEW_REFUNDED,
	ACTIVATED_REACTIVATE_TOTAL_REFUNDED,
	TOTAL_CREDIT,
	ACTIVATED_TOTAL_CREDIT,
	ACTIVATED_NEW_TOTAL_CREDIT,
	ACTIVATED_REACTIVATE_TOTAL_CREDIT,
	TOTAL_TAX,
	ACTIVATED_TOTAL_TAX,
	ACTIVATED_NEW_TOTAL_TAX,
	ACTIVATED_REACTIVATE_TOTAL_TAX,
	INVOICED_FROM_PRIOR_COHORT,
	UPGRADE_FROM_SYNWK,
	UPGRADE_FROM_SYNRF
) as
with date_spine as (
    select 
    date
    from seed_data.dev.dim_date
    where date between '2018-01-01' and to_date(current_date())
)
  
, products as (
   select UPPER(SKU) AS SKU
          from 
            ""SEED_DATA"".""DEV"".""DIM_PRODUCT""
  )
  
, PRODUCT_DATE as (
   SELECT 
   DATE,
   SKU
   FROM products
   cross join date_spine 
)
  ---------added 9-14-2023----------
					
,orders as								
(    select
  TO_DATE(INVOICE_DATE) as INVOICE_DATE,
        CUSTOMER_ID,
        SUBSCRIPTION_ID as SUBSCRIPTION_ID,
        INVOICE_ID as INVOICE_ID,
        INVOICE_NUMBER AS INVOICE_NUMBER,
        TRANSACTION_ID,
        QUANTITY,
        BASE_PRICE,
        TOTAL_AMOUNT_PAID,
        TAX,
        DISCOUNT,
        TOTAL_SHIPPING_COST,
        AMOUNT_REFUNDED,
        CREDIT_APPLIED,
        UPPER(sku) AS SKU,
        'Billed' as bill_flag								
        from SEED_DATA.DEV.ORDER_HISTORY --- all orders and adjusted orders for SRP 
        where sku is not null -- removing non mainstream sku
        and subscription_id is not null 

)					
								                   		
, transaction as (
								
select 
o.*  , s.reactivation_flag,
case when to_date(s.activated_at) = to_date(invoice_date) then 'New' else 'Recurring' end as sub_flag,
        base_price
        - tax 
        - COALESCE(total_shipping_cost,0) 
        + discount 
        + COALESCE(credit_applied, 0) as gross_revenue    
from orders as o								
left join seed_data.dev.subscription_master as s on o.subscription_id = s.recurly_subscription_id								
				
)			  
  
, CANCELS as
(
    select to_date(cancelled_at) as date,
    UPPER(sku) as sku,
    ifnull(sum(quantity),0) as sub_cancellation_qty
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
    where 
    to_date(cancelled_at) between '2018-01-01' and to_date(current_date())
    group by 1,2

), PAUSED as 
(
    select to_date(pause_start_date) as date,
    UPPER(sku) as sku,
    ifnull(sum(quantity),0) as sub_pause_cnt
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
    where 
    to_date(pause_start_date) between '2018-01-01' and to_date(current_date())
    group by 1,2

)
, REACTIVATED_SUBS as (
select 
  to_date(activated_at) as date,
 UPPER(sku) as sku,
 ifnull(sum(quantity),0) as sub_reactivation_qty
from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 1
group by 1,2
)

, NEW_SUBS as (
select 
  to_date(activated_at) as date,
   UPPER(sku) as sku,
  ifnull(sum(quantity),0) as sub_new_qty
from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 0 
  --and   to_date(activated_at) = '2023-08-01'
group by 1,2
)

,ALL_SUBS as (
select 
  to_date(activated_at) as date,
  UPPER(sku) as sku,
  ifnull(sum(quantity),0) as sub_created_qty
from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
group by 1,2
)

,ALL_ACCOUNTS as (
select 
  to_date(activated_at) as date,
   UPPER(sku) as sku,
  ifnull(count(distinct customer_id),0) as accounts_all
from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
group by 1,2
)

, REACTIVATED_ACCOUNTS as (
select 
  to_date(activated_at) as date,
   UPPER(sku) as sku,
  ifnull(count(distinct customer_id),0) as account_renew
from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 1
group by 1,2
)

, NEW_ACCOUNTS as (
select 
  to_date(activated_at) as date,
 UPPER(sku) as sku,
 ifnull(count(distinct customer_id),0) as account_new
from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 0
group by 1,2
)  
  

, NEW_SUB_ID as (
select 
  to_date(activated_at) as date,
  UPPER(sku) as sku,
  ifnull(count(distinct recurly_subscription_id),0) as sub_id_new
from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" 
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 0 and recurly_subscription_id is not null
group by 1,2
  union all
  
  select 
  to_date(activated_at) as date,
   UPPER(sku) as sku,
  ifnull(count(distinct recharge_subscription_id),0) as sub_id_new
from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" 
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 0 and recharge_subscription_id is not null
group by 1,2
  
)

, REACTIVATED_SUB_ID as (
select 
  to_date(activated_at) as date,
   UPPER(sku) as sku,
  ifnull(count(distinct recurly_subscription_id),0) as sub_id_renew
from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 1 and recurly_subscription_id is not null
group by 1,2
  
  union all
  
  select 
  to_date(activated_at) as date,
   UPPER(sku) as sku,
  ifnull(count(distinct recharge_subscription_id),0) as sub_id_renew
from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 1 and recharge_subscription_id is not null
group by 1,2
  
)	  

,waterfall as (select 
invoice_date as date,
                 UPPER(SKU) as SKU,
       sum(invoiced_From_Prior_Cohort) as invoiced_From_Prior_Cohort,
       sum(upgrade_from_synwk) as upgrade_from_synwk,
       sum(upgrade_from_synrf) as upgrade_from_synrf
     
from ""SEED_DATA"".""DEV"".""V_SRP_INVOICE_BUCKETS"" group by 1,2 order by 1 desc
    )
    
,final as  (select
        ds.date,
        date_trunc(month,ds.date) as month_date,
        ds.sku,
        case when ds.sku ilike '%syn%' or ds.sku ilike 'ds01%' then 'DS-01'								
        when ds.sku ilike '%pds%' then 'PDS-08'								
        else null end as product,								
        case when ds.sku ilike '%wk' then 'Welcome Kit'								
             when ds.sku ilike '%wk-3mo%' then 'Welcome kit - 3 Months'								
             when ds.sku ilike '%wk-6mo%' then 'Welcome kit - 6 Months'								
             when ds.sku ilike '%rf' then 'Refill'								
             when ds.sku ilike '%2mo%' then 'Refill - 2 Months'								
             when ds.sku ilike '%3mo%' then 'Refill - 3 Months'								
             when ds.SKU ilike '%6mo%' then 'Refill - 6 Months'								
        else null end as sku_clean																						
, ifnull(max(cth.sub_cancellation_qty),0) as TOTAL_CANCEL_QTY
, ifnull(max(pau.sub_pause_cnt),0) as TOTAL_PAUSE_QTY
, ifnull(max(sub.sub_created_qty),0) as TOTAL_CREATED_SUB_QTY
, ifnull(max(rsu.sub_reactivation_qty),0) as TOTAL_REACTIVATED_SUB_QTY
, ifnull(max(nsu.sub_new_qty),0) as TOTAL_NEW_SUB_QTY
, ifnull(max(aa.accounts_all),0) as TOTAL_CREATED_ACCTS
, ifnull(max(ra.account_renew),0) as TOTAL_CREATED_REACTIVATED_ACCTS
, ifnull(max(na.account_new),0) as TOTAL_CREATED_NEW_ACCTS
, ifnull(max(nsi.sub_id_new),0)+ifnull(max(rsi.sub_id_renew),0) as TOTAL_CREATED_SUB_IDS
, ifnull(max(nsi.sub_id_new),0) as TOTAL_CREATED_NEW_SUB_ID
, ifnull(max(rsi.sub_id_renew),0) as TOTAL_CREATED_REACTIVATED_SUB_ID

,IFNULL(SUM(o.QUANTITY),0) as INV_TOTAL_SUB_QTY
,IFNULL(sum(case when (sub_flag = 'New') then o.quantity end),0) as INV_TOTAL_CREATED_SUB_QTY
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 0 then o.quantity end),0) as INV_TOTAL_NEW_SUB_QTY
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 1  then o.quantity end),0) as INV_TOTAL_REACTIVATED_SUB_QTY
      ,ifnull(count(distinct subscription_id),0) as INV_TOTAL_SUB_IDS
      ,IFNULL(COUNT(distinct case when sub_flag = 'New' then o.SUBSCRIPTION_ID end),0) as INV_TOTAL_CREATED_SUB_IDS
      ,IFNULL(COUNT(distinct case when sub_flag = 'New' and reactivation_flag = 0  then o.SUBSCRIPTION_ID end),0) as INV_TOTAL_CREATED_NEW_SUB_ID
      ,IFNULL(COUNT(distinct case when sub_flag = 'New' and reactivation_flag = 1  then o.SUBSCRIPTION_ID end),0) as INV_TOTAL_CREATED_REACTIVATED_SUB_ID
      ,ifnull(count(distinct o.customer_id),0) as INV_TOTAL_ACCOUNTS
      ,IFNULL(COUNT(distinct case when sub_flag = 'New' then o.CUSTOMER_ID end),0) as INV_TOTAL_CREATED_ACCTS
      ,IFNULL(COUNT(distinct case when sub_flag = 'New' and reactivation_flag = 0  then o.CUSTOMER_ID end),0) as INV_TOTAL_CREATED_NEW_ACCTS
      ,IFNULL(COUNT(distinct case when sub_flag = 'New' and reactivation_flag = 1 then o.CUSTOMER_ID end),0) as INV_TOTAL_CREATED_REACTIVATED_ACCTS
  --------------------------------INVOICE>ORDER REV INFO-----------------------------------  
      ,IFNULL(SUM(BASE_PRICE),0) as TOTAL_BASE_PRICE
      ,IFNULL(sum(case when  sub_flag = 'New'  then BASE_PRICE end),0) as ACTIVATED_BASE_PRICE
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 0 then BASE_PRICE end),0) as ACTIVATED_NEW_BASE_PRICE
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 1  then BASE_PRICE end),0) as ACTIVATED_REACTIVATE_BASE_PRICE
      ,IFNULL(SUM(TOTAL_AMOUNT_PAID),0) as TOTAL_AMOUNT_PAID
      ,IFNULL(sum(case when sub_flag = 'New' then TOTAL_AMOUNT_PAID end),0) as ACTIVATED_TOTAL_AMOUNT_PAID
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 0  then TOTAL_AMOUNT_PAID end),0) as ACTIVATED_NEW_TOTAL_AMOUNT_PAID
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 1 then TOTAL_AMOUNT_PAID end),0) as ACTIVATED_REACTIVATE_TOTAL_AMOUNT_PAID
      ,IFNULL(SUM(gross_revenue),0) as TOTAL_GROSS_REV
      ,IFNULL(sum(case when sub_flag = 'New'  then gross_revenue end),0) as ACTIVATED_TOTAL_GROSS_REV
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 0  then gross_revenue end),0) as ACTIVATED_NEW_TOTAL_GROSS_REV
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 1 then gross_revenue end),0) as ACTIVATED_REACTIVATE_TOTAL_GROSS_REV
      ,IFNULL(SUM(DISCOUNT),0) as TOTAL_DISCOUNT
      ,IFNULL(sum(case when sub_flag = 'New' then DISCOUNT end),0) as ACTIVATED_TOTAL_DISCOUNT
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 0  then DISCOUNT end),0) as ACTIVATED_NEW_TOTAL_DISCOUNT
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 1 then DISCOUNT end),0) as ACTIVATED_REACTIVATE_TOTAL_DISCOUNT
      ,IFNULL(SUM(TOTAL_SHIPPING_COST),0) as TOTAL_SHIPPING_COST
      ,IFNULL(sum(case when sub_flag = 'New' then TOTAL_SHIPPING_COST end),0) as ACTIVATED_TOTAL_SHIPPING_COST
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 0  then TOTAL_SHIPPING_COST end),0) as ACTIVATED_NEW_TOTAL_SHIPPING_COST
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 1 then TOTAL_SHIPPING_COST end),0) as ACTIVATED_REACTIVATE_TOTAL_SHIPPING_COST
      ,IFNULL(SUM(AMOUNT_REFUNDED),0) as TOTAL_REFUNDED
      ,IFNULL(sum(case when sub_flag = 'New'  then AMOUNT_REFUNDED end),0) as ACTIVATED_TOTAL_REFUNDED
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 0  then AMOUNT_REFUNDED end),0) as ACTIVATED_NEW_REFUNDED
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 1 then AMOUNT_REFUNDED end),0) as ACTIVATED_REACTIVATE_TOTAL_REFUNDED
      ,IFNULL(SUM(CREDIT_APPLIED),0) as TOTAL_CREDIT
      ,IFNULL(sum(case when sub_flag = 'New'  then CREDIT_APPLIED end),0) as ACTIVATED_TOTAL_CREDIT
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 0  then CREDIT_APPLIED end),0) as ACTIVATED_NEW_TOTAL_CREDIT
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 1 then CREDIT_APPLIED end),0) as ACTIVATED_REACTIVATE_TOTAL_CREDIT
      ,IFNULL(SUM(TAX),0) as TOTAL_TAX
      ,IFNULL(sum(case when sub_flag = 'New'  then TAX end),0) as ACTIVATED_TOTAL_TAX
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 0  then TAX end),0) as ACTIVATED_NEW_TOTAL_TAX
      ,IFNULL(sum(case when sub_flag = 'New' and reactivation_flag = 1 then TAX end),0) as ACTIVATED_REACTIVATE_TOTAL_TAX
  ---------added 9-14-2023----------
      ,ifnull(max(invoiced_From_Prior_Cohort),0) as invoiced_From_Prior_Cohort
      ,ifnull(max(upgrade_from_synwk),0) as upgrade_from_synwk
      ,ifnull(max(upgrade_from_synrf),0) as upgrade_from_synrf

  from PRODUCT_DATE as ds
  left join  transaction  as o
on ds.date = o.invoice_date and ds.sku = o.sku

left join CANCELS as cth
on ds.date = cth.date and ds.sku = cth.sku
---- join to paused subs
left join PAUSED as pau
on ds.date = pau.date and ds.sku = pau.sku
---- join to total subs
left join ALL_SUBS as sub
on ds.date = sub.date and ds.sku = sub.sku
---- join to reactivated subs
left join REACTIVATED_SUBS as rsu
on ds.date = rsu.date and ds.sku = rsu.sku
---------------join new subs---------
left join NEW_SUBS as nsu
on ds.date = nsu.date and ds.sku = nsu.sku
---------------join all accounts---------
left join ALL_ACCOUNTS  as aa
on ds.date = aa.date and ds.sku = aa.sku
---------------join reactivated accounts---------
left join REACTIVATED_ACCOUNTS  as ra
on ds.date = ra.date and ds.sku = ra.sku
---------------join new accounts---------
left join NEW_ACCOUNTS  as na
on ds.date = na.date and ds.sku = na.sku
---------------join new accounts---------
left join NEW_SUB_ID  as nsi
on ds.date = nsi.date and ds.sku = nsi.sku
---------------join new accounts---------
left join REACTIVATED_SUB_ID   as rsi
on ds.date = rsi.date and ds.sku = rsi.sku
left join waterfall  as wat
on o.invoice_date = wat.date and o.sku = wat.sku
group by 1,2,3,4,5
 )
select * from final;"
"V_ITERABLE_CAMPAIGN_PERFORMANCE","create or replace view SEED_DATA.DEV.V_ITERABLE_CAMPAIGN_PERFORMANCE(
	CAMPAIGN_ID,
	CAMPAIGN_NAME,
	DELIVERY_METHOD,
	CAMPAIGN_TYPE,
	START_DATE,
	END_DATE,
	START_TIMESTAMP,
	END_TIMESTAMP,
	STATUS,
	TYPE,
	SUB_TYPE,
	PRODUCT,
	DISCOUNT,
	SEGMENT,
	FLOW_TYPE,
	FLOW_SUBTYPE,
	EMAIL_SUBJECT,
	SENT,
	BOUNCED,
	OPENED,
	UNIQUE_OPENED,
	CLICKED,
	UNIQUE_CLICKED,
	UNSUBSCRIBED,
	DELIVERED,
	DELIVERD_RATE,
	BOUNCED_RATE,
	OPENED_RATE,
	CLICK_RATE,
	CLICK_TO_OPEN_RATE,
	UNSUBSCRIBED_RATE,
	CONVERSION_ACTIVE,
	CONVERSION_RATE_ACTIVE,
	CONVERSION_STP,
	CONVERSION_RATE_STP
) as 
-------------------------------------------ITERABLE-----------------------------------------------------
with campaigns as (
select 
cast(id as string) as CAMPAIGN_ID
,name as CAMPAIGN_NAME
,message_medium as DELIVERY_METHOD
,type as CAMPAIGN_TYPE
,to_date(start_at) as START_DATE
,to_date(ended_at) as END_DATE
,cast(start_at as TIMESTAMP_TZ) as START_TIMESTAMP
,cast(ended_at as TIMESTAMP_TZ) as END_TIMESTAMP
,campaign_state as STATUS


from ""ITERABLE_EVENT_DATA"".""ORG_3034"".""CAMPAIGNS"" 
  where workflow_id is null
  
  union all 
  
  select 
 cast(c.id as string) as CAMPAIGN_ID
,wf.name as CAMPAIGN_NAME
,message_medium as DELIVERY_METHOD
,'FLOW' as CAMPAIGN_TYPE
,to_date(wf.created_at) as START_DATE
,to_date(ended_at) as END_DATE
,cast(start_at as TIMESTAMP_TZ) as START_TIMESTAMP
,cast(ended_at as TIMESTAMP_TZ) as END_TIMESTAMP
,campaign_state as STATUS

from ""ITERABLE_EVENT_DATA"".""ORG_3034"".""CAMPAIGNS"" c
left join ""ITERABLE_EVENT_DATA"".""ORG_3034"".""WORKFLOWS"" wf
  on c.workflow_id = wf.id
  where workflow_id is not null
)
------------adding labels----------------
,audience as (
select *   
from
PROD_DB.GROWTH.V_ITERABLE_CAMPAIGN_LABELS 
  
  )
--------------Sent-------------
,sent as (
select 
  campaign_id,
  EMAIL_SUBJECT as EMAIL_SUBJECT,
  count(distinct email) as sent
  from
   ""ITERABLE_EVENT_DATA"".""ORG_3034"".""EMAIL_BLAST_SENDS_VIEW"" 
    group by 1,2

  union all
  select 
  campaign_id,
  EMAIL_SUBJECT as EMAIL_SUBJECT,
  count(distinct email) as sent
  from
  ""ITERABLE_EVENT_DATA"".""ORG_3034"".""EMAIL_TRIGGERED_SENDS_VIEW"" 
      group by 1,2
  )
--------------bounces-----------
, bounces as (
select 
  campaign_id,
  count(distinct email) as bounced
  from
""ITERABLE_EVENT_DATA"".""ORG_3034"".""EMAIL_BOUNCES_VIEW""
  group by 1
  )  
--------------Opened----------- 
  
 , opened as (
  select 
  campaign_id,
  count(email) as opened,
  count(distinct email) as unique_opened
  from
  ""ITERABLE_EVENT_DATA"".""ORG_3034"".""EMAIL_OPENS_VIEW""
   group by 1 
  )
 
--------------Clicks -----------
,clicks as (
select 
campaign_id,
count(email) as clicked ,
count(distinct email) as unique_clicked 
  from ""ITERABLE_EVENT_DATA"".""ORG_3034"".""EMAIL_CLICKS_VIEW"" 
  group by 1
)

---------------UNSUBSCRIBED------------
, UNSUBSCRIBED as (
  select 
  campaign_id,
  count(email) as UNSUBSCRIBED
  from
""ITERABLE_EVENT_DATA"".""ORG_3034"".""EMAIL_UNSUBSCRIBES_VIEW"" 
  group by 1
  
 )
 
 ----------------The next couple subqueries are to determine conversion--------------
 
, delivered as 
(
select upper(email) as email,
       email_subject, 
       campaign_id, 
       timestamp as delivered_date
        from
         ""SEGMENT_EVENTS"".""ITERABLE_PRODUCTION"".""EMAIL_DELIVERED"" 
             
)

, Sub_Start as (
select UPPER(EMAIL) as Email, 
       Timestamp as activated_date, 
       Event
       from 
       ""SEGMENT_EVENTS"".""CORE_STAGING"".""RECURLY_START_SUBSCRIPTION"" 
     )

, diff as (
select 
campaign_id,
d.email,
Delivered_Date,
activated_date,
datediff(hour,delivered_date,activated_date) as date_diff

from delivered d
left join sub_start s
on d.email = s.email

where date_diff between 0 and 72 
          )

,conversion_active as (
  select 
campaign_id,
count(email) as conversion_Active
  from diff
  group by 1
  )
  
  , Stp_Start as (
select UPPER(EMAIL) as Email, 
       Timestamp as activated_date, 
       Event
       from 
        SEGMENT_EVENTS.CORE_STAGING.STP_ENROLLMENT
     )

, STP_diff as (
select 
campaign_id,
d.email,
Delivered_Date,
activated_date,
datediff(hour,delivered_date,activated_date) as date_diff

from delivered d
left join stp_start s
on d.email = s.email

where date_diff between 0 and 72 
          )
 
 ,conversion_stp as (
  select 
campaign_id,
count(email) as conversion_STP
  from STP_diff
  group by 1
  )
  

,final as 
(
select 
 cast(c.CAMPAIGN_ID as string) as campaign_id
,c.CAMPAIGN_NAME
,c.DELIVERY_METHOD
,c.CAMPAIGN_TYPE
,c.START_DATE
,c.END_DATE
,c.START_TIMESTAMP
,c.END_TIMESTAMP
,c.STATUS
,al.type
,al.sub_type
,al.product
,al.discount
,al.segment
,al.flow_type
,al.flow_subtype
,s.EMAIL_SUBJECT
,s.SENT
,b.BOUNCED
,o.OPENED
,o.UNIQUE_OPENED
,cl.CLICKED
,cl.UNIQUE_CLICKED  
,ch.UNSUBSCRIBED
,s.SENT-b.BOUNCED as DELIVERED  
,delivered/s.SENT as DELIVERD_RATE
,b.BOUNCED/s.SENT as BOUNCED_RATE
,o.UNIQUE_OPENED/DELIVERED as OPENED_RATE
,cl.UNIQUE_CLICKED/DELIVERED as CLICK_RATE  
,cl.UNIQUE_CLICKED/o.UNIQUE_OPENED as CLICK_TO_OPEN_RATE
,ch.UNSUBSCRIBED/DELIVERED as UNSUBSCRIBED_RATE
,CONVERSION_ACTIVE as CONVERSION_ACTIVE
,CONVERSION_ACTIVE/DELIVERED as CONVERSION_RATE_ACTIVE
,CONVERSION_STP as CONVERSION_STP
,CONVERSION_STP/DELIVERED as CONVERSION_RATE_STP
  
from
campaigns c
-----Adding Audience Data-------------
left join audience al 
on c.CAMPAIGN_ID = al.CAMPAIGN_ID  
  
-----Adding Sent-------------  
left join sent s 
on c.CAMPAIGN_ID = s.CAMPAIGN_ID    

-----Adding Sent-------------  
left join bounces b
on c.CAMPAIGN_ID = b.CAMPAIGN_ID    

-----Adding  opened -------------  
left join opened  o
on c.CAMPAIGN_ID = o.CAMPAIGN_ID    
  -----Adding  clicks -------------  
left join clicks  cl
on c.CAMPAIGN_ID = cl.CAMPAIGN_ID    
      -----Adding  unsub -------------  
left join UNSUBSCRIBED  ch
on c.CAMPAIGN_ID = ch.CAMPAIGN_ID    
  
        -----Adding Conversion -------------  
left join conversion_active  con
on c.CAMPAIGN_ID = con.CAMPAIGN_ID  

        -----Adding Conversion -------------  
left join conversion_stp  cons
on c.CAMPAIGN_ID = cons.CAMPAIGN_ID   

)

SELECT * FROM FINAL;"
"V_KLAVIYO_FLOW_PERFORMANCE","create or replace view SEED_DATA.DEV.V_KLAVIYO_FLOW_PERFORMANCE as 

with campaigns as 
( 
  select 
   ID as CAMPAIGN_ID 
  , Name as CAMPAIGN_NAME
  ,'Email' as DELIVERY_METHOD
  , 'FLOW' as CAMPAIGN_TYPE
  , to_date(CREATED) as START_DATE
  , NULL as END_DATE
  , CREATED as START_TIMESTAMP
  , NULL as END_TIMESTAMP
  , STATUS
  , NULL as AUDIENCE
  , NULL as EMAIL_SUBJECT
  
  from ""MARKETING_DATABASE"".""KLAVIYO"".""FLOW"" 
 ) 
 
--------------Sent-------------
,sent as (
select 
flow_id
,count(distinct person_id) as sent
from
""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" 
group by 1 
  )
  
-------------Delivered----------
,delivered as (
    select 
flow_id
,count(distinct person_id) as delivered
from
""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" 
where TYPE = 'Received Email'
group by 1 
  ) 
  
--------------bounces-----------
,bounced as (
    select 
flow_id
,count(distinct person_id) as bounced
from
""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" 
where TYPE = 'Bounced Email' 
group by 1 
  )  
 --------------Opened-----------  
  ,opened as (
    select 
flow_id
,count(person_id) as opened    
,count(distinct person_id) as unique_opened
from
""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" 
where TYPE = 'Opened Email' 
group by 1 
  ) 
  --------------Clicks -----------
    ,clicked as (
    select 
flow_id
,count(person_id) as Clicked
,count(distinct person_id) as unique_Clicked
from
""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" 
where TYPE = 'Clicked Email' 
group by 1 
  ) 

---------------UNSUBSCRIBED------------
, UNSUBSCRIBED as (
    select 
flow_id
,count(distinct person_id) as unsubscribed
from
""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" 
where TYPE = 'Unsubscribed' 
group by 1 
  ) 
  
   ----------------The next couple subqueries are to determine conversion--------------
  
, open_click as 
(
    select 
distinct upper(email) as email
, flow_id
, timestamp as timestamp  
from
""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" e
left join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" p
 on e.person_id = p.id   
where TYPE = 'Opened Email' 
  
  union all 
  
      select 
distinct upper(email) as email
, flow_id
, timestamp as timestamp 
from
""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" e
left join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" p
 on e.person_id = p.id   
where TYPE = 'Clicked Email' 

  
)

, combined as (
  select 
  distinct upper(email) as email
, flow_id
, max(timestamp) as event_date 
  from open_click
  group by 1,2
           )
  
, Sub_Start as (
select UPPER(EMAIL) as Email, 
       Timestamp as activated_date, 
       Event
       from 
       ""SEGMENT_EVENTS"".""CORE_STAGING"".""RECURLY_START_SUBSCRIPTION"" 
     )

, diff_active as (
select 
flow_id,
d.email,
event_Date,
activated_date,
datediff(day,event_date,activated_date) as date_diff

from combined d
left join sub_start s
on d.email = s.email

where date_diff between 0 and 5
          )

,conversion_active as (
  select 
flow_id,
count(distinct email) as conversion_active
  from diff_active
  group by 1
  
 )
 
 , STP_Start as (
select UPPER(EMAIL) as Email, 
       Timestamp as activated_date, 
       Event
       from 
       SEGMENT_EVENTS.CORE_STAGING.STP_ENROLLMENT
     )

, diff_STP as (
select 
flow_id,
d.email,
event_Date,
activated_date,
datediff(day,event_date,activated_date) as date_diff

from combined d
left join stp_start s
on d.email = s.email

where date_diff between 0 and 5
          )

,conversion_STP as (
  select 
flow_id,
count(distinct email) as conversion_stp
  from diff_stp
  group by 1
  
 )
  
 ,final as 
(
select 
 c.CAMPAIGN_ID
,c.CAMPAIGN_NAME
,c.DELIVERY_METHOD
,c.CAMPAIGN_TYPE
,c.START_DATE
,c.END_DATE
,c.START_TIMESTAMP
,c.END_TIMESTAMP
,c.STATUS
,s.SENT
,b.BOUNCED
,o.OPENED
,o.UNIQUE_OPENED
,cl.CLICKED
,cl.UNIQUE_CLICKED  
,ch.UNSUBSCRIBED
,d.Delivered as DELIVERED  
,delivered/s.SENT as DELIVERD_RATE
,b.BOUNCED/s.SENT as BOUNCED_RATE
,o.UNIQUE_OPENED/DELIVERED as OPENED_RATE
,cl.UNIQUE_CLICKED/DELIVERED as CLICK_RATE  
,cl.UNIQUE_CLICKED/o.UNIQUE_OPENED as CLICK_TO_OPEN_RATE
,ch.UNSUBSCRIBED/DELIVERED as UNSUBSCRIBED_RATE
,CONVERSION_ACTIVE as CONVERSION_ACTIVE
,CONVERSION_ACTIVE/DELIVERED as CONVERSION_RATE_ACTIVE
,CONVERSION_STP as CONVERSION_STP
,CONVERSION_STP/DELIVERED as CONVERSION_RATE_STP
  
from
campaigns c
  
-----Adding Sent-------------  
left join sent s 
on c.CAMPAIGN_ID = s.flow_id    
-----Adding delivered-------------  
left join delivered d 
on c.CAMPAIGN_ID = d.flow_id    
  
-----Adding bounce-------------  
left join bounced b
on c.CAMPAIGN_ID = b.flow_id    

-----Adding  opened -------------  
left join opened  o
on c.CAMPAIGN_ID = o.flow_id   
  -----Adding  clicks -------------  
left join clicked  cl
on c.CAMPAIGN_ID = cl.flow_id   
      -----Adding  unsub -------------  
left join UNSUBSCRIBED  ch
on c.CAMPAIGN_ID = ch.flow_id    
  
        -----Adding Conversion for campaigns to get new customers-------------  
left join conversion_active  cona
on c.CAMPAIGN_ID = cona.flow_id  
         -----Adding Conversion for campaigns to get customers to upgrade-------------  
left join conversion_STP  cons
on c.CAMPAIGN_ID = cons.flow_id   

)

select * from final;"
"V_KUSTOMER_CONVERSATIONS","create or replace view SEED_DATA.DEV.V_KUSTOMER_CONVERSATIONS as 

--with kustomer_conversation as (
select 
     c.ID as Conversation_ID,
     c.Name as Conversation_Name,
     c.STATUS as Conversation_Status,
     c.Snooze_Status as Snooze_Status,
     c.ended as Conversation_Ended,
     c.SATISFACTION_LEVEL_CHANNEL as Satisfaction_Level_Channel,
     c.SATISFACTION_LEVEL_STATUS as Satisfaction_Level_Status,
     c.DIRECTION as Direction,
     c.PRIORITY as Priority,
     c.LAST_MESSAGE_DIRECTION as Last_Message_Direction,
     c.FIRST_MESSAGE_IN_ID as First_Message_In_ID,
     c.SATISFACTION_LEVEL_FIRST_ANSWER as Satisfaction_Awnser, 
     c.ORG_ID as Org_ID,
     c.Created_By as Created_By,
     KU_E.Name as Created_By_Name,
     c.MODIFIED_BY as Modified_By,
     KU.name as Modified_By_Name,
  -------Add in Modified Persons Name
     c.EXTERNAL_ID,
     c.CUSTOMER_ID as Customer_Id,
  
     
     c.SNOOZE_COUNT as Snooze_Count,  
     c.REOPEN_COUNT as Reopen_Count,
     c.message_count as Message_Count,
     c.note_count as Note_Count,
     c.Satisfaction as Satisfaction,
     c.OUTBOUND_MESSAGE_COUNT as Outbound_Message_Count,
     c.message_count-c.OUTBOUND_MESSAGE_COUNT as Inbound_Message_Count,
     c.SATISFACTION_LEVEL_RATING as Satisfaction_Level_Rating,
     c.SATISFACTION_LEVEL_Score as Satisfaction_Level_Score,
     c.SLA_BREACHED as SLA_Breached,   
     c.SLA_BREACH_METRIC as SLA_Breach_Metric,
     c. CUSTOM_PRODUCT_NAME_TREE as Product,
     c.FIRST_RESPONSE_TIME as First_Response_Time,
     c.FIRST_RESPONSE_RESPONSE_TIME as First_Response_Response_Date,

  -----Joined Message Table ---------------
     m.direction_type, 
     m.channel,
  
  -----Breaking out customer contact reasons ---------------
     CUSTOM_CATEGORY_TREE as Category_Hierarchy,
     CUSTOM_ACTION_TAKEN_TREE as Category_Action_Hierarchy,
     split_part(CUSTOM_CATEGORY_TREE, '.',1) as Category_Level_1 , 
     split_part(CUSTOM_CATEGORY_TREE, '.',2) as Category_Level_2 ,
     split_part(CUSTOM_CATEGORY_TREE, '.',3) as Category_Level_3 ,
     split_part(CUSTOM_CATEGORY_TREE, '.',4) as Category_Level_4 ,
     concat(split_part(CUSTOM_CATEGORY_TREE, '.',1) ,'>',split_part(CUSTOM_CATEGORY_TREE, '.',2)) as Cat_Hierarchy_1_2,
     concat(split_part(CUSTOM_CATEGORY_TREE, '.',1) ,'>',split_part(CUSTOM_CATEGORY_TREE, '.',2),'>',split_part(CUSTOM_CATEGORY_TREE, '.',3)) as Cat_Hierarchy_1_3,
     concat(split_part(CUSTOM_CATEGORY_TREE, '.',1) ,'>',split_part(CUSTOM_CATEGORY_TREE, '.',2),'>',split_part(CUSTOM_CATEGORY_TREE, '.',3),'>',split_part(CUSTOM_CATEGORY_TREE, '.',4)) as Cat_Hierarchy_1_4,
     split_part(CUSTOM_ACTION_TAKEN_TREE, '.',1) as Category_Action_Taken_L1 , 
     split_part(CUSTOM_ACTION_TAKEN_TREE, '.',2) as Category_Action_Taken_L2 ,
     split_part(CUSTOM_ACTION_TAKEN_TREE, '.',3) as Category_Action_Taken_L3 ,
     split_part(CUSTOM_ACTION_TAKEN_TREE, '.',4) as Category_Action_Taken_L4 ,
  
  -----Times and Dates ---------------
     to_date(CONVERT_TIMEZONE('America/New_York',c.Created_at)) as Conversation_Created_at_Date,
     CONVERT_TIMEZONE('America/New_York',c.Created_at) as Conversation_Created_at_Timestamp,        
     to_date(CONVERT_TIMEZONE('America/New_York',c.LAST_ACTIVITY_AT)) as Conversation_Last_Activity_Date,
     CONVERT_TIMEZONE('America/New_York',c.LAST_ACTIVITY_AT) as Conversation_Last_Activity_Timestamp,
     to_date(CONVERT_TIMEZONE('America/New_York',m.SENT_AT)) as Message_Sent_Date,
     CONVERT_TIMEZONE('America/New_York',m.SENT_AT) as Message_Sent_Timestamp,     
     to_date(CONVERT_TIMEZONE('America/New_York',c.SNOOZE_STATUS_AT)) as Snooze_Status_at_Date,
     CONVERT_TIMEZONE('America/New_York',c.SNOOZE_STATUS_AT) as Snooze_Status_AT_Timestamp,        
     to_date(CONVERT_TIMEZONE('America/New_York',c.SNOOZE_TIME)) as Snooze_Time_Date,
     CONVERT_TIMEZONE('America/New_York',c.SNOOZE_TIME) as Snooze_Time_Timestamp,          
     to_date(CONVERT_TIMEZONE('America/New_York',c.SATISFACTION_LEVEL_UPDATED_AT)) as Satisfaction_Level_Sent_Date,
     CONVERT_TIMEZONE('America/New_York',c.SATISFACTION_LEVEL_UPDATED_AT) as Satisfaction_Level_Sent_Timestamp,         
     to_date(CONVERT_TIMEZONE('America/New_York',c.FIRST_MESSAGE_IN_CREATED_AT)) as First_Message_Created_At_Date,
     CONVERT_TIMEZONE('America/New_York',c.FIRST_MESSAGE_IN_CREATED_AT) as First_Message_Created_At_Timestamp,  
     to_date(CONVERT_TIMEZONE('America/New_York',c.FIRST_MESSAGE_IN_SENT_AT)) as First_Message_Sent_In_Date,
     CONVERT_TIMEZONE('America/New_York',c.FIRST_MESSAGE_IN_SENT_AT) as First_Message_Sent_In_Timestamp,              
     to_date(CONVERT_TIMEZONE('America/New_York',c.FIRST_RESPONSE_SENT_AT)) as First_Response_Sent_At_Date,
     CONVERT_TIMEZONE('America/New_York',c.FIRST_RESPONSE_SENT_AT) as First_Response_Sent_At_Timestamp,     
     to_date(CONVERT_TIMEZONE('America/New_York',c.LAST_MESSAGE_OUT_SENT_AT)) as Last_Message_Out_Sent_At_Date,
     CONVERT_TIMEZONE('America/New_York',c.LAST_MESSAGE_OUT_SENT_AT) as Last_Message_Out_Sent_At_Timestamp,
     to_date(CONVERT_TIMEZONE('America/New_York',c.LAST_MESSAGE_IN_SENT_AT)) as Last_Message_In_Sent_At_Date,
     CONVERT_TIMEZONE('America/New_York',c.LAST_MESSAGE_IN_SENT_AT) as Last_Message_In_Sent_At_Timestamp,
     to_date(CONVERT_TIMEZONE('America/New_York',c.SLA_BREACH_AT)) as SLA_Breach_At_Date,
     CONVERT_TIMEZONE('America/New_York',c.SLA_BREACH_AT) as SLA_Breach_At_Timestamp,
     to_date(CONVERT_TIMEZONE('America/New_York',c.SLA_METRICS_TOTAL_CUSTOMER_WAIT_TIME_BREACH_AT)) as SLA_Metric_Total_Cust_Wait_Breach_At_Date,
     CONVERT_TIMEZONE('America/New_York',c.SLA_METRICS_TOTAL_CUSTOMER_WAIT_TIME_BREACH_AT) as SLA_Metric_Total_Cust_Wait_Breach_At_Timestamp          
 
from MARKETING_DATABASE.KUSTOMER.CONVERSATION as c
left join MARKETING_DATABASE.KUSTOMER.MESSAGE as m
on c.id = m.conversation_id
left join MARKETING_DATABASE.KUSTOMER.USER as KU
on c.modified_by = KU.id  
left join MARKETING_DATABASE.KUSTOMER.USER as KU_E
on c.created_by = KU_E.id"
"V_KUSTOMER_SUBSCRIBER_DETAIL","Create or REPLACE VIEW SEED_DATA.DEV.V_KUSTOMER_SUBSCRIBER_DETAIL as 

-------------BRINGING IN KUSTOMER DATA FROM THERE CUSTOMER TABLE---------------------
  WITH KUSTOMER as (
select 
    CE.CUSTOMER_ID as KUSTOMER_ID,
    UPPER(CE.EMAIL) as EMAIL,
    CONVERSATION_COUNTS_ALL as TOTAL_CONVERSATIONS,
    CONVERSATION_COUNTS_SNOOZED as TOTAL_CONVERSATIONS_SNOOZED,
    CONVERSATION_COUNTS_DONE as CLOSED_CONVERSATIONS,
    CONVERSATION_COUNTS_OPEN as OPEN_CONVERSATIONS,
    SENTIMENT_CONFIDENCE    
 FROM   
    ""MARKETING_DATABASE"".""KUSTOMER"".""CUSTOMER_EMAIL"" CE
 LEFT JOIN ""MARKETING_DATABASE"".""KUSTOMER"".""CUSTOMER"" C
    on  CE.CUSTOMER_ID = C.ID
                )
  -------------BRINGING IN THE LATEST QUEUES AND TEAM ASSIGNMENTS------------------------
 ,QUEUE as (
            select 
            QUEUE_ID,
            TEAM_ID,
            DISPLAY_NAME
            from ""MARKETING_DATABASE"".""KUSTOMER"".""TEAM_QUEUE"" tq
             left join  ""MARKETING_DATABASE"".""KUSTOMER"".""TEAM"" t
              on t.id = tq.team_id 
                where tq._FIVETRAN_SYNCED = (select max(_FIVETRAN_SYNCED) from ""MARKETING_DATABASE"".""KUSTOMER"".""TEAM_QUEUE"" tq)
                     and deleted = FALSE
           )
   -------------BRINGING IN SOME CONVERSATION METRICS------------------------------------
 
 ,CONVERSATION as ( 
        
    select 
    distinct c.id,
    customer_id,
    case when split_part(CUSTOM_CATEGORY_TREE, '.',1) = 'medical_health' then '1' else '0' end as MEDICAL_HEALTH_CONVO,
    case when split_part(CUSTOM_CATEGORY_TREE, '.',1) = 'cancel_subscription' then '1' else '0' end as CANCEL_SUBSCRIPTION_CONVO,
    case when split_part(CUSTOM_CATEGORY_TREE, '.',1) = 'general_subscription' then '1' else '0' end as GENERAL_SUBSCRIPTION_CONVO,
    case when split_part(CUSTOM_CATEGORY_TREE, '.',1) = 'subject_matter_education' then '1' else '0' end as SUBJECT_MATTER_EDUCATION_CONVO,
    case when split_part(CUSTOM_CATEGORY_TREE, '.',1) = 'effects_question' then '1' else '0' end as EFFECTS_QUESTION_CONVO,
    case when split_part(CUSTOM_CATEGORY_TREE, '.',1) = 'fullfillment_issue' then '1' else '0' end as FULLFILLMENT_ISSUE_CONVO,
    case when split_part(CUSTOM_CATEGORY_TREE, '.',1) = 'product_question' then '1' else '0' end as PRODUCT_QUESTION_CONVO,
    case when split_part(CUSTOM_CATEGORY_TREE, '.',1) not in ('product_question', 'fullfillment_issue', 'effects_question' , 'subject_matter_education',  'general_subscription', 'cancel_subscription','medical_health')  then '1' else '0' end as OTHER_QUESTION_CONVO, 
    Case when tq.DISPLAY_NAME = 'SciCare Team' then '1' else '0' end as SCI_CARE_TEAM,
    Case when tq.DISPLAY_NAME <> 'SciCare Team' then '1' else '0' end as CARE_TEAM,
    Case when c.reopen_count is null then 0 else 1 end as HAD_CONVERSATION_REOPENED,
    c.CREATED_AT as FIRST_CONVERSATION_START_DATE,
    c.CREATED_AT AS LAST_CONVERSATION_START_DATE,
    c.LAST_ACTIVITY_AT AS LAST_ACTIVITY_DATE,
    c.MESSAGE_COUNT AS TOTAL_MESSAGES,
    OUTBOUND_MESSAGE_COUNT AS TOTAL_OUTBOUND_MESSAGES,
    PRIORITY as AVG_PRIORITY,
    case when SATISFACTION_LEVEL_RATING is not null and SATISFACTION_LEVEL_RATING in (4,5) then 1 else 0 end as POSITIVE_INTERACTION,
    case when SATISFACTION_LEVEL_RATING is not null and SATISFACTION_LEVEL_RATING not in (4,5) then 1 else 0 end as NEGATIVE_INTERACTION,
    SATISFACTION_LEVEL_RATING as AVG_SATISFACTION_LEVEL_RATING

    from
    MARKETING_DATABASE.KUSTOMER.CONVERSATION  c  

    --------------JOINING TO GET THE QUEUE BREAKDOWN---------------------------
    left join QUEUE tq
    on tq.queue_id = c.queue_id
  
 --    where customer_id = '5e295af18497cd001284344f'    
    )
 -------------------ADDING MESSAGE CHANNEL------------------------------------
  ,MESSAGE AS (   
  select distinct conversation_id,
         case when channel = 'voice' then 1 else 0 end as VOICE_CHANNEL,
         case when channel = 'chat' then 1 else 0 end as CHAT_CHANNEL,
         case when channel = 'email' then 1 else 0 end as EMAIL_CHANNEL, 
         case when channel in ('instagram-comment','twitter-tweet','facebook','instagram','facebook-wallpost','twitter-dm') then 1 else 0 end as SOCIAL_CHANNEL
  from   MARKETING_DATABASE.KUSTOMER.MESSAGE
 
   
  )
  
  -----------CONSOLIDATING ALL OF THE CONVO/MESSAGE METRICS INTO FLAGS---------------------
  ,FINAL_CONVO as (
  select 
    customer_id,
   Max(case when MEDICAL_HEALTH_CONVO = 1 then 'Y' else 'N' end) as MEDICAL_HEALTH_CONVO,
   MAX(case when CANCEL_SUBSCRIPTION_CONVO = 1 then 'Y' else 'N' end) as CANCEL_SUBSCRIPTION_CONVO,
   MAX(case when GENERAL_SUBSCRIPTION_CONVO = 1 then 'Y' else 'N' end) as GENERAL_SUBSCRIPTION_CONVO,
   MAX(case when SUBJECT_MATTER_EDUCATION_CONVO = 1 then 'Y' else 'N' end) as SUBJECT_MATTER_EDUCATION_CONVO,
   MAX(case when EFFECTS_QUESTION_CONVO = 1 then 'Y' else 'N' end) as EFFECTS_QUESTION_CONVO,
   MAX(case when FULLFILLMENT_ISSUE_CONVO = 1 then 'Y' else 'N' end) as FULLFILLMENT_ISSUE_CONVO,
   MAX(case when PRODUCT_QUESTION_CONVO = 1 then 'Y' else 'N' end) as PRODUCT_QUESTION_CONVO,
   MAX(case when OTHER_QUESTION_CONVO = 1 then 'Y' else 'N' end) as OTHER_QUESTION_CONVO,
   MAX(case when SCI_CARE_TEAM = 1 then 'Y' else 'N' end) as SPOKE_W_SCI_CARE,
   MAX(case when CARE_TEAM = 1 then 'Y' else 'N' end) as SPOKE_W_CARE_TEAM,
   MAX(case when VOICE_CHANNEL = 1 then 'Y' else 'N' end) as USED_VOICE_CHANNEL,
   MAX(case when CHAT_CHANNEL = 1 then 'Y' else 'N' end) as USED_CHAT_CHANNEL,
   MAX(case when EMAIL_CHANNEL = 1 then 'Y' else 'N' end) as USED_EMAIL_CHANNEL,
   MAX(case when SOCIAL_CHANNEL = 1 then 'Y' else 'N' end) as USED_SOCIAL_CHANNEL, 
   MAX(case when POSITIVE_INTERACTION = 1 then 'Y' else 'N' end) as HAD_POSITIVE_INTERACTION,  
   MAX(case when NEGATIVE_INTERACTION = 1 then 'Y' else 'N' end) as HAD_NEGATIVE_INTERACTION, 
   MAX(case when HAD_CONVERSATION_REOPENED = 1 then 'Y' else 'N' end) as HAD_CONVO_REOPENED, 
   MIN(FIRST_CONVERSATION_START_DATE) as FIRST_CONVERSATION_START_DATE,
   MAX(LAST_CONVERSATION_START_DATE) as LAST_CONVERSATION_START_DATE,
   MAX(LAST_ACTIVITY_DATE) as LAST_ACTIVITY_DATE,
   SUM(TOTAL_MESSAGES) as TOTAL_MESSAGES,
   SUM(TOTAL_MESSAGES) - SUM(TOTAL_OUTBOUND_MESSAGES) as TOTAL_INBOUND_MESSAGES,
   SUM(TOTAL_OUTBOUND_MESSAGES) as TOTAL_OUTBOUND_MESSAGES,
   AVG(AVG_PRIORITY) as AVG_PRIORITY,
   AVG(AVG_SATISFACTION_LEVEL_RATING) as AVG_SATISFACTION_LEVEL_RATING
   from CONVERSATION C
   left join MESSAGE M
   on M.CONVERSATION_ID = C.ID
   GROUP BY 1
   
    )
    ---------------BRINGING IN SEED DATA TO LINK KUSTOMER --------------------------------
  ,SEED as ( select 
            distinct customer_id as CUSTOMER_ID, 
            Upper(customer_email) as EMAIL
          from  ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" 
          )  

    Select
    
     SEED.CUSTOMER_ID
    ,KUSTOMER.EMAIL
    ,CASE when TOTAL_CONVERSATIONS > 0 then 'Y' else 'N' end as CONTACTED_MX_TEAM
    ,KUSTOMER.KUSTOMER_ID
    ,KUSTOMER.TOTAL_CONVERSATIONS
    ,KUSTOMER.TOTAL_CONVERSATIONS_SNOOZED
    ,KUSTOMER.OPEN_CONVERSATIONS
    ,KUSTOMER.CLOSED_CONVERSATIONS
    ,IFNULL(FINAL_CONVO.TOTAL_MESSAGES,0) as TOTAL_MESSAGES
    ,IFNULL(FINAL_CONVO.TOTAL_INBOUND_MESSAGES,0) as TOTAL_INBOUND_MESSAGES
    ,IFNULL(FINAL_CONVO.TOTAL_OUTBOUND_MESSAGES,0) as TOTAL_OUTBOUND_MESSAGES
    ,FINAL_CONVO.AVG_PRIORITY as AVG_MESSAGE_PRIORITY
    ,FINAL_CONVO.AVG_SATISFACTION_LEVEL_RATING
    ,KUSTOMER.SENTIMENT_CONFIDENCE as AVG_SENTIMENT_CONFIDENCE
    ,FINAL_CONVO.FIRST_CONVERSATION_START_DATE
    ,FINAL_CONVO.LAST_CONVERSATION_START_DATE
    ,FINAL_CONVO.LAST_ACTIVITY_DATE as LAST_ACTIVITY_IN_KUSTOMER
    ,IFNULL(FINAL_CONVO.MEDICAL_HEALTH_CONVO,'N') as HAD_MEDICAL_HEALTH_CONVO
    ,IFNULL(FINAL_CONVO.CANCEL_SUBSCRIPTION_CONVO,'N') as HAD_CANCEL_SUBSCRIPTION_CONVO
    ,IFNULL(FINAL_CONVO.GENERAL_SUBSCRIPTION_CONVO,'N') as HAD_GENERAL_SUBSCRIPTION_CONVO
    ,IFNULL(FINAL_CONVO.SUBJECT_MATTER_EDUCATION_CONVO,'N') as HAD_SUBJECT_MATTER_EDUCATION_CONVO
    ,IFNULL(FINAL_CONVO.EFFECTS_QUESTION_CONVO,'N') as HAD_EFFECTS_QUESTION_CONVO
    ,IFNULL(FINAL_CONVO.FULLFILLMENT_ISSUE_CONVO,'N') as HAD_FULLFILLMENT_ISSUE_CONVO
    ,IFNULL(FINAL_CONVO.PRODUCT_QUESTION_CONVO,'N') as PRODUCT_QUESTION_CONVO
    ,IFNULL(FINAL_CONVO.OTHER_QUESTION_CONVO,'N') as OTHER_QUESTION_CONVO
    ,IFNULL(FINAL_CONVO.SPOKE_W_SCI_CARE,'N') as SPOKE_W_SCI_CARE
    ,IFNULL(FINAL_CONVO.SPOKE_W_CARE_TEAM,'N') as SPOKE_W_CARE_TEAM
    ,IFNULL(FINAL_CONVO.USED_VOICE_CHANNEL,'N') as USED_VOICE_CHANNEL
    ,IFNULL(FINAL_CONVO.USED_CHAT_CHANNEL,'N') as USED_CHAT_CHANNEL
    ,IFNULL(FINAL_CONVO.USED_EMAIL_CHANNEL,'N') as USED_EMAIL_CHANNEL
    ,IFNULL(FINAL_CONVO.USED_SOCIAL_CHANNEL,'N') as USED_SOCIAL_CHANNEL
    ,IFNULL(FINAL_CONVO.HAD_POSITIVE_INTERACTION,'N') as HAD_POSITIVE_INTERACTION
    ,IFNULL(FINAL_CONVO.HAD_NEGATIVE_INTERACTION,'N') as HAD_NEGATIVE_INTERACTION
    ,IFNULL(FINAL_CONVO.HAD_CONVO_REOPENED,'N') as HAD_CONVO_REOPENED

    
    from KUSTOMER 
    LEFT JOIN FINAL_CONVO 
    on FINAL_CONVO.CUSTOMER_ID = KUSTOMER.KUSTOMER_ID
 ----------------JOINING TO GET SEED CUSTOMER ID-------------------------------------------    
    LEFT JOIN  SEED
    on UPPER(SEED.EMAIL) = UPPER(KUSTOMER.EMAIL)"
"V_MARKETING_CHANNEL_SPEND_AUTOMATED","create or replace view SEED_DATA.DEV.V_MARKETING_CHANNEL_SPEND_AUTOMATED(
	DATE,
	TYPE,
	CATEGORY,
	CHANNEL,
	PRODUCT,
	SOURCE,
	SPEND,
	CONVERSIONS
) as 

with auto_marketing_spend as (
------ FACEBOOK (SEED)
select
date,
TYPE,
CHANNEL,
SOURCE,
campaign_id,
campaign_name,
sum(clicks) as clicks,
sum(impressions) as impressions,
sum(SPEND) as SPEND,
sum(conversions) as conversions
from
(select 
date,
'AUTOMATED' AS TYPE,
'FACEBOOK' AS CHANNEL,
'FACEBOOK' AS SOURCE,
campaign_id,
campaign_name,
sum(clicks) as clicks,
sum(impressions) as impressions,
sum(SPEND) as SPEND,
0 as conversions
from MARKETING_DATABASE.FACEBOOK.FACEBOOK_PERFORMANCE 
where account_id = '838188179702329' --- seed account
group by 1,2,3,4,5,6
UNION ALL
select 
conv.DATE,
'AUTOMATED' AS TYPE,
'FACEBOOK' AS CHANNEL,
'FACEBOOK' AS SOURCE,
conv.CAMPAIGN_ID,
camp.campaign_name,
0 as clicks,
0 as impressions,
0 as SPEND,
SUM(VALUE) AS conversions
from MARKETING_DATABASE.FACEBOOK.FACEBOOK_PERFORMANCE_ACTIONS as conv
left join (SELECT DISTINCT CAMPAIGN_ID,campaign_name  FROM MARKETING_DATABASE.FACEBOOK.FACEBOOK_PERFORMANCE where account_id = '838188179702329') as camp
on conv.CAMPAIGN_ID = camp.CAMPAIGN_ID
WHERE conv.CAMPAIGN_ID IN (SELECT DISTINCT CAMPAIGN_ID FROM MARKETING_DATABASE.FACEBOOK.FACEBOOK_PERFORMANCE where account_id = '838188179702329')
AND ACTION_TYPE = 'purchase'
AND (camp.campaign_name like 'DS01%' or  camp.campaign_name like 'PDS08%')
group by 1,2,3,4,5,6
) group by 1,2,3,4,5,6

UNION ALL 
------ FACEBOOK (GEISTM)
select
date,
TYPE,
CHANNEL,
SOURCE,
campaign_id,
campaign_name,
sum(clicks) as clicks,
sum(impressions) as impressions,
sum(SPEND) as SPEND,
sum(conversions) as conversions
from
(select 
date,
'AUTOMATED' AS TYPE,
'FACEBOOK' AS CHANNEL,
'GEIST' AS SOURCE,
campaign_id,
campaign_name,
sum(clicks) as clicks,
sum(impressions) as impressions,
sum(SPEND) as SPEND,
0 as conversions
from MARKETING_DATABASE.FACEBOOK.FACEBOOK_PERFORMANCE 
where account_id = '1077704326482692' --- geist account
group by 1,2,3,4,5,6
UNION ALL
select 
conv.DATE,
'AUTOMATED' AS TYPE,
'FACEBOOK' AS CHANNEL,
'GEIST' AS SOURCE,
conv.CAMPAIGN_ID,
camp.campaign_name,
0 as clicks,
0 as impressions,
0 as SPEND,
SUM(VALUE) AS conversions
from MARKETING_DATABASE.FACEBOOK.FACEBOOK_PERFORMANCE_ACTIONS as conv
left join (SELECT DISTINCT CAMPAIGN_ID,campaign_name  FROM MARKETING_DATABASE.FACEBOOK.FACEBOOK_PERFORMANCE where account_id = '1077704326482692') as camp
on conv.CAMPAIGN_ID = camp.CAMPAIGN_ID
WHERE conv.CAMPAIGN_ID IN (SELECT DISTINCT CAMPAIGN_ID FROM MARKETING_DATABASE.FACEBOOK.FACEBOOK_PERFORMANCE where account_id = '1077704326482692')
AND ACTION_TYPE = 'purchase'
--AND (camp.campaign_name like 'DS01%' or  camp.campaign_name like 'PDS08%')
group by 1,2,3,4,5,6
) group by 1,2,3,4,5,6

UNION ALL
------ GOOGLE ADS (GEISTM)
select 
gadw.date,
'AUTOMATED' AS TYPE,
'GOOGLE ADS' AS CHANNEL,
'GEIST' AS SOURCE,
gadw.id as campaign_id,
ch.name as campaign_name,
sum(gadw.clicks) as clicks,
sum(gadw.impressions) as impressions,
sum(gadw.COST_MICROS)/1000000 as SPEND,
sum(gadw.conversions) as conversions
from MARKETING_DATABASE.ADWORDS_GEIST.ADWORDS_CAMPAIGN_PERFORMANCE_REPORTS as gadw
left join ( select distinct id, name from MARKETING_DATABASE.ADWORDS_GEIST.CAMPAIGN_HISTORY) as ch
on gadw.id = ch.id
group by 1,2,3,4,5,6

UNION ALL
------ GOOGLE ADS (SEED)
select 
gadw.date,
'AUTOMATED' AS TYPE,
'GOOGLE ADS' AS CHANNEL,
'GOOGLE ADS' AS SOURCE,
gadw.id as campaign_id,
ch.name as campaign_name,
sum(gadw.clicks) as clicks,
sum(gadw.impressions) as impressions,
sum(gadw.COST_MICROS)/1000000 as SPEND,
sum(gadw.conversions) as conversions
from MARKETING_DATABASE.ADWORDS_CUSTOM_NEW_API.ADWORDS_CAMPAIGN_PERFORMANCE_REPORTS as gadw
left join ( select distinct id, name from MARKETING_DATABASE.ADWORDS_CUSTOM_NEW_API.CAMPAIGN_HISTORY where _FIVETRAN_ACTIVE = 'TRUE') as ch
on gadw.id = ch.id
group by 1,2,3,4,5,6

UNION ALL
------ MICROSOFT ADS / BING
select 
to_date(bing.date) as date,
'AUTOMATED' AS TYPE,
'BING' AS CHANNEL,
'BING' AS SOURCE,
bing.campaign_id,
bing.campaign_name,
sum(bing.clicks) as clicks,
sum(bing.impressions) as impressions,
sum(bing.SPEND) as SPEND,
sum(bing.conversions) as conversions
from MARKETING_DATABASE.BINGADS.CAMPAIGN_PERFORMANCE_DAILY_REPORT as bing
--where to_date(bing.date) = '2023-08-05'
group by 1,2,3,4,5,6

UNION ALL
------ TIKTOK
select 
to_date(tt.STAT_TIME_DAY) as date,
'AUTOMATED' AS TYPE,
'TIKTOK' AS CHANNEL,
'TIKTOK' AS SOURCE,
tt.campaign_id,
ch.campaign_name,
ifnull(sum(tt.clicks),0) as clicks,
ifnull(sum(tt.impressions),0) as impressions,
ifnull(sum(tt.spend),0) AS spend,
ifnull(sum(tt.conversion),0) as conversions
from
(select 
ROW_NUMBER() OVER (PARTITION BY campaign_id, STAT_TIME_DAY ORDER BY campaign_id) AS row_number, *
from MARKETING_DATABASE.TIKTOK_ADS.CAMPAIGN_REPORT_DAILY) as tt
left join ( select distinct campaign_id, campaign_name from MARKETING_DATABASE.TIKTOK_ADS.CAMPAIGN_HISTORY ) as ch
on tt.campaign_id = ch.campaign_id
where row_number = 1
group by 1,2,3,4,5,6

UNION ALL
------ SNAPCHAT
select
to_date(sc.date) AS date,
'AUTOMATED' AS TYPE,
'SNAPCHAT' AS CHANNEL,
'SNAPCHAT' AS SOURCE,
sc.campaign_id,
ch.name as campaign_name,
sum(sc.swipes) as clicks,
sum(sc.impressions) as impressions,
SUM(sc.SPEND)/1000000 AS SPEND,
sum(sc.CONVERSION_PURCHASES) as conversions
from MARKETING_DATABASE.SNAPCHAT_ADS.CAMPAIGN_DAILY_REPORT as sc
left join ( select distinct id, name from MARKETING_DATABASE.SNAPCHAT_ADS.CAMPAIGN_HISTORY ) as ch
on sc.campaign_id = ch.id
group by 1,2,3,4,5,6

UNION ALL
------ OUTBRAIN
select 
to_date(day) AS date,
'AUTOMATED' AS TYPE,
'OUTBRAIN' AS CHANNEL,
'OUTBRAIN' AS SOURCE,
ob.CAMPAIGN_ID,
ch.name as campaign_name,
sum(ob.clicks) as clicks,
sum(ob.impressions) as impressions,
sum(ob.SPEND) as SPEND,
sum(ob.conversions) as conversions
from MARKETING_DATABASE.OUTBRAIN.CAMPAIGN_REPORT as ob
left join ( select distinct id, name from MARKETING_DATABASE.OUTBRAIN.CAMPAIGN_history ) as ch
on ob.CAMPAIGN_ID = ch.id
group by 1,2,3,4,5,6

UNION ALL
------ REDDIT
SELECT
to_date(date) AS activity_date,
type,
channel,
source,
campaign_id,  
campaign_name,
sum(clicks) as clicks,
sum(impressions) as impressions,
sum(SPEND) as SPEND,
sum(conversions_vta)+ sum(conversions_cta) as conversions
  
FROM
(
select 
to_date(cp.date) AS date,
'AUTOMATED' AS TYPE,
'REDDIT' AS CHANNEL,
'REDDIT' AS SOURCE,
cp.CAMPAIGN_ID,
CONCAT('DS01-',camp.name) as campaign_name,
sum(cp.clicks) as clicks,
sum(cp.impressions) as impressions,
sum(cp.SPEND)/1000000 as SPEND,
0 as conversions_vta,
0 as   conversions_cta
  
--- SELECT MIN(DATE) FROM MARKETING_DATABASE.REDDIT_ADS.CAMPAIGN_PERFORMANCE
from MARKETING_DATABASE.REDDIT_ADS.CAMPAIGN_PERFORMANCE as cp
left join ( select distinct id, name from MARKETING_DATABASE.REDDIT_ADS.CAMPAIGN ) as camp
on cp.CAMPAIGN_ID = camp.id
group by 1,2,3,4,5,6
--order by 1

UNION ALL

select 
to_date(cp.date) AS date,
'AUTOMATED' AS TYPE,
'REDDIT' AS CHANNEL,
'REDDIT' AS SOURCE,
cp.CAMPAIGN_ID,
CONCAT('DS01-',camp.name) as campaign_name,
0 as clicks,
0 as impressions,
0 as SPEND,
sum(cp.VIEW_THROUGH_CONVERSION_ATTRIBUTION_WINDOW_DAY) as conversions_vta,
sum(cp.CLICK_THROUGH_CONVERSION_ATTRIBUTION_WINDOW_month) as conversions_cta
  
from MARKETING_DATABASE.REDDIT_ADS.CAMPAIGN_PERFORMANCE_CONVERSIONS as cp
left join ( select distinct id, name from MARKETING_DATABASE.REDDIT_ADS.CAMPAIGN ) as camp
on cp.CAMPAIGN_ID = camp.id
where event_name = 'purchase'
group by 1,2,3,4,5,6
) 
group by 1,2,3,4,5,6

UNION ALL
------ PINTEREST
select 
to_date(cr.date) AS date,
'AUTOMATED' AS TYPE,
'PINTEREST' AS CHANNEL,
'PINTEREST' AS SOURCE,
cr.CAMPAIGN_ID,
cr.CAMPAIGN_NAME as campaign_name,
sum(cr.CLICKTHROUGH_1_GROSS) as clicks,
sum(cr.IMPRESSION_1_GROSS) as impressions,
sum(cr.SPEND_IN_MICRO_DOLLAR)/1000000 as SPEND,
--sum(cr.TOTAL_CONVERSIONS) as conversions
sum(cr.TOTAL_WEB_CHECKOUT) as conversions
from MARKETING_DATABASE.PINTEREST_ADS_REPORTING.CAMPAIGN_REPORT as cr
group by 1,2,3,4,5,6

UNION ALL
------ TRADEDESK HOLD
select 
to_date(date) AS date,
'AUTOMATED' AS TYPE,
'TRADEDESK' AS CHANNEL,
'TRADEDESK' AS SOURCE,
null as CAMPAIGN_ID,
'DS01' as campaign_name,
0 as clicks,
0 as impressions,
0 as SPEND,
0 as conversions
from SEED_DATA.DEV.DIM_DATE
group by 1,2,3,4,5,6
)

SELECT
d.date,
ms.type,
'PERFORMANCE' as category,
ms.channel,
--null as campaign_id,
--ms.campaign_name,
case when campaign_name like '%DS01%' then 'DS-01'
     when campaign_name like '%PDS08%' then 'PDS-08'
     else Null end as product,
ms.source,
--ifnull(sum(ms.clicks),0) as clicks,
--ifnull(sum(ms.impressions),0) as impressions,
ifnull(sum(ms.spend),0) as spend,
ifnull(sum(ms.conversions),0) as conversions
FROM SEED_DATA.DEV.DIM_DATE as d
left join auto_marketing_spend as ms
on d.date = ms.date
where d.date between '2018-01-01' and to_date(current_date())
group by 1,2,3,4,5,6
order by 1 desc 
;"
"V_MARKETING_CHANNEL_SPEND_MANUAL","create or replace view SEED_DATA.DEV.V_MARKETING_CHANNEL_SPEND_MANUAL(
	DATE,
	TYPE,
	CATEGORY,
	CHANNEL,
	PRODUCT,
	SOURCE,
	SPEND,
	CONVERSIONS
) as 

WITH manual_marketing_spend AS (

select 
TO_VARCHAR(DATE::date, 'YYYY-MM-DD') AS DATE,
'MANUAL' AS TYPE,
'IHEART' AS SOURCE,
CHANNEL AS CATEGORY,
NAME AS CHANNEL,
PRODUCT,
SPEND,
SALES AS CONVERSIONS
---SELECT *
from MARKETING_DATABASE.GOOGLE_SHEETS.MRKT_SPEND_IHEART

UNION ALL

select 
DATE,
'MANUAL' AS TYPE,
'INFLUENCER' AS SOURCE,
CHANNEL AS CATEGORY,
NAME AS CHANNEL,
PRODUCT,
SPEND,
SAME_MONTH_REDEMPTIONS AS CONVERSIONS
---SELECT *
from MARKETING_DATABASE.GOOGLE_SHEETS.MRKT_SPEND_INFLUENCER

UNION ALL

select 
TO_VARCHAR(DATE::date, 'YYYY-MM-DD') AS DATE,
'MANUAL' AS TYPE,
'MISC' AS SOURCE,
CHANNEL AS CATEGORY,
NAME AS CHANNEL,
PRODUCT,
COST AS SPEND,
SUBS AS CONVERSIONS
---SELECT *
from MARKETING_DATABASE.GOOGLE_SHEETS.MRKT_SPEND_MISC

UNION ALL

select 
TO_VARCHAR(DATE::date, 'YYYY-MM-DD') AS DATE,
'MANUAL' AS TYPE,
'PCA' AS SOURCE,
CHANNEL AS CATEGORY,
NAME AS CHANNEL,
PRODUCT,
COST AS SPEND,
0 AS CONVERSIONS
---SELECT *
from MARKETING_DATABASE.GOOGLE_SHEETS.MRKT_SPEND_PCA
/*
UNION ALL

select 
_DATE AS DATE,
'MANUAL' AS TYPE,
'PINTEREST' AS SOURCE,
CATEGORY,
CHANNEL,
_PRODUCT as PRODUCT,
_COST AS SPEND,
_WEB_CONVERSIONS_CHECKOUT_ AS CONVERSIONS
---SELECT *
from MARKETING_DATABASE.GOOGLE_SHEETS.MRKT_SPEND_PINTEREST
*/
UNION ALL

select 
DATE,
'MANUAL' AS TYPE,
'QUORA' AS SOURCE,
CATEGORY,
CHANNEL,
PRODUCT,
COST AS SPEND,
CONVERSIONS
---SELECT *
from MARKETING_DATABASE.GOOGLE_SHEETS.MRKT_SPEND_QUORA

UNION ALL

select 
DATE,
'MANUAL' AS TYPE,
'SPOTIFY' AS SOURCE,
CHANNEL AS CATEGORY,
NAME,
PRODUCT,
SPEND,
SALES AS CONVERSIONS
---SELECT *
from MARKETING_DATABASE.GOOGLE_SHEETS.MRKT_SPEND_SPOTIFY

UNION ALL

select 
TO_VARCHAR(DATE::date, 'YYYY-MM-DD') AS DATE,
'MANUAL' AS TYPE,
'TAPJOY' AS SOURCE,
CATEGORY,
CHANNEL,
PRODUCT,
COST AS SPEND,
SUBS AS CONVERSIONS
---SELECT *
from MARKETING_DATABASE.GOOGLE_SHEETS.MRKT_SPEND_TAPJOY

UNION ALL

select 
TO_VARCHAR(DATE::date, 'YYYY-MM-DD') AS DATE,
'MANUAL' AS TYPE,
'INFLUENCERAGENCY' AS SOURCE,
TYPE AS CATEGORY,
VENDOR AS CHANNEL,
PRODUCT,
SPEND,
0 AS CONVERSIONS
---SELECT *
from MARKETING_DATABASE.GOOGLE_SHEETS.MRKT_SPEND_INFLUENCERAGENCY

)

SELECT
d.date,
mms.type,
UPPER(mms.category) AS category,
UPPER(mms.channel) as channel,
UPPER(mms.product) as product,
mms.source,
ifnull(sum(mms.spend),0) as spend,
ifnull(sum(mms.conversions),0) as conversions
FROM SEED_DATA.DEV.DIM_DATE as d
left join manual_marketing_spend as mms
on d.date = mms.date
--where d.date between '2023-01-01' and to_date(current_date())
where source is not null
group by 1,2,3,4,5,6
order by 1 desc 
;"
"V_MARKETING_CHANNEL_SPEND_WEB_CONVERSIONS","create or replace view SEED_DATA.DEV.V_MARKETING_CHANNEL_SPEND_WEB_CONVERSIONS as 

with order_events as (
select 
  to_date(oc.event_time) as date
, oc.UTM_SOURCE
, oc.UTM_MEDIUM
, oc.UTM_SOURCE_MEDIUM
, oc.utm_campaign
, oc.referrer
, smm.UTM_SOURCE_MAP
, smm.UTM_MEDIUM_MAP
, smm.UTM_CAMPAIGN_MAP
, count(distinct oc.user_id) as order_complete_uucount

from
SEED_DATA.DEV.V_EVENTS_ORDER_COMPLETE as oc
---- inputs from growth team on utm mapping (https://docs.google.com/spreadsheets/d/1XZ0RChicS-NSVOU9yXodRX77fKLtpNR3nSA-Zfv0TDA/edit#gid=0)
left join MARKETING_DATABASE.GOOGLE_SHEETS.SOURCE_MEDIUM_MAPPING smm
on oc.UTM_SOURCE_MEDIUM = smm.UTM_SOURCE_MEDIUM

where to_date(oc.event_time) between '2023-01-01' and current_date()-1
group by 1,2,3,4,5,6,7,8,9
)

, order_events_conv as (
select 
  oe.date
, oe.UTM_SOURCE
, oe.UTM_MEDIUM
, oe.UTM_SOURCE_MEDIUM
, oe.utm_campaign
, oe.referrer
, oe.UTM_SOURCE_MAP
, oe.UTM_MEDIUM_MAP
, oe.UTM_CAMPAIGN_MAP
, sum(oe.order_complete_uucount) as order_complete_uucount
, ifnull(max(pvt.""'BING'""),0) as _bing
, ifnull(max(pvt.""'FACEBOOK'""),0) as _facebook
, ifnull(max(pvt.""'GEIST'""),0) as _geist
, ifnull(max(pvt.""'IHEART'""),0) as _iheart
, ifnull(max(pvt.""'INFLUENCER'""),0) as _influencer
, ifnull(max(pvt.""'INFLUENCERAGENCY'""),0) as _influenceragency
, ifnull(max(pvt.""'MISC'""),0) as _misc
, ifnull(max(pvt.""'OUTBRAIN'""),0) as _outbrain
, ifnull(max(pvt.""'PCA'""),0) as _pca
, ifnull(max(pvt.""'PINTEREST'""),0) as _pinterest
, ifnull(max(pvt.""'QUORA'""),0) as _quora
, ifnull(max(pvt.""'REDDIT'""),0) as _reddit
, ifnull(max(pvt.""'SNAPCHAT'""),0) as _snapchat
, ifnull(max(pvt.""'SPOTIFY'""),0) as _spotify
, ifnull(max(pvt.""'TAPJOY'""),0) as _tapjoy
, ifnull(max(pvt.""'TIKTOK'""),0) as _tiktok
, ifnull(max(pvt.""'TRADEDESK'""),0) as _tradedesk
, ifnull(max(pvt.""'GOOGLE ADS'""),0) as _googleads
, ifnull(max(mrk.SPEND),0) as TOTAL_SPEND

from order_events as oe
----- join in to pivot spend build / bu
left join SEED_DATA.DEV.V_MARKETING_CHANNEL_SPEND_PIVOT pvt
on oe.date = pvt.date
----- join in to total spend
left join (select date, sum(spend) as spend from SEED_DATA.DEV.V_MARKETING_CHANNEL_SPEND_ALL where concat(SOURCE,'-',TYPE) <> 'PINTEREST-MANUAL' group by 1) mrk
on oe.date = mrk.date

group by 1,2,3,4,5,6,7,8,9
order by 1 desc
)

, partition_build as (
select 
ROW_NUMBER() OVER (PARTITION BY date ORDER BY date desc) AS row_number, *
from order_events_conv)

select  
  date
, UTM_SOURCE
, UTM_MEDIUM
, UTM_SOURCE_MEDIUM
, utm_campaign
, referrer
, UTM_SOURCE_MAP
, UTM_MEDIUM_MAP
, UTM_CAMPAIGN_MAP
, order_complete_uucount
, case when row_number = 1 then ifnull((_bing),0) else 0 end as _bing
, case when row_number = 1 then ifnull((_facebook),0) else 0 end as _facebook
, case when row_number = 1 then ifnull((_geist),0) else 0 end as _geist
, case when row_number = 1 then ifnull((_iheart),0) else 0 end as _iheart
, case when row_number = 1 then ifnull((_influencer),0) else 0 end as _influencer
, case when row_number = 1 then ifnull((_influenceragency),0) else 0 end as _influenceragency
, case when row_number = 1 then ifnull((_misc),0) else 0 end as _misc
, case when row_number = 1 then ifnull((_outbrain),0) else 0 end as _outbrain
, case when row_number = 1 then ifnull((_pca),0) else 0 end as _pca
, case when row_number = 1 then ifnull((_pinterest),0) else 0 end as _pinterest
, case when row_number = 1 then ifnull((_quora),0) else 0 end as _quora
, case when row_number = 1 then ifnull((_reddit),0) else 0 end as _reddit
, case when row_number = 1 then ifnull((_snapchat),0) else 0 end as _snapchat
, case when row_number = 1 then ifnull((_spotify),0) else 0 end as _spotify
, case when row_number = 1 then ifnull((_tapjoy),0) else 0 end as _tapjoy
, case when row_number = 1 then ifnull((_tiktok),0) else 0 end as _tiktok
, case when row_number = 1 then ifnull((_tradedesk),0) else 0 end as _tradedesk
, case when row_number = 1 then ifnull((_googleads),0) else 0 end as _googleads
, case when row_number = 1 then ifnull((TOTAL_SPEND),0) else 0 end as _total_spend
from partition_build


--SELECT * FROM SEED_DATA.DEV.V_MARKETING_CHANNEL_SPEND_WEB_CONVERSIONS WHERE DATE IN ('2023-06-18') 
--select sum(spend) as spend from SEED_DATA.DEV.V_MARKETING_CHANNEL_SPEND_ALL where concat(SOURCE,'-',TYPE) <> 'PINTEREST-MANUAL' and date between '2023-06-01' and '2023-06-18'

--select * from SEED_DATA.DEV.V_MARKETING_CHANNEL_SPEND_ALL
"
"V_MARKETING_SPEND_CAC","create or replace view SEED_DATA.DEV.V_MARKETING_SPEND_CAC(
	MONTH_YEAR,
	PRODUCT,
	TOTAL_SPEND
) as 
/**** First build the orders data ****/
with orders as (

select 
  to_date(sku_adj.invoice_date) as order_date 
, date_trunc('month',to_date(sku_adj.invoice_date)) as order_date_month 
, o.subscription_id
, o.customer_id
, o.sku
, case when o.sku ilike '%syn%' or sku ilike 'ds01%' then 'DS-01'
       when o.sku ilike '%pds%' then 'PDS-08'
           else null end as product
-- accounting for Multi SKU
, case when sku ilike '%2mo%' then 2
       when sku ilike '%3mo%' then 3
       when sku ilike '%6mo%' then 6
       else 1 end as factor 
, ifnull(sum(o.quantity),0) as quantity
, ifnull(sum(o.base_price)/factor,0) as base_price
, ifnull(sum(o.total_amount_paid)/factor,0) as total_amount_paid
, ifnull(sum(o.tax)/factor,0) as tax
, ifnull(sum(o.discount)/factor,0) as discount
, ifnull(sum(o.amount_paid_by_transaction)/factor,0) as amount_paid_by_transaction
, ifnull(sum(o.total_shipping_cost)/factor,0) as total_shipping_cost
, ifnull(sum(o.shipping_cost_wo_tax)/factor,0) as shipping_cost_wo_tax
, ifnull(sum(o.shipping_cost_tax)/factor,0) as shipping_cost_tax
, ifnull(sum(o.amount_refunded)/factor,0) as amount_refunded
, ifnull(sum(o.credit_applied)/factor,0) as credit_applied

from SEED_DATA.DEV.ORDER_HISTORY as o 
    join SEED_DATA.DEV.V_ORDER_HISTORY_SKU_ADJUSTED as sku_adj on o.invoice_id = sku_adj.invoice_id -- Adding SKU adjusted table
where 
to_date(sku_adj.INVOICE_DATE) <= to_date(current_date()-1)
group by 1,2,3,4,5,6 )


/**** Aggregare Orders Data ****/
, orders_agg as (
select 
  o.order_date_month
, o.product
, sum(o.quantity) as quantity
from orders as o
group by 1,2
)


/**** Aggregare Orders Data Monhthly (excluding Product) ****/
, orders_agg_month as (
select 
  oa.order_date_month
, sum(oa.quantity) as quantity
from orders_agg as oa
group by 1
)

/**** Use above query to get perc of total quantity sold by product ****/
, orders_perc_total as (
select 
  oa.order_date_month
, oa.product
, sum(oa.quantity) as quantity
, DIV0NULL(sum(oa.quantity),sum(oam.quantity)) as perc_total_qty
from orders_agg as oa
left join orders_agg_month as oam
on oa.order_date_month = oam.order_date_month
where oa.product in ('DS-01','PDS-08')
group by 1,2
)

/**** Use above query to get perc of total quantity sold by product ****/
, orders_perc_total_agg as (
select 
  opt.order_date_month
, ifnull(max(case when opt.product = 'DS-01' then opt.perc_total_qty end ),0) as perc_total_qty_ds01
, ifnull(max(case when opt.product = 'DS-01' then 1-opt.perc_total_qty end ),0) as perc_total_qty_pds08
from orders_perc_total as opt
group by 1
)
/**** Bring in the CAC data ****/
, cac as (
select 
  month_year,
  account_group,
  sum(value) as total_spend_cac
from 
SEED_DATA.DEV.V_PROFIT_LOSS_MONTHLY
where ACCOUNT_GROUP in ('Acquisition Marketing','Paid Partnerships','Brand','Creative, Design + Production')
group by 1,2
)

,paid_acq_ratio as 
(
select month as month_year,DS_01_SPEND_PERC,PDS_08_SPEND_PERC
from MARKETING_DATABASE.GOOGLE_SHEETS.CAC_SPEND
)

,cac_modeled as (

select month_year,
        product,
        sum(total_spend) as total_spend
from 
(
--- Before PDS Launch
select
  c.month_year
, 'DS-01' as product
, sum(c.total_spend_cac) as total_spend
from cac as c
where c.month_year < '2022-04-01' 
group by 1,2

union all 

--- Post PDS Launch
select
  c.month_year
, 'DS-01' as product
, sum(c.total_spend_cac)*max(opta.perc_total_qty_ds01) as total_spend
from cac as c
left join orders_perc_total_agg as opta
on c.month_year = opta.order_date_month
where account_group in ('Brand','Creative, Design + Production') and c.month_year >= '2022-04-01'
group by 1,2

union all 

select
  c.month_year
, 'PDS-08' as product
, sum(c.total_spend_cac)*max(opta.perc_total_qty_pds08) as total_spend
from cac as c
left join orders_perc_total_agg as opta
on c.month_year = opta.order_date_month
where account_group in ('Brand','Creative, Design + Production') and c.month_year >= '2022-04-01'
group by 1,2

union all 

select
  c.month_year
, 'DS-01' as product
, sum(c.total_spend_cac)*max(par.DS_01_SPEND_PERC) as total_spend
from cac as c
left join paid_acq_ratio as par
on c.month_year = par.month_year
where account_group in ('Acquisition Marketing','Paid Partnerships') and c.month_year >= '2022-04-01'
group by 1,2

union all 

select
  c.month_year
, 'PDS-08' as product
, sum(c.total_spend_cac)*max(par.PDS_08_SPEND_PERC) as total_spend
from cac as c
left join paid_acq_ratio as par
on c.month_year = par.month_year
where account_group in ('Acquisition Marketing','Paid Partnerships') and c.month_year >= '2022-04-01'
group by 1,2
) 
group by 1,2
)

select * from cac_modeled
order by 1,2;"
"V_NON_REVENUE_SHIPMENTS","create or replace view SEED_DATA.DEV.V_NON_REVENUE_SHIPMENTS as

with base as (
select 
      invoice_id
    , invoice_number
    , SKU_DESCRIPTION 
    , CASE when SKU_DESCRIPTION ilike '%Daily Synbiotic' then 'syn-wk'
        when SKU_DESCRIPTION ilike '%Daily Synbiotic—Refill' then 'syn-rf'
        when SKU_DESCRIPTION ilike '%Daily Synbiotic—Refill (2 month)%' then 'syn-rf-2mo'
        when SKU_DESCRIPTION ilike '%Daily Synbiotic—Refill (3 month)%' then 'syn-rf-3mo'
        when SKU_DESCRIPTION ilike '%Daily Synbiotic—Refill (6 month)%' then 'syn-rf-6mo'
        when SKU_DESCRIPTION ilike '%Pediatric Daily Synbiotic' then 'pds-wk'
        when SKU_DESCRIPTION ilike '%Pediatric Daily Synbiotic—Refill' then 'pds-rf'
        when SKU_DESCRIPTION ilike '%Pediatric Daily Synbiotic—Refill (2 month)' then 'pds-rf-2mo'
        when SKU_DESCRIPTION is null then 'Other'
        else SKU end as SKU
    , case when SKU_DESCRIPTION ilike '%Gift%' then 'N'
           when SKU_DESCRIPTION iLIKE '%Trial%' then 'N'
           when SKU_DESCRIPTION iLIKE'%Preorder%' then 'N'
           when TOTAL_AMOUNT_PAID > 0 then 'N'
           else 'Y' end as replacement_flag
    , to_date(INVOICE_DATE) as INVOICE_DATE
    , discount as total_discount
    , tax as total_tax
    , TOTAL_SHIPPING_Cost
    , amount_refunded
    , credit_applied
    , TOTAL_AMOUNT_PAID as TOTAL_AMOUNT_PAID
    , base_price as base_price
    , quantity as total_quantity
    ,AMOUNT_PAID_BY_TRANSACTION
  

from SEED_DATA.DEV.ORDER_HISTORY
 where AMOUNT_PAID_BY_TRANSACTION = 0 
 
    )

,shipping as
( select 
 distinct split_part(order_number, '-',  2) as order_number,
 max(order_shipped_date) as order_shipped_date
 
 from ""SEED_DATA"".""DEV"".""SHIPMENT_HISTORY""
 group by 1

)

select 
    base.INVOICE_ID,
	base.INVOICE_NUMBER,
	base.SKU_DESCRIPTION,
	base.SKU,
	base.INVOICE_DATE,
    ORDER_SHIPPED_DATE,
    base.replacement_flag,
    base.total_discount as total_discount,
    base.total_tax as total_tax,
    base.TOTAL_SHIPPING_Cost as Total_Shipping_Cost,
    base.amount_refunded as Amount_Refunded,
    base.credit_applied as credit_applied,
    base.TOTAL_AMOUNT_PAID as TOTAL_AMOUNT_PAID,
    base.base_price as base_price,
    base.total_quantity as total_quantity,
    base.AMOUNT_PAID_BY_TRANSACTION

from base
left join shipping on base.invoice_number = shipping.order_number"
"V_PAUSED_SUBSCRIBER_ANALYSIS","create or replace view SEED_DATA.DEV.V_PAUSED_SUBSCRIBER_ANALYSIS as 

with pause_rank as 
(
select sub.recurly_subscription_id as subscription_uuid,
    CUSTOMER_ID,
    to_date(sub.activated_at) as activation_date,
    sub.first_product as product,
    sub.first_discount_percentage as first_discount_percentage,
    to_date(sub.cancelled_at) as cancelled_date, 
    p.version_started_at as pause_start_date,
    p.version_ended_at_clean as pause_end_date,
    datediff(month,pause_start_date,pause_end_date),
    datediff(day,pause_start_date,pause_end_date),
    ceil(datediff(day,pause_start_date,pause_end_date)/30,0) as pause_period,
    row_number() over(partition by subscription_uuid order by version_started_at) as pause_number,
    date_trunc(year,activation_date) as activation_year,
    date_trunc(month,activation_date) as activation_month_year,
    date_trunc(quarter,activation_date) as activation_quarter,
    case when activation_year = '2018-01-01' then '2018'
        when activation_year = '2019-01-01' then '2019'
        when activation_year = '2020-01-01' then '2020'
        when activation_year = '2021-01-01' and activation_quarter = '2021-01-01' then '2021 Q1'
        when activation_year = '2021-01-01' and activation_quarter = '2021-04-01' then '2021 Q2'
        when activation_year = '2021-01-01' and activation_quarter = '2021-07-01' then '2021 Q3'
        when activation_year = '2021-01-01' and activation_quarter = '2021-10-01' then '2021 Q4'
        when activation_year = '2022-01-01' and activation_quarter = '2022-01-01' then '2022 Q1'
        when activation_year = '2022-01-01' and activation_quarter = '2022-04-01' then '2022 Q2'
        when activation_year = '2022-01-01' and activation_quarter = '2022-07-01' then '2022 Q3'
        when activation_year = '2022-01-01' and activation_quarter = '2022-10-01' then '2022 Q4'
        when activation_year = '2023-01-01' and activation_month_year = '2023-01-01' then '2023-01'
        when activation_year = '2023-01-01' and activation_month_year = '2023-02-01' then '2023-02'
        when activation_year = '2023-01-01' and activation_month_year = '2023-03-01' then '2023-03'
        when activation_year = '2023-01-01' and activation_month_year = '2023-04-01' then '2023-04'
        when activation_year = '2023-01-01' and activation_month_year = '2023-05-01' then '2023-05'
        when activation_year = '2023-01-01' and activation_month_year = '2023-06-01' then '2023-06'
        when activation_year = '2023-01-01' and activation_month_year = '2023-07-01' then '2023-07'
        when activation_year = '2023-01-01' and activation_month_year = '2023-08-01' then '2023-08' end as activation_flag,
        case when first_discount_percentage = 0 then '0'
            when first_discount_percentage = 10 then '10'
            when first_discount_percentage > 10 and first_discount_percentage <= 15 then '11-15'
            when first_discount_percentage > 15 and first_discount_percentage <= 20 then '16-20'
            when first_discount_percentage > 20 and first_discount_percentage <= 25 then '21-25'
            when first_discount_percentage > 25 and first_discount_percentage <= 30 then '26-30'
            when first_discount_percentage > 30 and first_discount_percentage <= 40 then '31-40'
            when first_discount_percentage > 40 and first_discount_percentage <= 50 then '41-50'
            when first_discount_percentage > 50 then '50+' end as discount_category,
            channel_grouping,
            channel_platform,
            checkout_survey_response,
            was_previously_paused as pause_converted_to_cancel
from seed_data.dev.v_subscription_master as sub
     join SEED_DATA.DEV.V_SUBSCRIPTION_PAUSE_HISTORY as p on sub.recurly_subscription_id = p.subscription_uuid
qualify pause_number = 1 -- Only keeping their first pause instance
--where p.version_started_at >= '2023-03-01' --and p.version_started_At < '2023-09-01'
)

, activity as 
(
     with pause_no_cancel_activity as 
        ( with pause_no_cancel_cohort as 
            (
                select *,
                    row_number() over (partition by subscription_id order by invoice_date) as invoice_rank,
                    floor((datediff(day,to_date(p.pause_start_Date),to_date(invoice_date)))/30) as order_since_pause_days
                from pause_rank as p
                    left join SEED_DATA.DEV.V_ORDER_HISTORY as o on p.subscription_uuid = o.subscription_id
                where invoice_date >= p.pause_start_date
            
            )
            select subscription_uuid, 
                max(case when order_since_pause_days = 0 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_0to30_resume,
                max(case when order_since_pause_days = 1 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_31to60_resume,
                max(case when order_since_pause_days = 2 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_61to90_resume,
                max(case when order_since_pause_days = 3 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_91to120_resume,
                max(case when order_since_pause_days = 4 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_121to150_resume,
                max(case when order_since_pause_days = 5 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_151to180_resume,
                max(case when order_since_pause_days = 0 then 1 else 0 end) as rebill_days_0to30_resume,
                max(case when order_since_pause_days = 1 then 1 else 0 end) as rebill_days_31to60_resume,
                max(case when order_since_pause_days = 2 then 1 else 0 end) as rebill_days_61to90_resume,
                max(case when order_since_pause_days = 3 then 1 else 0 end) as rebill_days_91to120_resume,
                max(case when order_since_pause_days = 4 then 1 else 0 end) as rebill_days_121to150_resume,
                max(case when order_since_pause_days = 5 then 1 else 0 end) as rebill_days_151to180_resume

            from pause_no_cancel_cohort
            group by 1
         )
    ,pause_cancel_activity as 
        (
            with pause_cancel_cohort as 
            (
                select *,p.subscription_uuid as sub_id,
                    row_number() over (partition by subscription_id order by invoice_date) as invoice_rank,
                    floor((datediff(day,to_date(p.pause_start_Date),to_date(invoice_date)))/30) as order_since_pause_days
                from pause_rank as p
                    left join SEED_DATA.DEV.V_ORDER_HISTORY as o on p.customer_id = o.customer_id
                    left join seed_data.dev.v_subscription_master as s on o.subscription_id = s.RECURLY_SUBSCRIPTION_ID
                where invoice_date >= p.cancelled_date and s.reactivation_flag = 1
            )

            select sub_id, 
                max(case when order_since_pause_days = 0 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_0to30_Reactivate,
                max(case when order_since_pause_days = 1 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_31to60_Reactivate,
                max(case when order_since_pause_days = 2 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_61to90_Reactivate,
                max(case when order_since_pause_days = 3 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_91to120_Reactivate,
                max(case when order_since_pause_days = 4 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_121to150_Reactivate,
                max(case when order_since_pause_days = 5 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_151to180_Reactivate,
                max(case when order_since_pause_days = 0 then 1 else 0 end) as rebill_days_0to30_Reactivate,
                max(case when order_since_pause_days = 1 then 1 else 0 end) as rebill_days_31to60_Reactivate,
                max(case when order_since_pause_days = 2 then 1 else 0 end) as rebill_days_61to90_Reactivate,
                max(case when order_since_pause_days = 3 then 1 else 0 end) as rebill_days_91to120_Reactivate,
                max(case when order_since_pause_days = 4 then 1 else 0 end) as rebill_days_121to150_Reactivate,
                max(case when order_since_pause_days = 5 then 1 else 0 end) as rebill_days_151to180_Reactivate
            from pause_cancel_cohort
            group by 1
        )
     
        select *, 
             greatest(coalesce(first_rebill_days_0to30_resume,0),coalesce(first_rebill_days_0to30_Reactivate,0)) as first_rebill_days_0to30,
             greatest(coalesce(first_rebill_days_31to60_resume,0),coalesce(first_rebill_days_31to60_Reactivate,0)) as first_rebill_days_31to60,
             greatest(coalesce(first_rebill_days_61to90_resume,0),coalesce(first_rebill_days_61to90_Reactivate,0)) as first_rebill_days_61to90,
             greatest(coalesce(first_rebill_days_91to120_resume,0),coalesce(first_rebill_days_91to120_Reactivate,0)) as first_rebill_days_91to120,
             greatest(coalesce(first_rebill_days_121to150_resume,0),coalesce(first_rebill_days_121to150_Reactivate,0)) as first_rebill_days_121to150,
             greatest(coalesce(first_rebill_days_151to180_resume,0),coalesce(first_rebill_days_151to180_Reactivate,0)) as first_rebill_days_151to180,
             greatest(coalesce(rebill_days_0to30_resume,0),coalesce(rebill_days_0to30_Reactivate,0)) as rebill_days_0to30,
             greatest(coalesce(rebill_days_31to60_resume,0),coalesce(rebill_days_31to60_Reactivate,0)) as rebill_days_31to60,
             greatest(coalesce(rebill_days_61to90_resume,0),coalesce(rebill_days_61to90_Reactivate,0)) as rebill_days_61to90,
             greatest(coalesce(rebill_days_91to120_resume,0),coalesce(rebill_days_91to120_Reactivate,0)) as rebill_days_91to120,
             greatest(coalesce(rebill_days_121to150_resume,0),coalesce(rebill_days_121to150_Reactivate,0)) as rebill_days_121to150,
             greatest(coalesce(rebill_days_151to180_resume,0),coalesce(rebill_days_151to180_Reactivate,0)) as rebill_days_151to180
             
        from pause_cancel_activity as pc
             full join pause_no_cancel_activity as pnc on pc.sub_id = pnc.subscription_uuid
     

)   

select p.*,
    a.first_rebill_days_0to30_resume, a.first_rebill_days_31to60_resume, a.first_rebill_days_61to90_resume,
    a.first_rebill_days_91to120_resume, a.first_rebill_days_121to150_resume, a.first_rebill_days_151to180_resume,
    a.rebill_days_0to30_resume, a.rebill_days_31to60_resume,a.rebill_days_61to90_resume,
    a.rebill_days_91to120_resume, a.rebill_days_121to150_resume, a.rebill_days_151to180_resume,
    a.first_rebill_days_0to30_Reactivate, a.first_rebill_days_31to60_Reactivate, a.first_rebill_days_61to90_Reactivate,
    a.first_rebill_days_91to120_Reactivate, a.first_rebill_days_121to150_Reactivate, a.first_rebill_days_151to180_Reactivate,
    a.rebill_days_0to30_Reactivate, a.rebill_days_31to60_Reactivate,a.rebill_days_61to90_Reactivate,
    a.rebill_days_91to120_Reactivate, a.rebill_days_121to150_Reactivate, a.rebill_days_151to180_Reactivate,
    a.first_rebill_days_0to30, a.first_rebill_days_31to60, a.first_rebill_days_61to90,
    a.first_rebill_days_91to120, a.first_rebill_days_121to150, a.first_rebill_days_151to180,
    a.rebill_days_0to30, a.rebill_days_31to60,a.rebill_days_61to90,
    a.rebill_days_91to120, a.rebill_days_121to150, a.rebill_days_151to180
from pause_rank  as p
    left join activity as a on p.subscription_uuid = a.subscription_uuid
        

"
"V_PROFIT_LOSS_MONTHLY","create or replace view SEED_DATA.DEV.V_PROFIT_LOSS_MONTHLY as 

with pl_monthly as (
select * from MARKETING_DATABASE.GOOGLE_SHEETS.PROFIT_LOSS_MONTHLY )

, pl_account_mapping as (
select 
account_no,
account_no_name,
account_name,
account_group,
account_no_name_org
from 
MARKETING_DATABASE.GOOGLE_SHEETS.PL_ACCOUNT_MAPPING)

select 
pl.month_year,
account_no,
account_name,
account_no_name,
pmap.account_group,
pl.account_no_name_org,
ifnull(sum(value),0) as value

from 
pl_monthly as pl
left join pl_account_mapping pmap
on pl.account_no_name_org = pmap.account_no_name_org

--where --pl.month_year = '2023-05-01' and
--pmap.account_group = 'Product COGS'

group by 1,2,3,4,5,6
order by 1 desc;"
"V_REACTIVATION_HISTORY","create or replace view SEED_DATA.DEV.V_REACTIVATION_HISTORY as 
    with orders as 
    (
        with orders_clean as 
        (
            select subscription_id, 
                invoice_date, 
                lower(sku) as sku,
                case when sku ilike '%syn%' or sku ilike 'ds01%' then 'DS-01'
                    when sku ilike '%pds%' then 'PDS-08'
                    else null end as product,
                case when product = 'DS-01' and sku ilike '%wk%' then 'DS-01 Welcome Kit'
                    when product = 'DS-01' and sku ilike '%rf' then 'DS-01 Refill'
                    when product = 'DS-01' and sku ilike '%2mo%' then 'DS-01 Refill - 2 Months'
                    when product = 'DS-01' and sku ilike '%3mo%' then 'DS-01 SRP Refill - 3 Months'
                    when product = 'DS-01' and sku ilike '%6mo%' then 'DS-01 SRP Refill - 6 Months'
                    when product = 'DS-01' and sku ilike '%trial%' then 'DS-01 Trial'
                    when product = 'PDS-08' and sku ilike '%wk%' then 'PDS-08 Welcome Kit'
                    when product = 'PDS-08' and sku ilike '%rf' then 'PDS-08 Refill'
                    when product = 'PDS-08' and sku ilike '%2mo%' then 'PDS-08 Refill - 2 Months'
                    when product = 'PDS-08' and sku ilike '%3mo%' then 'PDS-08 SRP Refill - 3 Months'
                    when product = 'PDS-08' and sku ilike '%6mo%' then 'PDS-08 SRP Refill - 6 Months'
                    when product = 'PDS-08' and sku ilike '%trial%' then 'PDS-08 Trial'
                    else null 
                    end as clean_sku,
                case when clean_sku ilike '%Trial%' then 1 
                    when clean_sku ilike '%Welcome Kit%' then 2 
                    when clean_sku ilike '%Refill - 2 Months' then 3
                    when clean_sku ilike '%Refill' then 4
                    when clean_sku ilike '%Refill - 3 Months' then 5
                    when clean_sku ilike '%Refill - 6 Months' then 6 
                    end as sku_ranking,
                row_number() over(partition by subscription_id,product order by invoice_date,sku_ranking) as first_invoice_product_rank,
                row_number() over (partition by subscription_id,product order by invoice_date desc ,sku_ranking desc) as last_invoice_product_rank,
                row_number() over (partition by subscription_id order by invoice_date,sku_ranking ) as first_invoice_rank,
                row_number() over (partition by subscription_id order by invoice_date desc, sku_ranking desc) as last_invoice_rank,
                case when product = 'DS-01' and first_invoice_product_rank = 1 then invoice_date
                    else null end as first_order_date_ds01,
                case when product = 'PDS-08' and first_invoice_product_rank = 1 then invoice_date
                    else null end as first_order_date_pds08,
                case when first_invoice_rank = 1 then invoice_date 
                    else null end as first_order_date,
                case when product = 'DS-01' and last_invoice_product_rank = 1 then invoice_date
                    else null end as last_order_date_ds01,
                case when product = 'PDS-08' and last_invoice_product_rank = 1 then invoice_date
                    else null end as last_order_date_pds08,
                case when last_invoice_rank = 1 then invoice_date 
                    else null end as last_order_date,
                case when first_invoice_rank = 1 then product
                    else null end as first_product,
                case when first_invoice_rank = 1 then clean_sku
                    else null end as first_sku,
                case when last_invoice_rank = 1 then product 
                    else null end as last_product,
                case when last_invoice_rank = 1 then clean_sku
                    else null end as last_sku
    
            from ""SEED_DATA"".""DEV"".""V_ORDER_HISTORY"" as o 
            where subscription_id is not null
        ),
    
        order_summary as
        (
            select
                subscription_id, 
                min(first_order_date_ds01) as first_order_date_ds01,
                min(first_order_date_pds08) as first_order_date_pds08,
                min(first_order_date) as first_order_date,
                min(first_product) as first_product,
                min(first_sku) as first_sku,
                max(last_order_date_ds01) as last_order_date_ds01,
                max(last_order_date_pds08) as last_order_date_pds08,
                max(last_order_date) as last_order_date,
                max(last_product) as last_product,
                max(last_sku) as last_sku 
            from orders_clean    
            group by subscription_id
        )
    
        select recharge_subscription_id,
            recurly_subscription_id,
            min(coalesce(order_recharge.first_order_date_ds01,order_recurly.first_order_date_ds01)) as first_order_date_ds01,
            min(coalesce(order_recharge.first_order_date_pds08,order_recurly.first_order_date_pds08)) as first_order_date_pds08,
            min(coalesce(order_recharge.first_order_date,order_recurly.first_order_date)) as first_order_date,
            min(coalesce(order_recharge.first_product,order_recurly.first_product)) as first_product,
            min(coalesce(order_recharge.first_sku,order_recurly.first_sku)) as first_sku,
            max(coalesce(order_recurly.last_order_date_ds01,order_recharge.last_order_date_ds01)) as last_order_date_ds01,
            max(coalesce(order_recurly.last_order_date_pds08,order_recharge.last_order_date_pds08)) as last_order_date_pds08,
            max(coalesce(order_recurly.last_order_date,order_recharge.last_order_date)) as last_order_date,
            max(coalesce(order_recurly.last_product,order_recharge.last_product)) as last_product,
            max(coalesce(order_recurly.last_sku,order_recharge.last_sku)) as last_sku          
        from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION"" as s 
            left join order_summary as order_recharge on order_recharge.subscription_id = s.recharge_subscription_id
            left join order_summary as order_recurly on order_recurly.subscription_id = s.recurly_subscription_id
        group by recharge_subscription_id,recurly_subscription_id
       
    ), 
    
    customer_sub_info as 
    (
        with subscription_product as 
        (
            select customer_id, created_at,cancelled_at,
                case when sku ilike '%syn%' or sku ilike 'ds01%' then 'DS-01'
                    when sku ilike '%pds%' then 'PDS-08'
                    when sku is null and is_recharge_native = 1 and is_imported = 0 then 'DS-01'
                    else null end as product,
                datediff(month,created_at,coalesce(cancelled_at,current_date()))+1 as months_active
        from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION""
        )

    select customer_id,
        min(case when product = 'DS-01' then created_at else null end) as first_subscription_date_ds01,
        min(case when product = 'PDS-08' then created_at else null end) as first_subscription_date_pds08,
        min(created_at) as first_subscription_date,
        max(case when product = 'DS-01' then created_at else null end) as last_subscription_date_ds01,
        max(case when product = 'PDS-08' then created_at else null end) as last_subscription_date_pds08,
        max(created_at) as last_subscription_date,
        min(case when product = 'DS-01' then cancelled_at else null end) as first_cancel_date_ds01,
        min(case when product = 'PDS-08' then cancelled_at else null end) as first_cancel_date_pds08,
        min(cancelled_at) as first_cancel_date,
        max(case when product = 'DS-01' then cancelled_at else null end) as last_cancel_date_ds01,
        max(case when product = 'PDS-08' then cancelled_at else null end) as last_cancel_date_pds08,
        max(cancelled_at) as last_cancel_date,
        sum(months_active) as months_active_customer -- overlaps are considered as multiple 
    from subscription_product
    group by customer_id
    ),

    cancellation as 
    (
        select recurly_subscription_id,
            to_date(subscription_canceled_at) as cancelled_date,
            primary_reason as cancelled_primary_reason, 
            secondary_reason as cancelled_secondary_reason,
            reason_group
        from ""SEED_DATA"".""DEV"".""V_CANCELLATION_TRANSACTION_HISTORY""
    ),
    
    pause as 
    (
        select subscription_uuid as subscription_id,
            version_started_at as pause_start_date, 
            version_ended_at_clean as pause_end_date,
            row_number() over(partition by subscription_uuid order by version_started_at desc) as pause_rank
        from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION_PAUSE_HISTORY""
        qualify pause_rank = 1 
    
    ),
    
    next_bill as 
    (
        select subscription_id, next_bill_date
        from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION_NEXT_BILL_DATE""
    ),
    
    sku_history as 
    (
        select subscription_uuid as subscription_id, 
            min(case when updated_plan_code ilike '%3mo%' then version_started_at else null end) as first_enroll_date_srp_3mo,
            max(case when updated_plan_code ilike '%3mo%' then version_started_at else null end) as last_enroll_date_srp_3mo,
            min(case when updated_plan_code ilike '%6mo%' then version_started_at else null end) as first_enroll_date_srp_6mo,
            min(case when updated_plan_code ilike '%6mo%' then version_started_at else null end) as last_enroll_date_srp_6mo,
            case when first_enroll_date_srp_3mo is not null then 1 else 0 end as SRP_3mo_ever_flag,
            case when first_enroll_date_srp_6mo is not null then 1 else 0 end as SRP_6mo_ever_flag
        from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION_STATUS_HISTORY""
        group by subscription_uuid
    ),
    --- Need to update shipping_cost_data
    shipping_info as 
    (
        select * 
        from ""SEED_DATA"".""DEV"".""V_SHIPPING_COSTS_DELIVERY_HISTORY""
        limit 10
    )
    
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        s.customer_id,
        s.customer_email,
        s.created_at,
        s.quantity,
        s.cancelled_at,
        cancelled_primary_reason,
        cancelled_secondary_reason,
        reason_group,
        case when is_recharge_native = 1 then 'Recharge'
            else 'Recurly'
            end as origination_platform,
        cus_sub.first_subscription_date_ds01,
        cus_sub.first_subscription_date_pds08,
        cus_sub.first_subscription_date,
        cus_sub.last_subscription_date_ds01,
        cus_sub.last_subscription_date_pds08,
        cus_sub.last_subscription_date,
        cus_sub.first_cancel_date_ds01,
        cus_sub.first_cancel_date_pds08,
        cus_sub.first_cancel_date,
        cus_sub.last_cancel_date_ds01,
        cus_sub.last_cancel_date_pds08,
        cus_sub.last_cancel_date,
        o.first_order_date_ds01,
        o.first_order_date_pds08,
        o.first_order_date,
        o.first_product,
        o.first_sku,
        o.last_order_date_ds01,
        o.last_order_date_pds08,
        o.last_order_date,
        o.last_product,
        o.last_sku,
        (datediff(month,created_at,coalesce(cancelled_at,current_date()))+1) as months_active,
        cus_sub.months_active_customer,
        p.pause_start_date,
        p.pause_end_date,
        nb.next_bill_date,
        sku.first_enroll_date_srp_3mo,
        sku.last_enroll_date_srp_3mo,
        sku.first_enroll_date_srp_6mo,
        sku.last_enroll_date_srp_6mo,
        sku.SRP_3mo_ever_flag,
        sku.SRP_6mo_ever_flag,
        case when sku ilike '%3mo%' then 1 else 0 end as SRP_3mo_currently,
        case when sku ilike '%6mo%' then 1 else 0 end as SRP_6mo_currently,
        case when s.created_at > first_cancel_date then 1
            else 0 end as reactivation_flag
            
    from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION"" as s
        left join cancellation as cancel on s.recurly_subscription_id = cancel.recurly_subscription_id
        left join customer_sub_info as cus_sub on cus_sub.customer_id = s.customer_id
        left join orders as o on o.recharge_subscription_id = s.recharge_subscription_id and o.recurly_subscription_id = s.recurly_subscription_id
        left join pause as p on s.recurly_subscription_id = p.subscription_id
        left join next_bill as nb on s.recurly_subscription_id = nb.subscription_id
        left join sku_history as sku on sku.subscription_id = s.recurly_subscription_id;"
"V_RECURLY_PAYMENT_TRACKER","CREATE OR REPLACE VIEW SEED_DATA.DEV.V_RECURLY_PAYMENT_TRACKER as 

-- using the date spin to pin all metrics to the date
with date_spine as (
    select 
    *
    from ""SEED_DATA"".""DEV"".""DIM_DATE""
    where date between '2020-01-01' and to_date(current_date())
  )
  --------To get all transactions
,TOTAL_TRANSACTIONS as (
  
    select
      to_date(date) as date, 
      count(distinct transaction_id) as TOTAL_TRANSACTIONS
        from
        IO06230_RECURLY_SEED_SHARE.CLASSIC.TRANSACTIONS
          WHERE type = 'purchase' 
          and test = 'FALSE'
     group by 1
         )
    --------To get all only customers renewing there subscription
,RENEW as (
  
   select
     to_date(date) as date, 
     count(distinct transaction_id) as RENEW_TRANSACTIONS
       from
       IO06230_RECURLY_SEED_SHARE.CLASSIC.TRANSACTIONS
         WHERE ORIGIN = 'recurring' 
         and type = 'purchase' 
         and test = 'FALSE'
    group by 1
         )
      --------To get only customers starting there subscription
,NEW as (
  
  select
    to_date(date) as date, 
    count(distinct transaction_id) as NEW_TRANSACTIONS
      from
      IO06230_RECURLY_SEED_SHARE.CLASSIC.TRANSACTIONS
        where ORIGIN = 'api' 
        and type = 'purchase' 
        and test = 'FALSE'
   group by 1
         )
  
      --------To get all declines
,DECLINES as (
   select
     to_date(date) as date, 
     count(distinct transaction_id) as TOTAL_DECLINES
       from
       IO06230_RECURLY_SEED_SHARE.CLASSIC.TRANSACTIONS
         where type = 'purchase' 
         and status = 'declined' 
         and test = 'FALSE'
  group by 1
)
        --------To get only declines from customers renewing
,RENEW_DECLINES as (
   select
     to_date(date) as date,  
     count(distinct transaction_id) as RENEW_DECLINES
       from
       IO06230_RECURLY_SEED_SHARE.CLASSIC.TRANSACTIONS
         Where type = 'purchase' 
         and status = 'declined' 
         and test = 'FALSE'
         and ORIGIN = 'recurring' 
  group by 1
)     
          --------To get only declines from customers being billed for first time
,NEW_DECLINES as (
   select
     to_date(date) as date,  
     count(distinct transaction_id) as NEW_DECLINES
       from
       IO06230_RECURLY_SEED_SHARE.CLASSIC.TRANSACTIONS
         Where type = 'purchase' 
         and status = 'declined' 
         and test = 'FALSE'
         and ORIGIN = 'api'
    group by 1
                    )
  
    --------To get only all declines (all customers) by payment method
 ,DECLINE_PAY_TYPES as (

    select
     to_date(date) as date 
     ,count (distinct case when PAYMENT_METHOD = 'Amazon Pay' then transaction_id end) as AMAZON_PAY_DECLINES
     ,count (distinct case when PAYMENT_METHOD = 'Credit Card' then transaction_id end) as CREDIT_CARD_DECLINES
     ,count (distinct case when PAYMENT_METHOD = 'PayPal' then transaction_id end) as PAYPAL_DECLINES
     ,count (distinct case when PAYMENT_METHOD is null then transaction_id end) as MISSING_PAYMENT_METHOD_DECLINES
       from
       IO06230_RECURLY_SEED_SHARE.CLASSIC.TRANSACTIONS
         where type = 'purchase' 
         and status = 'declined' 
         and test = 'FALSE'
       --  and to_date(date) = '2023-07-09'
     group by 1
                   )     
  
    --------To get only all declines for renew customers by payment method 
   ,DECLINE_PAY_TYPES_R as (

    select
     to_date(date) as date 
     ,count (distinct case when PAYMENT_METHOD = 'Amazon Pay' then transaction_id end) as AMAZON_PAY_DECLINES_RENEW
     ,count (distinct case when PAYMENT_METHOD = 'Credit Card' then transaction_id end) as CREDIT_CARD_DECLINES_RENEW
     ,count (distinct case when PAYMENT_METHOD = 'PayPal' then transaction_id end) as PAYPAL_DECLINES_RENEW
     ,count (distinct case when PAYMENT_METHOD is null then transaction_id end) as MISSING_PAYMENT_METHOD_DECLINES_RENEW
       from
       IO06230_RECURLY_SEED_SHARE.CLASSIC.TRANSACTIONS
         where type = 'purchase' 
         and status = 'declined' 
         and test = 'FALSE'
         and ORIGIN = 'recurring'
         --and to_date(date) = '2023-07-09'
     group by 1
                   )    
      --------To get only all declines for new customers by payment method 
  
   ,DECLINE_PAY_TYPES_N as (

    select
     to_date(date) as date 
     ,count (distinct case when PAYMENT_METHOD = 'Amazon Pay' then transaction_id end) as AMAZON_PAY_DECLINES_NEW
     ,count (distinct case when PAYMENT_METHOD = 'Credit Card' then transaction_id end) as CREDIT_CARD_DECLINES_NEW
     ,count (distinct case when PAYMENT_METHOD = 'PayPal' then transaction_id end) as PAYPAL_DECLINES_NEW
     ,count (distinct case when PAYMENT_METHOD is null then transaction_id end) as MISSING_PAYMENT_METHOD_DECLINES_NEW
       from
       IO06230_RECURLY_SEED_SHARE.CLASSIC.TRANSACTIONS
         where type = 'purchase' 
         and status = 'declined' 
         and test = 'FALSE'
         and ORIGIN = 'api'
         --and to_date(date) = '2023-07-09'
     group by 1
                   )     
          ----------Decline reason codes by decline group (gsheet below has the mapping)
  ,DECLINE_REASONS as (
  select
     to_date(date) as date
     ,count (distinct case when DECLINE_GROUPING = 'INVALID CARD INFORMATION' then transaction_id end) as INVALID_CARD_INFO_DECLINE_GROUP
     ,count (distinct case when DECLINE_GROUPING = 'INSUFFICIENT FUNDS' then transaction_id end) as INSUFFICIENT_FUNDS_DECLINE_GROUP
     ,count (distinct case when DECLINE_GROUPING = 'FRAUD-CANCELLED' then transaction_id end) as FRAUD_CANCELLED_DECLINE_GROUP
     ,count (distinct case when  DECLINE_GROUPING = 'BLOCKED CARD'  then transaction_id end) as BLOCKED_CARD_DECLINE_GROUP
     ,count (distinct case when  DECLINE_GROUPING = 'BLOCKED CARD (LIFE CYCLE)' then transaction_id end) as BLOCKED_CARD_LIFECYCLE_DECLINE_GROUP
     ,count (distinct case when  DECLINE_GROUPING = 'BLOCKED CARD (POLICY)'  then transaction_id end) as BLOCKED_CARD_POLICY_DECLINE_GROUP
     ,count (distinct case when  DECLINE_GROUPING is null  then transaction_id end) as OTHER_DECLINE_GROUP
       from
        IO06230_RECURLY_SEED_SHARE.CLASSIC.TRANSACTIONS trans
          left join  ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""CREDIT_CARD_DECLINE_GROUP_MAPPING"" cc
            on trans.message = cc.message
              where type = 'purchase' 
              and status = 'declined' 
              and test = 'FALSE'
              -- and to_date(date) = '2023-07-09'
     group by 1
                   )
  
  
          ----------Decline reason codes by decline group for new (gsheet below has the mapping)
      ,DECLINE_REASONS_NEW as (
   select
     to_date(date) as date
     ,count (distinct case when DECLINE_GROUPING = 'INVALID CARD INFORMATION' then transaction_id end) as INVALID_CARD_INFO_DECLINE_GROUP_NEW
     ,count (distinct case when DECLINE_GROUPING = 'INSUFFICIENT FUNDS' then transaction_id end) as INSUFFICIENT_FUNDS_DECLINE_GROUP_NEW
     ,count (distinct case when DECLINE_GROUPING = 'FRAUD-CANCELLED' then transaction_id end) as FRAUD_CANCELLED_DECLINE_GROUP_NEW
     ,count (distinct case when  DECLINE_GROUPING = 'BLOCKED CARD'  then transaction_id end) as BLOCKED_CARD_DECLINE_GROUP_NEW
     ,count (distinct case when  DECLINE_GROUPING = 'BLOCKED CARD (LIFE CYCLE)' then transaction_id end) as BLOCKED_CARD_LIFECYCLE_DECLINE_GROUP_NEW
     ,count (distinct case when  DECLINE_GROUPING = 'BLOCKED CARD (POLICY)'  then transaction_id end) as BLOCKED_CARD_POLICY_DECLINE_GROUP_NEW
     ,count (distinct case when  DECLINE_GROUPING is null  then transaction_id end) as OTHER_DECLINE_GROUP_NEW
       from
        IO06230_RECURLY_SEED_SHARE.CLASSIC.TRANSACTIONS trans
          left join  ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""CREDIT_CARD_DECLINE_GROUP_MAPPING"" cc
            on trans.message = cc.message
              where type = 'purchase' 
              and status = 'declined' 
              and test = 'FALSE'
              and ORIGIN = 'api'
              -- and to_date(date) = '2023-07-09'
     group by 1
                   )              
          ----------Decline reason codes by decline group for new (gsheet below has the mapping)
      ,DECLINE_REASONS_RENEW as (
   select
     to_date(date) as date
     ,count (distinct case when DECLINE_GROUPING = 'INVALID CARD INFORMATION' then transaction_id end) as INVALID_CARD_INFO_DECLINE_GROUP_RENEW
     ,count (distinct case when DECLINE_GROUPING = 'INSUFFICIENT FUNDS' then transaction_id end) as INSUFFICIENT_FUNDS_DECLINE_GROUP_RENEW
     ,count (distinct case when DECLINE_GROUPING = 'FRAUD-CANCELLED' then transaction_id end) as FRAUD_CANCELLED_DECLINE_GROUP_RENEW
     ,count (distinct case when  DECLINE_GROUPING = 'BLOCKED CARD'  then transaction_id end) as BLOCKED_CARD_DECLINE_GROUP_RENEW
     ,count (distinct case when  DECLINE_GROUPING = 'BLOCKED CARD (LIFE CYCLE)' then transaction_id end) as BLOCKED_CARD_LIFECYCLE_DECLINE_GROUP_RENEW
     ,count (distinct case when  DECLINE_GROUPING = 'BLOCKED CARD (POLICY)'  then transaction_id end) as BLOCKED_CARD_POLICY_DECLINE_GROUP_RENEW
     ,count (distinct case when  DECLINE_GROUPING is null  then transaction_id end) as OTHER_DECLINE_GROUP_RENEW
       from
        IO06230_RECURLY_SEED_SHARE.CLASSIC.TRANSACTIONS trans
          left join  ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""CREDIT_CARD_DECLINE_GROUP_MAPPING"" cc
            on trans.message = cc.message
              where type = 'purchase' 
              and status = 'declined' 
              and test = 'FALSE'
              and ORIGIN = 'recurring'
              -- and to_date(date) = '2023-07-09'
     group by 1
                   )              
       
  select 
    ds.date
   ,DATE_TRUNC('MONTH', ds.date) AS month_date
   ,TOTAL_TRANSACTIONS
   ,RENEW_TRANSACTIONS
   ,NEW_TRANSACTIONS
   ,TOTAL_DECLINES
   ,RENEW_DECLINES
   ,NEW_DECLINES
   ,AMAZON_PAY_DECLINES
   ,CREDIT_CARD_DECLINES
   ,PAYPAL_DECLINES
   ,MISSING_PAYMENT_METHOD_DECLINES
   ,AMAZON_PAY_DECLINES_RENEW
   ,CREDIT_CARD_DECLINES_RENEW
   ,PAYPAL_DECLINES_RENEW
   ,MISSING_PAYMENT_METHOD_DECLINES_RENEW
   ,AMAZON_PAY_DECLINES_NEW
   ,CREDIT_CARD_DECLINES_NEW
   ,PAYPAL_DECLINES_NEW
   ,MISSING_PAYMENT_METHOD_DECLINES_NEW
   ,INVALID_CARD_INFO_DECLINE_GROUP
   ,INSUFFICIENT_FUNDS_DECLINE_GROUP
   ,FRAUD_CANCELLED_DECLINE_GROUP
   ,BLOCKED_CARD_DECLINE_GROUP
   ,BLOCKED_CARD_LIFECYCLE_DECLINE_GROUP
   ,BLOCKED_CARD_POLICY_DECLINE_GROUP
   ,OTHER_DECLINE_GROUP
   ,INVALID_CARD_INFO_DECLINE_GROUP_RENEW
   ,INSUFFICIENT_FUNDS_DECLINE_GROUP_RENEW
   ,FRAUD_CANCELLED_DECLINE_GROUP_RENEW
   ,BLOCKED_CARD_DECLINE_GROUP_RENEW
   ,BLOCKED_CARD_LIFECYCLE_DECLINE_GROUP_RENEW
   ,BLOCKED_CARD_POLICY_DECLINE_GROUP_RENEW
   ,OTHER_DECLINE_GROUP_RENEW
   ,INVALID_CARD_INFO_DECLINE_GROUP_NEW
   ,INSUFFICIENT_FUNDS_DECLINE_GROUP_NEW
   ,FRAUD_CANCELLED_DECLINE_GROUP_NEW
   ,BLOCKED_CARD_DECLINE_GROUP_NEW
   ,BLOCKED_CARD_LIFECYCLE_DECLINE_GROUP_NEW
   ,BLOCKED_CARD_POLICY_DECLINE_GROUP_NEW
   ,OTHER_DECLINE_GROUP_NEW
  
  
  
from date_spine as ds
---- join to TOTAL TRANS
left join TOTAL_TRANSACTIONS as TS
on ds.date = TS.date
---- join to RENW SUBS
left join RENEW as RN
on ds.date = RN.date
---- join to NEW
  left join NEW as NEW
on ds.date = NEW.date
---- join to total declines
left join DECLINES as DC
on ds.date = DC.date
---- join to DECLINE RENEW
left join RENEW_DECLINES as DCR
on ds.date = DCR.date
---- join to RENW SUBS
left join NEW_DECLINES as DCN
on ds.date = DCN.date
---- join to NEW
  left join DECLINE_PAY_TYPES as DPT
on ds.date = DPT.date
---- join to total subs
left join DECLINE_PAY_TYPES_R as DPTR
on ds.date = DPTR.date  
  
  left join DECLINE_PAY_TYPES_N as DPTN
on ds.date = DPTN.date
---- join to RENW SUBS
left join DECLINE_REASONS as DR
on ds.date = DR.date
---- join to NEW
  left join DECLINE_REASONS_RENEW as DRRN
on ds.date = DRRN.date
---- join to total declines
left join DECLINE_REASONS_NEW as DRN
on ds.date = DRN.date"
"V_RECURLY_TRANSACTION_HISTORY","create or replace view SEED_DATA.DEV.V_RECURLY_TRANSACTION_HISTORY(
	TRANSACTION_ID,
	CUSTOMER_ID,
	SUBSCRIPTION_ID,
	ORDER_DATE_TS,
	ORDER_DATE,
	SKU,
	PROMOTION_CODE,
	QUANTITY,
	BASE_PRICE,
	TOTAL_AMOUNT_PAID,
	TAX,
	DISCOUNT,
	SHIPPING_COST,
	REFUND_AMOUNT
) as 

with non_shipping_rev as
(
select 
  t.transaction_id as transaction_id
, t.account_code as customer_id
, t.subscription_id as subscription_id
, t.date as order_date
, a.adjustment_plan_code as sku
, a.adjustment_coupon_code as promotion_code
, ifnull(sum(a.adjustment_quantity),0) as quantity
, ifnull(sum(a.adjustment_amount),0) as base_price
, ifnull(sum(a.adjustment_total),0) as total_amount_paid
, ifnull(sum(a.adjustment_tax),0) as tax
, ifnull(sum(a.adjustment_discount),0) as discount

from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id

----- only for successful purchases and adjustment descriptions does not include shipping
where lower(t.type) = 'purchase'
and lower(t.status) = 'success'
and a.adjustment_description not ilike '%shipping%' 

group by 1,2,3,4,5,6
)

,shipping_rev as
(
select 
  transaction_id
, ifnull(sum(a.adjustment_amount),0) as shipping_cost  ----- aggregated the data 

from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id

----- only for successful purchases and adjustment descriptions includes shipping
where t.type = 'purchase'
and t.status = 'success'
and  adjustment_description ilike '%shipping%'

group by 1
),

refund_rev as
(
select 
  t.original_transaction_id as transaction_id ---- normalized
, ifnull(sum(t.amount),0) as refund_amount ----- aggregated the data 
--, t.date as refund_date
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t
join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on t.invoice_id = a.invoice_id

----- only for successful refunds and adjustment descriptions does not include shipping
where t.type = 'refund'
and t.status = 'success'
and adjustment_description not ilike '%shipping%'

group by 1
)

,recurly_final as (
select 
  nsr.transaction_id
, nsr.customer_id
, nsr.subscription_id
, nsr.order_date as order_date_ts
, to_date(nsr.order_date) as order_date
, nsr.sku
, nsr.promotion_code
, ifnull(sum(nsr.quantity),0) as quantity
, ifnull(sum(nsr.base_price),0) as base_price
, ifnull(sum(nsr.total_amount_paid),0) as total_amount_paid
, ifnull(sum(nsr.tax),0) as tax
, ifnull(sum(nsr.discount),0) as discount
, ifnull(sum(sr.shipping_cost),0) as shipping_cost
, ifnull(sum(rr.refund_amount),0) as refund_amount

from non_shipping_rev as nsr ----- non-shipping revenue
left join shipping_rev as sr on nsr.transaction_id = sr.transaction_id ---- joining to shipping revenue transactions
left join refund_rev as rr on nsr.transaction_id = rr.transaction_id ---- joining to refund revenue transactions

group by 1,2,3,4,5,6,7 )

select * from recurly_final;"
"V_REVENUE_HISTORY_DS01","create or replace view SEED_DATA.DEV.V_REVENUE_HISTORY_DS01  as 

with all_orders as 
(
    select * from SEED_DATA.DEV.ORDER_HISTORY --- all orders and adjusted orders for SRP
)

 , reactivation as (
select 
  to_date(activated_at) as date
, recharge_subscription_id as subscription_id
, quantity
, 'Y' as Flag
   from
   ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 1 and recharge_subscription_id is not null
   
   union all

   select 
  to_date(activated_at) as date
, recurly_subscription_id as subscription_id
, quantity
, 'Y' as Flag
   from
   ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 1 and Recurly_subscription_id is not null
)

 , New as (
select 
  to_date(activated_at) as date
, recharge_subscription_id as subscription_id
, 'Y' as Flag
   from
   ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 0 and Recharge_subscription_id is not null
   
   union all

   select 
  to_date(activated_at) as date
, recurly_subscription_id as subscription_id
, 'Y' as Flag
   from
   ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 0 and Recurly_subscription_id is not null)

,sub_inv as 
(
    -- joining recharge invoices
    select 
        TO_DATE(O.INVOICE_DATE) as INVOICE_DATE,
        O.CUSTOMER_ID,
        O.SUBSCRIPTION_ID as SUBSCRIPTION_ID,
        O.INVOICE_ID as INVOICE_ID,
        O.INVOICE_NUMBER AS INVOICE_NUMBER,
        O.TRANSACTION_ID,
        O.SKU,
        O.SKU_DESCRIPTION,
        CASE WHEN UPPER(O.SKU) ILIKE '%PDS%' THEN 'PDS-08' 
             WHEN UPPER(O.SKU) ILIKE '%SYN%' THEN 'DS-01'
             WHEN UPPER(O.SKU) ILIKE '%DS%' THEN 'DS-01'
             ELSE 'OTHER' END AS SKU_MASTER_ID,
       CASE WHEN UPPER(O.SKU) ILIKE '%6MO%' THEN 'Y' 
            WHEN UPPER(O.SKU) ILIKE '%3MO%' THEN 'Y' 
            else 'N' END AS SRP_FLAG,
                CASE WHEN base_price > 0 then 'N'
                     WHEN base_price = 0 and SKU_DESCRIPTION ilike '%Trial%' then 'N'
                     when base_price = 0 and SKU_DESCRIPTION ilike '%Preorder%' then 'N'
                     when base_price = 0 and SKU_DESCRIPTION ilike '%Charge%' then 'N'
                     when base_price = 0 and SKU_DESCRIPTION ilike '%Gift%' then 'N'
                     else 'Y'
                     end as Replacement_Flag,
  
                  CASE WHEN base_price > 0 then 'N'
                     else 'Y'
                     end as Non_Revenue_Shipment_Flag,
        ifnull(S.FLAG,'N') as REACTIVATION_FLAG,
        ifnull(N.FLAG,'N') as NEW_FLAG,
        O.QUANTITY,
        O.BASE_PRICE,
        O.TOTAL_AMOUNT_PAID,
        O.TAX,
        O.DISCOUNT,
        O.AMOUNT_PAID_BY_TRANSACTION,
        O.TOTAL_SHIPPING_COST,
        O.SHIPPING_COST_WO_TAX,
        O.SHIPPING_COST_TAX,
        O.AMOUNT_REFUNDED,
        O.CREDIT_APPLIED
  
    from all_orders as o
    left join reactivation as s
    on o.subscription_id = s.subscription_id and TO_DATE(O.INVOICE_DATE) = s.date
    left join new as n
    on o.subscription_id = n.subscription_id and TO_DATE(O.INVOICE_DATE) = n.date
      
 )

    
  select 
      sub_inv.INVOICE_DATE,
      sub_inv.CUSTOMER_ID,
      sub_inv.SUBSCRIPTION_ID,
      sub_inv.INVOICE_NUMBER,
      sub_inv.INVOICE_ID,
      sub_inv.TRANSACTION_ID,
      sub_inv.SKU,
      sub_inv.SKU_MASTER_ID,
      REACTIVATION_FLAG,
      NEW_FLAG,
      CASE WHEN NEW_FLAG = 'N' and REACTIVATION_FLAG = 'N' then 'Y' else 'N' end as RENEWAL_FLAG,
      SRP_FLAG, 
      QUANTITY,
      BASE_PRICE,
      TOTAL_AMOUNT_PAID,
      TAX,
      DISCOUNT,
      AMOUNT_PAID_BY_TRANSACTION,
      TOTAL_SHIPPING_COST,
      SHIPPING_COST_WO_TAX,
      SHIPPING_COST_TAX,
      AMOUNT_REFUNDED,
      CREDIT_APPLIED,
    base_price
        - tax 
        - COALESCE(total_shipping_cost,0) 
        + discount 
        + COALESCE(credit_applied, 0) as gross_revenue
        
    , base_price
        - tax 
        - COALESCE(shipping_cost_tax,0) 
        + discount 
        + COALESCE(SHIPPING_COST_WO_TAX, 0) as adj_gross_revenue
        
    , base_price
        + tax 
        + COALESCE(total_shipping_cost,0) 
        - discount 
        - COALESCE(credit_applied, 0) as adj_total_paid
        
    , base_price
        + COALESCE(SHIPPING_COST_WO_TAX,0) 
        - discount 
        - COALESCE(credit_applied, 0) as adj_subtotal_paid
        
    ,gross_revenue/quantity as Net_Value
    
    from sub_inv
    where SKU_MASTER_ID = 'DS-01';"
"V_REVENUE_HISTORY_PDS08","create or replace view SEED_DATA.DEV.V_REVENUE_HISTORY_PDS08  as 

with all_orders as 
(
    select * from SEED_DATA.DEV.ORDER_HISTORY --- all orders and adjusted orders for SRP
)

 , reactivation as (
select 
  to_date(activated_at) as date
, recharge_subscription_id as subscription_id
, quantity
, 'Y' as Flag
   from
   ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 1 and recharge_subscription_id is not null
   
   union all

   select 
  to_date(activated_at) as date
, recurly_subscription_id as subscription_id
, quantity
, 'Y' as Flag
   from
   ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 1 and Recurly_subscription_id is not null
)

 , New as (
select 
  to_date(activated_at) as date
, recharge_subscription_id as subscription_id
, 'Y' as Flag
   from
   ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 0 and Recharge_subscription_id is not null
   
   union all

   select 
  to_date(activated_at) as date
, recurly_subscription_id as subscription_id
, 'Y' as Flag
   from
   ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 0 and Recurly_subscription_id is not null)

,sub_inv as 
(
    -- joining recharge invoices
    select 
        TO_DATE(O.INVOICE_DATE) as INVOICE_DATE,
        O.CUSTOMER_ID,
        O.SUBSCRIPTION_ID as SUBSCRIPTION_ID,
        O.INVOICE_ID as INVOICE_ID,
        O.INVOICE_NUMBER AS INVOICE_NUMBER,
        O.TRANSACTION_ID,
        O.SKU,
        O.SKU_DESCRIPTION,
        CASE WHEN UPPER(O.SKU) ILIKE '%PDS%' THEN 'PDS-08' 
             WHEN UPPER(O.SKU) ILIKE '%SYN%' THEN 'DS-01'
             WHEN UPPER(O.SKU) ILIKE '%DS%' THEN 'DS-01'
             ELSE 'OTHER' END AS SKU_MASTER_ID,
       CASE WHEN UPPER(O.SKU) ILIKE '%6MO%' THEN 'Y' 
            WHEN UPPER(O.SKU) ILIKE '%3MO%' THEN 'Y' 
            else 'N' END AS SRP_FLAG,
                CASE WHEN base_price > 0 then 'N'
                     WHEN base_price = 0 and SKU_DESCRIPTION ilike '%Trial%' then 'N'
                     when base_price = 0 and SKU_DESCRIPTION ilike '%Preorder%' then 'N'
                     when base_price = 0 and SKU_DESCRIPTION ilike '%Charge%' then 'N'
                     when base_price = 0 and SKU_DESCRIPTION ilike '%Gift%' then 'N'
                     else 'Y'
                     end as Replacement_Flag,
  
                  CASE WHEN base_price > 0 then 'N'
                     else 'Y'
                     end as Non_Revenue_Shipment_Flag,
        ifnull(S.FLAG,'N') as REACTIVATION_FLAG,
        ifnull(N.FLAG,'N') as NEW_FLAG,
        O.QUANTITY,
        O.BASE_PRICE,
        O.TOTAL_AMOUNT_PAID,
        O.TAX,
        O.DISCOUNT,
        O.AMOUNT_PAID_BY_TRANSACTION,
        O.TOTAL_SHIPPING_COST,
        O.SHIPPING_COST_WO_TAX,
        O.SHIPPING_COST_TAX,
        O.AMOUNT_REFUNDED,
        O.CREDIT_APPLIED
  
    from all_orders as o
    left join reactivation as s
    on o.subscription_id = s.subscription_id and TO_DATE(O.INVOICE_DATE) = s.date
    left join new as n
    on o.subscription_id = n.subscription_id and TO_DATE(O.INVOICE_DATE) = n.date
      
 )

    
  select 
      sub_inv.INVOICE_DATE,
      sub_inv.CUSTOMER_ID,
      sub_inv.SUBSCRIPTION_ID,
      sub_inv.INVOICE_NUMBER,
      sub_inv.INVOICE_ID,
      sub_inv.TRANSACTION_ID,
      sub_inv.SKU,
      sub_inv.SKU_MASTER_ID,
      REACTIVATION_FLAG,
      NEW_FLAG,
      CASE WHEN NEW_FLAG = 'N' and REACTIVATION_FLAG = 'N' then 'Y' else 'N' end as RENEWAL_FLAG,
      SRP_FLAG, 
      QUANTITY,
      BASE_PRICE,
      TOTAL_AMOUNT_PAID,
      TAX,
      DISCOUNT,
      AMOUNT_PAID_BY_TRANSACTION,
      TOTAL_SHIPPING_COST,
      SHIPPING_COST_WO_TAX,
      SHIPPING_COST_TAX,
      AMOUNT_REFUNDED,
      CREDIT_APPLIED,
    base_price
        - tax 
        - COALESCE(total_shipping_cost,0) 
        + discount 
        + COALESCE(credit_applied, 0) as gross_revenue
        
    , base_price
        - tax 
        - COALESCE(shipping_cost_tax,0) 
        + discount 
        + COALESCE(SHIPPING_COST_WO_TAX, 0) as adj_gross_revenue
        
    , base_price
        + tax 
        + COALESCE(total_shipping_cost,0) 
        - discount 
        - COALESCE(credit_applied, 0) as adj_total_paid
        
    , base_price
        + COALESCE(SHIPPING_COST_WO_TAX,0) 
        - discount 
        - COALESCE(credit_applied, 0) as adj_subtotal_paid
        
    ,gross_revenue/quantity as Net_Value
    
    from sub_inv
    where SKU_MASTER_ID = 'PDS-08';"
"V_SEED_ACQUISITION_DS01","create or replace view SEED_DATA.DEV.V_SEED_ACQUISITION_DS01 as 
--- using the date spin to pin all metrics to the date
with date_spine as (
    select 
    *
    from seed_data.dev.dim_date
    where date between '2018-01-01' and to_date(current_date())
),

sub_master as (
    select 
    *
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
    where 
    (case when sku ilike '%syn%' or sku ilike 'ds01%' then 'DS-01'
                    when sku ilike '%pds%' then 'PDS-08'
                    else null end) = 'DS-01'
),

cancellation_transaction_history as
(
    select to_date(cancelled_at) as date,
        reason_group,
        ifnull(sum(quantity),0) as sub_cancellation_qty,
        --------- adding for sub ids on 9/21/23
        ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_cancellation_ids
    from sub_master
    where 
    to_date(cancelled_at) between '2018-01-01' and to_date(current_date())
    group by 1,2

), 

cancellation_transaction_history_net_pp as
(
    select to_date(cancelled_at) as date,
        ifnull(sum(quantity),0) as sub_cancellation_qty,
        --------- adding for sub ids on 9/21/23
        ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_cancellation_ids
    from sub_master
    where 
    to_date(cancelled_at) between '2018-01-01' and to_date(current_date())
    and was_previously_paused = 'N'
    group by 1

), 

cancellation_transaction_history_ds01 as
(
    select to_date(cancelled_at) as date,
        ifnull(sum(quantity),0) as sub_cancellation_qty,
        --------- adding for sub ids on 9/21/23
        ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_cancellation_ids
    from sub_master
    where 
    to_date(cancelled_at) between '2018-01-01' and to_date(current_date())
    group by 1

), 

pause as 
(
    select to_date(pause_start_date) as date,
    ifnull(sum(quantity),0) as sub_pause_cnt,
    --------- adding for sub ids on 9/21/23
    ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_pause_ids
    from sub_master
    where 
    to_date(pause_start_date) between '2018-01-01' and to_date(current_date())
    group by 1

),

subscription as (
select 
  to_date(activated_at) as date
, ifnull(sum(quantity),0) as sub_created_qty
--------- adding for sub ids on 9/21/23
, ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_created_ids
, ifnull(count(distinct case when ifnull(first_discount_percentage_base_price,0) > 0 then recurly_subscription_id end),0) as discounted_sub_created_ids
from sub_master
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
group by 1
)

, reactivation as (
select 
  to_date(activated_at) as date
, ifnull(sum(quantity),0) as sub_reactivation_qty
--------- adding for sub ids on 9/21/23
, ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_reactivation_ids
, ifnull(count(distinct case when ifnull(first_discount_percentage_base_price,0) > 0 then recurly_subscription_id end),0) as discounted_sub_reactivation_ids
from sub_master
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 1
group by 1
)

, product_subs as (
select 
  to_date(activated_at) as date,
----------------------------Adjusted away from First Qty on 9/5/23-------------------------  
--  sum(case when first_subscription_date_ds01 is null then quantity end ) as pdsonly_qty
--, sum(case when first_subscription_date_pds08 is null then quantity end ) as dsonly_qty
  sum(case when sku ilike '%syn%' or sku ilike 'ds01%' then quantity end ) as dsonly_qty
, sum(case when sku ilike '%pds%' then quantity end ) as pdsonly_qty
, sum(case when first_subscription_date_ds01 = first_subscription_date_pds08 then quantity end ) as dsandpds_qty
, sum(case when first_subscription_date_ds01 < first_subscription_date_pds08 then quantity end ) as dsafirst_qty
, sum(case when first_subscription_date_ds01 > first_subscription_date_pds08 then quantity end ) as pdsfirst_qty
--------- adding for sub ids on 9/21/23
, count(distinct case when sku ilike '%syn%' or sku ilike 'ds01%' then RECURLY_SUBSCRIPTION_ID end ) as dsonly_sub_ids
, count(distinct case when sku ilike '%pds%' then quantity end ) as pdsonly_sub_ids
, count(distinct case when first_subscription_date_ds01 = first_subscription_date_pds08 then RECURLY_SUBSCRIPTION_ID end ) as dsandpds_sub_ids
, count(distinct case when first_subscription_date_ds01 < first_subscription_date_pds08 then RECURLY_SUBSCRIPTION_ID end ) as dsafirst_sub_ids
, count(distinct case when first_subscription_date_ds01 > first_subscription_date_pds08 then RECURLY_SUBSCRIPTION_ID end ) as pdsfirst_sub_ids

from sub_master
where to_date(activated_at) between '2018-01-01' and to_date(current_date())
group by 1
)

, new_sub as (
select 
  to_date(activated_at) as date
, ifnull(sum(quantity),0) as sub_new_qty
--------- adding for sub ids on 9/21/23
, ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_new_ids
, ifnull(count(distinct case when ifnull(first_discount_percentage_base_price,0) > 0 then recurly_subscription_id end),0) as discounted_sub_new_ids
from sub_master
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 0
group by 1
)

, orders as (
select 
  to_date(INVOICE_DATE) as date
, ifnull(sum(quantity),0) as orders
, ifnull(sum(TOTAL_AMOUNT_PAID),0) as revenue
from SEED_DATA.DEV.ORDER_HISTORY
where 
to_date(INVOICE_DATE) between '2018-01-01' and to_date(current_date())
and (case when sku ilike '%syn%' or sku ilike 'ds01%' then 'DS-01'
                    when sku ilike '%pds%' then 'PDS-08'
                    else null end) = 'DS-01'

group by 1
)

, finance as (
select
  date
, sum(case when product = 'DS-01' and SKU_CLEAN in ('Refill - 3 Months') then TOTAL_CREATED_SUB_IDS end) as three_month_srp_sub_created_ids
, sum(case when product = 'DS-01' and SKU_CLEAN in ('Refill - 6 Months') then TOTAL_CREATED_SUB_IDS end) as six_month_srp_sub_created_ids
, sum(total_gross_rev) as total_gross_rev
, sum(inv_total_sub_ids) as inv_total_subs
, sum(activated_total_gross_rev) as activated_total_gross_rev
from
SEED_DATA.DEV.FINANCIAL_MODEL 
where product = 'DS-01'
group by 1
)

, spend as (
select 
  to_date(date) as date
, sum(case when lower(channel_update) = 'tiktok' then spend end ) as  tiktok_spend
, sum(case when lower(channel_update) = 'tapjoy' then spend end ) as  tapjoy_spend
, sum(case when lower(channel_update) = 'spotify' then spend end ) as  spotify_spend
, sum(case when lower(channel_update) = 'iHeart' then spend end ) as  iheart_spend
, sum(case when lower(channel_update) = 'google nonbrand' then spend end ) as  googlenb_spend
, sum(case when lower(channel_update) = 'google brand' then spend end ) as  googlebrand_spend
, sum(case when lower(channel_update) = 'outbrain' then spend end ) as  outbrain_spend
, sum(case when lower(channel_update) = 'meta' then spend end ) as  meta_spend
, sum(case when lower(channel_update) = 'rokt' then spend end ) as  rokt_spend
, sum(case when lower(channel_update) = 'pinterest' then spend end ) as  pinterest_spend
, sum(case when lower(channel_update) = 'reddit' then spend end ) as  reddit_spend
, sum(case when lower(channel_update) = 'public radio' then spend end ) as  public_radio_spend
, sum(case when lower(channel_update) = 'bing nonbrand' then spend end ) as  bingnb_spend
, sum(case when lower(channel_update) = 'bing brand' then spend end ) as  bingbrand_spend
, sum(case when lower(channel_update) = 'tradedesk' then spend end ) as  tradedesk_spend
, sum(case when lower(channel_update) = 'snapchat' then spend end ) as  snapchat_spend
, sum(case when lower(channel_update) = 'influencer' then spend end ) as  influencer_spend
, sum(case when lower(channel_update) = 'partnership' then spend end ) as  partnership_spend
, sum(case when lower(channel_update) = 'affiliate' then spend end ) as  affiliate_spend
, sum(case when lower(channel_update) = 'liveintent' then spend end ) as  liveintent_spend
, sum(case when lower(channel_update) = 'youtube' then spend end ) as  youtube_spend
, ifnull(sum(spend),0) as total_spend
from
PROD_DB.GROWTH.V_MARKETING_CHANNEL_SPEND_ALL_V2
--SEED_DATA.DEV.V_MARKETING_CHANNEL_SPEND_ALL
where 
to_date(date) between '2018-01-01' and to_date(current_date())
and product = 'DS-01'
group by 1
)

, final as (
select 
  ds.date
, DATE_TRUNC('MONTH', ds.date) AS month_date
, 'DS-01' as product
, sum( case when cth.reason_group = 'Price' then cth.sub_cancellation_qty end ) as price_sub_cancellation_qty
, sum( case when cth.reason_group = 'Compliance' then cth.sub_cancellation_qty end ) as compliance_sub_cancellation_qty
, sum( case when cth.reason_group = 'No improvement' then cth.sub_cancellation_qty end ) as noimprove_sub_cancellation_qty
, sum( case when cth.reason_group = 'Discomfort' then cth.sub_cancellation_qty end ) as discomfort_sub_cancellation_qty
, sum( case when cth.reason_group = 'Subscription aversion' then cth.sub_cancellation_qty end ) as subaver_sub_cancellation_qty
, sum( case when cth.reason_group = 'Stopped taking probiotics' then cth.sub_cancellation_qty end ) as stopped_sub_cancellation_qty
, sum( case when cth.reason_group = 'Switched probiotics' then cth.sub_cancellation_qty end ) as switchprob_cancellation_cnt
, sum( case when cth.reason_group = 'UX' then cth.sub_cancellation_qty end ) as ux_sub_cancellation_qty
, sum( case when cth.reason_group = 'Switched due to price' then cth.sub_cancellation_qty end ) as switchprice_sub_cancellation_qty
, sum( case when cth.reason_group = 'Experience' then cth.sub_cancellation_qty end ) as experience_sub_cancellation_qty
, sum( case when cth.reason_group = 'Other' then cth.sub_cancellation_qty end ) as other_sub_cancellation_qty
, sum( case when cth.reason_group is null then cth.sub_cancellation_qty end ) as null_sub_cancellation_qty
, sum(cth.sub_cancellation_qty) as ttl_sub_cancellation_qty
, sum(cth.sub_cancellation_ids) as ttl_sub_cancellation_ids
, max(cthnpp.sub_cancellation_qty) as netpp_sub_cancellation_qty
, max(cthnpp.sub_cancellation_ids) as netpp_sub_cancellation_ids
, max(sub.sub_created_qty) as sub_created_qty
, max(sub.sub_created_ids) as sub_created_ids
, max(sub.discounted_sub_created_ids) as discounted_sub_created_ids
, max(psub.pdsonly_qty) as sub_created_pdsonly_qty
, max(psub.pdsonly_sub_ids) as sub_created_pdsonly_sub_ids
, max(psub.dsonly_qty) as sub_created_dsonly_qty
, max(psub.dsonly_sub_ids) as sub_created_dsonly_sub_ids
, max(psub.dsandpds_qty) as sub_created_dsandpds_qty
, max(psub.dsandpds_sub_ids) as sub_created_dsandpds_sub_ids
, max(psub.dsafirst_qty) as sub_created_dsafirst_qty
, max(psub.dsafirst_sub_ids) as sub_created_dsafirst_sub_ids
, max(psub.pdsfirst_qty) as sub_created_pdsfirst_qty
, max(psub.pdsfirst_sub_ids) as sub_created_pdsfirst_sub_ids
, max(pau.sub_pause_cnt) as sub_pause_cnt
, max(pau.sub_pause_ids) as sub_pause_ids
, max(rtv.sub_reactivation_qty) as sub_reactivation_qty
, max(rtv.sub_reactivation_ids) as sub_reactivation_ids
, max(rtv.discounted_sub_reactivation_ids) as discounted_sub_reactivation_ids
, max(nsu.sub_new_qty) as sub_new_qty
, max(nsu.sub_new_ids) as sub_new_ids
, max(nsu.discounted_sub_new_ids) as discounted_sub_new_ids
, max(ord.orders) as orders
, max(ord.revenue) as revenue
, max(fin.total_gross_rev) as total_gross_rev
, max(fin.activated_total_gross_rev) as activated_total_gross_rev
, max(fin.inv_total_subs) as inv_total_subs
, max(fin.three_month_srp_sub_created_ids) as three_month_srp_sub_created_ids
, max(fin.six_month_srp_sub_created_ids) as six_month_srp_sub_created_ids
---- spend
, max(tiktok_spend) as tiktok_spend
, max(tapjoy_spend) as tapjoy_spend
, max(spotify_spend) as spotify_spend
, max(iheart_spend) as iheart_spend
, max(googlenb_spend) as googlenb_spend
, max(googlebrand_spend) as googlebrand_spend
, max(bingnb_spend) as bingnb_spend
, max(bingbrand_spend) as bingbrand_spend
, max(outbrain_spend) as outbrain_spend
, max(meta_spend) as meta_spend
, max(rokt_spend) as rokt_spend
, max(pinterest_spend) as pinterest_spend
, max(reddit_spend) as reddit_spend
, max(public_radio_spend) as public_radio_spend
, max(tradedesk_spend) as tradedesk_spend
, max(snapchat_spend) as snapchat_spend
, max(influencer_spend) as influencer_spend
, max(partnership_spend) as partnership_spend
, max(affiliate_spend) as affiliate_spend
, max(liveintent_spend) as liveintent_spend
, max(youtube_spend) as youtube_spend
, max(total_spend) as total_spend

from date_spine as ds
---- join to cancellations
left join cancellation_transaction_history as cth
on ds.date = cth.date
---- join to total subs
left join subscription as sub
on ds.date = sub.date
---- join to paused subs
left join pause as pau
on ds.date = pau.date
---- join to reactivation subs
left join reactivation as rtv
on ds.date = rtv.date
---- join to new subs
left join new_sub as nsu
on ds.date = nsu.date
---- join to orders
left join orders as ord
on ds.date = ord.date
---- join to finance
left join finance as fin
on ds.date = fin.date
---- join to product subs
left join product_subs as psub
on ds.date = psub.date
---- join to spend by channel
left join spend as spd
on ds.date = spd.date
---- join to cancellations net previously paused
left join cancellation_transaction_history_net_pp as cthnpp
on ds.date = cthnpp.date

group by 1,2,3 )

select * from final order by 1 desc;"
"V_SEED_RETENTION","create or replace view SEED_DATA.DEV.V_SEED_RETENTION(
	ACTIVE_MONTH_YEAR,
	ACTIVE_SUBS_QUANTITY,
	CANCELLED_SUBS_QUANTITY,
	PAUSED_SUBS_QUANTITY,
	BILLED_REFILL_QUNATITY,
	BILLED_REFILL_2MO_QUNATITY,
	BILLED_REFILL_3MO_QUNATITY,
	BILLED_REFILL_6MO_QUNATITY,
	RETAINED_REFILL_2MO_QUNATITY,
	RETAINED_REFILL_3MO_QUNATITY,
	RETAINED_REFILL_6MO_QUNATITY
) as 

    with date_range as 
    (
        select 
            date
            from seed_data.dev.dim_date
            where year in (2022,2023) and month <= 12  and day = 1
    ),
    
    cohort as 
    (
    select *
    from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION_MASTER"" as s
        cross join date_range as dr
    where to_date(activated_at) < date and (to_date(cancelled_at) is null or to_date(cancelled_at) >= date)
        and recurly_subscription_id is not null -- There are 514 recharge subscription id that shows still active and is not mapped to a recurly subscription
    ),
    
    transaction as 
    (
    select o.*, 
        case when sku ilike '%wk%' then 'Welcome Kit'
             when sku ilike '%rf' then 'Refill'
             when sku ilike '%2mo%' then 'Refill - 2 Months'
             when sku ilike '%3mo%' then 'SRP Refill - 3 Months'
             when sku ilike '%6mo%' then 'SRP Refill - 6 Months'
             else null end as sku_category,
        case when to_date(invoice_date) < dr.date then 'Retained' else 'Billed' end as bill_category,
        dr.date 
    from ""SEED_DATA"".""DEV"".""V_ORDER_HISTORY"" as o 
        cross join date_range as dr 
    where(
            (sku ilike '%wk%' and to_date(invoice_date)>= dr.date and to_date(invoice_date) < add_months(dr.date,1)) or 
            (sku ilike '%rf' and to_date(invoice_date)>= dr.date and to_date(invoice_date) < add_months(dr.date,1)) or
            (sku ilike '%2mo%' and to_date(invoice_date)>= add_months(dr.date,-1) and to_date(invoice_date) < add_months(dr.date,1)) or 
            (sku ilike '%3mo%' and to_date(invoice_date)>= add_months(dr.date,-2) and to_date(invoice_date) < add_months(dr.date,1)) or 
            (sku ilike '%6mo%' and to_date(invoice_date)>= add_months(dr.date,-5) and to_date(invoice_date) < add_months(dr.date,1))
         )
    ),
    
    cohort_agg as 
    (
    
    select date as active_month_year,
        sum(quantity) as active_subs_quantity,
        sum(case when to_date(cancelled_at) is not null and 
                      to_date(cancelled_at) >= date and 
                      to_date(cancelled_at) < add_months(date,1)
                      then quantity else 0 end) as cancelled_subs_quantity,
        sum(case when to_date(pause_start_date) is not null and
                      (to_date(pause_start_date) < add_months(date,1)) and 
                      (to_date(pause_end_date) is null or to_date(pause_end_date) >= add_months(date,1))
                      then quantity else 0 end) as paused_subs_quantity   
    from cohort
    group by 1
    ),
    
    transaction_agg as 
    (
    select c.date as active_month_year,
        sum(case when bill_category = 'Billed' and sku_category = 'Refill' then c.quantity else 0 end) as billed_refill_qunatity,
        sum(case when bill_category = 'Billed' and sku_category = 'Refill - 2 Months' then c.quantity else 0 end) as billed_refill_2mo_qunatity,
        sum(case when bill_category = 'Billed' and sku_category = 'SRP Refill - 3 Months' then c.quantity else 0 end) as billed_refill_3mo_qunatity,
        sum(case when bill_category = 'Billed' and sku_category = 'SRP Refill - 6 Months' then c.quantity else 0 end) as billed_refill_6mo_qunatity,
        sum(case when bill_category = 'Retained' and sku_category = 'Refill - 2 Months' then c.quantity else 0 end) as retained_refill_2mo_qunatity,
        sum(case when bill_category = 'Retained' and sku_category = 'SRP Refill - 3 Months' then c.quantity else 0 end) as retained_refill_3mo_qunatity,
        sum(case when bill_category = 'Retained' and sku_category = 'SRP Refill - 6 Months' then c.quantity else 0 end) as retained_refill_6mo_qunatity
    from cohort as c
    left join transaction as t on c.recurly_subscription_id = t.subscription_id and c.date = t.date
    group by 1
    ),
    
    
    final_data as 
    (
    select cohort_agg.*,
        transaction_agg.billed_refill_qunatity,
        transaction_agg.billed_refill_2mo_qunatity,
        transaction_agg.billed_refill_3mo_qunatity,
        transaction_agg.billed_refill_6mo_qunatity,
        transaction_agg.retained_refill_2mo_qunatity,
        transaction_agg.retained_refill_3mo_qunatity,
        transaction_agg.retained_refill_6mo_qunatity
    from cohort_agg 
    join transaction_agg on cohort_agg.active_month_year = transaction_agg.active_month_year
    )
    
    select *
    from final_data;"
"V_SEED_SUBSCRIPTION_ACTIVITY_LIVE","create or replace view SEED_DATA.DEV.V_SEED_SUBSCRIPTION_ACTIVITY_LIVE as 

--- using the date spin to pin all metrics to the date
with date_spine as (
    select 
    *
    from seed_data.dev.dim_date
    where date between '2020-01-01' and to_date(current_date())
)

, cancellation_transaction_history as (
select 
  to_date(cancelation_form_created_at) as date
, reason_group
, ifnull(count(distinct subscription_id),0) as sub_cancellation_cnt
from SEED_DATA.DEV.V_CANCELLATION_TRANSACTION_HISTORY
where 
to_date(cancelation_form_created_at) between '2020-01-01' and to_date(current_date())
group by 1,2
)

----- add quantity
, pause as 
(
 select 
   to_date(pause_start_date) as date
 , count(distinct subscription_uuid) as sub_pause_cnt
 from (
 ----- pause build
    select subscription_uuid,
        version_started_at as pause_start_date, 
        version_ended_at_clean as pause_end_date,
        row_number() over(partition by subscription_uuid order by version_started_at desc) as pause_rank
    from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION_PAUSE_HISTORY""
    qualify pause_rank = 1 
   ) 
 where pause_start_date is not null
 group by 1
 --order by 1 desc
)

, subscription as (
select 
  to_date(created_at) as date
, ifnull(sum(quantity),0) as sub_created_qty
from SEED_DATA.DEV.V_SUBSCRIPTION
where 
to_date(created_at) between '2020-01-01' and to_date(current_date())
group by 1
--order by 1 desc
)

, reactivation as (
select 
  to_date(created_at) as date
, ifnull(sum(quantity),0) as sub_reactivation_qty
from SEED_DATA.DEV.V_REACTIVATION_HISTORY
where 
to_date(created_at) between '2020-01-01' and to_date(current_date())
and reactivation_flag = 1
group by 1
--order by 1 desc
)

, new_sub as (
select 
  to_date(created_at) as date
, ifnull(sum(quantity),0) as sub_new_qty
from SEED_DATA.DEV.V_REACTIVATION_HISTORY
where 
to_date(created_at) between '2020-01-01' and to_date(current_date())
and reactivation_flag = 0
group by 1
--order by 1 desc
)

, orders as (
select 
  to_date(INVOICE_DATE) as date
, ifnull(sum(quantity),0) as orders
, ifnull(sum(TOTAL_AMOUNT_PAID),0) as revenue
from SEED_DATA.DEV.V_ORDER_HISTORY
where 
to_date(INVOICE_DATE) between '2020-01-01' and to_date(current_date())
group by 1
--order by 1 desc
)


select 
  ds.date
, DATE_TRUNC('MONTH', ds.date) AS month_date
, sum( case when cth.reason_group = 'Price' then cth.sub_cancellation_cnt end ) as price_sub_cancellation_cnt
, sum( case when cth.reason_group = 'Compliance' then cth.sub_cancellation_cnt end ) as compliance_sub_cancellation_cnt
, sum( case when cth.reason_group = 'No improvement' then cth.sub_cancellation_cnt end ) as noimprove_sub_cancellation_cnt
, sum( case when cth.reason_group = 'Discomfort' then cth.sub_cancellation_cnt end ) as discomfort_sub_cancellation_cnt
, sum( case when cth.reason_group = 'Subscription aversion' then cth.sub_cancellation_cnt end ) as subaver_sub_cancellation_cnt
, sum( case when cth.reason_group = 'Stopped taking probiotics' then cth.sub_cancellation_cnt end ) as stopped_sub_cancellation_cnt
, sum( case when cth.reason_group = 'Switched probiotics' then cth.sub_cancellation_cnt end ) as switchprob_cancellation_cnt
, sum( case when cth.reason_group = 'UX' then cth.sub_cancellation_cnt end ) as ux_sub_cancellation_cnt
, sum( case when cth.reason_group = 'Switched due to price' then cth.sub_cancellation_cnt end ) as switchprice_sub_cancellation_cnt
, sum( case when cth.reason_group = 'Experience' then cth.sub_cancellation_cnt end ) as experience_sub_cancellation_cnt
, sum( case when cth.reason_group = 'Other' then cth.sub_cancellation_cnt end ) as other_sub_cancellation_cnt
, sum(cth.sub_cancellation_cnt) as ttl_sub_cancellation_cnt
, max(sub.sub_created_qty) as sub_created_qty
, max(pau.sub_pause_cnt) as sub_pause_cnt
, max(rtv.sub_reactivation_qty) as sub_reactivation_qty
, max(nsu.sub_new_qty) as sub_new_qty
, max(ord.orders) as orders
, max(ord.revenue) as revenue

from date_spine as ds
---- join to cancellations
left join cancellation_transaction_history as cth
on ds.date = cth.date
---- join to total subs
left join subscription as sub
on ds.date = sub.date
---- join to paused subs
left join pause as pau
on ds.date = pau.date
---- join to reactivation subs
left join reactivation as rtv
on ds.date = rtv.date
---- join to new subs
left join new_sub as nsu
on ds.date = nsu.date
---- join to orders
left join orders as ord
on ds.date = ord.date

group by 1,2
order by 1 desc 

--select * from SEED_DATA.DEV.V_SEED_SUBSCRIPTION_ACTIVITY order by 1 desc"
"V_SHIPMENT_HISTORY","create or replace view SEED_DATA.DEV.V_SHIPMENT_HISTORY(
	ORDER_NUMBER,
	ORDER_DATE_TS,
	ORDER_DATE,
	ORDER_SHIPPED_DATE_TS,
	ORDER_SHIPPED_DATE,
	INTL_DOMESTIC,
	COUNTRY,
	CITY,
	STATE,
	ZIP_CODE,
	SHIP_SERVICE_CODE,
	FULFILLMENT_PARTNER,
    ORIGIN_FACILITY_NAME,
	REGION,
	SYN_WK,
	SYN_RF,
	SYN_RF_2MO,
	SYN_RF_3MO,
	SYN_RF_6MO,
	PDS_WK,
	PDS_RF,
	PDS_RF_2MO,
	DELIVERED_DATE,
	SHIPPING_COST,
	SHIPPING_WEIGHT,
	DELIVERED_DATE_PRIOR_TO_SHIPPED_DATE_FLAG,
	CARRIER_GROUP
) as 
---- oceanx + stord shipping data
with oceanx_stord as 
  (  
  select 
   distinct
     order_number
   , order_date
   , order_shipped_date
    -----added fulfilment orgin at the request of shipping 7-26-23
   , 'OCEANX' as ORIGIN_FACILITY_NAME
   , upper(shipto_city) as shipto_city
   , upper(shipto_state) as shipto_state
   , upper(shipto_country_code) as shipto_country_code
   , shipto_zip
   , ship_service_code
   , 'oceanx' as fulfillment_partner
   from ""MARKETING_DATABASE"".""OCEANX_DATALAKE"".""VW_DATA_SHIPMENT"" 
             
   UNION ALL
   
   select
     distinct
      o.order_number as order_number
    , o.ORDER_CREATED_DATETIME as order_date
    , s.SHIP_DATE as order_shipped_date
        -----added fulfilment orgin at the request of shipping 7-26-23
    , s.ORIGIN_FACILITY_NAME as ORIGIN_FACILITY_NAME
    , upper(dest_city) as shipto_city
    , upper(dest_state) as shipto_state
    , upper(dest_country) as shipto_country_code
    , DESTINATION_POSTAL_CODE as shipto_zip
    , service_method as ship_service_code
    , 'stord' as fulfillment_partner
    from ""MARKETING_DATABASE"".""STORD"".""ORDERS"" as o 
    left join ""MARKETING_DATABASE"".""STORD"".""SHIPMENTS"" as s on o.order_number = s.order_number
    where o.order_type = 'sales'
)   

--- build combined shipping data
, build_shipping as (
        
select 
  distinct
  order_number
, order_date as order_date_ts
, to_date(order_date) as order_date
, order_shipped_date as order_shipped_date_ts
, to_date(order_shipped_date) as order_shipped_date
, case when shipto_country_code ilike '%US%' and shipto_country_code ilike '%us%' then 'Domestic'
       when shipto_country_code not ilike '%US%' and shipto_country_code not ilike '%us%' then 'International'
       end as Intl_domestic
, SHIPTO_COUNTRY_CODE as country
, SHIPTO_CITY as city
, SHIPTO_STATE as state
, SHIPTO_ZIP as zip_code
, ship_service_code
, fulfillment_partner
, ORIGIN_FACILITY_NAME

from oceanx_stord 
where to_date(order_date) > '2021-12-31'
)

----- finalize build with shipping costs, delivery dates, and sku identification
, final_build as (
select 
  distinct
  final.order_number
, final.order_date_ts
, final.order_date
, final.order_shipped_date_ts
, final.order_shipped_date
, final.Intl_domestic
, final.country
, final.city
, final.state
, final.zip_code
, final.ship_service_code
, final.fulfillment_partner
, final.ORIGIN_FACILITY_NAME  
, case when final.country in ('US','PR','AS','GU','MP','MH','FM') then SRM.Region else CAM.AREA end as Region
, fs.""'syn-wk'"" as syn_wk
, fs.""'syn-rf'"" as syn_rf
, fs.""'syn-rf-2mo'"" as syn_rf_2mo
, fs.""'syn-rf-3mo'"" as syn_rf_3mo
, fs.""'syn-rf-6mo'"" as syn_rf_6mo
, fs.""'pds-wk'"" as pds_wk
, fs.""'pds-rf'"" as pds_rf
, fs.""'pds-rf-2mo'"" as pds_rf_2mo
, max(scdh.delivered_date) as delivered_date  ---- lastest devliery date by order number 
, max(scdh.shipping_cost) as shipping_cost
, max(scdh.shipping_weight) as shipping_weight
from build_shipping as final
---- join to shipping costs and delivery information
left join SEED_DATA.DEV.V_SHIPPING_COSTS_DELIVERY_HISTORY as scdh on final.order_number = scdh.order_number
---- join to finalized sku build
left join SEED_DATA.DEV.V_SHIPPING_FINALIZED_SKU as fs on final.order_number = fs.order_number
left join  ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""STATE_REGION_MAPPING""   as SRM on final.state = SRM.state_code 
left join  ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""COUNTRY_AND_AREA_MAPPING""  As CAM on final.COUNTRY = CAM.COUNTRY_CODE 

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22

)

select *, case when delivered_date < order_shipped_date then 'Y' else 'N' end as delivered_date_prior_to_shipped_date_flag,

case when  ship_service_code in ('FedEx Home Delivery','Stord - FedEx SmartPost','FedEx Ground','Stord - FedEx Standard Overnight','fedex_international_','FedEx 2 Day','SMART_POST') then 'FEDEX'
     when  ship_service_code in ('ups_next_day_air_sav','Stord - UPS Worldwide Expedited','UPS Mail Innovations Parcel Select Lightweight','ups_next_day_air','ups_2nd_day_air','ups_ground','UPSSaver') then 'UPS'
     when  ship_service_code in ('GROUND_HOME_DELIVERY','usps_first_class_mai','First','USPS First-Class Package Service','usps_parcel_select','usps_priority_mail_i','First Class','usps_priority_mail_e','usps_priority_mail','USPS Priority Mail','Priority','FirstClassPackageInternationalService','usps_first_class_pac','amazon_usps_priority') then 'USPS'
     when  ship_service_code in ('FedEx Home Delivery','Stord - FedEx SmartPost','FedEx Ground','Stord - FedEx Standard Overnight','fedex_international_','FedEx 2 Day','SMART_POST') then 'FEDEX'
     when  ship_service_code in ('apc_priority_ddu_del','PriorityDdpDelcon','apc_priority_ddp_del') then 'APC'
     when  ship_service_code in ('Stord - Passport Priority DDP More Than 64oz','PStord - Passport Priority DDP Less Than 64oz') then 'PASSPORT'
     when  ship_service_code in ('osm_parcel_select','osm_parcel_select_li') then 'OSM'
     when  ship_service_code in ('Stord - DHL Parcel Expedited Max, Parcel Plus Expedited Max','DHLPacketInternational','DHLParcelExpeditedMax') then 'DHL'
     when  ship_service_code in ('ontrac_ground_servic') then 'ONTRAC'
     else 'OTHER' end as Carrier_Group
   
     from final_build 
     
     where order_number like 'SEED-%' 
     and to_date(order_date) <= to_date(current_date()-1) 
     and ORDER_SHIPPED_DATE is not null;"
"V_SUBSCRIPTION_NEXT_BILL_DATE","create or replace view SEED_DATA.DEV.V_SUBSCRIPTION_NEXT_BILL_DATE as 

select 
  uuid as subscription_id
, current_term_ends_at as next_bill_date_ts
, to_date(current_term_ends_at) as next_bill_date
from IO06230_RECURLY_SEED_SHARE.CLASSIC.SUBSCRIPTIONS
where state = 'active' or state = 'paused'

;"
"V_SUBSCRIPTION_STATUS_HISTORY","create or replace view SEED_DATA.DEV.V_SUBSCRIPTION_STATUS_HISTORY as 

--- Final code		
with sub_history_plan_clean as		
(
        select 
          *
        , case when plan_code like 'syn-wk%' then 'syn-wk'
                else plan_code end as updated_plan_code
        --,lag(updated_plan_code) over(partition by subscription_uuid order by version_started_at) as lag_plan_code
        , row_number() over(partition by subscription_uuid,subscription_state,updated_plan_code order by version_started_at) as row_no_agg		
        , row_number() over(partition by subscription_uuid order by version_started_at) as row_no_sub		
        , (row_no_sub - row_no_agg) as final_rank	
        , to_date(min(subscription_activated_at) over (partition by subscription_uuid)) as subscription_activated_date		
        , to_date(max(subscription_expires_at) over (partition by subscription_uuid)) as subscription_expires_date	
        , coalesce(version_ended_at, '3000-01-01') as version_ended_at_clean -- To account for same plan cancelled over different time		

        from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTION_HISTORY""		
        --where subscription_uuid = '59314b1626fdf2331a986a4b9fb0a550'		
        --where plan_code not ilike '%pds%'and plan_code not ilike '%ds01-trial%'		
)	
		
, final_table as		
(		
        select 
          subscription_uuid		
        , subscription_state	
        , updated_plan_code	
        , subscription_activated_date	
        , subscription_expires_date	
        , final_rank
        , to_date(min(version_started_at)) as version_started_at	
        , to_date(max(version_ended_at_clean)) as version_ended_at		
        
        from sub_history_plan_clean		
        group by 1,2,3,4,5,6		
        order by 1,7		
)		
		
select 
  subscription_uuid	
, subscription_state	
, updated_plan_code		
, subscription_activated_date
, subscription_expires_date	
, version_started_at	
, case when version_ended_at like '3000-01-01' then null
        else version_ended_at end as version_ended_at		

from final_table	;"
"V_COHORT_PDS08_SUB_COHORT_REVENUE","create or replace view SEED_DATA.DEV.V_COHORT_PDS08_SUB_COHORT_REVENUE(
	CREATED_MONTH_YEAR,
	COHORT_QUANTITY,
	ACTIVE_MONTH_0,
	ACTIVE_MONTH_1,
	ACTIVE_MONTH_2,
	ACTIVE_MONTH_3,
	ACTIVE_MONTH_4,
	ACTIVE_MONTH_5,
	ACTIVE_MONTH_6,
	ACTIVE_MONTH_7,
	ACTIVE_MONTH_8,
	ACTIVE_MONTH_9,
	ACTIVE_MONTH_10,
	ACTIVE_MONTH_11,
	ACTIVE_MONTH_12,
	ACTIVE_MONTH_13,
	ACTIVE_MONTH_14,
	ACTIVE_MONTH_15,
	ACTIVE_MONTH_16,
	ACTIVE_MONTH_17,
	ACTIVE_MONTH_18,
	ACTIVE_MONTH_19,
	ACTIVE_MONTH_20,
	ACTIVE_MONTH_21,
	ACTIVE_MONTH_22,
	ACTIVE_MONTH_23,
	ACTIVE_MONTH_24,
	ACTIVE_MONTH_25,
	ACTIVE_MONTH_26,
	ACTIVE_MONTH_27,
	ACTIVE_MONTH_28,
	ACTIVE_MONTH_29,
	ACTIVE_MONTH_30,
	ACTIVE_MONTH_31,
	ACTIVE_MONTH_32,
	ACTIVE_MONTH_33,
	ACTIVE_MONTH_34,
	ACTIVE_MONTH_35,
	ACTIVE_MONTH_36,
	ACTIVE_MONTH_37,
	ACTIVE_MONTH_38,
	ACTIVE_MONTH_39,
	ACTIVE_MONTH_40,
	ACTIVE_MONTH_41,
	ACTIVE_MONTH_42,
	ACTIVE_MONTH_43,
	ACTIVE_MONTH_44,
	ACTIVE_MONTH_45,
	ACTIVE_MONTH_46,
	ACTIVE_MONTH_47,
	ACTIVE_MONTH_48,
	ACTIVE_MONTH_49,
	ACTIVE_MONTH_50,
	ACTIVE_MONTH_51,
	ACTIVE_MONTH_52,
	ACTIVE_MONTH_53,
	ACTIVE_MONTH_54,
	ACTIVE_MONTH_55,
	ACTIVE_MONTH_56,
	ACTIVE_MONTH_57,
	ACTIVE_MONTH_58,
	ACTIVE_MONTH_59,
	ACTIVE_MONTH_60
) as

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_COGS_UPDATE
    where product = 'PDS-08'
)

,sub_inv as 
(
     -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.order_date))/30) as invoice_month,
        o.quantity as invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as revenue,
        invoice_refund_flag        
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    where first_product = 'PDS-08'
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.order_date))/30) as invoice_month,
        o.quantity as invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as revenue,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
    where first_product = 'PDS-08'
)

,sub_inv_flag as
(
    select recharge_subscription_id,recurly_subscription_id,activated_at,
        sum(case when invoice_month = 0 or invoice_month = -1 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_0_flag,
        sum(case when invoice_month = 1 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_1_flag,
        sum(case when invoice_month = 2 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_2_flag,
        sum(case when invoice_month = 3 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_3_flag,
        sum(case when invoice_month = 4 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_4_flag,
        sum(case when invoice_month = 5 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_5_flag,
        sum(case when invoice_month = 6 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_6_flag,
        sum(case when invoice_month = 7 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_7_flag,
        sum(case when invoice_month = 8 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_8_flag,
        sum(case when invoice_month = 9 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_9_flag,
        sum(case when invoice_month = 10 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_10_flag,
        sum(case when invoice_month = 11 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_11_flag,
        sum(case when invoice_month = 12 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_12_flag,
        sum(case when invoice_month = 13 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_13_flag,
        sum(case when invoice_month = 14 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_14_flag,
        sum(case when invoice_month = 15 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_15_flag,
        sum(case when invoice_month = 16 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_16_flag,
        sum(case when invoice_month = 17 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_17_flag,
        sum(case when invoice_month = 18 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_18_flag,
        sum(case when invoice_month = 19 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_19_flag,
        sum(case when invoice_month = 20 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_20_flag,
        sum(case when invoice_month = 21 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_21_flag,
        sum(case when invoice_month = 22 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_22_flag,
        sum(case when invoice_month = 23 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_23_flag,
        sum(case when invoice_month = 24 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_24_flag,
        sum(case when invoice_month = 25 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_25_flag,
        sum(case when invoice_month = 26 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_26_flag,
        sum(case when invoice_month = 27 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_27_flag,
        sum(case when invoice_month = 28 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_28_flag,
        sum(case when invoice_month = 29 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_29_flag,
        sum(case when invoice_month = 30 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_30_flag,
        sum(case when invoice_month = 31 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_31_flag,
        sum(case when invoice_month = 32 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_32_flag,
        sum(case when invoice_month = 33 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_33_flag,
        sum(case when invoice_month = 34 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_34_flag,
        sum(case when invoice_month = 35 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_35_flag,
        sum(case when invoice_month = 36 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_36_flag,
        sum(case when invoice_month = 37 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_37_flag,
        sum(case when invoice_month = 38 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_38_flag,
        sum(case when invoice_month = 39 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_39_flag,
        sum(case when invoice_month = 40 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_40_flag,
        sum(case when invoice_month = 41 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_41_flag,
        sum(case when invoice_month = 42 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_42_flag,
        sum(case when invoice_month = 43 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_43_flag,
        sum(case when invoice_month = 44 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_44_flag,
        sum(case when invoice_month = 45 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_45_flag,
        sum(case when invoice_month = 46 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_46_flag,
        sum(case when invoice_month = 47 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_47_flag,
        sum(case when invoice_month = 48 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_48_flag,
        sum(case when invoice_month = 49 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_49_flag,
        sum(case when invoice_month = 50 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_50_flag,
        sum(case when invoice_month = 51 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_51_flag,
        sum(case when invoice_month = 52 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_52_flag,
        sum(case when invoice_month = 53 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_53_flag,
        sum(case when invoice_month = 54 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_54_flag,
        sum(case when invoice_month = 55 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_55_flag,
        sum(case when invoice_month = 56 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_56_flag,
        sum(case when invoice_month = 57 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_57_flag,
        sum(case when invoice_month = 58 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_58_flag,
        sum(case when invoice_month = 59 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as  invoice_month_59_flag,
        sum(case when invoice_month = 60 and invoice_refund_flag = 'not_fully_refunded' then revenue else 0 end) as invoice_month_60_flag
              
    from sub_inv
    group by recharge_subscription_id,recurly_subscription_id,activated_at
)

select 
    date_trunc('month',to_date(activated_at)) as created_month_year,
    ---left(to_date(activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60

from sub_inv_flag
where date_trunc('month',to_date(activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1;"
"V_COHORT_SUB_CUST_GROUPS_LTV","create or replace view SEED_DATA.DEV.V_COHORT_SUB_CUST_GROUPS_LTV(
	COHORT_GROUP,
	CREATED_MONTH_YEAR,
	COHORT_QUANTITY,
	ACTIVE_MONTH_0,
	ACTIVE_MONTH_1,
	ACTIVE_MONTH_2,
	ACTIVE_MONTH_3,
	ACTIVE_MONTH_4,
	ACTIVE_MONTH_5,
	ACTIVE_MONTH_6,
	ACTIVE_MONTH_7,
	ACTIVE_MONTH_8,
	ACTIVE_MONTH_9,
	ACTIVE_MONTH_10,
	ACTIVE_MONTH_11,
	ACTIVE_MONTH_12,
	ACTIVE_MONTH_13,
	ACTIVE_MONTH_14,
	ACTIVE_MONTH_15,
	ACTIVE_MONTH_16,
	ACTIVE_MONTH_17,
	ACTIVE_MONTH_18,
	ACTIVE_MONTH_19,
	ACTIVE_MONTH_20,
	ACTIVE_MONTH_21,
	ACTIVE_MONTH_22,
	ACTIVE_MONTH_23,
	ACTIVE_MONTH_24,
	ACTIVE_MONTH_25,
	ACTIVE_MONTH_26,
	ACTIVE_MONTH_27,
	ACTIVE_MONTH_28,
	ACTIVE_MONTH_29,
	ACTIVE_MONTH_30,
	ACTIVE_MONTH_31,
	ACTIVE_MONTH_32,
	ACTIVE_MONTH_33,
	ACTIVE_MONTH_34,
	ACTIVE_MONTH_35,
	ACTIVE_MONTH_36,
	ACTIVE_MONTH_37,
	ACTIVE_MONTH_38,
	ACTIVE_MONTH_39,
	ACTIVE_MONTH_40,
	ACTIVE_MONTH_41,
	ACTIVE_MONTH_42,
	ACTIVE_MONTH_43,
	ACTIVE_MONTH_44,
	ACTIVE_MONTH_45,
	ACTIVE_MONTH_46,
	ACTIVE_MONTH_47,
	ACTIVE_MONTH_48,
	ACTIVE_MONTH_49,
	ACTIVE_MONTH_50,
	ACTIVE_MONTH_51,
	ACTIVE_MONTH_52,
	ACTIVE_MONTH_53,
	ACTIVE_MONTH_54,
	ACTIVE_MONTH_55,
	ACTIVE_MONTH_56,
	ACTIVE_MONTH_57,
	ACTIVE_MONTH_58,
	ACTIVE_MONTH_59,
	ACTIVE_MONTH_60,
	ACTIVE_MONTH_61,
    ACTIVE_MONTH_62,
    ACTIVE_MONTH_63
) as 
with cohorts as (
SELECT
  'Total Customers' as COHORT_GROUP
, CREATED_MONTH_YEAR
, COHORT_QUANTITY
, ACTIVE_MONTH_0
, ACTIVE_MONTH_1
, ACTIVE_MONTH_2
, ACTIVE_MONTH_3
, ACTIVE_MONTH_4
, ACTIVE_MONTH_5
, ACTIVE_MONTH_6
, ACTIVE_MONTH_7
, ACTIVE_MONTH_8
, ACTIVE_MONTH_9
, ACTIVE_MONTH_10
, ACTIVE_MONTH_11
, ACTIVE_MONTH_12
, ACTIVE_MONTH_13
, ACTIVE_MONTH_14
, ACTIVE_MONTH_15
, ACTIVE_MONTH_16
, ACTIVE_MONTH_17
, ACTIVE_MONTH_18
, ACTIVE_MONTH_19
, ACTIVE_MONTH_20
, ACTIVE_MONTH_21
, ACTIVE_MONTH_22
, ACTIVE_MONTH_23
, ACTIVE_MONTH_24
, ACTIVE_MONTH_25
, ACTIVE_MONTH_26
, ACTIVE_MONTH_27
, ACTIVE_MONTH_28
, ACTIVE_MONTH_29
, ACTIVE_MONTH_30
, ACTIVE_MONTH_31
, ACTIVE_MONTH_32
, ACTIVE_MONTH_33
, ACTIVE_MONTH_34
, ACTIVE_MONTH_35
, ACTIVE_MONTH_36
, ACTIVE_MONTH_37
, ACTIVE_MONTH_38
, ACTIVE_MONTH_39
, ACTIVE_MONTH_40
, ACTIVE_MONTH_41
, ACTIVE_MONTH_42
, ACTIVE_MONTH_43
, ACTIVE_MONTH_44
, ACTIVE_MONTH_45
, ACTIVE_MONTH_46
, ACTIVE_MONTH_47
, ACTIVE_MONTH_48
, ACTIVE_MONTH_49
, ACTIVE_MONTH_50
, ACTIVE_MONTH_51
, ACTIVE_MONTH_52
, ACTIVE_MONTH_53
, ACTIVE_MONTH_54
, ACTIVE_MONTH_55
, ACTIVE_MONTH_56
, ACTIVE_MONTH_57
, ACTIVE_MONTH_58
, ACTIVE_MONTH_59
, ACTIVE_MONTH_60
, ACTIVE_MONTH_61
, ACTIVE_MONTH_62
, ACTIVE_MONTH_63
FROM SEED_DATA.DEV.COHORT_TOTAL_CUS_COHORT_LTV
UNION ALL
SELECT
'Total Subscribers' as COHORT_GROUP
, CREATED_MONTH_YEAR
, COHORT_QUANTITY
, ACTIVE_MONTH_0
, ACTIVE_MONTH_1
, ACTIVE_MONTH_2
, ACTIVE_MONTH_3
, ACTIVE_MONTH_4
, ACTIVE_MONTH_5
, ACTIVE_MONTH_6
, ACTIVE_MONTH_7
, ACTIVE_MONTH_8
, ACTIVE_MONTH_9
, ACTIVE_MONTH_10
, ACTIVE_MONTH_11
, ACTIVE_MONTH_12
, ACTIVE_MONTH_13
, ACTIVE_MONTH_14
, ACTIVE_MONTH_15
, ACTIVE_MONTH_16
, ACTIVE_MONTH_17
, ACTIVE_MONTH_18
, ACTIVE_MONTH_19
, ACTIVE_MONTH_20
, ACTIVE_MONTH_21
, ACTIVE_MONTH_22
, ACTIVE_MONTH_23
, ACTIVE_MONTH_24
, ACTIVE_MONTH_25
, ACTIVE_MONTH_26
, ACTIVE_MONTH_27
, ACTIVE_MONTH_28
, ACTIVE_MONTH_29
, ACTIVE_MONTH_30
, ACTIVE_MONTH_31
, ACTIVE_MONTH_32
, ACTIVE_MONTH_33
, ACTIVE_MONTH_34
, ACTIVE_MONTH_35
, ACTIVE_MONTH_36
, ACTIVE_MONTH_37
, ACTIVE_MONTH_38
, ACTIVE_MONTH_39
, ACTIVE_MONTH_40
, ACTIVE_MONTH_41
, ACTIVE_MONTH_42
, ACTIVE_MONTH_43
, ACTIVE_MONTH_44
, ACTIVE_MONTH_45
, ACTIVE_MONTH_46
, ACTIVE_MONTH_47
, ACTIVE_MONTH_48
, ACTIVE_MONTH_49
, ACTIVE_MONTH_50
, ACTIVE_MONTH_51
, ACTIVE_MONTH_52
, ACTIVE_MONTH_53
, ACTIVE_MONTH_54
, ACTIVE_MONTH_55
, ACTIVE_MONTH_56
, ACTIVE_MONTH_57
, ACTIVE_MONTH_58
, ACTIVE_MONTH_59
, ACTIVE_MONTH_60
, ACTIVE_MONTH_61
, ACTIVE_MONTH_62
, ACTIVE_MONTH_63
FROM SEED_DATA.DEV.COHORT_TOTAL_SUB_COHORT_LTV
UNION ALL
SELECT
'DS-01 Customers' as COHORT_GROUP
, CREATED_MONTH_YEAR
, COHORT_QUANTITY
, ACTIVE_MONTH_0
, ACTIVE_MONTH_1
, ACTIVE_MONTH_2
, ACTIVE_MONTH_3
, ACTIVE_MONTH_4
, ACTIVE_MONTH_5
, ACTIVE_MONTH_6
, ACTIVE_MONTH_7
, ACTIVE_MONTH_8
, ACTIVE_MONTH_9
, ACTIVE_MONTH_10
, ACTIVE_MONTH_11
, ACTIVE_MONTH_12
, ACTIVE_MONTH_13
, ACTIVE_MONTH_14
, ACTIVE_MONTH_15
, ACTIVE_MONTH_16
, ACTIVE_MONTH_17
, ACTIVE_MONTH_18
, ACTIVE_MONTH_19
, ACTIVE_MONTH_20
, ACTIVE_MONTH_21
, ACTIVE_MONTH_22
, ACTIVE_MONTH_23
, ACTIVE_MONTH_24
, ACTIVE_MONTH_25
, ACTIVE_MONTH_26
, ACTIVE_MONTH_27
, ACTIVE_MONTH_28
, ACTIVE_MONTH_29
, ACTIVE_MONTH_30
, ACTIVE_MONTH_31
, ACTIVE_MONTH_32
, ACTIVE_MONTH_33
, ACTIVE_MONTH_34
, ACTIVE_MONTH_35
, ACTIVE_MONTH_36
, ACTIVE_MONTH_37
, ACTIVE_MONTH_38
, ACTIVE_MONTH_39
, ACTIVE_MONTH_40
, ACTIVE_MONTH_41
, ACTIVE_MONTH_42
, ACTIVE_MONTH_43
, ACTIVE_MONTH_44
, ACTIVE_MONTH_45
, ACTIVE_MONTH_46
, ACTIVE_MONTH_47
, ACTIVE_MONTH_48
, ACTIVE_MONTH_49
, ACTIVE_MONTH_50
, ACTIVE_MONTH_51
, ACTIVE_MONTH_52
, ACTIVE_MONTH_53
, ACTIVE_MONTH_54
, ACTIVE_MONTH_55
, ACTIVE_MONTH_56
, ACTIVE_MONTH_57
, ACTIVE_MONTH_58
, ACTIVE_MONTH_59
, ACTIVE_MONTH_60
, ACTIVE_MONTH_61
, ACTIVE_MONTH_62
, ACTIVE_MONTH_63
FROM SEED_DATA.DEV.COHORT_DS01_CUS_COHORT_LTV
UNION ALL
SELECT
'DS-01 Subscribers' as COHORT_GROUP
, CREATED_MONTH_YEAR
, COHORT_QUANTITY
, ACTIVE_MONTH_0
, ACTIVE_MONTH_1
, ACTIVE_MONTH_2
, ACTIVE_MONTH_3
, ACTIVE_MONTH_4
, ACTIVE_MONTH_5
, ACTIVE_MONTH_6
, ACTIVE_MONTH_7
, ACTIVE_MONTH_8
, ACTIVE_MONTH_9
, ACTIVE_MONTH_10
, ACTIVE_MONTH_11
, ACTIVE_MONTH_12
, ACTIVE_MONTH_13
, ACTIVE_MONTH_14
, ACTIVE_MONTH_15
, ACTIVE_MONTH_16
, ACTIVE_MONTH_17
, ACTIVE_MONTH_18
, ACTIVE_MONTH_19
, ACTIVE_MONTH_20
, ACTIVE_MONTH_21
, ACTIVE_MONTH_22
, ACTIVE_MONTH_23
, ACTIVE_MONTH_24
, ACTIVE_MONTH_25
, ACTIVE_MONTH_26
, ACTIVE_MONTH_27
, ACTIVE_MONTH_28
, ACTIVE_MONTH_29
, ACTIVE_MONTH_30
, ACTIVE_MONTH_31
, ACTIVE_MONTH_32
, ACTIVE_MONTH_33
, ACTIVE_MONTH_34
, ACTIVE_MONTH_35
, ACTIVE_MONTH_36
, ACTIVE_MONTH_37
, ACTIVE_MONTH_38
, ACTIVE_MONTH_39
, ACTIVE_MONTH_40
, ACTIVE_MONTH_41
, ACTIVE_MONTH_42
, ACTIVE_MONTH_43
, ACTIVE_MONTH_44
, ACTIVE_MONTH_45
, ACTIVE_MONTH_46
, ACTIVE_MONTH_47
, ACTIVE_MONTH_48
, ACTIVE_MONTH_49
, ACTIVE_MONTH_50
, ACTIVE_MONTH_51
, ACTIVE_MONTH_52
, ACTIVE_MONTH_53
, ACTIVE_MONTH_54
, ACTIVE_MONTH_55
, ACTIVE_MONTH_56
, ACTIVE_MONTH_57
, ACTIVE_MONTH_58
, ACTIVE_MONTH_59
, ACTIVE_MONTH_60
, ACTIVE_MONTH_61
, ACTIVE_MONTH_62
, ACTIVE_MONTH_63
FROM SEED_DATA.DEV.COHORT_DS01_SUB_COHORT_LTV
UNION ALL
SELECT
'PDS-08 Customers' as COHORT_GROUP
, CREATED_MONTH_YEAR
, COHORT_QUANTITY
, ACTIVE_MONTH_0
, ACTIVE_MONTH_1
, ACTIVE_MONTH_2
, ACTIVE_MONTH_3
, ACTIVE_MONTH_4
, ACTIVE_MONTH_5
, ACTIVE_MONTH_6
, ACTIVE_MONTH_7
, ACTIVE_MONTH_8
, ACTIVE_MONTH_9
, ACTIVE_MONTH_10
, ACTIVE_MONTH_11
, ACTIVE_MONTH_12
, ACTIVE_MONTH_13
, ACTIVE_MONTH_14
, ACTIVE_MONTH_15
, ACTIVE_MONTH_16
, ACTIVE_MONTH_17
, ACTIVE_MONTH_18
, ACTIVE_MONTH_19
, ACTIVE_MONTH_20
, ACTIVE_MONTH_21
, ACTIVE_MONTH_22
, ACTIVE_MONTH_23
, ACTIVE_MONTH_24
, ACTIVE_MONTH_25
, ACTIVE_MONTH_26
, ACTIVE_MONTH_27
, ACTIVE_MONTH_28
, ACTIVE_MONTH_29
, ACTIVE_MONTH_30
, ACTIVE_MONTH_31
, ACTIVE_MONTH_32
, ACTIVE_MONTH_33
, ACTIVE_MONTH_34
, ACTIVE_MONTH_35
, ACTIVE_MONTH_36
, ACTIVE_MONTH_37
, ACTIVE_MONTH_38
, ACTIVE_MONTH_39
, ACTIVE_MONTH_40
, ACTIVE_MONTH_41
, ACTIVE_MONTH_42
, ACTIVE_MONTH_43
, ACTIVE_MONTH_44
, ACTIVE_MONTH_45
, ACTIVE_MONTH_46
, ACTIVE_MONTH_47
, ACTIVE_MONTH_48
, ACTIVE_MONTH_49
, ACTIVE_MONTH_50
, ACTIVE_MONTH_51
, ACTIVE_MONTH_52
, ACTIVE_MONTH_53
, ACTIVE_MONTH_54
, ACTIVE_MONTH_55
, ACTIVE_MONTH_56
, ACTIVE_MONTH_57
, ACTIVE_MONTH_58
, ACTIVE_MONTH_59
, ACTIVE_MONTH_60
, ACTIVE_MONTH_61
, ACTIVE_MONTH_62
, ACTIVE_MONTH_63
FROM SEED_DATA.DEV.COHORT_PDS08_CUS_COHORT_LTV
UNION ALL
SELECT
'PDS-08 Subscribers' as COHORT_GROUP
, CREATED_MONTH_YEAR
, COHORT_QUANTITY
, ACTIVE_MONTH_0
, ACTIVE_MONTH_1
, ACTIVE_MONTH_2
, ACTIVE_MONTH_3
, ACTIVE_MONTH_4
, ACTIVE_MONTH_5
, ACTIVE_MONTH_6
, ACTIVE_MONTH_7
, ACTIVE_MONTH_8
, ACTIVE_MONTH_9
, ACTIVE_MONTH_10
, ACTIVE_MONTH_11
, ACTIVE_MONTH_12
, ACTIVE_MONTH_13
, ACTIVE_MONTH_14
, ACTIVE_MONTH_15
, ACTIVE_MONTH_16
, ACTIVE_MONTH_17
, ACTIVE_MONTH_18
, ACTIVE_MONTH_19
, ACTIVE_MONTH_20
, ACTIVE_MONTH_21
, ACTIVE_MONTH_22
, ACTIVE_MONTH_23
, ACTIVE_MONTH_24
, ACTIVE_MONTH_25
, ACTIVE_MONTH_26
, ACTIVE_MONTH_27
, ACTIVE_MONTH_28
, ACTIVE_MONTH_29
, ACTIVE_MONTH_30
, ACTIVE_MONTH_31
, ACTIVE_MONTH_32
, ACTIVE_MONTH_33
, ACTIVE_MONTH_34
, ACTIVE_MONTH_35
, ACTIVE_MONTH_36
, ACTIVE_MONTH_37
, ACTIVE_MONTH_38
, ACTIVE_MONTH_39
, ACTIVE_MONTH_40
, ACTIVE_MONTH_41
, ACTIVE_MONTH_42
, ACTIVE_MONTH_43
, ACTIVE_MONTH_44
, ACTIVE_MONTH_45
, ACTIVE_MONTH_46
, ACTIVE_MONTH_47
, ACTIVE_MONTH_48
, ACTIVE_MONTH_49
, ACTIVE_MONTH_50
, ACTIVE_MONTH_51
, ACTIVE_MONTH_52
, ACTIVE_MONTH_53
, ACTIVE_MONTH_54
, ACTIVE_MONTH_55
, ACTIVE_MONTH_56
, ACTIVE_MONTH_57
, ACTIVE_MONTH_58
, ACTIVE_MONTH_59
, ACTIVE_MONTH_60
, ACTIVE_MONTH_61
, ACTIVE_MONTH_62
, ACTIVE_MONTH_63
FROM SEED_DATA.DEV.COHORT_PDS08_SUB_COHORT_LTV
) 
select 
*
from cohorts
--where CREATED_MONTH_YEAR <= DATEADD(month, -1, date_trunc('month',to_date(current_date())))
order by 1,2;"
"V_COHORT_TOTAL_CUS_COHORT_LTV","create or replace view SEED_DATA.DEV.V_COHORT_TOTAL_CUS_COHORT_LTV as 

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_COGS_UPDATE
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.order_date))/30) as invoice_month,
        o.quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid_less_cogs + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as ltv,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        s.customer_id,
        to_date(s.first_subscription_date) as account_activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.order_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(o.order_date))/30) as invoice_month,
        o.quantity,
        floor(datediff(days,to_date(s.first_subscription_date),to_date(s.cancelled_at))/30) as cancelled_month,
        (Total_amount_paid_less_cogs + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as ltv,
        invoice_refund_flag
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
), 

sub_inv_flag as
(
    select customer_id, account_activated_at,
    sum(case when invoice_month = 0 or invoice_month = -1 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_0_flag,
        sum(case when invoice_month = 1 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_1_flag,
        sum(case when invoice_month = 2 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_2_flag,
        sum(case when invoice_month = 3 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_3_flag,
        sum(case when invoice_month = 4 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_4_flag,
        sum(case when invoice_month = 5 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_5_flag,
        sum(case when invoice_month = 6 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_6_flag,
        sum(case when invoice_month = 7 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_7_flag,
        sum(case when invoice_month = 8 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_8_flag,
        sum(case when invoice_month = 9 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_9_flag,
        sum(case when invoice_month = 10 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_10_flag,
        sum(case when invoice_month = 11 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_11_flag,
        sum(case when invoice_month = 12 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_12_flag,
        sum(case when invoice_month = 13 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_13_flag,
        sum(case when invoice_month = 14 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_14_flag,
        sum(case when invoice_month = 15 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_15_flag,
        sum(case when invoice_month = 16 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_16_flag,
        sum(case when invoice_month = 17 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_17_flag,
        sum(case when invoice_month = 18 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_18_flag,
        sum(case when invoice_month = 19 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_19_flag,
        sum(case when invoice_month = 20 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_20_flag,
        sum(case when invoice_month = 21 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_21_flag,
        sum(case when invoice_month = 22 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_22_flag,
        sum(case when invoice_month = 23 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_23_flag,
        sum(case when invoice_month = 24 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_24_flag,
        sum(case when invoice_month = 25 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_25_flag,
        sum(case when invoice_month = 26 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_26_flag,
        sum(case when invoice_month = 27 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_27_flag,
        sum(case when invoice_month = 28 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_28_flag,
        sum(case when invoice_month = 29 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_29_flag,
        sum(case when invoice_month = 30 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_30_flag,
        sum(case when invoice_month = 31 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_31_flag,
        sum(case when invoice_month = 32 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_32_flag,
        sum(case when invoice_month = 33 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_33_flag,
        sum(case when invoice_month = 34 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_34_flag,
        sum(case when invoice_month = 35 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_35_flag,
        sum(case when invoice_month = 36 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_36_flag,
        sum(case when invoice_month = 37 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_37_flag,
        sum(case when invoice_month = 38 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_38_flag,
        sum(case when invoice_month = 39 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_39_flag,
        sum(case when invoice_month = 40 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_40_flag,
        sum(case when invoice_month = 41 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_41_flag,
        sum(case when invoice_month = 42 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_42_flag,
        sum(case when invoice_month = 43 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_43_flag,
        sum(case when invoice_month = 44 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_44_flag,
        sum(case when invoice_month = 45 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_45_flag,
        sum(case when invoice_month = 46 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_46_flag,
        sum(case when invoice_month = 47 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_47_flag,
        sum(case when invoice_month = 48 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_48_flag,
        sum(case when invoice_month = 49 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_49_flag,
        sum(case when invoice_month = 50 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_50_flag,
        sum(case when invoice_month = 51 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_51_flag,
        sum(case when invoice_month = 52 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_52_flag,
        sum(case when invoice_month = 53 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_53_flag,
        sum(case when invoice_month = 54 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_54_flag,
        sum(case when invoice_month = 55 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_55_flag,
        sum(case when invoice_month = 56 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_56_flag,
        sum(case when invoice_month = 57 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_57_flag,
        sum(case when invoice_month = 58 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_58_flag,
        sum(case when invoice_month = 59 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_59_flag,
        sum(case when invoice_month = 60 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_60_flag,
        sum(case when invoice_month = 61 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_61_flag,
        sum(case when invoice_month = 62 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_62_flag,
        sum(case when invoice_month = 63 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_63_flag,
        sum(case when invoice_month = 64 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_64_flag,
        sum(case when invoice_month = 65 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_65_flag,
        sum(case when invoice_month = 66 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_66_flag,
        sum(case when invoice_month = 67 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_67_flag,
        sum(case when invoice_month = 68 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_68_flag,
        sum(case when invoice_month = 69 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as  invoice_month_69_flag,
        sum(case when invoice_month = 70 and invoice_refund_flag = 'not_fully_refunded' then ltv  else 0 end) as invoice_month_70_flag
        
    from sub_inv
    group by customer_id,account_activated_at
),

final_data as 
(
select 
    date_trunc('month',to_date(account_activated_at)) as created_month_year,
    ---left(to_date(activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward-looking months on the cohort
   sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_flag end) as active_month_61,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_flag end) as active_month_62,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_flag end) as active_month_63,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_flag end) as active_month_64,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_flag end) as active_month_65,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_flag end) as active_month_66,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_flag end) as active_month_67,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_flag end) as active_month_68,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_flag end) as active_month_69,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_flag end) as active_month_70
    
from sub_inv_flag
where date_trunc('month',to_date(account_activated_at)) <= DATEADD(month, -1,date_trunc('month',to_date(current_date()))) --- Only print until last month 
group by 1
order by 1
)

,marketing_spend as 
(
select month_year,sum(total_spend) as total_spend
    from SEED_DATA.DEV.V_MARKETING_SPEND_CAC
    group by 1
)

select f.*,round((m.total_spend/f.cohort_quantity),2) as CAC
from final_data as f 
    left join marketing_spend as m 
    on f.created_month_year = m.month_year
order by 1;"
"V_COHORT_TOTAL_SUB_COHORT","create or replace view SEED_DATA.DEV.V_COHORT_TOTAL_SUB_COHORT as

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_SKU_ADJUSTED
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.invoice_date))/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id, 
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.invoice_date))/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
), 

sub_inv_flag as
(
    select recharge_subscription_id,recurly_subscription_id,activated_at,
        max(case when invoice_month = 0 or invoice_month = -1 then 1 else null end) as invoice_month_0_flag,
        max(case when cancelled_month <= 0 and invoice_month = 1 then 1
                when cancelled_month <= 0 then 0
                when invoice_month = 0 or invoice_month = 1 then 1 
                else null end) as invoice_month_1_flag,
        max(case when cancelled_month <= 1 and invoice_month = 2 then 1
                when cancelled_month <= 1 then 0
                when invoice_month = 1 or invoice_month = 2 then 1
                else null end) as invoice_month_2_flag,
        max(case when cancelled_month <= 2 and invoice_month = 3 then 1 
                when cancelled_month <= 2 then 0
                when invoice_month = 2 or invoice_month = 3 then 1 
                else null end) as invoice_month_3_flag,
        max(case when cancelled_month <= 3 and invoice_month = 4 then 1
                when cancelled_month <= 3 then 0
                when invoice_month = 3 or invoice_month = 4 then 1
                else null end) as invoice_month_4_flag,
        max(case when cancelled_month <= 4 and invoice_month = 5 then 1
                when cancelled_month <= 4 then 0
                when invoice_month = 4 or invoice_month = 5 then 1 
                else null end) as invoice_month_5_flag,
        max(case when cancelled_month <= 5 and invoice_month = 6 then 1
                when cancelled_month <= 5 then 0
                when invoice_month = 5 or invoice_month = 6 then 1
                else null end) as invoice_month_6_flag,
        max(case when cancelled_month <= 6 and invoice_month = 7 then 1
                when cancelled_month <= 6 then 0
                when invoice_month = 6 or invoice_month = 7 then 1 
                else null end) as invoice_month_7_flag,
        max(case when cancelled_month <= 7 and invoice_month = 8 then 1
                when cancelled_month <= 7 then 0
                when invoice_month = 7 or invoice_month = 8 then 1
                else null end) as invoice_month_8_flag,
        max(case when cancelled_month <= 8 and invoice_month = 9 then 1
                when cancelled_month <= 8 then 0
                when invoice_month = 8 or invoice_month = 9 then 1 
                else null end) as invoice_month_9_flag,
        max(case when cancelled_month <= 9 and invoice_month = 10 then 1
                when cancelled_month <= 9 then 0
                when invoice_month = 9 or invoice_month = 10 then 1
                else null end) as invoice_month_10_flag,
        max(case when cancelled_month <= 10 and invoice_month = 11 then 1
                when cancelled_month <= 10 then 0
                when invoice_month = 10 or invoice_month = 11 then 1 
                else null end) as invoice_month_11_flag,
        max(case when cancelled_month <= 11 and invoice_month = 12 then 1
                when cancelled_month <= 11 then 0
                when invoice_month = 11 or invoice_month = 12 then 1
                else null end) as invoice_month_12_flag,
        max(case when cancelled_month <= 12 and invoice_month = 13 then 1
                when cancelled_month <= 12 then 0
                when invoice_month = 12 or invoice_month = 13 then 1 
                else null end) as invoice_month_13_flag,
        max(case when cancelled_month <= 13 and invoice_month = 14 then 1
                when cancelled_month <= 13 then 0
                when invoice_month = 13 or invoice_month = 14 then 1
                else null end) as invoice_month_14_flag,
        max(case when cancelled_month <= 14 and invoice_month = 15 then 1
                when cancelled_month <= 14 then 0
                when invoice_month = 14 or invoice_month = 15 then 1 
                else null end) as invoice_month_15_flag,
        max(case when cancelled_month <= 15 and invoice_month = 16 then 1
                when cancelled_month <= 15 then 0
                when invoice_month = 15 or invoice_month = 16 then 1
                else null end) as invoice_month_16_flag,
        max(case when cancelled_month <= 16 and invoice_month = 17 then 1 
                when cancelled_month <= 16 then 0
                when invoice_month = 16 or invoice_month = 17 then 1 
                else null end) as invoice_month_17_flag,
        max(case when cancelled_month <= 17 and invoice_month = 18 then 1
                when cancelled_month <= 17 then 0
                when invoice_month = 17 or invoice_month = 18 then 1
                else null end) as invoice_month_18_flag,
        max(case when cancelled_month <= 18 and invoice_month = 19 then 1
                when cancelled_month <= 18 then 0
                when invoice_month = 18 or invoice_month = 19 then 1 
                else null end) as invoice_month_19_flag,
        max(case when cancelled_month <= 19 and invoice_month = 20 then 1
                when cancelled_month <= 19 then 0
                when invoice_month = 19 or invoice_month = 20 then 1
                else null end) as invoice_month_20_flag,
        max(case when cancelled_month <= 20 and invoice_month = 21 then 1
                when cancelled_month <= 20 then 0
                when invoice_month = 20 or invoice_month = 21 then 1 
                else null end) as invoice_month_21_flag,
        max(case when cancelled_month <= 21 and invoice_month = 22 then 1
                when cancelled_month <= 21 then 0
                when invoice_month = 21 or invoice_month = 22 then 1
                else null end) as invoice_month_22_flag,
        max(case when cancelled_month <= 22 and invoice_month = 23 then 1
                when cancelled_month <= 22 then 0
                when invoice_month = 22 or invoice_month = 23 then 1 
                else null end) as invoice_month_23_flag,
        max(case when cancelled_month <= 23 and invoice_month = 24 then 1
                when cancelled_month <= 23 then 0
                when invoice_month = 23 or invoice_month = 24 then 1
                else null end) as invoice_month_24_flag,
        max(case when cancelled_month <= 24 and invoice_month = 25 then 1
                when cancelled_month <= 24 then 0
                when invoice_month = 24 or invoice_month = 25 then 1 
                else null end) as invoice_month_25_flag,
        max(case when cancelled_month <= 25 and invoice_month = 26 then 1
                when cancelled_month <= 25 then 0
                when invoice_month = 25 or invoice_month = 26 then 1
                else null end) as invoice_month_26_flag,
        max(case when cancelled_month <= 26 and invoice_month = 27 then 1
                when cancelled_month <= 26 then 0
                when invoice_month = 26 or invoice_month = 27 then 1 
                else null end) as invoice_month_27_flag,
        max(case when cancelled_month <= 27 and invoice_month = 28 then 1
                when cancelled_month <= 27 then 0
                when invoice_month = 27 or invoice_month = 28 then 1
                else null end) as invoice_month_28_flag,
        max(case when cancelled_month <= 28 and invoice_month = 29 then 1
                when cancelled_month <= 28 then 0
                when invoice_month = 28 or invoice_month = 29 then 1 
                else null end) as invoice_month_29_flag,
        max(case when cancelled_month <= 29 and invoice_month = 30 then 1
                when cancelled_month <= 29 then 0
                when invoice_month = 29 or invoice_month = 30 then 1
                else null end) as invoice_month_30_flag,
        max(case when cancelled_month <= 30 and invoice_month = 31 then 1
                when cancelled_month <= 30 then 0
                when invoice_month = 30 or invoice_month = 31 then 1 
                else null end) as invoice_month_31_flag,
        max(case when cancelled_month <= 31 and invoice_month = 32 then 1
                when cancelled_month <= 31 then 0
                when invoice_month = 31 or invoice_month = 32 then 1
                else null end) as invoice_month_32_flag,
        max(case when cancelled_month <= 32 and invoice_month = 33 then 1
                when cancelled_month <= 32 then 0
                when invoice_month = 32 or invoice_month = 33 then 1 
                else null end) as invoice_month_33_flag,
        max(case when cancelled_month <= 33 and invoice_month = 34 then 1
                when cancelled_month <= 33 then 0
                when invoice_month = 33 or invoice_month = 34 then 1
                else null end) as invoice_month_34_flag,
        max(case when cancelled_month <= 34 and invoice_month = 35 then 1
                when cancelled_month <= 34 then 0
                when invoice_month = 34 or invoice_month = 35 then 1 
                else null end) as invoice_month_35_flag,
        max(case when cancelled_month <= 35 and invoice_month = 36 then 1
                when cancelled_month <= 35 then 0
                when invoice_month = 35 or invoice_month = 36 then 1
                else null end) as invoice_month_36_flag,
        max(case when cancelled_month <= 36 and invoice_month = 37 then 1
                when cancelled_month <= 36 then 0
                when invoice_month = 36 or invoice_month = 37 then 1 
                else null end) as invoice_month_37_flag,
        max(case when cancelled_month <= 37 and invoice_month = 38 then 1
                when cancelled_month <= 37 then 0
                when invoice_month = 37 or invoice_month = 38 then 1
                else null end) as invoice_month_38_flag,
        max(case when cancelled_month <= 38 and invoice_month = 39 then 1
                when cancelled_month <= 38 then 0
                when invoice_month = 38 or invoice_month = 39 then 1 
                else null end) as invoice_month_39_flag,
        max(case when cancelled_month <= 39 and invoice_month = 40 then 1
                when cancelled_month <= 39 then 0
                when invoice_month = 39 or invoice_month = 40 then 1
                else null end) as invoice_month_40_flag,
        max(case when cancelled_month <= 40 and invoice_month = 41 then 1 
                when cancelled_month <= 40 then 0
                when invoice_month = 40 or invoice_month = 41 then 1 
                else null end) as invoice_month_41_flag,
        max(case when cancelled_month <= 41 and invoice_month = 42 then 1
                when cancelled_month <= 41 then 0
                when invoice_month = 41 or invoice_month = 42 then 1
                else null end) as invoice_month_42_flag,
        max(case when cancelled_month <= 42 and invoice_month = 43 then 1
                when cancelled_month <= 42 then 0
                when invoice_month = 42 or invoice_month = 43 then 1 
                else null end) as invoice_month_43_flag,
        max(case when cancelled_month <= 43 and invoice_month = 44 then 1
                when cancelled_month <= 43 then 0
                when invoice_month = 43 or invoice_month = 44 then 1
                else null end) as invoice_month_44_flag,
        max(case when cancelled_month <= 44 and invoice_month = 45 then 1
                when cancelled_month <= 44 then 0
                when invoice_month = 44 or invoice_month = 45 then 1 
                else null end) as invoice_month_45_flag,
        max(case when cancelled_month <= 45 and invoice_month = 46 then 1
                when cancelled_month <= 45 then 0
                when invoice_month = 45 or invoice_month = 46 then 1
                else null end) as invoice_month_46_flag,
        max(case when cancelled_month <= 46 and invoice_month = 47 then 1
                when cancelled_month <= 46 then 0
                when invoice_month = 46 or invoice_month = 47 then 1 
                else null end) as invoice_month_47_flag,
        max(case when cancelled_month <= 47 and invoice_month = 48 then 1
                when cancelled_month <= 47 then 0
                when invoice_month = 47 or invoice_month = 48 then 1
                else null end) as invoice_month_48_flag,
        max(case when cancelled_month <= 48 and invoice_month = 49 then 1
                when cancelled_month <= 48 then 0
                when invoice_month = 48 or invoice_month = 49 then 1 
                else null end) as invoice_month_49_flag,
        max(case when cancelled_month <= 49 and invoice_month = 50 then 1
                when cancelled_month <= 49 then 0
                when invoice_month = 49 or invoice_month = 50 then 1
                else null end) as invoice_month_50_flag,
        max(case when cancelled_month <= 50 and invoice_month = 51 then 1
                when cancelled_month <= 50 then 0
                when invoice_month = 50 or invoice_month = 51 then 1 
                else null end) as invoice_month_51_flag,
        max(case when cancelled_month <= 51 and invoice_month = 52 then 1
                when cancelled_month <= 51 then 0
                when invoice_month = 51 or invoice_month = 52 then 1
                else null end) as invoice_month_52_flag,
        max(case when cancelled_month <= 52 and invoice_month = 53 then 1
                when cancelled_month <= 52 then 0
                when invoice_month = 52 or invoice_month = 53 then 1 
                else null end) as invoice_month_53_flag,
        max(case when cancelled_month <= 53 and invoice_month = 54 then 1
                when cancelled_month <= 53 then 0
                when invoice_month = 53 or invoice_month = 54 then 1
                else null end) as invoice_month_54_flag,
        max(case when cancelled_month <= 54 and invoice_month = 55 then 1
                when cancelled_month <= 54 then 0
                when invoice_month = 54 or invoice_month = 55 then 1 
                else null end) as invoice_month_55_flag,
        max(case when cancelled_month <= 55 and invoice_month = 56 then 1
                when cancelled_month <= 55 then 0
                when invoice_month = 55 or invoice_month = 56 then 1
                else null end) as invoice_month_56_flag,
        max(case when cancelled_month <= 56 and invoice_month = 57 then 1
                when cancelled_month <= 56 then 0
                when invoice_month = 56 or invoice_month = 57 then 1 
                else null end) as invoice_month_57_flag,
        max(case when cancelled_month <= 57 and invoice_month = 58 then 1
                when cancelled_month <= 57 then 0
                when invoice_month = 57 or invoice_month = 58 then 1
                else null end) as invoice_month_58_flag,
        max(case when cancelled_month <= 58 and invoice_month = 59 then 1
                when cancelled_month <= 58 then 0
                when invoice_month = 58 or invoice_month = 59 then 1 
                else null end) as invoice_month_59_flag,
        max(case when cancelled_month <= 59 and invoice_month = 60 then 1
                when cancelled_month <= 59 then 0
                when invoice_month = 59 or invoice_month = 60 then 1
                else null end) as invoice_month_60_flag,
        max(case when cancelled_month <= 60 and invoice_month = 61 then 1
                when cancelled_month <= 60 then 0
                when invoice_month = 60 or invoice_month = 61 then 1
                else null end) as invoice_month_61_flag,
        max(case when cancelled_month <= 61 and invoice_month = 62 then 1
                when cancelled_month <= 61 then 0
                when invoice_month = 61 or invoice_month = 62 then 1
                else null end) as invoice_month_62_flag,
        max(case when cancelled_month <= 62 and invoice_month = 63 then 1
                when cancelled_month <= 62 then 0
                when invoice_month = 62 or invoice_month = 63 then 1 
                else null end) as invoice_month_63_flag,
        max(case when cancelled_month <= 63 and invoice_month = 64 then 1
                when cancelled_month <= 63 then 0
                when invoice_month = 63 or invoice_month = 64 then 1
                else null end) as invoice_month_64_flag,
        max(case when cancelled_month <= 64 and invoice_month = 65 then 1
                when cancelled_month <= 64 then 0
                when invoice_month = 64 or invoice_month = 65 then 1 
                else null end) as invoice_month_65_flag,
        max(case when cancelled_month <= 65 and invoice_month = 66 then 1
                when cancelled_month <= 65 then 0
                when invoice_month = 65 or invoice_month = 66 then 1
                else null end) as invoice_month_66_flag,
        max(case when cancelled_month <= 66 and invoice_month = 67 then 1
                when cancelled_month <= 66 then 0
                when invoice_month = 66 or invoice_month = 67 then 1 
                else null end) as invoice_month_67_flag,
        max(case when cancelled_month <= 67 and invoice_month = 68 then 1
                when cancelled_month <= 67 then 0
                when invoice_month = 67 or invoice_month = 68 then 1
                else null end) as invoice_month_68_flag,
        max(case when cancelled_month <= 68 and invoice_month = 69 then 1
                when cancelled_month <= 68 then 0
                when invoice_month = 68 or invoice_month = 69 then 1 
                else null end) as invoice_month_69_flag,
        max(case when cancelled_month <= 69 and invoice_month = 70 then 1
                when cancelled_month <= 69 then 0
                when invoice_month = 69 or invoice_month = 70 then 1
                else null end) as invoice_month_70_flag
        
    from sub_inv
    group by recharge_subscription_id,recurly_subscription_id,activated_at
)

select 
    date_trunc('month',to_date(activated_at)) as created_month_year,
    ---left(to_date(activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_flag end) as active_month_61,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_flag end) as active_month_62,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_flag end) as active_month_63,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_flag end) as active_month_64,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_flag end) as active_month_65,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_flag end) as active_month_66,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_flag end) as active_month_67,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_flag end) as active_month_68,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_flag end) as active_month_69,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_flag end) as active_month_70

from sub_inv_flag
where date_trunc('month',to_date(activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1;"
"V_COHORT_TOTAL_SUB_COHORT_NO_PAUSE","create or replace view SEED_DATA.DEV.V_COHORT_TOTAL_SUB_COHORT_NO_PAUSE as

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_SKU_ADJUSTED
),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.invoice_date))/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id 
    union all 
    --- joining recurly invoices
    select s.recharge_subscription_id, 
        s.recurly_subscription_id,
        to_date(s.activated_at) as activated_at,
        coalesce(s.first_quantity,s.quantity) as subscription_quantity,
        to_date(o.invoice_date) as invoice_date,
        to_date(s.cancelled_at) as cancelled_at,
        floor(datediff(days,to_date(s.activated_at),to_date(o.invoice_date))/30) as invoice_month,
        invoiced_quantity,
        floor(datediff(days,to_date(s.activated_at),to_date(s.cancelled_at))/30) as cancelled_month
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
), 

sub_inv_flag as
(
    select recharge_subscription_id,recurly_subscription_id,activated_at,
        max(case when invoice_month = 0 or invoice_month = -1 then 1 else null end) as invoice_month_0_flag,
        max(case when invoice_month = 1 then 1 
                else null end) as invoice_month_1_flag,
        max(case when invoice_month = 2 then 1 
                else null end) as invoice_month_2_flag,
        max(case when invoice_month = 3 then 1 
                else null end) as invoice_month_3_flag,
        max(case when invoice_month = 4 then 1 
                else null end) as invoice_month_4_flag,
        max(case when invoice_month = 5 then 1 
                else null end) as invoice_month_5_flag,
        max(case when invoice_month = 6 then 1 
                else null end) as invoice_month_6_flag,
        max(case when invoice_month = 7 then 1 
                else null end) as invoice_month_7_flag,
        max(case when invoice_month = 8 then 1 
                else null end) as invoice_month_8_flag,
        max(case when invoice_month = 9 then 1 
                else null end) as invoice_month_9_flag,
        max(case when invoice_month = 10 then 1 
                else null end) as invoice_month_10_flag,
        max(case when invoice_month = 11 then 1 
                else null end) as invoice_month_11_flag,
        max(case when invoice_month = 12 then 1 
                else null end) as invoice_month_12_flag,
        max(case when invoice_month = 13 then 1 
                else null end) as invoice_month_13_flag,
        max(case when invoice_month = 14 then 1 
                else null end) as invoice_month_14_flag,
        max(case when invoice_month = 15 then 1 
                else null end) as invoice_month_15_flag,
        max(case when invoice_month = 16 then 1 
                else null end) as invoice_month_16_flag,
        max(case when invoice_month = 17 then 1 
                else null end) as invoice_month_17_flag,
        max(case when invoice_month = 18 then 1 
                else null end) as invoice_month_18_flag,
        max(case when invoice_month = 19 then 1 
                else null end) as invoice_month_19_flag,
        max(case when invoice_month = 20 then 1 
                else null end) as invoice_month_20_flag,
        max(case when invoice_month = 21 then 1 
                else null end) as invoice_month_21_flag,
        max(case when invoice_month = 22 then 1 
                else null end) as invoice_month_22_flag,
        max(case when invoice_month = 23 then 1 
                else null end) as invoice_month_23_flag,
        max(case when invoice_month = 24 then 1 
                else null end) as invoice_month_24_flag,
        max(case when invoice_month = 25 then 1 
                else null end) as invoice_month_25_flag,
        max(case when invoice_month = 26 then 1 
                else null end) as invoice_month_26_flag,
        max(case when invoice_month = 27 then 1 
                else null end) as invoice_month_27_flag,
        max(case when invoice_month = 28 then 1 
                else null end) as invoice_month_28_flag,
        max(case when invoice_month = 29 then 1 
                else null end) as invoice_month_29_flag,
        max(case when invoice_month = 30 then 1 
                else null end) as invoice_month_30_flag,
        max(case when invoice_month = 31 then 1 
                else null end) as invoice_month_31_flag,
        max(case when invoice_month = 32 then 1 
                else null end) as invoice_month_32_flag,
        max(case when invoice_month = 33 then 1 
                else null end) as invoice_month_33_flag,
        max(case when invoice_month = 34 then 1 
                else null end) as invoice_month_34_flag,
        max(case when invoice_month = 35 then 1 
                else null end) as invoice_month_35_flag,
        max(case when invoice_month = 36 then 1 
                else null end) as invoice_month_36_flag,
        max(case when invoice_month = 37 then 1 
                else null end) as invoice_month_37_flag,
        max(case when invoice_month = 38 then 1 
                else null end) as invoice_month_38_flag,
        max(case when invoice_month = 39 then 1 
                else null end) as invoice_month_39_flag,
        max(case when invoice_month = 40 then 1 
                else null end) as invoice_month_40_flag,
        max(case when invoice_month = 41 then 1 
                else null end) as invoice_month_41_flag,
        max(case when invoice_month = 42 then 1 
                else null end) as invoice_month_42_flag,
        max(case when invoice_month = 43 then 1 
                else null end) as invoice_month_43_flag,
        max(case when invoice_month = 44 then 1 
                else null end) as invoice_month_44_flag,
        max(case when invoice_month = 45 then 1 
                else null end) as invoice_month_45_flag,
        max(case when invoice_month = 46 then 1 
                else null end) as invoice_month_46_flag,
        max(case when invoice_month = 47 then 1 
                else null end) as invoice_month_47_flag,
        max(case when invoice_month = 48 then 1 
                else null end) as invoice_month_48_flag,
        max(case when invoice_month = 49 then 1 
                else null end) as invoice_month_49_flag,
        max(case when invoice_month = 50 then 1 
                else null end) as invoice_month_50_flag,
        max(case when invoice_month = 51 then 1 
                else null end) as invoice_month_51_flag,
        max(case when invoice_month = 52 then 1 
                else null end) as invoice_month_52_flag,
        max(case when invoice_month = 53 then 1 
                else null end) as invoice_month_53_flag,
        max(case when invoice_month = 54 then 1 
                else null end) as invoice_month_54_flag,
        max(case when invoice_month = 55 then 1 
                else null end) as invoice_month_55_flag,
        max(case when invoice_month = 56 then 1 
                else null end) as invoice_month_56_flag,
        max(case when invoice_month = 57 then 1 
                else null end) as invoice_month_57_flag,
        max(case when invoice_month = 58 then 1 
                else null end) as invoice_month_58_flag,
        max(case when invoice_month = 59 then 1 
                else null end) as invoice_month_59_flag,
        max(case when invoice_month = 60 then 1 
                else null end) as invoice_month_60_flag,
        max(case when invoice_month = 61 then 1 
                else null end) as invoice_month_61_flag,
        max(case when invoice_month = 62 then 1 
                else null end) as invoice_month_62_flag,
        max(case when invoice_month = 63 then 1 
                else null end) as invoice_month_63_flag,
        max(case when invoice_month = 64 then 1 
                else null end) as invoice_month_64_flag,
        max(case when invoice_month = 65 then 1 
                else null end) as invoice_month_65_flag,
        max(case when invoice_month = 66 then 1 
                else null end) as invoice_month_66_flag,
        max(case when invoice_month = 67 then 1 
                else null end) as invoice_month_67_flag,
        max(case when invoice_month = 68 then 1 
                else null end) as invoice_month_68_flag,
        max(case when invoice_month = 69 then 1 
                else null end) as invoice_month_69_flag,
        max(case when invoice_month = 70 then 1 
                else null end) as invoice_month_70_flag

    from sub_inv
    group by recharge_subscription_id,recurly_subscription_id,activated_at
)

select 
    date_trunc('month',to_date(activated_at)) as created_month_year,
    ---left(to_date(activated_at),7) as created_month_year,
    count(*) as cohort_quantity,
    sum(invoice_month_0_flag) as active_month_0,
    ---- new build / removes the additional forward looking months on the cohort
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 1 then null else invoice_month_1_flag end) as active_month_1,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 2 then null else invoice_month_2_flag end) as active_month_2,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 3 then null else invoice_month_3_flag end) as active_month_3,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 4 then null else invoice_month_4_flag end) as active_month_4,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 5 then null else invoice_month_5_flag end) as active_month_5,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 6 then null else invoice_month_6_flag end) as active_month_6,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 7 then null else invoice_month_7_flag end) as active_month_7,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 8 then null else invoice_month_8_flag end) as active_month_8,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 9 then null else invoice_month_9_flag end) as active_month_9,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 10 then null else invoice_month_10_flag end) as active_month_10,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 11 then null else invoice_month_11_flag end) as active_month_11,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 12 then null else invoice_month_12_flag end) as active_month_12,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 13 then null else invoice_month_13_flag end) as active_month_13,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 14 then null else invoice_month_14_flag end) as active_month_14,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 15 then null else invoice_month_15_flag end) as active_month_15,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 16 then null else invoice_month_16_flag end) as active_month_16,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 17 then null else invoice_month_17_flag end) as active_month_17,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 18 then null else invoice_month_18_flag end) as active_month_18,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 19 then null else invoice_month_19_flag end) as active_month_19,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 20 then null else invoice_month_20_flag end) as active_month_20,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 21 then null else invoice_month_21_flag end) as active_month_21,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 22 then null else invoice_month_22_flag end) as active_month_22,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 23 then null else invoice_month_23_flag end) as active_month_23,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 24 then null else invoice_month_24_flag end) as active_month_24,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 25 then null else invoice_month_25_flag end) as active_month_25,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 26 then null else invoice_month_26_flag end) as active_month_26,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 27 then null else invoice_month_27_flag end) as active_month_27,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 28 then null else invoice_month_28_flag end) as active_month_28,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 29 then null else invoice_month_29_flag end) as active_month_29,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 30 then null else invoice_month_30_flag end) as active_month_30,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 31 then null else invoice_month_31_flag end) as active_month_31,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 32 then null else invoice_month_32_flag end) as active_month_32,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 33 then null else invoice_month_33_flag end) as active_month_33,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 34 then null else invoice_month_34_flag end) as active_month_34,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 35 then null else invoice_month_35_flag end) as active_month_35,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 36 then null else invoice_month_36_flag end) as active_month_36,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 37 then null else invoice_month_37_flag end) as active_month_37,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 38 then null else invoice_month_38_flag end) as active_month_38,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 39 then null else invoice_month_39_flag end) as active_month_39,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 40 then null else invoice_month_40_flag end) as active_month_40,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 41 then null else invoice_month_41_flag end) as active_month_41,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 42 then null else invoice_month_42_flag end) as active_month_42,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 43 then null else invoice_month_43_flag end) as active_month_43,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 44 then null else invoice_month_44_flag end) as active_month_44,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 45 then null else invoice_month_45_flag end) as active_month_45,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 46 then null else invoice_month_46_flag end) as active_month_46,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 47 then null else invoice_month_47_flag end) as active_month_47,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 48 then null else invoice_month_48_flag end) as active_month_48,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 49 then null else invoice_month_49_flag end) as active_month_49,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 50 then null else invoice_month_50_flag end) as active_month_50,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 51 then null else invoice_month_51_flag end) as active_month_51,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 52 then null else invoice_month_52_flag end) as active_month_52,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 53 then null else invoice_month_53_flag end) as active_month_53,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 54 then null else invoice_month_54_flag end) as active_month_54,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 55 then null else invoice_month_55_flag end) as active_month_55,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 56 then null else invoice_month_56_flag end) as active_month_56,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 57 then null else invoice_month_57_flag end) as active_month_57,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 58 then null else invoice_month_58_flag end) as active_month_58,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 59 then null else invoice_month_59_flag end) as active_month_59,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 60 then null else invoice_month_60_flag end) as active_month_60,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 61 then null else invoice_month_61_flag end) as active_month_61,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 62 then null else invoice_month_62_flag end) as active_month_62,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 63 then null else invoice_month_63_flag end) as active_month_63,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 64 then null else invoice_month_64_flag end) as active_month_64,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 65 then null else invoice_month_65_flag end) as active_month_65,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 66 then null else invoice_month_66_flag end) as active_month_66,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 67 then null else invoice_month_67_flag end) as active_month_67,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 68 then null else invoice_month_68_flag end) as active_month_68,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 69 then null else invoice_month_69_flag end) as active_month_69,
    sum(case when datediff(month,created_month_year ,DATEADD(month, -1, date_trunc('month',to_date(current_date()))))+1 <= 70 then null else invoice_month_70_flag end) as active_month_70

from sub_inv_flag
where date_trunc('month',to_date(activated_at)) <= DATEADD(month, -1, date_trunc('month',to_date(current_date()))) --- only through previous month
group by 1
order by 1;"
"V_CUSTOMER_MASTER","create or replace view SEED_DATA.DEV.V_CUSTOMER_MASTER as 
with customer as 
(select
        customer_id,
        UPPER(customer_email) as customer_email,
        first_name,
        last_name,
        Full_address as Address,
        billing_country as Country,			
        billing_CITY as City,			
        billing_STATE as State	
        from 
        ""SEED_DATA"".""DEV"".""SUBSCRIPTION""
 
 )
 
 ,accounts as (
   select
         to_varchar(ACCOUNT_CODE) as customer_id,
         Case when ACCOUNT_STATUS_OPEN = 'TRUE' then 'Y' else 'N' end as HAS_OPEN_ACCOUNT,
         Case when ACCOUNT_STATUS_ACTIVE_SUBSCRIBERS = 'TRUE' then 'Y' else 'N' end as HAS_ACTIVE_SUB,
         Case when ACCOUNT_STATUS_PAST_DUE = 'TRUE' then 'Y' else 'N' end as HAS_SUB_IN_PAY_FAIL
   from   ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS""     
 
 )
 
, orders as 
    (
        with orders_clean as 
        (
            select 
                
                Customer_id, 
                invoice_date, 
                lower(sku) as sku,
                case when sku ilike '%syn%' or sku ilike 'ds01%' then 'DS-01'
                    when sku ilike '%pds%' then 'PDS-08'
                    else null end as product,
                    case when product = 'DS-01' and sku ilike '%wk%' then 'DS-01 Welcome Kit'
                    when product = 'DS-01' and sku ilike '%wk-3mo%' then 'DS-01 Welcome kit - 3 Months'
                    when product = 'DS-01' and sku ilike '%wk-6mo%' then 'DS-01 Welcome kit - 6 Months'
                    when product = 'DS-01' and sku ilike '%rf' then 'DS-01 Refill'
                    when product = 'DS-01' and sku ilike '%2mo%' then 'DS-01 Refill - 2 Months'
                    when product = 'DS-01' and sku ilike '%3mo%' then 'DS-01 SRP Refill - 3 Months'
                    when product = 'DS-01' and sku ilike '%6mo%' then 'DS-01 SRP Refill - 6 Months'
                    when product = 'DS-01' and sku ilike '%trial%' then 'DS-01 Trial'
                    when product = 'PDS-08' and sku ilike '%wk%' then 'PDS-08 Welcome Kit'
                    when product = 'PDS-08' and sku ilike '%rf' then 'PDS-08 Refill'
                    when product = 'PDS-08' and sku ilike '%2mo%' then 'PDS-08 Refill - 2 Months'
                    when product = 'PDS-08' and sku ilike '%3mo%' then 'PDS-08 SRP Refill - 3 Months'
                    when product = 'PDS-08' and sku ilike '%6mo%' then 'PDS-08 SRP Refill - 6 Months'
                    when product = 'PDS-08' and sku ilike '%trial%' then 'PDS-08 Trial'
                    else null                    
                    end as clean_sku,
          
                case when clean_sku ilike '%Trial%' then 1 
                    when clean_sku ilike '%Welcome Kit%' then 2 
                    when clean_sku ilike '%Refill - 2 Months' then 3
                    when clean_sku ilike '%Refill' then 4
                    when clean_sku ilike '%Refill - 3 Months' then 5
                    when clean_sku ilike '%Refill - 6 Months' then 6 
                    end as sku_ranking,
                row_number() over(partition by customer_id,product order by invoice_date,sku_ranking) as first_invoice_product_rank,
                row_number() over (partition by customer_id,product order by invoice_date desc ,sku_ranking desc) as last_invoice_product_rank,
                row_number() over (partition by customer_id order by invoice_date,sku_ranking ) as first_invoice_rank,
                row_number() over (partition by customer_id order by invoice_date desc, sku_ranking desc) as last_invoice_rank,
                case when first_invoice_rank = 1 then invoice_date 
                    else null end as first_order_date,
                case when last_invoice_rank = 1 then invoice_date 
                    else null end as last_order_date,
                case when first_invoice_rank = 1 then clean_sku
                    else null end as first_sku,
                case when first_invoice_rank = 1 then 
                round(div0((discount*100),(total_amount_paid - tax - total_shipping_cost + discount)),0) else null end as first_discount_percentage,
                ----- adding as part of a test for base price discount
                case when first_invoice_rank = 1 then 
                round(div0((discount*100),(base_price)),0) else null end as first_discount_percentage_base_price,
                case when first_invoice_rank = 1 then promotion_code end as first_promotion_code,
                case when last_invoice_rank = 1 then clean_sku
                    else null end as last_sku,
                case when last_invoice_rank = 1 then 
                round(div0((discount*100),(total_amount_paid - tax - total_shipping_cost +discount)),0)                       else null end as last_discount_percentage,
                case when last_invoice_rank = 1 then promotion_code end as last_promotion_code
            from ""SEED_DATA"".""DEV"".""ORDER_HISTORY"" as o 
            where subscription_id is not null
        )
    
            select
                customer_id, 
                min(first_order_date) as first_order_date,
                min(first_sku) as first_sku,
                min(first_discount_percentage) as first_discount_percentage,
                min(first_promotion_code) as first_promotion_code,
                max(last_order_date) as last_order_date,
                max(last_sku) as last_sku,
                max(last_discount_percentage) as last_discount_percentage,
                max(last_promotion_code) as last_promotion_code
            from orders_clean    
            group by customer_id
                    
      )
       
    , customer_sub_info as 
    (
        with subscription_product as 
        (
            select customer_id, 
                   activated_at,
                   cancelled_at,
                   datediff(month,min(activated_at),coalesce(max(cancelled_at),current_date()))+1 as months_active
        from ""SEED_DATA"".""DEV"".""SUBSCRIPTION""
          group by 1,2,3
        )

    select customer_id,
        min(activated_at) as first_subscription_date,
        max(activated_at) as last_subscription_date,
        min(cancelled_at) as first_cancel_date,
        max(cancelled_at) as last_cancel_date,
        sum(months_active) as months_active_customer -- overlaps are considered as multiple 
    from subscription_product
    group by customer_id
    )
     ,
    
    pause as 
    (
        select customer_id,
            paused_at_clean as pause_start_date, 
            paused_at_clean_ts as pause_start_timestamp,
            version_ended_at_clean as pause_end_date,
            case when pause_end_date is null then 'Y' else 'N' end as Is_Paused,
            row_number() over(partition by customer_id order by version_started_at desc) as pause_rank
        from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION_PAUSE_HISTORY"" sph
       left join ""SEED_DATA"".""DEV"".""SUBSCRIPTION"" s on s.recurly_subscription_id = sph.subscription_uuid
        qualify pause_rank = 1
    )
   
    ,next_bill as 
    (
        select customer_id, min(next_bill_date) as next_bill_date
        from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_NEXT_BILL_DATE"" nbd
        left join ""SEED_DATA"".""DEV"".""SUBSCRIPTION"" s on s.recurly_subscription_id = nbd.subscription_id
        group by 1
    ),
    
    sku_history as 
    (
        select CUSTOMER_ID, 
            min(case when (updated_plan_code ilike '%3mo%' or updated_plan_code ilike '%6mo%') then version_started_at else null end) as first_enroll_SRP_Date,
            max(case when (updated_plan_code ilike '%3mo%' or updated_plan_code ilike '%6mo%') then version_started_at else null end) as last_enroll_date_srp,
            case when first_enroll_srp_date is not null then 'Y' else 'N' end as Has_Enrolled_In_SRP

        from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_STATUS_HISTORY"" nbd
        left join ""SEED_DATA"".""DEV"".""SUBSCRIPTION"" s on s.recurly_subscription_id = nbd.subscription_uuid
        group by 1
    )
    ---------CHECKOUT SURVEY----------
    ,CO_Survey as
      
      (        
select 
  to_date(timestamp) as date
, date_trunc('month',to_date(timestamp)) as month_date
, upper(email) as email
, question
, response
, count(distinct user_id) as user_count
from SEGMENT_EVENTS.SEED_COM.SURVEY_QUESTION_ANSWERED
where question = 'How did you learn about Seed?'
group by 1,2,3,4,5
        )

-------------
 ,MX_TEAM as (
    select Customer_id, 
           CONTACTED_MX_TEAM as has_contacted_mx
           from SEED_DATA.DEV.V_KUSTOMER_SUBSCRIBER_DETAIL
             )
      
       ----------------------Customer was moved from Pause to Cancel when we removed pause as an option
  ,prev_pause as (
    select
	sau.email,
	case when ses.was_previously_paused = 'TRUE' then 'Y' else 'N' end as was_previously_paused
from MARKETING_DATABASE.SEED_CORE_PUBLIC.seed_ecommerce_subscription ses
	inner join MARKETING_DATABASE.SEED_CORE_PUBLIC.seed_ecommerce_gatewayaccount seg 
		on ses.account_id = seg.id 
	inner join MARKETING_DATABASE.SEED_CORE_PUBLIC.seed_account_user sau 
		on sau.id = seg.user_id 
where ses.was_previously_paused)


------------------------
, marketing_consent as (

select email, 
       max(case when accepts_marketing ilike '%TRUE%' or consent is not null then 'Y' else 'N' end) as consent_flag
       from SEGMENT_EVENTS.SEED_COM.IDENTIFIES
where not (consent is null and accepts_marketing is null)
group by 1 
         )
    
    select 

        s.customer_id,
        s.customer_email,
        s.first_name,
        s.last_name,
        s.Address,
        s.Country,
        s.City,
        s.State,
        a.HAS_OPEN_ACCOUNT,
        a.HAS_ACTIVE_SUB,
        a.HAS_SUB_IN_PAY_FAIL,
        o.first_order_date,
        o.first_sku,
        o.first_discount_percentage,
        o.first_promotion_code,
        o.last_order_date,
        o.last_sku,
        o.last_discount_percentage,
        o.last_promotion_code,
        cus_sub.first_subscription_date,
        date_trunc(month,cus_sub.first_subscription_date) as first_subscription_month,
        cus_sub.last_subscription_date,
        date_trunc(month,cus_sub.last_subscription_date) as last_subscription_month,
        case when first_cancel_date is not null then 'Y' else 'N' end as Has_Cancelled_a_sub,
        nb.next_bill_date,
        sh.Has_Enrolled_In_SRP,
        sh.first_enroll_SRP_Date,
        sh.last_enroll_date_srp,
        months_active_customer as customer_age,
        cs.date as checkout_survey_date,
        cs.month_date as checkout_survey_month,
        cs.RESPONSE as checkout_survey_response,
        ifnull(HAS_CONTACTED_MX,'N') as HAS_CONTACTED_MX,
        ifnull(IS_PAUSED,'N') as Has_Paused_Sub,
        ifnull(was_previously_paused,'N') as was_previously_paused,
        ifnull(consent_flag,'N') as consent_flag,
        datediff(day,cus_sub.first_subscription_date,coalesce(cus_sub.last_cancel_date,current_date()))+1 as days_from_first_subscription_date_last_cancel_date,
        datediff(day,pause_start_date,coalesce(p.pause_end_date,current_date()))+1 as days_since_last_pause_date,
        datediff(day,cus_sub.last_cancel_date,current_date())+1 as days_since_last_cancel_date
     
    from customer s
        left join accounts as a on a.customer_id = s.customer_id
        left join customer_sub_info as cus_sub on cus_sub.customer_id = s.customer_id
        left join orders as o on o.customer_id = s.customer_id
        left join pause as p on p.customer_id = s.customer_id
        left join next_bill as nb on nb.customer_id = s.customer_id
        left join sku_history as sh on sh.customer_id = s.customer_id
        left join co_survey as cs on s.customer_email = cs.email
        left join MX_TEAM as cmt on cmt.customer_id = s.customer_id
        left join prev_pause as pp on upper(s.customer_email) = upper(pp.email)
        left join marketing_consent as mc on upper(s.customer_email) = upper(mc.email)"
"V_DIM_PRODUCT","create or replace view SEED_DATA.DEV.V_DIM_PRODUCT 
AS
with sku_build_from_orders as 
        (
            select 
                distinct
                lower(sku) as sku,
                case when sku ilike '%syn%' or sku ilike 'ds01%' then 'DS-01'
                    when sku ilike '%pds%' then 'PDS-08'
                    else null end as product,
                case when product = 'DS-01' and sku ilike '%wk%' then 'DS-01 Welcome Kit'
                    when product = 'DS-01' and sku ilike '%rf' then 'DS-01 Refill'
                    when product = 'DS-01' and sku ilike '%2mo%' then 'DS-01 Refill - 2 Months'
                    when product = 'DS-01' and sku ilike '%3mo%' then 'DS-01 SRP Refill - 3 Months'
                    when product = 'DS-01' and sku ilike '%6mo%' then 'DS-01 SRP Refill - 6 Months'
                    when product = 'DS-01' and sku ilike '%trial%' then 'DS-01 Trial'
                    when product = 'PDS-08' and sku ilike '%wk%' then 'PDS-08 Welcome Kit'
                    when product = 'PDS-08' and sku ilike '%rf' then 'PDS-08 Refill'
                    when product = 'PDS-08' and sku ilike '%2mo%' then 'PDS-08 Refill - 2 Months'
                    when product = 'PDS-08' and sku ilike '%3mo%' then 'PDS-08 SRP Refill - 3 Months'
                    when product = 'PDS-08' and sku ilike '%6mo%' then 'PDS-08 SRP Refill - 6 Months'
                    when product = 'PDS-08' and sku ilike '%trial%' then 'PDS-08 Trial'
                    else null 
                    end as product_desc
            from ""SEED_DATA"".""DEV"".""V_ORDER_HISTORY"" as o 
        )


select * from sku_build_from_orders"
"V_EVENTS_ORDER_COMPLETE","create or replace view SEED_DATA.DEV.V_EVENTS_ORDER_COMPLETE(
	UTM_SOURCE_MEDIUM,
	CHANNEL_GROUPING,
	CHANNEL_PLATFORM,
	EVENT_DATE,
	EVENT_MONTHDATE,
	ACTIVE_SKU,
	CREATED_AT,
	DATE_JOINED,
	EMAIL_USER_PROP,
	HAS_ACTIVE_DS01_SUBSCRIPTION,
	HAS_ACTIVE_PDS08_SUBSCRIPTION,
	HAS_PAUSED_SUBSCRIPTION,
	HIGHEST_ACTIVE_DS01_PERCENT_COUPON,
	INITIAL_REFERRER,
	INITIAL_UTM_CAMPAIGN,
	INITIAL_UTM_CONTENT,
	INITIAL_UTM_MEDIUM,
	INITIAL_UTM_SOURCE,
	INITIAL_UTM_TERM,
	MOST_RECENT_PURCHASE_DATE,
	MOST_RECENT_PURCHASE_SKU,
	FULL_NAME,
	PAUSED_SKUS,
	REFERRER,
	SUBSCRIPTION_COUNT,
	TOTAL_ORDERS_COUNT,
	USERNAME,
	UTM_CAMPAIGN,
	UTM_CONTENT,
	UTM_MEDIUM,
	UTM_SOURCE,
	UTM_TERM,
	ZIP,
	PRICE,
	PRODUCT_ID,
	QUANTITY,
	REVENUE,
	REVENUE_TYPE,
	AFFILIATION,
	COUPON,
	CURRENCY,
	DISCOUNT,
	EMAIL,
	EXTERNAL_ID,
	FIRST_NAME,
	LAST_NAME,
	ORDER_ID,
	PAYMENT_METHOD,
	POSTAL_CODE,
	TOTAL_REVENUE,
	SHIPPING,
	STATE,
	SUBTOTAL,
	TAX,
	TOTAL,
	TOTAL_DS01_QUANTITY,
	TOTAL_ORDER_QUANTITY,
	TOTAL_PDS08_QUANTITY,
	DEVICE_ID,
	ID,
	SERVER_UPLOAD_TIME,
	CLIENT_EVENT_TIME,
	AMPLITUDE_ID,
	EVENT_TYPE_ID,
	USER_ID,
	PROJECT_NAME,
	AMPLITUDE_EVENT_TYPE,
	LIBRARY,
	START_VERSION,
	LOCATION_LNG,
	LOCATION_LAT,
	CITY,
	UUID,
	IS_ATTRIBUTION_EVENT,
	IDFA,
	PAYING,
	IP_ADDRESS,
	LANGUAGE,
	APP,
	COUNTRY,
	REGION,
	SESSION_ID,
	VERSION_NAME,
	SAMPLE_RATE,
	AD_ID,
	OS_VERSION,
	EVENT_TYPE,
	DMA,
	SCHEMA,
	DEVICE_BRAND,
	DEVICE_TYPE,
	DEVICE_MANUFACTURER,
	DEVICE_MODEL,
	DEVICE_CARRIER,
	DEVICE_FAMILY,
	OS_NAME,
	PLATFORM,
	CLIENT_UPLOAD_TIME,
	SERVER_RECEIVED_TIME,
	PROCESSED_TIME,
	EVENT_TIME,
	USER_CREATION_TIME,
	DATA,
	GROUPS,
	_INSERT_ID,
	GROUP_PROPERTIES,
	EVENT_PROPERTIES,
	USER_PROPERTIES,
	_FIVETRAN_SYNCED
) as 

with amplitude_events as (
select 
--- USER_PROPERTIES json
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:activeSkus[0], '""', '')) AS active_sku,
  --LTRIM(REGEXP_REPLACE(USER_PROPERTIES:city, '""', '')) AS city,
  --LTRIM(REGEXP_REPLACE(USER_PROPERTIES:country, '""', '')) AS country,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:createdAt::timestamp, '""', '')) AS created_at,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:dateJoined::timestamp, '""', '')) AS date_joined,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:email, '""', '')) AS email_user_prop,
  --LTRIM(REGEXP_REPLACE(USER_PROPERTIES:firstName, '""', '')) AS first_name,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:hasActiveDS01Subscription::boolean, '""', '')) AS has_active_ds01_subscription,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:hasActivePDS08Subscription::boolean, '""', '')) AS has_active_pds08_subscription,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:hasPausedSubscription::boolean, '""', '')) AS has_paused_subscription,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:highestActiveDS01PercentCoupon, '""', '')) AS highest_active_ds01_percent_coupon,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:initial_referrer, '""', '')) AS initial_referrer,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:initial_utm_campaign, '""', '')) AS initial_utm_campaign,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:initial_utm_content, '""', '')) AS initial_utm_content,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:initial_utm_medium, '""', '')) AS initial_utm_medium,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:initial_utm_source, '""', '')) AS initial_utm_source,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:initial_utm_term, '""', '')) AS initial_utm_term,
  --LTRIM(REGEXP_REPLACE(USER_PROPERTIES:lastName, '""', '')) AS last_name,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:mostRecentPurchaseDate::timestamp, '""', '')) AS most_recent_purchase_date,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:mostRecentPurchaseSku, '""', '')) AS most_recent_purchase_sku,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:name, '""', '')) AS full_name,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:pausedSkus, '""', '')) AS paused_skus,
  --LTRIM(REGEXP_REPLACE(USER_PROPERTIES:payment_method, '""', '')) AS payment_method,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:referrer, '""', '')) AS referrer,
  --LTRIM(REGEXP_REPLACE(USER_PROPERTIES:region, '""', '')) AS region,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:subscriptionCount, '""', '')) AS subscription_count,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:totalOrdersCount, '""', '')) AS total_orders_count,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:username, '""', '')) AS username,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:utm_campaign, '""', '')) AS utm_campaign,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:utm_content, '""', '')) AS utm_content,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:utm_medium, '""', '')) AS utm_medium,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:utm_source, '""', '')) AS utm_source,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:utm_term, '""', '')) AS utm_term,
  LTRIM(REGEXP_REPLACE(USER_PROPERTIES:zip, '""', '')) AS zip,
--- EVENT_PROPERTIES json
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:""$price"", '""', '')) AS price,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:""$productId"", '""', '')) AS product_id,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:""$quantity"", '""', '')) AS quantity,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:""$revenue"", '""', '')) AS revenue,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:""$revenueType"", '""', '')) AS revenue_type,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:affiliation, '""', '')) AS affiliation,
  --LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:city, '""', '')) AS city,
  --LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:country, '""', '')) AS country,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:coupon, '""', '')) AS coupon,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:currency, '""', '')) AS currency,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:discount, '""', '')) AS discount,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:email, '""', '')) AS email,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:externalId, '""', '')) AS external_id,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:firstName, '""', '')) AS first_name,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:lastName, '""', '')) AS last_name,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:order_id, '""', '')) AS order_id,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:paymentMethod, '""', '')) AS payment_method,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:postalCode, '""', '')) AS postal_code,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:revenue, '""', '')) AS total_revenue,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:shipping, '""', '')) AS shipping,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:state, '""', '')) AS state,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:subtotal, '""', '')) AS subtotal,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:tax, '""', '')) AS tax,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:total, '""', '')) AS total,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:totalDS01Quantity, '""', '')) AS total_ds01_quantity,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:totalOrderQuantity, '""', '')) AS total_order_quantity,
  LTRIM(REGEXP_REPLACE(EVENT_PROPERTIES:totalPDS08Quantity, '""', '')) AS total_pds08_quantity,
--- remaining
 * from MARKETING_DATABASE.AMPLITUDE.EVENT 
)
--- AMPLITUDE data
select
CONCAT(utm_medium,';',utm_source) as utm_source_medium,
case
    ----- Direct
    when lower(utm_medium) is null then 'Direct'
    ----- Public Radio
    when lower(utm_medium) ilike '%publicradio%' then 'Public Radio'
    ----- Email
    when lower(utm_source) ilike '%klaviyo%' then 'Email'
    when lower(utm_source) ilike '%iterable%' then 'Email'
    when lower(utm_medium) = 'email' then 'Email'
    ----- Search
    when lower(utm_medium) ilike '%cpc%' then 'Search'
    ----- Organic Social
    when lower(utm_source_medium) ilike '%seedsocial%' then 'Organic Social'
    ----- Performance
    when lower(utm_medium) ilike '%facebook%' or lower(utm_source) ilike '%facebook%'  then 'Performance'
    when lower(utm_medium) ilike '%reddit%' then 'Performance'
    when lower(utm_medium) ilike '%pinterest%' or lower(utm_source) ilike '%pinterest%' then 'Performance'
    when lower(utm_medium) ilike '%snapchat%' then 'Performance'
    when lower(utm_medium) ilike '%tradedesk%' then 'Performance'
    when lower(utm_medium) ilike '%outbrain%' or lower(utm_source) ilike '%outbrain%' then 'Performance'
    when lower(utm_medium) ilike '%tiktok%' then 'Performance'
    when lower(utm_source) ilike '%tapjoy%' then 'Performance'
    when lower(utm_source) ilike '%liveintent%' or lower(utm_medium)ilike '%liveintent%' then 'Performance'
    when lower(utm_medium) = 'social' then 'Performance'
    when lower(utm_source) = 'geistm' then 'Performance'
    ------ Influencer
    when lower(utm_medium) ilike '%instagram%' or lower(utm_medium) ilike '%youtube%' then 'Influencer'
    when lower(utm_medium) = 'app' then 'Influencer'
    when lower(utm_medium) ilike '%influencer%' then 'Influencer'
    when lower(utm_campaign) ilike '%flavcity%' then 'Influencer'
    when lower(utm_medium) = 'social-post' then 'Influencer'
    when lower(referrer) ilike '%instagram%' then 'Influencer'
    ------ Affiliate
    when lower(utm_medium) = 'affiliate' then 'Affiliate'
    ------ Partnerships 
    when lower(utm_medium) = 'partner' then 'Partnerships'
    when lower(utm_medium) = 'article' then 'Partnerships'
    ------ Podcast
    when lower(utm_medium) ilike '%podcast%' then 'Podcast'
    when lower(utm_medium) ilike '%podcst%' then 'Podcast'
    ------ Audio
    when lower(utm_medium) = 'audio' then 'Audio'
    ---- Practitioner
    when lower(utm_medium) = 'practitioner' then 'Practitioner'
    ---- Direct Mail / Insert
    when lower(utm_source_medium) ilike '%insert;mail%' then 'Direct Mail / Insert'
    ----- Banner / Page
    when lower(utm_medium) in ('banner','page') then 'Banner/Page'
    ----- Blog Post
    when lower(utm_medium) ilike '%blog%' then 'Blog Post'
    ----- Newsletter
    when lower(utm_medium) = 'newsletter' then 'Newsletter'
    ----- Referral
    when lower(utm_medium) = 'referral' then 'Referral'
    ----- Other 
    else 'Other' end as channel_grouping,
----- Performance
case
    when lower(utm_medium) ilike '%facebook%' or lower(utm_source) ilike '%facebook%'  then 'Facebook'
    when lower(utm_medium) ilike '%reddit%' then 'Reddit'
    when lower(utm_medium) ilike '%pinterest%' or lower(utm_source) ilike '%pinterest%' then 'Pinterest'
    when lower(utm_medium) ilike '%snapchat%' then 'Snapchat'
    when lower(utm_medium) ilike '%tradedesk%' then 'TradeDesk'
    when lower(utm_medium) ilike '%outbrain%' or lower(utm_source) ilike '%outbrain%' then 'Outbrain'
    when lower(utm_medium) ilike '%tiktok%' then 'TikTok'
    when lower(utm_source) ilike '%tapjoy%' then 'TapJoy'
    when lower(utm_source) ilike '%liveintent%' or lower(utm_medium)ilike '%liveintent%' then 'Liveintent'
    when lower(utm_source) ilike '%geistm%' then 'GeistM'
    when lower(utm_source) ilike '%bing%' then 'Bing'
    when lower(utm_source) ilike '%google%' then 'Google Ads'
    when lower(utm_source) ilike '%youtube%' then 'Youtube'
    when lower(utm_source) ilike '%klaviyo%' then 'Klaviyo'
    when lower(utm_source) ilike '%iterable%' then 'Iterable'
    else 'Other' end as channel_platform,
to_date(event_time) as event_date,
date_trunc('month',to_date(event_time)) as event_monthdate,
*
from amplitude_events
--from MARKETING_DATABASE.AMPLITUDE.EVENT 
where 
event_type = 'Order Completed';"
"V_KLAVIYO_CAMPAIGN_PERFORMANCE","create or replace view SEED_DATA.DEV.V_KLAVIYO_CAMPAIGN_PERFORMANCE  as 

with campaigns as 
( 
  select 
   ID as CAMPAIGN_ID 
  ,Name as CAMPAIGN_NAME
  ,'Email' as DELIVERY_METHOD
  , CAMPAIGN_TYPE as CAMPAIGN_TYPE
  , to_date(CREATED) as START_DATE
  , null as END_DATE
  , CREATED as START_TIMESTAMP
  , current_timestamp as END_TIMESTAMP
  , STATUS
  , SUBJECT as EMAIL_SUBJECT
  
  from ""MARKETING_DATABASE"".""KLAVIYO"".""CAMPAIGN"" 
 ) 

--------------Sent-------------
,sent as (
select 
campaign_id
,count(distinct person_id) as sent
from
""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" 
group by 1 
  )
  
-------------Delivered----------
,delivered as (
    select 
campaign_id
,count(distinct person_id) as delivered
from
""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" 
where TYPE = 'Received Email'
group by 1 
  ) 
  
--------------bounces-----------
,bounced as (
    select 
campaign_id
,count(distinct person_id) as bounced
from
""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" 
where TYPE = 'Bounced Email' 
group by 1 
  )  
 --------------Opened-----------  
  ,opened as (
    select 
campaign_id
,count(person_id) as opened    
,count(distinct person_id) as unique_opened
from
""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" 
where TYPE = 'Opened Email' 
group by 1 
  ) 
  --------------Clicks -----------
    ,clicked as (
    select 
campaign_id
,count(person_id) as Clicked
,count(distinct person_id) as unique_Clicked
from
""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" 
where TYPE = 'Clicked Email' 
group by 1 
  ) 

---------------UNSUBSCRIBED------------
, UNSUBSCRIBED as (
    select 
campaign_id
,count(distinct person_id) as unsubscribed
from
""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" 
where TYPE = 'Unsubscribed' 
group by 1 
  ) 
  
   ----------------The next couple subqueries are to determine conversion--------------
  
, open_click as 
(
    select 
distinct upper(email) as email
, campaign_id
, timestamp as timestamp  
from
""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" e
left join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" p
 on e.person_id = p.id   
where TYPE = 'Opened Email' 
  
  union all 
  
      select 
distinct upper(email) as email
, campaign_id
, timestamp as timestamp 
from
""MARKETING_DATABASE"".""KLAVIYO"".""EVENT"" e
left join ""MARKETING_DATABASE"".""KLAVIYO"".""PERSON"" p
 on e.person_id = p.id   
where TYPE = 'Clicked Email' 

  
)

, combined as (
  select 
  distinct upper(email) as email
, campaign_id
, max(timestamp) as event_date 
  from open_click
  group by 1,2
           )
  
, Sub_Start as (
select UPPER(EMAIL) as Email, 
       Timestamp as activated_date, 
       Event
       from 
       ""SEGMENT_EVENTS"".""CORE_STAGING"".""RECURLY_START_SUBSCRIPTION"" 
     )

, diff_active as (
select 
campaign_id,
d.email,
event_Date,
activated_date,
datediff(day,event_date,activated_date) as date_diff

from combined d
left join sub_start s
on d.email = s.email

where date_diff between 0 and 5
          )

,conversion_active as (
  select 
campaign_id,
count(distinct email) as conversion_active
  from diff_active
  group by 1
  
 )
 
 , STP_Start as (
select UPPER(EMAIL) as Email, 
       Timestamp as activated_date, 
       Event
       from 
       SEGMENT_EVENTS.CORE_STAGING.STP_ENROLLMENT
     )

, diff_STP as (
select 
campaign_id,
d.email,
event_Date,
activated_date,
datediff(day,event_date,activated_date) as date_diff

from combined d
left join stp_start s
on d.email = s.email

where date_diff between 0 and 5
          )

,conversion_STP as (
  select 
campaign_id,
count(distinct email) as conversion_stp
  from diff_stp
  group by 1
  
 )
  
 ,final as 
(
select 
 c.CAMPAIGN_ID
,c.CAMPAIGN_NAME
,c.DELIVERY_METHOD
,c.CAMPAIGN_TYPE
,c.START_DATE
,c.END_DATE
,c.START_TIMESTAMP
,c.END_TIMESTAMP
,c.STATUS
,c.EMAIL_SUBJECT
,s.SENT
,b.BOUNCED
,o.OPENED
,o.UNIQUE_OPENED
,cl.CLICKED
,cl.UNIQUE_CLICKED  
,ch.UNSUBSCRIBED
,d.Delivered as DELIVERED  
,delivered/s.SENT as DELIVERD_RATE
,b.BOUNCED/s.SENT as BOUNCED_RATE
,o.UNIQUE_OPENED/DELIVERED as OPENED_RATE
,cl.UNIQUE_CLICKED/DELIVERED as CLICK_RATE  
,cl.UNIQUE_CLICKED/o.UNIQUE_OPENED as CLICK_TO_OPEN_RATE
,ch.UNSUBSCRIBED/DELIVERED as UNSUBSCRIBED_RATE
,CONVERSION_ACTIVE as CONVERSION_ACTIVE
,CONVERSION_ACTIVE/DELIVERED as CONVERSION_RATE_ACTIVE
,CONVERSION_STP as CONVERSION_STP
,CONVERSION_STP/DELIVERED as CONVERSION_RATE_STP
  
from
campaigns c
  
-----Adding Sent-------------  
left join sent s 
on c.CAMPAIGN_ID = s.CAMPAIGN_ID    
-----Adding delivered-------------  
left join delivered d 
on c.CAMPAIGN_ID = d.CAMPAIGN_ID    
  
-----Adding bounce-------------  
left join bounced b
on c.CAMPAIGN_ID = b.CAMPAIGN_ID    

-----Adding  opened -------------  
left join opened  o
on c.CAMPAIGN_ID = o.CAMPAIGN_ID    
  -----Adding  clicks -------------  
left join clicked  cl
on c.CAMPAIGN_ID = cl.CAMPAIGN_ID    
      -----Adding  unsub -------------  
left join UNSUBSCRIBED  ch
on c.CAMPAIGN_ID = ch.CAMPAIGN_ID    
  
        -----Adding Conversion for campaigns to get new customers-------------  
left join conversion_active  cona
on c.CAMPAIGN_ID = cona.CAMPAIGN_ID  
         -----Adding Conversion for campaigns to get customers to upgrade-------------  
left join conversion_STP  cons
on c.CAMPAIGN_ID = cons.CAMPAIGN_ID   

)

select * from final;"
"V_MARKETING_CHANNEL_SPEND_PIVOT","create or replace view SEED_DATA.DEV.V_MARKETING_CHANNEL_SPEND_PIVOT as 

WITH PIVOT_BUILD AS (
SELECT DATE, SOURCE, SPEND FROM SEED_DATA.DEV.V_MARKETING_CHANNEL_SPEND_ALL
where concat(SOURCE,'-',TYPE) <> 'PINTEREST-MANUAL'
)


SELECT *
  FROM PIVOT_BUILD
    PIVOT(SUM(spend) FOR SOURCE IN 
(
  'BING'
, 'FACEBOOK'
, 'GEIST'
, 'IHEART'
, 'INFLUENCER'
, 'INFLUENCERAGENCY'
, 'MISC'
, 'OUTBRAIN'
, 'PCA'
, 'PINTEREST'
, 'QUORA'
, 'REDDIT'
, 'SNAPCHAT'
, 'SPOTIFY'
, 'TAPJOY'
, 'TIKTOK'
, 'TRADEDESK'
, 'GOOGLE ADS'
))
      AS p
;"
"V_ORDER_CATEGORY_AGGREGATION","create or replace view SEED_DATA.DEV.V_ORDER_CATEGORY_AGGREGATION as 
with all_orders as 
(
    select *,
        case when sku ilike '%syn%' or sku ilike 'ds01%' then 'DS-01'
                                when sku ilike '%pds%' then 'PDS-08'
                                else null end as product,
                case when sku ilike '%wk%' then 'Welcome Kit'
                    when sku ilike '%rf' then 'Refill'
                    when sku ilike '%2mo%' then 'Refill - 2 Months'
                    when sku ilike '%3mo%' then 'Refill - 3 Months'
                    when SKU ilike '%6mo%' then 'Refill - 6 Months'
                    else null end as sku_clean,
                    rank() over(partition by subscription_id order by invoice_date) as rank_inv
    from v_order_history 
    where sku_clean is not null or product is not null
),

final_table as 
(
    select invoice_id, to_date(invoice_date) as invoice_date, min(case when rank_inv = 1 then 1 else 2 end) invoice_rank, 
        count(distinct product) as product_count, max(case when quantity = 1 then 1 else 2 end) as quantity
    from all_orders
    group by 1, 2
)

select to_date(invoice_date) as invoice_date,case when invoice_rank = 1 then 'new' else 'ongoing' end as invoice_category,
    case when product_count = 1 then 'Single Product' else 'Multiple Product' end as prodcut_category
    ,case when quantity = 1 then 'Single Quantity' else 'Multiple Quantity' end as quantity_category
    ,count(invoice_id) as invoice_count
from final_table
group by 1,2,3,4
order by 1, 5 desc;"
"V_ORDER_HISTORY","create or replace view SEED_DATA.DEV.V_ORDER_HISTORY(
	INVOICE_ID,
	INVOICE_NUMBER,
	TRANSACTION_ID,
	CUSTOMER_ID,
	CUSTOMER_EMAIL,
	SUBSCRIPTION_ID,
	INVOICE_DATE,
	SKU,
	SKU_DESCRIPTION,
	PROMOTION_CODE,
	PLATFORM_ORIG,
	QUANTITY,
	BASE_PRICE,
	TOTAL_AMOUNT_PAID,
	TAX,
	DISCOUNT,
	AMOUNT_PAID_BY_TRANSACTION,
	TOTAL_SHIPPING_COST,
	SHIPPING_COST_WO_TAX,
	SHIPPING_COST_TAX,
	AMOUNT_REFUNDED,
	CREDIT_APPLIED,
    PRODUCT,
    CLEAN_SKU
) as 


WITH complete as (
SELECT 
  CAST(INVOICE_ID as STRING) as INVOICE_ID
, NULL AS INVOICE_NUMBER
, CAST(TRANSACTION_ID as STRING) as TRANSACTION_ID
, CAST(CUSTOMER_ID as STRING) as CUSTOMER_ID
, CUSTOMER_EMAIL
, CAST(SUBSCRIPTION_ID as STRING) as SUBSCRIPTION_ID
, ORDER_DATE AS INVOICE_DATE
--, PAID_DATE
, SKU
, NULL AS SKU_DESCRIPTION
, DISCOUNT_CODE AS PROMOTION_CODE
, 'RECHARGE' as PLATFORM_ORIG
, IFNULL(SUM(QUANTITY),0) AS QUANTITY
, IFNULL(SUM(BASE_PRICE),0) AS BASE_PRICE
, IFNULL(SUM(TOTAL_AMOUNT_PAID),0) AS TOTAL_AMOUNT_PAID
, IFNULL(SUM(TAX),0) AS TAX
, IFNULL(SUM(DISCOUNT),0) AS DISCOUNT
--, NULL AS NORM_FACTOR
, 0 AS AMOUNT_PAID_BY_TRANSACTION
, IFNULL(SUM(SHIPPING_COST),0) AS TOTAL_SHIPPING_COST
, 0 AS SHIPPING_COST_WO_TAX
, 0 AS SHIPPING_COST_TAX
, IFNULL(SUM(REFUND_AMOUNT),0) AS AMOUNT_REFUNDED
, 0 AS CREDIT_APPLIED

FROM SEED_DATA.DEV.V_REHCARGE_ORDER_HISTORY 
GROUP BY 1,2,3,4,5,6,7,8,9,10,11

UNION ALL

SELECT 
  INVOICE_ID
, INVOICE_NUMBER
, TRANSACTION_ID
, CUSTOMER_ID
, NULL AS CUSTOMER_EMAIL
, SUBSCRIPTION_ID
, INVOICE_DATE
--, PAID_DATE
, SKU
, SKU_DESCRIPTION
, PROMOTION_CODE
, 'RECURLY' as PLATFORM_ORIG
, IFNULL(SUM(QUANTITY),0) AS QUANTITY
, IFNULL(SUM(BASE_PRICE),0) AS BASE_PRICE
, IFNULL(SUM(TOTAL_AMOUNT_PAID),0) AS TOTAL_AMOUNT_PAID
, IFNULL(SUM(TAX),0) AS TAX
, IFNULL(SUM(DISCOUNT),0) AS DISCOUNT
--, NORM_FACTOR
, IFNULL(SUM(AMOUNT_PAID_BY_TRANSACTION),0) AS AMOUNT_PAID_BY_TRANSACTION
, IFNULL(SUM(TOTAL_SHIPPING_COST),0) AS TOTAL_SHIPPING_COST
, IFNULL(SUM(SHIPPING_COST_WO_TAX),0) AS SHIPPING_COST_WO_TAX
, IFNULL(SUM(SHIPPING_COST_TAX),0) AS SHIPPING_COST_TAX
, IFNULL(SUM(AMOUNT_REFUNDED),0) AS AMOUNT_REFUNDED
, IFNULL(SUM(CREDIT_APPLIED),0) AS CREDIT_APPLIED

FROM SEED_DATA.DEV.V_RECURLY_ORDER_HISTORY
--where transaction_id <> '68e14bba8ee3cd03ed5a7a446899a5a0'
GROUP BY 1,2,3,4,5,6,7,8,9,10,11
)

--SELECT * FROM complete;

SELECT 
  INVOICE_ID
, INVOICE_NUMBER
, TRANSACTION_ID
, CUSTOMER_ID
, CUSTOMER_EMAIL
, SUBSCRIPTION_ID
, INVOICE_DATE
, SKU
, SKU_DESCRIPTION
, PROMOTION_CODE
, PLATFORM_ORIG
, IFNULL(SUM(QUANTITY),0) AS QUANTITY
, IFNULL(SUM(BASE_PRICE),0) AS BASE_PRICE
, IFNULL(SUM(TOTAL_AMOUNT_PAID),0) AS TOTAL_AMOUNT_PAID
, IFNULL(SUM(TAX),0) AS TAX
, IFNULL(SUM(DISCOUNT),0) AS DISCOUNT
, IFNULL(SUM(AMOUNT_PAID_BY_TRANSACTION),0) AS AMOUNT_PAID_BY_TRANSACTION
, IFNULL(SUM(TOTAL_SHIPPING_COST),0) AS TOTAL_SHIPPING_COST
, IFNULL(SUM(SHIPPING_COST_WO_TAX),0) AS SHIPPING_COST_WO_TAX
, IFNULL(SUM(SHIPPING_COST_TAX),0) AS SHIPPING_COST_TAX
, IFNULL(SUM(AMOUNT_REFUNDED),0) AS AMOUNT_REFUNDED
, IFNULL(SUM(CREDIT_APPLIED),0) AS CREDIT_APPLIED
, case when sku ilike '%syn%' or sku ilike 'ds01%' then 'DS-01'
       when sku ilike '%pds%' then 'PDS-08'
       else null 
       end as product
, case when product = 'DS-01' and sku ilike '%wk%' then 'DS-01 Welcome Kit'
       when product = 'DS-01' and sku ilike '%rf' then 'DS-01 Refill'
       when product = 'DS-01' and sku ilike '%2mo%' then 'DS-01 Refill - 2 Months'
       when product = 'DS-01' and sku ilike '%3mo%' then 'DS-01 SRP Refill - 3 Months'
       when product = 'DS-01' and sku ilike '%6mo%' then 'DS-01 SRP Refill - 6 Months'
       when product = 'DS-01' and sku ilike '%trial%' then 'DS-01 Trial'
       when product = 'PDS-08' and sku ilike '%wk%' then 'PDS-08 Welcome Kit'
       when product = 'PDS-08' and sku ilike '%rf' then 'PDS-08 Refill'
       when product = 'PDS-08' and sku ilike '%2mo%' then 'PDS-08 Refill - 2 Months'
       when product = 'PDS-08' and sku ilike '%3mo%' then 'PDS-08 SRP Refill - 3 Months'
       when product = 'PDS-08' and sku ilike '%6mo%' then 'PDS-08 SRP Refill - 6 Months'
       when product = 'PDS-08' and sku ilike '%trial%' then 'PDS-08 Trial'
       else null 
       end as clean_sku

FROM complete 
group by 1,2,3,4,5,6,7,8,9,10,11;"
"V_ORDERS_REFUNDED","create or replace view ""SEED_DATA"".""DEV"".""V_ORDERS_REFUNDED"" as 


     select billed_date,
            invoice_number
            
            from
          (select 
            ORIGINAL_INVOICE_NUMBER as invoice_number,
            billed_date     
          from 
          ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i
          where INVOICE_TYPE = 'refund'
          
          union all
          
         select invoice_number as invoice_number,
                                  billed_date
         from  ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i
          where INVOICE_TYPE = 'refund')    order by 2 desc"
"V_ORDER_HISTORY_COGS_UPDATE","create or replace view SEED_DATA.DEV.V_ORDER_HISTORY_COGS_UPDATE(
	ORDER_DATE,
	ORDER_DATE_MONTH,
	PRODUCT,
	SUBSCRIPTION_ID,
    CUSTOMER_ID,
	SKU,
	INVOICE_REFUND_FLAG,
	QUANTITY,
	BASE_PRICE,
	TAX,
	DISCOUNT,
	AMOUNT_PAID_BY_TRANSACTION,
	TOTAL_SHIPPING_COST,
	SHIPPING_COST_WO_TAX,
	SHIPPING_COST_TAX,
	AMOUNT_REFUNDED,
	CREDIT_APPLIED,
	TOTAL_AMOUNT_PAID,
	COGS,
	TOTAL_AMOUNT_PAID_LESS_COGS,
	PRODUCT_MARGIN_PERC
) as 

/**** First build the orders data ****/
with orders as (

select 
  to_date(sku_adj.invoice_date) as order_date 
, date_trunc('month',to_date(sku_adj.invoice_date)) as order_date_month 
, o.subscription_id
, o.customer_id
, o.sku
, case when o.sku ilike '%syn%' or sku ilike 'ds01%' then 'DS-01'
       when o.sku ilike '%pds%' then 'PDS-08'
           else null end as product
-- accounting for Multi SKU
, case when sku ilike '%2mo%' then 2
       when sku ilike '%3mo%' then 3
       when sku ilike '%6mo%' then 6
       else 1 end as factor 
, ifnull(sum(o.quantity),0) as quantity
, ifnull(sum(o.base_price)/factor,0) as base_price
, ifnull(sum(o.total_amount_paid)/factor,0) as total_amount_paid
, ifnull(sum(o.tax)/factor,0) as tax
, ifnull(sum(o.discount)/factor,0) as discount
, ifnull(sum(o.amount_paid_by_transaction)/factor,0) as amount_paid_by_transaction
, ifnull(sum(o.total_shipping_cost)/factor,0) as total_shipping_cost
, ifnull(sum(o.shipping_cost_wo_tax)/factor,0) as shipping_cost_wo_tax
, ifnull(sum(o.shipping_cost_tax)/factor,0) as shipping_cost_tax
, ifnull(sum(o.amount_refunded)/factor,0) as amount_refunded
, ifnull(sum(o.credit_applied)/factor,0) as credit_applied

from SEED_DATA.DEV.ORDER_HISTORY as o 
    join SEED_DATA.DEV.V_ORDER_HISTORY_SKU_ADJUSTED as sku_adj on o.invoice_id = sku_adj.invoice_id and o.subscription_id = sku_adj.subscription_id -- Adding SKU adjusted table
where 
to_date(sku_adj.INVOICE_DATE) <= to_date(current_date()-1)
group by 1,2,3,4,5,6)



, orders_filter as (
select *
from orders
where amount_refunded < (total_amount_paid+total_shipping_cost) or amount_refunded = 0 -- filtering out for fully refunded invoices
) 



/**** Aggregare Orders Data ****/
, orders_agg as (
select 
  o.order_date_month
, o.product
, sum(o.quantity) as quantity
from orders_filter as o
group by 1,2
)


/**** Aggregare Orders Data Monhthly (excluding Product) ****/
, orders_agg_month as (
select 
  oa.order_date_month
, sum(oa.quantity) as quantity
from orders_agg as oa
group by 1
)

/**** Use above query to get perc of total quantity sold by product ****/
, orders_perc_total as (
select 
  oa.order_date_month
, oa.product
, sum(oa.quantity) as quantity
, DIV0NULL(sum(oa.quantity),sum(oam.quantity)) as perc_total_qty
from orders_agg as oa
left join orders_agg_month as oam
on oa.order_date_month = oam.order_date_month
where oa.product in ('DS-01','PDS-08')
group by 1,2
)

/**** Use above query to get perc of total quantity sold by product ****/
, orders_perc_total_agg as (
select 
  opt.order_date_month
, ifnull(max(case when opt.product = 'DS-01' then opt.perc_total_qty end ),0) as perc_total_qty_ds01
, ifnull(max(case when opt.product = 'DS-01' then 1-opt.perc_total_qty end ),0) as perc_total_qty_pds08
from orders_perc_total as opt
group by 1
)

/**** Bring in the COGS data ****/
, cogs as (
select 
  month_year
, case when account_no_name_org ilike '%DS-01%' THEN 'DS-01' 
     when account_no_name_org ilike '%PDS-08%' THEN 'PDS-08' 
     else null end as product
, sum(value) as cogs
from 
SEED_DATA.DEV.V_PROFIT_LOSS_MONTHLY
where ACCOUNT_GROUP in ('Product COGS','Non-Reoccurring COGS','Selling Expenses')
group by 1,2
)

/**** Model COGS data for non-product / product data ****/
, cogs_modeled as (
select
  month_year
, product 
, ifnull(sum(cogs),0) as cogs
from (
select
  c.month_year
, c.product
, ifnull(sum(c.cogs),0) as cogs
from cogs as c
where c.product in ('DS-01', 'PDS-08')
group by 1,2

union all

select
  c.month_year
, 'DS-01' as product
, sum(c.cogs)*max(opta.perc_total_qty_ds01) as cogs
from cogs as c
left join orders_perc_total_agg as opta
on c.month_year = opta.order_date_month
where c.product not in ('DS-01', 'PDS-08')
group by 1,2

union all 

select
  c.month_year
, 'PDS-08' as product
, sum(c.cogs)*max(opta.perc_total_qty_pds08) as cogs
from cogs as c
left join orders_perc_total_agg as opta
on c.month_year = opta.order_date_month
where c.product not in ('DS-01', 'PDS-08')
group by 1,2
) group by 1,2
)

/**** Aggregare COGS Data, join aggregate quantity data, and build COGS per Qty sold ****/
, cogs_agg as (
select 
  oa.order_date_month
, oa.product
, sum(oa.quantity) as quantity
, ifnull(sum(c.cogs),0) as cogs
, DIV0NULL(sum(c.cogs),sum(oa.quantity)) as total_cogs_per_qty
, ifnull(total_cogs_per_qty,avg(total_cogs_per_qty) over(partition by oa.product order by oa.order_date_month rows between 12 preceding and current row)) as total_cogs_per_qty_extra -- Extrapolating for missing data using 12 months moving average
from orders_agg as oa
left join cogs_modeled as c
on oa.order_date_month = c.month_year
and oa.product = c.product
where oa.product in ('DS-01', 'PDS-08')
group by 1,2
)


/**** Bring back data back at the order history / subscriber level and calculate COGS ****/
, orders_cogs_build as (
select 
  o.order_date_month
, o.order_date
, o.product
, o.subscription_id
, o.customer_id
, o.sku
, ifnull(sum(o.quantity),0) as quantity
, ifnull(sum(base_price),0) as base_price
, ifnull(sum(total_amount_paid),0) as total_amount_paid
, ifnull(sum(tax),0) as tax
, ifnull(sum(discount),0) as discount
, ifnull(sum(amount_paid_by_transaction),0) as amount_paid_by_transaction
, ifnull(sum(total_shipping_cost),0) as total_shipping_cost
, ifnull(sum(shipping_cost_wo_tax),0) as shipping_cost_wo_tax
, ifnull(sum(shipping_cost_tax),0) as shipping_cost_tax
, ifnull(sum(amount_refunded),0) as amount_refunded
, ifnull(sum(credit_applied),0) as credit_applied
, max(ca.total_cogs_per_qty_extra) * ifnull(sum(o.quantity),0) as cogs
, ifnull(sum(total_amount_paid),0) - (max(ca.total_cogs_per_qty_extra) * ifnull(sum(o.quantity),0)) as total_amount_paid_less_cogs


from
orders as o
left join cogs_agg as ca
on o.order_date_month = ca.order_date_month
and o.product = ca.product
group by 1,2,3,4,5,6
)



/**** Complete build and calculate LTV ****/
select 
  ocb.order_date
, ocb.order_date_month
, ocb.product
, ocb.subscription_id
, ocb.customer_id
, ocb.sku
, case when amount_refunded < (total_amount_paid+total_shipping_cost) or amount_refunded = 0 then 'not_fully_refunded' else 'fully_refunded' end as invoice_refund_flag
, ifnull(sum(ocb.quantity),0) as quantity
, ifnull(sum(base_price),0) as base_price
, ifnull(sum(tax),0) as tax
, ifnull(sum(discount),0) as discount
, ifnull(sum(amount_paid_by_transaction),0) as amount_paid_by_transaction
, ifnull(sum(total_shipping_cost),0) as total_shipping_cost
, ifnull(sum(shipping_cost_wo_tax),0) as shipping_cost_wo_tax
, ifnull(sum(shipping_cost_tax),0) as shipping_cost_tax
, ifnull(sum(amount_refunded),0) as amount_refunded
, ifnull(sum(credit_applied),0) as credit_applied
, ifnull(sum(total_amount_paid),0) as total_amount_paid
, ifnull(sum(ocb.cogs),0) as cogs
, ifnull(sum(ocb.total_amount_paid_less_cogs),0) as total_amount_paid_less_cogs ---- LTV
, DIV0NULL(sum(ocb.total_amount_paid_less_cogs),sum(ocb.total_amount_paid)) as product_margin_perc

from 
orders_cogs_build as ocb
--where ocb.order_date_month between '2023-06-01' and '2023-07-01'

group by 1,2,3,4,5,6,7
order by 1 desc;"
"V_ORDER_HISTORY_SKU_ADJUSTED","create or replace view SEED_DATA.DEV.V_ORDER_HISTORY_SKU_ADJUSTED(
	SUBSCRIPTION_ID,
	INVOICE_ID,
	INVOICE_DATE,
	INVOICED_QUANTITY,
	PRODUCT,
	SKU_CLEAN
) as

with all_orders as 
(
    with orders as 
    (    select subscription_id,
            invoice_id,
            row_number() over (partition by subscription_id order by invoice_date) as invoice_ranking,
            case when invoice_ranking > 1 then dateadd(day,2,invoice_date) else invoice_date end as invoice_date,
            quantity as invoiced_quantity,
            case when sku ilike '%syn%' or sku ilike 'ds01%' then 'DS-01'
                            when sku ilike '%pds%' then 'PDS-08'
                            else null end as product,
            case when sku ilike '%wk' then 'Welcome Kit'
                when sku ilike '%wk-3mo%' then 'Welcome kit - 3 Months'
                when sku ilike '%wk-6mo%' then 'Welcome kit - 6 Months'
                when sku ilike '%rf' then 'Refill'
                when sku ilike '%2mo%' then 'Refill - 2 Months'
                when sku ilike '%3mo%' then 'Refill - 3 Months'
                when SKU ilike '%6mo%' then 'Refill - 6 Months'
                else null end as sku_clean
        from SEED_DATA.DEV.V_ORDER_HISTORY
        where sku_clean is not null -- removing non mainstream sku
            --and base_price <> 0 and total_amount_paid <> 0  -- removing 0$ value and paid 0$ transactions
            and subscription_id is not null -- removing invoice with no subscription mapping
    ),
    
    recursive_months AS (
      SELECT
        subscription_id,
        invoice_id,
        DATEADD(day,1*30,invoice_date),
        invoiced_quantity,
        product,
        sku_clean
      FROM orders
      WHERE (sku_clean ilike '%2 Months%' or sku_clean ilike '%3 Months%' or sku_clean ilike '%6 Months%') and (DATEADD(MONTH,1,invoice_date) <= current_date())
    
      UNION ALL
    
     SELECT
        subscription_id,
        invoice_id,
        DATEADD(day,2*30,invoice_date),
        invoiced_quantity,
        product,
        sku_clean
      FROM orders
      WHERE (sku_clean ilike '%3 Months%' or sku_clean ilike '%6 Months%') and (DATEADD(MONTH,2,invoice_date) <= current_date())
      
      UNION ALL
    
     SELECT
        subscription_id,
        invoice_id,
        DATEADD(day,3*30,invoice_date),
        invoiced_quantity,
        product,
        sku_clean
      FROM orders
      WHERE sku_clean ilike '%6 Months%' and (DATEADD(MONTH,3,invoice_date) <= current_date())
    
       UNION ALL
    
     SELECT
        subscription_id,
        invoice_id,
        DATEADD(day,4*30,invoice_date),
        invoiced_quantity,
        product,
        sku_clean
      FROM orders
      WHERE sku_clean ilike '%6 Months%' and (DATEADD(MONTH,4,invoice_date) <= current_date())
    
       UNION ALL
    
     SELECT
        subscription_id,
        invoice_id,
        DATEADD(day,5*30,invoice_date),
        invoiced_quantity,
        product,
        sku_clean
      FROM orders
      WHERE sku_clean ilike '%6 Months%' and (DATEADD(MONTH,5,invoice_date) <= current_date())
    )
    
    
    SELECT subscription_id,invoice_id,invoice_date,invoiced_quantity,product,sku_clean 
    FROM orders
    UNION ALL 
    select *
    from recursive_months
)

select * from all_orders;"
"V_PAUSED_CANCELED_SUBSCRIBER_ANALYSIS","create or replace view SEED_DATA.DEV.V_PAUSED_CANCELED_SUBSCRIBER_ANALYSIS as 

with pause as 
(
select 
    subscription_uuid,
    version_started_at_ts as event_date,
    'paused' as flag,
    row_number() over(partition by subscription_uuid order by version_started_at) as pause_number
    from SEED_DATA.DEV.SUBSCRIPTION_PAUSE_HISTORY
qualify pause_number = 1
)

,cancel as 
(
 select recurly_subscription_id as subscription_id,
     cancelled_at as event_date,
     case when was_previously_paused = 'Y' then 'paused_cancel'
         else 'cancel' end as flag
 from seed_data.dev.subscription_master
 where cancelled_at is not null and recurly_subscription_id is not null --and reactivation_flag = 0
)

,pause_and_cancel as 
(
select coalesce(subscription_id,subscription_uuid) as subscription_id,
    max(case when pause.event_date is null then cancel.event_date
        when cancel.event_date is null then pause.event_date
        when pause.event_date <= cancel.event_date then pause.event_date
        else cancel.event_date
        end) as event_date,
    max(case when pause.flag is null and cancel.flag = 'cancel' and to_date(cancel.event_date) >= '2023-09-01' then 'cancel_after_pause_was_decontinued'
        when pause.flag is null and cancel.flag = 'cancel' and to_date(cancel.event_date) >= '2023-03-01' and to_date(cancel.event_date) < '2023-09-01' then 'cancel_after_pause_was_introduced'
        when pause.flag is null and cancel.flag = 'cancel' and to_date(cancel.event_date) < '2023-03-01' then 'cancel_before_pause_was_introduced'
        when pause.flag is null and cancel.flag = 'paused_cancel' then 'pause_in_future_but_cancel'
        when pause.flag = 'paused' and cancel.flag = 'paused_cancel' then 'pause_in_effect_but_cancel'
        when pause.flag = 'paused' and (cancel.flag is null or cancel.flag = 'cancel') then 'paused' 
        end) as event_flag
from cancel full outer join pause on cancel.subscription_id = pause.subscription_uuid
group by 1
)


, cohort as 
(
    select pc.subscription_id as subscription_uuid,
        sub.customer_id,
        to_date(sub.activated_at) as activation_date,
        date_trunc(year,activation_date) as activation_year,
        date_trunc(month,activation_date) as activation_month_year,
        date_trunc(quarter,activation_date) as activation_quarter,
        case when activation_year = '2018-01-01' then '2018'
        when activation_year = '2019-01-01' then '2019'
        when activation_year = '2020-01-01' then '2020'
        when activation_year = '2021-01-01' and activation_quarter = '2021-01-01' then '2021 Q1'
        when activation_year = '2021-01-01' and activation_quarter = '2021-04-01' then '2021 Q2'
        when activation_year = '2021-01-01' and activation_quarter = '2021-07-01' then '2021 Q3'
        when activation_year = '2021-01-01' and activation_quarter = '2021-10-01' then '2021 Q4'
        when activation_year = '2022-01-01' and activation_quarter = '2022-01-01' then '2022 Q1'
        when activation_year = '2022-01-01' and activation_quarter = '2022-04-01' then '2022 Q2'
        when activation_year = '2022-01-01' and activation_quarter = '2022-07-01' then '2022 Q3'
        when activation_year = '2022-01-01' and activation_quarter = '2022-10-01' then '2022 Q4'
        when activation_year = '2023-01-01' and activation_month_year = '2023-01-01' then '2023-01'
        when activation_year = '2023-01-01' and activation_month_year = '2023-02-01' then '2023-02'
        when activation_year = '2023-01-01' and activation_month_year = '2023-03-01' then '2023-03'
        when activation_year = '2023-01-01' and activation_month_year = '2023-04-01' then '2023-04'
        when activation_year = '2023-01-01' and activation_month_year = '2023-05-01' then '2023-05'
        when activation_year = '2023-01-01' and activation_month_year = '2023-06-01' then '2023-06'
        when activation_year = '2023-01-01' and activation_month_year = '2023-07-01' then '2023-07'
        when activation_year = '2023-01-01' and activation_month_year = '2023-08-01' then '2023-08' end as activation_flag,
        sub.first_product as product,
        sub.first_discount_percentage_base_price as first_discount_percentage,
        case when first_discount_percentage = 0 then '0'
            when first_discount_percentage = 10 then '10'
            when first_discount_percentage > 10 and first_discount_percentage <= 15 then '11-15'
            when first_discount_percentage > 15 and first_discount_percentage <= 20 then '16-20'
            when first_discount_percentage > 20 and first_discount_percentage <= 25 then '21-25'
            when first_discount_percentage > 25 and first_discount_percentage <= 30 then '26-30'
            when first_discount_percentage > 30 and first_discount_percentage <= 40 then '31-40'
            when first_discount_percentage > 40 and first_discount_percentage <= 50 then '41-50'
            when first_discount_percentage > 50 then '50+' end as discount_category,
        channel_grouping,
        channel_platform,
        checkout_survey_response,
        pc.event_date,
        pc.event_flag
    from pause_and_cancel as pc left join 
        seed_data.dev.subscription_master as sub on pc.subscription_id = sub.recurly_subscription_id
)



, pause_no_cancel_activity as 
        ( with pause_no_cancel_cohort as 
            (
                select p.subscription_uuid,
                    (o.Total_amount_paid_less_cogs + o.TOTAL_SHIPPING_COST - o.AMOUNT_REFUNDED) as ltv,
                    o.amount_paid_by_transaction as revenue,
                    row_number() over (partition by subscription_id order by order_date) as invoice_rank,
                    floor((datediff(day,to_date(p.event_date),to_date(order_date)))/30) as order_since_pause_days
                from cohort as p
                    left join SEED_DATA.DEV.V_ORDER_HISTORY_COGS_UPDATE as o on p.subscription_uuid = o.subscription_id
                where order_date >= p.event_date and event_flag ilike 'pause%'
            
            )
            select subscription_uuid, 
                max(case when order_since_pause_days = 0 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_0to30_resume,
                max(case when order_since_pause_days = 1 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_31to60_resume,
                max(case when order_since_pause_days = 2 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_61to90_resume,
                max(case when order_since_pause_days = 3 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_91to120_resume,
                max(case when order_since_pause_days = 4 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_121to150_resume,
                max(case when order_since_pause_days = 5 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_151to180_resume,
                max(case when order_since_pause_days = 0 then 1 else 0 end) as rebill_days_0to30_resume,
                max(case when order_since_pause_days = 1 then 1 else 0 end) as rebill_days_31to60_resume,
                max(case when order_since_pause_days = 2 then 1 else 0 end) as rebill_days_61to90_resume,
                max(case when order_since_pause_days = 3 then 1 else 0 end) as rebill_days_91to120_resume,
                max(case when order_since_pause_days = 4 then 1 else 0 end) as rebill_days_121to150_resume,
                max(case when order_since_pause_days = 5 then 1 else 0 end) as rebill_days_151to180_resume,
                sum(case when order_since_pause_days = 0 then ltv else 0 end) as ltv_days_0to30_resume,
                sum(case when order_since_pause_days = 1 then ltv else 0 end) as ltv_days_31to60_resume,
                sum(case when order_since_pause_days = 2 then ltv else 0 end) as ltv_days_61to90_resume,
                sum(case when order_since_pause_days = 3 then ltv else 0 end) as ltv_days_91to120_resume,
                sum(case when order_since_pause_days = 4 then ltv else 0 end) as ltv_days_121to150_resume,
                sum(case when order_since_pause_days = 5 then ltv else 0 end) as ltv_days_151to180_resume,
                sum(case when order_since_pause_days = 0 then revenue else 0 end) as revenue_days_0to30_resume,
                sum(case when order_since_pause_days = 1 then revenue else 0 end) as revenue_days_31to60_resume,
                sum(case when order_since_pause_days = 2 then revenue else 0 end) as revenue_days_61to90_resume,
                sum(case when order_since_pause_days = 3 then revenue else 0 end) as revenue_days_91to120_resume,
                sum(case when order_since_pause_days = 4 then revenue else 0 end) as revenue_days_121to150_resume,
                sum(case when order_since_pause_days = 5 then revenue else 0 end) as revenue_days_151to180_resume

            from pause_no_cancel_cohort
            group by 1
         )
         
,pause_cancel_activity as 
        (
            with pause_cancel_cohort as 
            (
                select p.subscription_uuid as sub_id,
                    (o.Total_amount_paid_less_cogs + o.TOTAL_SHIPPING_COST - o.AMOUNT_REFUNDED) as ltv,
                    o.amount_paid_by_transaction as revenue,
                    row_number() over (partition by subscription_id order by order_date) as invoice_rank,
                    floor((datediff(day,to_date(p.event_date),to_date(order_date)))/30) as order_since_pause_days
                from cohort as p
                    left join SEED_DATA.DEV.V_ORDER_HISTORY_COGS_UPDATE as o on p.customer_id = o.customer_id
                    left join seed_data.dev.subscription_master as s on o.subscription_id = s.RECURLY_SUBSCRIPTION_ID
                where order_date >= p.event_date and s.activated_at >= p.event_date
            )

            select sub_id, 
                max(case when order_since_pause_days = 0 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_0to30_Reactivate,
                max(case when order_since_pause_days = 1 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_31to60_Reactivate,
                max(case when order_since_pause_days = 2 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_61to90_Reactivate,
                max(case when order_since_pause_days = 3 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_91to120_Reactivate,
                max(case when order_since_pause_days = 4 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_121to150_Reactivate,
                max(case when order_since_pause_days = 5 and invoice_rank = 1 then 1 else 0 end) as first_rebill_days_151to180_Reactivate,
                max(case when order_since_pause_days = 0 then 1 else 0 end) as rebill_days_0to30_Reactivate,
                max(case when order_since_pause_days = 1 then 1 else 0 end) as rebill_days_31to60_Reactivate,
                max(case when order_since_pause_days = 2 then 1 else 0 end) as rebill_days_61to90_Reactivate,
                max(case when order_since_pause_days = 3 then 1 else 0 end) as rebill_days_91to120_Reactivate,
                max(case when order_since_pause_days = 4 then 1 else 0 end) as rebill_days_121to150_Reactivate,
                max(case when order_since_pause_days = 5 then 1 else 0 end) as rebill_days_151to180_Reactivate,
                sum(case when order_since_pause_days = 0 then ltv else 0 end) as ltv_days_0to30_Reactivate,
                sum(case when order_since_pause_days = 1 then ltv else 0 end) as ltv_days_31to60_Reactivate,
                sum(case when order_since_pause_days = 2 then ltv else 0 end) as ltv_days_61to90_Reactivate,
                sum(case when order_since_pause_days = 3 then ltv else 0 end) as ltv_days_91to120_Reactivate,
                sum(case when order_since_pause_days = 4 then ltv else 0 end) as ltv_days_121to150_Reactivate,
                sum(case when order_since_pause_days = 5 then ltv else 0 end) as ltv_days_151to180_Reactivate,
                sum(case when order_since_pause_days = 0 then revenue else 0 end) as revenue_days_0to30_Reactivate,
                sum(case when order_since_pause_days = 1 then revenue else 0 end) as revenue_days_31to60_Reactivate,
                sum(case when order_since_pause_days = 2 then revenue else 0 end) as revenue_days_61to90_Reactivate,
                sum(case when order_since_pause_days = 3 then revenue else 0 end) as revenue_days_91to120_Reactivate,
                sum(case when order_since_pause_days = 4 then revenue else 0 end) as revenue_days_121to150_Reactivate,
                sum(case when order_since_pause_days = 5 then revenue else 0 end) as revenue_days_151to180_Reactivate
            from pause_cancel_cohort
            group by 1
        )

/*, activity as 
(
        select coalesce(pc.sub_id,pnc.subscription_uuid) as subscription_id, 
             greatest(coalesce(first_rebill_days_0to30_resume,0),coalesce(first_rebill_days_0to30_Reactivate,0)) as first_rebill_days_0to30,
             greatest(coalesce(first_rebill_days_31to60_resume,0),coalesce(first_rebill_days_31to60_Reactivate,0)) as first_rebill_days_31to60,
             greatest(coalesce(first_rebill_days_61to90_resume,0),coalesce(first_rebill_days_61to90_Reactivate,0)) as first_rebill_days_61to90,
             greatest(coalesce(first_rebill_days_91to120_resume,0),coalesce(first_rebill_days_91to120_Reactivate,0)) as first_rebill_days_91to120,
             greatest(coalesce(first_rebill_days_121to150_resume,0),coalesce(first_rebill_days_121to150_Reactivate,0)) as first_rebill_days_121to150,
             greatest(coalesce(first_rebill_days_151to180_resume,0),coalesce(first_rebill_days_151to180_Reactivate,0)) as first_rebill_days_151to180,
             greatest(coalesce(rebill_days_0to30_resume,0),coalesce(rebill_days_0to30_Reactivate,0)) as rebill_days_0to30,
             greatest(coalesce(rebill_days_31to60_resume,0),coalesce(rebill_days_31to60_Reactivate,0)) as rebill_days_31to60,
             greatest(coalesce(rebill_days_61to90_resume,0),coalesce(rebill_days_61to90_Reactivate,0)) as rebill_days_61to90,
             greatest(coalesce(rebill_days_91to120_resume,0),coalesce(rebill_days_91to120_Reactivate,0)) as rebill_days_91to120,
             greatest(coalesce(rebill_days_121to150_resume,0),coalesce(rebill_days_121to150_Reactivate,0)) as rebill_days_121to150,
             greatest(coalesce(rebill_days_151to180_resume,0),coalesce(rebill_days_151to180_Reactivate,0)) as rebill_days_151to180
        from pause_cancel_activity as pc
             full join pause_no_cancel_activity as pnc on pc.sub_id = pnc.subscription_uuid
        group by 1
     

)   
*/


select c.*,
    pnc.first_rebill_days_0to30_resume, pnc.first_rebill_days_31to60_resume, pnc.first_rebill_days_61to90_resume,
    pnc.first_rebill_days_91to120_resume, pnc.first_rebill_days_121to150_resume, pnc.first_rebill_days_151to180_resume,
    pnc.rebill_days_0to30_resume, pnc.rebill_days_31to60_resume,pnc.rebill_days_61to90_resume,
    pnc.rebill_days_91to120_resume, pnc.rebill_days_121to150_resume, pnc.rebill_days_151to180_resume,
    pnc.ltv_days_0to30_resume,pnc.ltv_days_31to60_resume,pnc.ltv_days_61to90_resume,
    pnc.ltv_days_91to120_resume,pnc.ltv_days_121to150_resume,pnc.ltv_days_151to180_resume,
    pnc.revenue_days_0to30_resume,pnc.revenue_days_31to60_resume,pnc.revenue_days_61to90_resume,
    pnc.revenue_days_91to120_resume,pnc.revenue_days_121to150_resume,pnc.revenue_days_151to180_resume,
    pc.first_rebill_days_0to30_Reactivate, pc.first_rebill_days_31to60_Reactivate, pc.first_rebill_days_61to90_Reactivate,
    pc.first_rebill_days_91to120_Reactivate, pc.first_rebill_days_121to150_Reactivate, pc.first_rebill_days_151to180_Reactivate,
    pc.rebill_days_0to30_Reactivate, pc.rebill_days_31to60_Reactivate,pc.rebill_days_61to90_Reactivate,
    pc.rebill_days_91to120_Reactivate, pc.rebill_days_121to150_Reactivate, pc.rebill_days_151to180_Reactivate,
    pc.ltv_days_0to30_Reactivate,pc.ltv_days_31to60_Reactivate,pc.ltv_days_61to90_Reactivate,
    pc.ltv_days_91to120_Reactivate,pc.ltv_days_121to150_Reactivate,pc.ltv_days_151to180_Reactivate,
    pc.revenue_days_0to30_Reactivate,pc.revenue_days_31to60_Reactivate,pc.revenue_days_61to90_Reactivate,
    pc.revenue_days_91to120_Reactivate,pc.revenue_days_121to150_Reactivate,pc.revenue_days_151to180_Reactivate,
    greatest(coalesce(first_rebill_days_0to30_resume,0),coalesce(first_rebill_days_0to30_Reactivate,0)) as first_rebill_days_0to30,
    greatest(coalesce(first_rebill_days_31to60_resume,0),coalesce(first_rebill_days_31to60_Reactivate,0)) as first_rebill_days_31to60,
    greatest(coalesce(first_rebill_days_61to90_resume,0),coalesce(first_rebill_days_61to90_Reactivate,0)) as first_rebill_days_61to90,
    greatest(coalesce(first_rebill_days_91to120_resume,0),coalesce(first_rebill_days_91to120_Reactivate,0)) as first_rebill_days_91to120,
    greatest(coalesce(first_rebill_days_121to150_resume,0),coalesce(first_rebill_days_121to150_Reactivate,0)) as first_rebill_days_121to150,
    greatest(coalesce(first_rebill_days_151to180_resume,0),coalesce(first_rebill_days_151to180_Reactivate,0)) as first_rebill_days_151to180,
    greatest(coalesce(rebill_days_0to30_resume,0),coalesce(rebill_days_0to30_Reactivate,0)) as rebill_days_0to30,
    greatest(coalesce(rebill_days_31to60_resume,0),coalesce(rebill_days_31to60_Reactivate,0)) as rebill_days_31to60,
    greatest(coalesce(rebill_days_61to90_resume,0),coalesce(rebill_days_61to90_Reactivate,0)) as rebill_days_61to90,
    greatest(coalesce(rebill_days_91to120_resume,0),coalesce(rebill_days_91to120_Reactivate,0)) as rebill_days_91to120,
    greatest(coalesce(rebill_days_121to150_resume,0),coalesce(rebill_days_121to150_Reactivate,0)) as rebill_days_121to150,
    greatest(coalesce(rebill_days_151to180_resume,0),coalesce(rebill_days_151to180_Reactivate,0)) as rebill_days_151to180,
    (coalesce(pnc.ltv_days_0to30_resume,0) + coalesce(pc.ltv_days_0to30_Reactivate,0)) as  ltv_days_0to30,
    (coalesce(pnc.ltv_days_31to60_resume,0) + coalesce(pc.ltv_days_31to60_Reactivate,0)) as ltv_days_31to60,
    (coalesce(pnc.ltv_days_61to90_resume,0) + coalesce(pc.ltv_days_61to90_Reactivate,0)) as ltv_days_61to90,
    (coalesce(pnc.ltv_days_91to120_resume,0) + coalesce(pc.ltv_days_91to120_Reactivate,0)) as ltv_days_91to120,
    (coalesce(pnc.ltv_days_121to150_resume,0) + coalesce(pc.ltv_days_121to150_Reactivate,0)) as ltv_days_121to150,
    (coalesce(pnc.ltv_days_151to180_resume,0) + coalesce(pc.ltv_days_151to180_Reactivate,0)) as ltv_days_151to180,
    (coalesce(pnc.revenue_days_0to30_resume,0) + coalesce(pc.revenue_days_0to30_Reactivate,0)) as  revenue_days_0to30,
    (coalesce(pnc.revenue_days_31to60_resume,0) + coalesce(pc.revenue_days_31to60_Reactivate,0)) as revenue_days_31to60,
    (coalesce(pnc.revenue_days_61to90_resume,0) + coalesce(pc.revenue_days_61to90_Reactivate,0)) as revenue_days_61to90,
    (coalesce(pnc.revenue_days_91to120_resume,0) + coalesce(pc.revenue_days_91to120_Reactivate,0)) as revenue_days_91to120,
    (coalesce(pnc.revenue_days_121to150_resume,0) + coalesce(pc.revenue_days_121to150_Reactivate,0)) as revenue_days_121to150,
    (coalesce(pnc.revenue_days_151to180_resume,0) + coalesce(pc.revenue_days_151to180_Reactivate,0)) as revenue_days_151to180
    
from cohort  as c
    left join pause_no_cancel_activity as pnc on c.subscription_uuid = pnc.subscription_uuid
    left join pause_cancel_activity as pc on c.subscription_uuid = pc.sub_id;"
"V_RECURLY_ORDER_HISTORY","create or replace view SEED_DATA.DEV.V_RECURLY_ORDER_HISTORY as 

with recurly_rev as
(
with non_shipping_rev as (
select 
  i.id as invoice_id
, i.invoice_number
, t.transaction_id as transaction_id
, i.account_code as customer_id
, a.subscription_id as subscription_id
, i.billed_date as invoice_date
, coalesce(t.date,invoice_closed_at) as paid_date 
--- ^^ Note not all invoices need to have paid date as they could be paid from credits, hence invoice_closed_at
, adjustment_plan_code as sku
, adjustment_description as sku_description
, adjustment_quantity as quantity
, a.adjustment_amount as base_price
, a.adjustment_total as total_amount_paid
, a.adjustment_tax as tax
, a.adjustment_discount as discount
, a.adjustment_coupon_code as promotion_code
, DIV0((base_price*quantity),(sum(base_price*quantity)) over(partition by i.id)) as norm_factor
--, (base_price*quantity)/(sum(base_price*quantity) over(partition by i.id)) as norm_factor
, round((t.amount*norm_factor),2) as amount_paid_by_transaction

from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i
left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t on i.id = t.invoice_id
left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on i.id = a.invoice_id
where (i.status = 'paid' or (i.invoice_type = 'immediate_change' and invoice_total > 0)) -- Accounting for adjusted invoices
and (t.status is null or(t.status = 'success' and t.type = 'purchase'))
and not id = '5ac475d833aa768239e223479eb1bdd6' -- This user has 6 successfully paid transactions for 1 invoice number
and adjustment_description not ilike '%shipping%'
--and i.invoice_number = 1488259
),

shipping_rev as
(
select 
  i.id as invoice_id
, sum(a.adjustment_total) as total_shipping_cost
, sum(a.adjustment_amount) as shipping_cost_wo_tax
, sum(a.adjustment_tax) as shipping_cost_tax
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as i
left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""TRANSACTIONS"" as t on i.id = t.invoice_id
left join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a on i.id = a.invoice_id
where i.status = 'paid' and (t.status is null or(t.status = 'success' and t.type = 'purchase'))
and not id = '5ac475d833aa768239e223479eb1bdd6' -- This user has 6 successfully paid transactions for 1 invoice number
and  adjustment_description ilike '%shipping%'
group by 1
),

refund_rev as
(
select 
  original_invoice_number as applied_to_invoice_number
, sum(abs(invoice_total)) as refunded_amount
from IO06230_RECURLY_SEED_SHARE.CLASSIC.INVOICES_SUMMARY as i
where 
((i.invoice_type = 'termination' or i.invoice_type = 'refund') and i.status in ('closed','open')) 
or 
(i.invoice_type = 'immediate_change' and i.status in ('closed','open') and invoice_total < 0)
group by 1
),

credit_rev as
(
select 
  applied_to_invoice_number as applied_to_invoice_number
, sum(amount) as credit_amount
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""CREDIT_PAYMENTS""
where action = 'payment'
group by 1
),

final_table as
(
select 
  nsr.*
, round((sr.total_shipping_cost*norm_factor),2) as total_shipping_cost
, round((sr.shipping_cost_wo_tax*norm_factor),2) as shipping_cost_wo_tax
, round((sr.shipping_cost_tax*norm_factor),2) as shipping_cost_tax
, round((rr.refunded_amount*norm_factor),2) as amount_refunded
, round((cr.credit_amount*norm_factor),2) as credit_applied
from non_shipping_rev as nsr
left join shipping_rev as sr on nsr.invoice_id = sr.invoice_id
left join refund_rev as rr on nsr.invoice_number = rr.applied_to_invoice_number
left join credit_rev as cr on nsr.invoice_number = cr.applied_to_invoice_number
)
select * from final_table
)

select * from recurly_rev;"
"V_REPLACEMENT_HISTORY","create or replace view SEED_DATA.DEV.V_REPLACEMENT_HISTORY(
	INVOICE_ID,
	INVOICE_NUMBER,
	SKU_DESCRIPTION,
	ADJUSTMENT_PLAN_CODE,
	SKU,
	ITEM_DESCRIPTION,
	INVOICE_DATE,
    ORDER_SHIPPED_DATE,
   replacement_flag,
	TOTAL_DISCOUNT,
	TOTAL_TAX,
	TOTAL_ADJ_PRICE,
	BASE_PRICE,
	TOTAL_QUANTITY
) as 

with base as(
select 
      invoice_id
    , invoice_number
    , ADJUSTMENT_DESCRIPTION as SKU_DESCRIPTION
    , adjustment_plan_code
    , CASE when sku_description ilike '%Daily Synbiotic' then 'syn-wk'
        when sku_description ilike '%Daily Synbiotic—Refill' then 'syn-rf'
        when sku_description ilike '%Daily Synbiotic—Refill (2 month)%' then 'syn-rf-2mo'
        when sku_description ilike '%Daily Synbiotic—Refill (3 month)%' then 'syn-rf-3mo'
        when sku_description ilike '%Daily Synbiotic—Refill (6 month)%' then 'syn-rf-6mo'
        when sku_description ilike '%Pediatric Daily Synbiotic' then 'pds-wk'
        when sku_description ilike '%Pediatric Daily Synbiotic—Refill' then 'pds-rf'
        when sku_description ilike '%Pediatric Daily Synbiotic—Refill (2 month)' then 'pds-rf-2mo'
        else 'others' end as SKU
    , case when adjustment_description ilike '%Gift%' then 'N'
           when adjustment_description iLIKE '%Trial%' then 'N'
           when adjustment_description iLIKE'%Preorder%' then 'N'
           else 'Y' end as replacement_flag
    , adjustment_tax_code as item_description
    , to_date(ADJUSTMENT_CREATED_AT) as INVOICE_DATE
    , adjustment_discount as total_discount
    , adjustment_tax as total_tax
    , adjustment_total as total_adj_price
    , adjustment_amount as base_price
    , adjustment_quantity as total_quantity

from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS""
where adjustment_amount = 0
  and  ADJUSTMENT_ORIGIN  not ilike 'shipping%' 
  
  ),

shipping as
( select 
 distinct split_part(order_number, '-',  2) as order_number,
 order_shipped_date
 
 from ""SEED_DATA"".""DEV"".""SHIPMENT_HISTORY""

)

select 
    base.INVOICE_ID,
	base.INVOICE_NUMBER,
	base.SKU_DESCRIPTION,
	base.ADJUSTMENT_PLAN_CODE,
	base.SKU,
	base.ITEM_DESCRIPTION,
	base.INVOICE_DATE,
    ORDER_SHIPPED_DATE,
    base.replacement_flag,
	base.TOTAL_DISCOUNT,
	base.TOTAL_TAX,
	base.TOTAL_ADJ_PRICE,
	base.BASE_PRICE,
	base.TOTAL_QUANTITY


from base
left join shipping on base.invoice_number = shipping.order_number"
"V_RETENTION_WATERFALL_BRIDGE","create or replace view SEED_DATA.DEV.V_RETENTION_WATERFALL_BRIDGE as 

with date_range as								
(								
select								
date								
from seed_data.dev.dim_date								
where year in (2023) and month <= 9  and day = 1								
)								
								
								
,    all_orders as								
(								
with orders as								
(    select subscription_id,								
invoice_id,								
invoice_date,								
quantity as invoiced_quantity,								
case when sku ilike '%syn%' or sku ilike 'ds01%' then 'DS-01'								
when sku ilike '%pds%' then 'PDS-08'								
else null end as product,								
case when sku ilike '%wk' then 'Welcome Kit'								
when sku ilike '%wk-3mo%' then 'Welcome kit - 3 Months'								
when sku ilike '%wk-6mo%' then 'Welcome kit - 6 Months'								
when sku ilike '%rf' then 'Refill'								
when sku ilike '%2mo%' then 'Refill - 2 Months'								
when sku ilike '%3mo%' then 'Refill - 3 Months'								
when SKU ilike '%6mo%' then 'Refill - 6 Months'								
else null end as sku_clean,								
'Billed' as bill_flag,								
case when bill_flag = 'Billed' and sku_clean ilike '%2 Months' then dateadd(day,60,invoice_date)								
when bill_flag = 'Billed' and sku_clean ilike '%3 Months' then dateadd(day,90,invoice_date)								
when bill_flag = 'Billed' and sku_clean ilike '%6 Months' then dateadd(day,180,invoice_date)								
when bill_flag = 'Billed' then dateadd(day,30,invoice_date)								
else null end as potential_bill_date								
from SEED_DATA.DEV.ORDER_HISTORY								
where sku_clean is not null -- removing non mainstream sku								
--and base_price <> 0 and total_amount_paid <> 0  -- removing 0$ value and paid 0$ transactions								
and subscription_id is not null -- removing invoice with no subscription mapping								
),								
								
recursive_months AS (								
SELECT								
subscription_id,								
invoice_id,								
DATEADD(day,1*30,invoice_date),								
invoiced_quantity,								
product,								
sku_clean,								
'Proxy' as bill_flag,								
'2099-01-01' as potential_bill_date								
FROM orders								
WHERE (sku_clean ilike '%2 Months%' or sku_clean ilike '%3 Months%' or sku_clean ilike '%6 Months%') and (DATEADD(day,1*30,invoice_date) <= current_date())								
								
UNION ALL								
								
SELECT								
subscription_id,								
invoice_id,								
DATEADD(day,2*30,invoice_date),								
invoiced_quantity,								
product,								
sku_clean,								
'Proxy' as bill_flag,								
'2099-01-01' as potential_bill_date								
FROM orders								
WHERE (sku_clean ilike '%3 Months%' or sku_clean ilike '%6 Months%') and (DATEADD(day,2*30,invoice_date) <= current_date())								
								
UNION ALL								
								
SELECT								
subscription_id,								
invoice_id,								
DATEADD(day,3*30,invoice_date),								
invoiced_quantity,								
product,								
sku_clean,								
'Proxy' as bill_flag,								
'2099-01-01' as potential_bill_date								
FROM orders								
WHERE sku_clean ilike '%6 Months%' and (DATEADD(day,3*30,invoice_date) <= current_date())								
								
UNION ALL								
								
SELECT								
subscription_id,								
invoice_id,								
DATEADD(day,4*30,invoice_date),								
invoiced_quantity,								
product,								
sku_clean,								
'Proxy' as bill_flag,								
'2099-01-01' as potential_bill_date								
FROM orders								
WHERE sku_clean ilike '%6 Months%' and (DATEADD(day,4*30,invoice_date) <= current_date())								
								
UNION ALL								
								
SELECT								
subscription_id,								
invoice_id,								
DATEADD(day,5*30,invoice_date),								
invoiced_quantity,								
product,								
sku_clean,								
'Proxy' as bill_flag,								
'2099-01-01' as potential_bill_date								
FROM orders								
WHERE sku_clean ilike '%6 Months%' and (DATEADD(day,5*30,invoice_date) <= current_date())								
)								
								
								
SELECT subscription_id,invoice_id,invoice_date,invoiced_quantity,product,sku_clean,bill_flag, potential_bill_date								
FROM orders								
UNION ALL								
select *								
from recursive_months								
)								
								
								
, transaction as								
(								
select dr.date ,								
o.subscription_id as subscription_id,								
to_date(s.activated_at) as subscription_start_date,								
reactivation_flag,								
to_date(invoice_date) as invoice_date,								
bill_flag,								
case when date_trunc('month',to_date(s.activated_at)) = date_trunc('month',to_date(invoice_date)) then 'New' else 'Recurring' end as sub_flag								
from all_orders as o								
left join seed_data.dev.subscription_master as s on o.subscription_id = s.recurly_subscription_id								
cross join date_range as dr								
where to_date(invoice_date) >= dr.date and to_date(invoice_date) < add_months(dr.date,1)								
)								
								
, pause_history as								
(								
select dr.date,								
subscription_uuid,								
case when date_trunc('month',version_started_at) = dr.date then 'new'								
when date_trunc('month',version_ended_at_clean) = dr.date then 'expired'								
else 'retained' end as pause_flag								
from seed_data.dev.subscription_pause_history								
cross join date_range as dr								
where (version_started_at < add_months(dr.date,1)) and								
(version_ended_at_clean is null or date_trunc('month',version_ended_at_clean) >= dr.date) and								
(version_ended_at_clean is null or (date_trunc('month',version_started_at) != date_trunc('month',version_ended_at_clean)))								
)								
								
, cancel as								
(								
select dr.date,								
recurly_subscription_id as sub_id,								
'cancel' as cancel_flag								
from seed_data.dev.subscription_master								
cross join date_range as dr								
where cancelled_at >= dr.date and cancelled_at < add_months(dr.date,1)								
)								
, retain_cancel as								
(								
select dr.date,								
count(distinct recurly_subscription_id) as cancel_retained_count								
from seed_data.dev.subscription_master								
cross join date_range as dr								
where cancelled_at < dr.date								
and activated_at = last_subscription_date								
group by 1								
order by 1								
)								
								
, eligible_subscribers as								
(								
with all_order_sub as								
(								
select *								
from all_orders as o								
left join seed_data.dev.subscription_master as s on o.subscription_id = s.recurly_subscription_id								
order by invoice_date desc								
)								
								
select dr.date as eligible_date,								
count(distinct case when sku_clean ilike '%2 Months' then subscription_id end) as subscriber_count_refill_2mo,								
count(distinct case when sku_clean ilike '%3 Months' then subscription_id end) as subscriber_count_refill_3mo,								
count(distinct case when sku_clean ilike '%6 Months' then subscription_id end) as subscriber_count_refill_6mo,								
count(distinct case when sku_clean ilike 'Welcome Kit' or sku_clean ilike 'Refill' then subscription_id end) as subscriber_count_refill								
from all_order_sub as es								
cross join date_range as dr								
where to_date(potential_bill_date) >= dr.date and to_date(potential_bill_date) < add_months(dr.date,1) and								
(to_date(pause_start_date) >= dr.date or pause_start_date is null) and								
(to_date(cancelled_at) >= dr.date or cancelled_at is null)								
group by 1								
order by 1								
								
)								
								
								
/*								
select t.date,bill_flag,sub_flag,reactivation_flag,pause_flag,cancel_flag,								
count(distinct case when pause_flag is null and cancel_flag is null then subscription_id								
when pause_flag is null then sub_id else subscription_uuid end) as sub_count								
from transaction as t								
full join pause_history as p on t.date = p.date and t.subscription_id = p.subscription_uuid								
full join cancel as c on c.date = t.date and c.sub_id = t.subscription_id								
group by 1,2,3,4,5,6								
order by 7 desc								
*/								
, all_agg_table as								
(								
select coalesce(t.date,p.date,c.date) as date,								
--- Billed								
count(distinct case when bill_flag = 'Billed' and sub_flag = 'Recurring' and (pause_flag = 'new' or pause_flag is null) then subscription_id end) as total_billed,								
count(distinct case when bill_flag = 'Billed' and sub_flag = 'Recurring' and pause_flag = 'new' then subscription_id end) as billed_and_paused,								
count(distinct case when bill_flag = 'Billed' and sub_flag = 'Recurring' and pause_flag is null and cancel_flag = 'cancel' then subscription_id end) as billed_and_canceled,								
--- Retained								
count(distinct case when bill_flag = 'Proxy' and sub_flag = 'Recurring' then subscription_id end) as total_retained,								
count(distinct case when bill_flag = 'Proxy' and sub_flag = 'Recurring' and pause_flag in ('new','retained') then subscription_id end) as retained_and_paused,								
count(distinct case when bill_flag = 'Proxy' and sub_flag = 'Recurring' and cancel_flag = 'cancel' then subscription_id end) as retained_and_canceled,								
--- New								
count(distinct case when bill_flag = 'Billed' and sub_flag = 'New' and reactivation_flag = 0 then subscription_id end) as total_new,								
count(distinct case when bill_flag = 'Billed' and sub_flag = 'New' and reactivation_flag = 0 and pause_flag = 'new' then subscription_id end) as new_and_paused,								
count(distinct case when bill_flag = 'Billed' and sub_flag = 'New' and reactivation_flag = 0 and cancel_flag = 'cancel' then subscription_id end) new_and_canceled,								
--- Reactivated								
count(distinct case when bill_flag = 'Billed' and sub_flag = 'New' and reactivation_flag = 1 then subscription_id end) as total_reactivated,								
count(distinct case when bill_flag = 'Billed' and sub_flag = 'New' and reactivation_flag = 1 and pause_flag = 'new' then subscription_id end) as reactivated_and_paused,								
count(distinct case when bill_flag = 'Billed' and sub_flag = 'New' and reactivation_flag = 1 and cancel_flag = 'cancel' then subscription_id end) reactivated_and_canceled,								
--- Resume								
count(distinct case when bill_flag = 'Billed' and sub_flag = 'Recurring' and pause_flag = 'expired' then subscription_id end) as total_resumed,								
count(distinct case when bill_flag = 'Billed' and sub_flag = 'Recurring' and pause_flag = 'expired' and cancel_flag = 'cancel' then subscription_id end) as resumed_and_canceled,								
								
--- Cancel								
count(distinct case when t.date is null and cancel_flag = 'cancel' then sub_id end) as canceled,								
--sum(canceled + billed_and_canceled + retained_and_canceled + new_and_canceled + reactivated_and_canceled + resumed_and_canceled) as total_canceled,								
								
--- Pause								
count(distinct case when t.date is null and pause_flag = 'retained' then subscription_uuid end) as pause_retained,								
count(distinct case when t.date is null and pause_flag = 'new' then subscription_uuid end) as pause_new								
--sum(pause_retained + pause_new + billed_and_paused + retained_and_paused + new_and_paused + reactivated_and_paused) as total_pause								
								
from transaction as t								
full join pause_history as p on t.date = p.date and t.subscription_id = p.subscription_uuid								
full join cancel as c on c.date = t.date and c.sub_id = t.subscription_id								
group by 1								
order by 1								
)								
								
select a.* , rc.cancel_retained_count, es.subscriber_count_refill_2mo,es.subscriber_count_refill_3mo,es.subscriber_count_refill_6mo,es.subscriber_count_refill								
from all_agg_table as a								
left join retain_cancel as rc on rc.date = a.date								
left join eligible_subscribers as es on es.eligible_date = a.date								
								"
"V_REVENUE_HISTORY_ALL","create or replace view SEED_DATA.DEV.V_REVENUE_HISTORY_ALL 
as

with all_orders as 
(
    select * from SEED_DATA.DEV.ORDER_HISTORY --- all orders and adjusted orders for SRP
)

 , reactivation as (
select 
  to_date(activated_at) as date
, recharge_subscription_id as subscription_id
, quantity
, 'Y' as Flag
   from
   ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 1 and recharge_subscription_id is not null
   
   union all

   select 
  to_date(activated_at) as date
, recurly_subscription_id as subscription_id
, quantity
, 'Y' as Flag
   from
   ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 1 and Recurly_subscription_id is not null
)

 , New as (
select 
  to_date(activated_at) as date
, recharge_subscription_id as subscription_id
, 'Y' as Flag
   from
   ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 0 and Recharge_subscription_id is not null
   
   union all

   select 
  to_date(activated_at) as date
, recurly_subscription_id as subscription_id
, 'Y' as Flag
   from
   ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 0 and Recurly_subscription_id is not null)

,sub_inv as 
(
    -- joining recharge invoices
    select 
        TO_DATE(O.INVOICE_DATE) as INVOICE_DATE,
        O.CUSTOMER_ID,
        O.SUBSCRIPTION_ID as SUBSCRIPTION_ID,
        O.INVOICE_ID as INVOICE_ID,
        O.INVOICE_NUMBER AS INVOICE_NUMBER,
        O.TRANSACTION_ID,
        ifnull(S.FLAG,'N') as REACTIVATION_FLAG,
        ifnull(N.FLAG,'N') as NEW_FLAG,
        O.QUANTITY,
        O.BASE_PRICE,
        O.TOTAL_AMOUNT_PAID,
        O.TAX,
        O.DISCOUNT,
        O.AMOUNT_PAID_BY_TRANSACTION,
        O.TOTAL_SHIPPING_COST,
        O.SHIPPING_COST_WO_TAX,
        O.SHIPPING_COST_TAX,
        O.AMOUNT_REFUNDED,
        O.CREDIT_APPLIED
  
    from all_orders as o
    left join reactivation as s
    on o.subscription_id = s.subscription_id and TO_DATE(O.INVOICE_DATE) = s.date
    left join new as n
    on o.subscription_id = n.subscription_id and TO_DATE(O.INVOICE_DATE) = n.date
      
 )

    
  select 
      sub_inv.INVOICE_DATE,
      sub_inv.CUSTOMER_ID,
      sub_inv.SUBSCRIPTION_ID,
      sub_inv.INVOICE_NUMBER,
      sub_inv.INVOICE_ID,
      sub_inv.TRANSACTION_ID,
      'ALL' as SKU,
	  'ALL' SKU_MASTER_ID,
      REACTIVATION_FLAG,
      NEW_FLAG,
      CASE WHEN NEW_FLAG = 'N' and REACTIVATION_FLAG = 'N' then 'Y' else 'N' end as RENEWAL_FLAG,
      QUANTITY,
      BASE_PRICE,
      TOTAL_AMOUNT_PAID,
      TAX,
      DISCOUNT,
      AMOUNT_PAID_BY_TRANSACTION,
      TOTAL_SHIPPING_COST,
      SHIPPING_COST_WO_TAX,
      SHIPPING_COST_TAX,
      AMOUNT_REFUNDED,
      CREDIT_APPLIED,
    base_price
        - tax 
        - COALESCE(total_shipping_cost,0) 
        + discount 
        + COALESCE(credit_applied, 0) as gross_revenue
        
    , base_price
        - tax 
        - COALESCE(shipping_cost_tax,0) 
        + discount 
        + COALESCE(SHIPPING_COST_WO_TAX, 0) as adj_gross_revenue
        
    , base_price
        + tax 
        + COALESCE(total_shipping_cost,0) 
        - discount 
        - COALESCE(credit_applied, 0) as adj_total_paid
        
    , base_price
        + COALESCE(SHIPPING_COST_WO_TAX,0) 
        - discount 
        - COALESCE(credit_applied, 0) as adj_subtotal_paid
        
    ,gross_revenue/quantity as Net_Value
    
    from sub_inv;"
"V_SEED_ACQUISITION","create or replace view SEED_DATA.DEV.V_SEED_ACQUISITION as 
--- using the date spin to pin all metrics to the date
with date_spine as (
    select 
    *
    from seed_data.dev.dim_date
    where date between '2018-01-01' and to_date(current_date())
),

cancellation_transaction_history as
(
    select to_date(cancelled_at) as date,
        reason_group,
        ifnull(sum(quantity),0) as sub_cancellation_qty,
        --------- adding for sub ids on 9/21/23
        ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_cancellation_ids
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
    where 
    to_date(cancelled_at) between '2018-01-01' and to_date(current_date())
    group by 1,2

), 

cancellation_transaction_history_net_pp as
(
    select to_date(cancelled_at) as date,
        ifnull(sum(quantity),0) as sub_cancellation_qty,
        --------- adding for sub ids on 9/21/23
        ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_cancellation_ids
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
    where 
    to_date(cancelled_at) between '2018-01-01' and to_date(current_date())
    and was_previously_paused = 'N'
    group by 1

), 

cancellation_transaction_history_ds01 as
(
    select to_date(cancelled_at) as date,
        ifnull(sum(quantity),0) as sub_cancellation_qty,
        --------- adding for sub ids on 9/21/23
        ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_cancellation_ids
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
    where 
    to_date(cancelled_at) between '2018-01-01' and to_date(current_date())
    group by 1

), 

pause as 
(
    select to_date(pause_start_date) as date,
    ifnull(sum(quantity),0) as sub_pause_cnt,
    --------- adding for sub ids on 9/21/23
    ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_pause_ids
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
    where 
    to_date(pause_start_date) between '2018-01-01' and to_date(current_date())
    group by 1

),

subscription as (
select 
  to_date(activated_at) as date
, ifnull(sum(quantity),0) as sub_created_qty
--------- adding for sub ids on 9/21/23
, ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_created_ids
, ifnull(count(distinct case when ifnull(first_discount_percentage_base_price,0) > 0 then recurly_subscription_id end),0) as discounted_sub_created_ids
from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
group by 1
)

, reactivation as (
select 
  to_date(activated_at) as date
, ifnull(sum(quantity),0) as sub_reactivation_qty
--------- adding for sub ids on 9/21/23
, ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_reactivation_ids
, ifnull(count(distinct case when ifnull(first_discount_percentage_base_price,0) > 0 then recurly_subscription_id end),0) as discounted_sub_reactivation_ids
from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 1
group by 1
)

, product_subs as (
select 
  to_date(activated_at) as date,
----------------------------Adjusted away from First Qty on 9/5/23-------------------------  
--  sum(case when first_subscription_date_ds01 is null then quantity end ) as pdsonly_qty
--, sum(case when first_subscription_date_pds08 is null then quantity end ) as dsonly_qty
  sum(case when sku ilike '%syn%' or sku ilike 'ds01%' then quantity end ) as dsonly_qty
, sum(case when sku ilike '%pds%' then quantity end ) as pdsonly_qty
, sum(case when first_subscription_date_ds01 = first_subscription_date_pds08 then quantity end ) as dsandpds_qty
, sum(case when first_subscription_date_ds01 < first_subscription_date_pds08 then quantity end ) as dsafirst_qty
, sum(case when first_subscription_date_ds01 > first_subscription_date_pds08 then quantity end ) as pdsfirst_qty
--------- adding for sub ids on 9/21/23
, count(distinct case when sku ilike '%syn%' or sku ilike 'ds01%' then RECURLY_SUBSCRIPTION_ID end ) as dsonly_sub_ids
, count(distinct case when sku ilike '%pds%' then quantity end ) as pdsonly_sub_ids
, count(distinct case when first_subscription_date_ds01 = first_subscription_date_pds08 then RECURLY_SUBSCRIPTION_ID end ) as dsandpds_sub_ids
, count(distinct case when first_subscription_date_ds01 < first_subscription_date_pds08 then RECURLY_SUBSCRIPTION_ID end ) as dsafirst_sub_ids
, count(distinct case when first_subscription_date_ds01 > first_subscription_date_pds08 then RECURLY_SUBSCRIPTION_ID end ) as pdsfirst_sub_ids

from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where to_date(activated_at) between '2018-01-01' and to_date(current_date())
group by 1
)

, new_sub as (
select 
  to_date(activated_at) as date
, ifnull(sum(quantity),0) as sub_new_qty
--------- adding for sub ids on 9/21/23
, ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_new_ids
, ifnull(count(distinct case when ifnull(first_discount_percentage_base_price,0) > 0 then recurly_subscription_id end),0) as discounted_sub_new_ids
from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 0
group by 1
)

, orders as (
select 
  to_date(INVOICE_DATE) as date
, ifnull(sum(quantity),0) as orders
, ifnull(sum(TOTAL_AMOUNT_PAID),0) as revenue
from SEED_DATA.DEV.ORDER_HISTORY
where 
to_date(INVOICE_DATE) between '2018-01-01' and to_date(current_date())

group by 1
)

, finance as (
select
  date
, sum(case when product = 'DS-01' and SKU_CLEAN in ('Refill - 3 Months') then TOTAL_CREATED_SUB_IDS end) as three_month_srp_sub_created_ids
, sum(case when product = 'DS-01' and SKU_CLEAN in ('Refill - 6 Months') then TOTAL_CREATED_SUB_IDS end) as six_month_srp_sub_created_ids
, sum(total_gross_rev) as total_gross_rev
, sum(inv_total_sub_ids) as inv_total_subs
, sum(activated_total_gross_rev) as activated_total_gross_rev
from
SEED_DATA.DEV.FINANCIAL_MODEL 
group by 1
)

, spend as (
select 
  to_date(date) as date
, sum(case when lower(channel_update) = 'tiktok' then spend end ) as  tiktok_spend
, sum(case when lower(channel_update) = 'tapjoy' then spend end ) as  tapjoy_spend
, sum(case when lower(channel_update) = 'spotify' then spend end ) as  spotify_spend
, sum(case when lower(channel_update) = 'iHeart' then spend end ) as  iheart_spend
, sum(case when lower(channel_update) = 'google nonbrand' then spend end ) as  googlenb_spend
, sum(case when lower(channel_update) = 'google brand' then spend end ) as  googlebrand_spend
, sum(case when lower(channel_update) = 'outbrain' then spend end ) as  outbrain_spend
, sum(case when lower(channel_update) = 'meta' then spend end ) as  meta_spend
, sum(case when lower(channel_update) = 'rokt' then spend end ) as  rokt_spend
, sum(case when lower(channel_update) = 'pinterest' then spend end ) as  pinterest_spend
, sum(case when lower(channel_update) = 'reddit' then spend end ) as  reddit_spend
, sum(case when lower(channel_update) = 'public radio' then spend end ) as  public_radio_spend
, sum(case when lower(channel_update) = 'bing nonbrand' then spend end ) as  bingnb_spend
, sum(case when lower(channel_update) = 'bing brand' then spend end ) as  bingbrand_spend
, sum(case when lower(channel_update) = 'tradedesk' then spend end ) as  tradedesk_spend
, sum(case when lower(channel_update) = 'snapchat' then spend end ) as  snapchat_spend
, sum(case when lower(channel_update) = 'influencer' then spend end ) as  influencer_spend
, sum(case when lower(channel_update) = 'partnership' then spend end ) as  partnership_spend
, sum(case when lower(channel_update) = 'affiliate' then spend end ) as  affiliate_spend
, sum(case when lower(channel_update) = 'liveintent' then spend end ) as  liveintent_spend
, sum(case when lower(channel_update) = 'youtube' then spend end ) as  youtube_spend
, ifnull(sum(spend),0) as total_spend
from
PROD_DB.GROWTH.V_MARKETING_CHANNEL_SPEND_ALL_V2
where 
to_date(date) between '2018-01-01' and to_date(current_date()-1)
group by 1
)

, final as (
select 
  ds.date
, DATE_TRUNC('MONTH', ds.date) AS month_date
, 'All' as product
, sum( case when cth.reason_group = 'Price' then cth.sub_cancellation_qty end ) as price_sub_cancellation_qty
, sum( case when cth.reason_group = 'Compliance' then cth.sub_cancellation_qty end ) as compliance_sub_cancellation_qty
, sum( case when cth.reason_group = 'No improvement' then cth.sub_cancellation_qty end ) as noimprove_sub_cancellation_qty
, sum( case when cth.reason_group = 'Discomfort' then cth.sub_cancellation_qty end ) as discomfort_sub_cancellation_qty
, sum( case when cth.reason_group = 'Subscription aversion' then cth.sub_cancellation_qty end ) as subaver_sub_cancellation_qty
, sum( case when cth.reason_group = 'Stopped taking probiotics' then cth.sub_cancellation_qty end ) as stopped_sub_cancellation_qty
, sum( case when cth.reason_group = 'Switched probiotics' then cth.sub_cancellation_qty end ) as switchprob_cancellation_cnt
, sum( case when cth.reason_group = 'UX' then cth.sub_cancellation_qty end ) as ux_sub_cancellation_qty
, sum( case when cth.reason_group = 'Switched due to price' then cth.sub_cancellation_qty end ) as switchprice_sub_cancellation_qty
, sum( case when cth.reason_group = 'Experience' then cth.sub_cancellation_qty end ) as experience_sub_cancellation_qty
, sum( case when cth.reason_group = 'Other' then cth.sub_cancellation_qty end ) as other_sub_cancellation_qty
, sum( case when cth.reason_group is null then cth.sub_cancellation_qty end ) as null_sub_cancellation_qty
, sum(cth.sub_cancellation_qty) as ttl_sub_cancellation_qty
, sum(cth.sub_cancellation_ids) as ttl_sub_cancellation_ids
, max(cthnpp.sub_cancellation_qty) as netpp_sub_cancellation_qty
, max(cthnpp.sub_cancellation_ids) as netpp_sub_cancellation_ids
, max(sub.sub_created_qty) as sub_created_qty
, max(sub.sub_created_ids) as sub_created_ids
, max(sub.discounted_sub_created_ids) as discounted_sub_created_ids
, max(psub.pdsonly_qty) as sub_created_pdsonly_qty
, max(psub.pdsonly_sub_ids) as sub_created_pdsonly_sub_ids
, max(psub.dsonly_qty) as sub_created_dsonly_qty
, max(psub.dsonly_sub_ids) as sub_created_dsonly_sub_ids
, max(psub.dsandpds_qty) as sub_created_dsandpds_qty
, max(psub.dsandpds_sub_ids) as sub_created_dsandpds_sub_ids
, max(psub.dsafirst_qty) as sub_created_dsafirst_qty
, max(psub.dsafirst_sub_ids) as sub_created_dsafirst_sub_ids
, max(psub.pdsfirst_qty) as sub_created_pdsfirst_qty
, max(psub.pdsfirst_sub_ids) as sub_created_pdsfirst_sub_ids
, max(pau.sub_pause_cnt) as sub_pause_cnt
, max(pau.sub_pause_ids) as sub_pause_ids
, max(rtv.sub_reactivation_qty) as sub_reactivation_qty
, max(rtv.sub_reactivation_ids) as sub_reactivation_ids
, max(rtv.discounted_sub_reactivation_ids) as discounted_sub_reactivation_ids
, max(nsu.sub_new_qty) as sub_new_qty
, max(nsu.sub_new_ids) as sub_new_ids
, max(nsu.discounted_sub_new_ids) as discounted_sub_new_ids
, max(ord.orders) as orders
, max(ord.revenue) as revenue
, max(fin.total_gross_rev) as total_gross_rev
, max(fin.activated_total_gross_rev) as activated_total_gross_rev
, max(fin.inv_total_subs) as inv_total_subs
, max(fin.three_month_srp_sub_created_ids) as three_month_srp_sub_created_ids
, max(fin.six_month_srp_sub_created_ids) as six_month_srp_sub_created_ids
---- spend
, max(tiktok_spend) as tiktok_spend
, max(tapjoy_spend) as tapjoy_spend
, max(spotify_spend) as spotify_spend
, max(iheart_spend) as iheart_spend
, max(googlenb_spend) as googlenb_spend
, max(googlebrand_spend) as googlebrand_spend
, max(bingnb_spend) as bingnb_spend
, max(bingbrand_spend) as bingbrand_spend
, max(outbrain_spend) as outbrain_spend
, max(meta_spend) as meta_spend
, max(rokt_spend) as rokt_spend
, max(pinterest_spend) as pinterest_spend
, max(reddit_spend) as reddit_spend
, max(public_radio_spend) as public_radio_spend
, max(tradedesk_spend) as tradedesk_spend
, max(snapchat_spend) as snapchat_spend
, max(influencer_spend) as influencer_spend
, max(partnership_spend) as partnership_spend
, max(affiliate_spend) as affiliate_spend
, max(liveintent_spend) as liveintent_spend
, max(youtube_spend) as youtube_spend
, max(total_spend) as total_spend

from date_spine as ds
---- join to cancellations
left join cancellation_transaction_history as cth
on ds.date = cth.date
---- join to total subs
left join subscription as sub
on ds.date = sub.date
---- join to paused subs
left join pause as pau
on ds.date = pau.date
---- join to reactivation subs
left join reactivation as rtv
on ds.date = rtv.date
---- join to new subs
left join new_sub as nsu
on ds.date = nsu.date
---- join to orders
left join orders as ord
on ds.date = ord.date
---- join to finance
left join finance as fin
on ds.date = fin.date
---- join to product subs
left join product_subs as psub
on ds.date = psub.date
---- join to spend by channel
left join spend as spd
on ds.date = spd.date
---- join to cancellations net previously paused
left join cancellation_transaction_history_net_pp as cthnpp
on ds.date = cthnpp.date

group by 1,2,3 )

select * from final order by 1 desc;"
"V_SHIPPING_COSTS_DELIVERY_HISTORY","create or replace view SEED_DATA.DEV.V_SHIPPING_COSTS_DELIVERY_HISTORY(
	ORDER_NUMBER,
	SHIPPING_COST,
	SHIPPING_WEIGHT,
	INTL_DOMESTIC,
	DELIVERED_DATE
) as 

----- need to add the remaining files and complete the request from Passport
 
 with shipping_costs_delv_domestic as 
(
        select 
          shipment_guid
        , max(shipping_cost) as shipping_cost 
        , max(shipping_weight) as shipping_weight
        , max(to_date(delivered_date)) as delivered_date
        from 
        
        (select order_number as shipment_guid,shipping_cost,weight as shipping_weight,to_date(delivered_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_MISSING""  ---- ADDED BY CP ON 6/9

        UNION ALL
        
        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_JAN_2022""

        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_FEB_22""

        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_MAR_2022""

        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_APR_2022""

        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_MAY_2022""

        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_JUN_2022""

        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_JUL_2022""

        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_AUG_2022""
      
        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_SEPT_22""
      
        UNION ALL 

        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_OCT_22""
      
        UNION ALL 
      
        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_NOV_2022""
      
        UNION ALL 
      
        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_DEC_2022""
      
        UNION ALL 
      
        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_JAN_2023""

        UNION ALL 
      
        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_FEB_2023"" ---- ADDED BY CP ON 6/8

        UNION ALL 
      
        select shipment_guid,shipping_cost,shipping_weight,to_date(carrier_status_date) as delivered_date
        from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""SHIPPING_WCD_MAR_2023""---- ADDED BY CP ON 6/8
         
        union all 
         
         select 
         distinct o.ORDER_NUMBER as shipment_guid
         , null as shipping_cost
         , null as shipping_weight
         , to_date(ACTUAL_DELIVERY_AT) as delivered_date 
         from 
        ""MARKETING_DATABASE"".""STORD"".""SHIPMENTS"" as o
         left join ""MARKETING_DATABASE"".""STORD"".""ORDERS""  as s 
         on o.order_number = s.order_number
         where DELIVERY_STATUS = 'delivered' 
         --and to_date(ship_date) >= '2023-04-06' 
         and upper(dest_country) = 'US'
        
         -----ADDED BY CM on 7/6
        )
        group by 1
        )

, shipping_costs_delv_international as 
(
          select 
           order_id
         , max(shipping_cost) as shipping_cost
         , max(shipping_weight) as shipping_weight
         , max(to_date(delivered_date)) as delivered_date
         from 
        (
        select 
          case when order_id like 'SEED-%' THEN order_id 
               else CONCAT('SEED-',ltrim(order_id, 'SEED'))
               end as order_id 
        , total_shipping_cost as shipping_cost
        , BILLABLE_WEIGHT_OZ_ as shipping_weight
        , left(DELIVERY_DATE_GMT,10) as delivered_date 
        from ""MARKETING_DATABASE"".""PASSPORT"".""SHIPPING_COSTS"" 
        where DELIVERY_DATE_GMT is not null 
          and LENGTH(order_id) in (11,12)
          and _file in ('seed_passport_1Jan23_1May23_invoiced_data.csv','seed_passport_1Jan22_31Dec22_invoiced_data .csv','Seed invoicing.csv'))
        WHERE delivered_date <> 'NULL'
        group by 1    
    
      union all 
       
         select distinct o.ORDER_NUMBER as shipment_guid, null as shipping_cost, null as shipping_weight, to_date(ACTUAL_DELIVERY_AT) as delivered_date from 
        ""MARKETING_DATABASE"".""STORD"".""SHIPMENTS"" as o
         left join ""MARKETING_DATABASE"".""STORD"".""ORDERS""  as s 
         on o.order_number = s.order_number
         where DELIVERY_STATUS = 'delivered' and to_date(ship_date) >= '2023-05-01' and upper(dest_country) <> 'US'
         
         -----ADDED BY CM on 7/6
)
, shipping_costs_delv_combined as
(
        SELECT 
         distinct
          shipment_guid as order_number
        , shipping_cost
        , shipping_weight
        , 'Domestic' as Intl_domestic
        , to_date(delivered_date) as delivered_date
  
        FROM shipping_costs_delv_domestic
        
        

union all 

        SELECT 
        distinct
          order_id as order_number
        , shipping_cost
        , shipping_weight
        , 'International' as Intl_domestic
        , delivered_date
          
        FROM shipping_costs_delv_international
      
)

   
select  * from  shipping_costs_delv_combined;"
"V_SHIPPING_FINALIZED_SKU","create or replace view SEED_DATA.DEV.V_SHIPPING_FINALIZED_SKU as 

WITH updated_invoices as (
select 
*
, CONCAT('SEED-',I.invoice_number) as updated_invoice_number
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""INVOICES_SUMMARY"" as I
where billed_date > '2021-12-15'
 )

, updated_sku_adjustments as (    
select 
  i.updated_invoice_number as order_number
, a.ADJUSTMENT_PLAN_CODE as SKU
, a.ADJUSTMENT_QUANTITY as quantity
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ADJUSTMENTS"" as a 
left join updated_invoices as i on a.invoice_id = i.id
where 
adjustment_created_at > '2021-12-31'
and adjustment_description not ilike '%shipping%'
and a.adjustment_plan_code in ('syn-wk','syn-rf','syn-rf-2mo','syn-rf-3mo','syn-rf-6mo','pds-wk','pds-rf','pds-rf-2mo')
)
     
, finalized_sku as (
select 
*
from updated_sku_adjustments 
pivot(sum(quantity) for SKU in ('syn-wk','syn-rf','syn-rf-2mo','syn-rf-3mo','syn-rf-6mo','pds-wk','pds-rf','pds-rf-2mo')) as p 
order by order_number
)

select * from finalized_sku;"
"V_STORD_SHIPMENT_STATUS","create or replace view SEED_DATA.DEV.V_STORD_SHIPMENT_STATUS as 
With LS as (
  
select distinct ORDER_NUMBER,
       max(_modified) as LS_TS
  
  from
""MARKETING_DATABASE"".""STORD"".""SHIPMENTS""   
  group by 1
           ) 

, base as (
select 
   ORDER_NUMBER
  ,DELIVERY_STATUS
  ,to_date(ACTUAL_DELIVERY_AT) as ACTUAL_DELIVERY_AT
  ,to_date(ship_date) as shipped_date
  ,_modified as LS_TS

  from
""MARKETING_DATABASE"".""STORD"".""SHIPMENTS"" 
)   
Select
 LS.ORDER_NUMBER
,DELIVERY_STATUS
,SHIPPED_DATE
,ACTUAL_DELIVERY_AT
--count(ls.order_number), count(distinct ls.order_number)
from LS
Left join Base
using(ORDER_NUMBER,LS_TS)
where order_number like 'SEED-%'"
"V_SUBSCRIPTION_ACTIVATION_LTA","create or replace view SEED_DATA.DEV.V_SUBSCRIPTION_ACTIVATION_LTA(
	ACTIVATED_DATE,
	ACTIVATED_DAY_OF_WEEK,
	ACTIVATED_MONTH_DATE,
	ACTIVATED_WEEK_DATE,
	CHANNEL_GROUPING,
	CHANNEL_PLATFORM,
	TOTAL_SUB_QTY,
    TOTAL_SUB_IDS,
	NEW_SUB_QTY,
    NEW_SUB_IDS,
	REACTIVATION_SUB_QTY,
    REACTIVATION_SUB_IDS,
	DS01_TOTAL_SUB_QTY,
    DS01_TOTAL_SUB_IDS,
	DS01_NEW_SUB_QTY,
    DS01_NEW_SUB_IDS,
	DS01_REACTIVATION_SUB_QTY,
    DS01_REACTIVATION_SUB_IDS,
	PDS08_TOTAL_SUB_QTY,
    PDS08_TOTAL_SUB_IDS,
	PDS08_NEW_SUB_QTY,
    PDS08_NEW_SUB_IDS,
	PDS08_REACTIVATION_SUB_QTY,
    PDS08_REACTIVATION_SUB_IDS
) as 

with customer_attribution_event_date as 
(
select
  email_user_prop as customer_email,
  event_date,
  channel_grouping,
  channel_platform,
  utm_source,
  row_number() over (partition by email_user_prop order by event_date desc) as row_number
from SEED_DATA.DEV.EVENTS_ORDER_COMPLETE
order by 1
)

, customer_attribution_cleanup_event_date as 
(
select *
from customer_attribution_event_date
where row_number = 1
)

, customer_attribution_event_monthdate as 
(
select
  email_user_prop as customer_email,
  event_monthdate,
  channel_grouping as channel_grouping_op2,
  channel_platform as channel_platform_op2,
  utm_source,
  row_number() over (partition by email_user_prop order by event_monthdate desc) as row_number
from SEED_DATA.DEV.EVENTS_ORDER_COMPLETE
order by 1
)

, customer_attribution_cleanup_event_monthdate as 
(
select *
from customer_attribution_event_monthdate
where row_number = 1
)

, subscription_master as (
select 
  sm.* exclude (channel_grouping, channel_platform)
  
from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as sm 
)


, subscription_master_attribution as (
select 
  sm.*
, ifnull(cae.channel_grouping,null) as channel_grouping
, ifnull(cae.channel_platform,null) as channel_platform

from subscription_master as sm 
---- by event_date
left join customer_attribution_cleanup_event_date as cae
on lower(sm.customer_email) = lower(cae.customer_email)
and to_date(sm.activated_at) = cae.event_date
)

, subscription_master_attribution_null as (
select  
  sm.* exclude (channel_grouping, channel_platform)
, ifnull(cae.channel_grouping_op2,null) as channel_grouping
, ifnull(cae.channel_platform_op2,null) as channel_platform

from subscription_master_attribution as sm 
---- by event_date
left join customer_attribution_cleanup_event_monthdate as cae
on lower(sm.customer_email) = lower(cae.customer_email)
and date_trunc('month',to_date(sm.activated_at)) = cae.event_monthdate

where sm.channel_grouping is null 
)

, subscription_master_attribution_null_plus as (
select  
  sm.* exclude (channel_grouping, channel_platform)
, ifnull(cae.channel_grouping_op2,null) as channel_grouping
, ifnull(cae.channel_platform_op2,null) as channel_platform

from subscription_master_attribution_null as sm 
---- by event_date
left join customer_attribution_cleanup_event_monthdate as cae
on lower(sm.customer_email) = lower(cae.customer_email)

where sm.channel_grouping is null 
)

, subscription_master_attribution_combined as (
select * from subscription_master_attribution where channel_grouping is not null 
union all
select * from subscription_master_attribution_null where channel_grouping is not null 
union all
select * from subscription_master_attribution_null_plus
) 

, build as (
select 
  to_date(sma.activated_at) as activated_date
, CASE WHEN DAYNAME(to_date(sma.activated_at)) = 'Sun' then 1 
       WHEN DAYNAME(to_date(sma.activated_at)) = 'Mon' then 2
       WHEN DAYNAME(to_date(sma.activated_at)) = 'Tue' then 3 
       WHEN DAYNAME(to_date(sma.activated_at)) = 'Wed' then 4 
       WHEN DAYNAME(to_date(sma.activated_at)) = 'Thu' then 5 
       WHEN DAYNAME(to_date(sma.activated_at)) = 'Fri' then 6 
       WHEN DAYNAME(to_date(sma.activated_at)) = 'Sat' then 7 
       end as activated_day_of_week
, date_trunc('month',to_date(sma.activated_at)) as activated_month_date
, date_trunc('week',to_date(sma.activated_at))-1 as activated_week_date ---- minus 1 day to start on Sunday
, ifnull(sma.channel_grouping,'None') as channel_grouping
, ifnull(sma.channel_platform,'None') as channel_platform
, ifnull(sum(sma.quantity),0) as total_sub_qty
, ifnull(count(distinct sma.RECURLY_SUBSCRIPTION_ID),0) as total_sub_ids
, ifnull(sum(case when sma.reactivation_flag = 0 then sma.quantity end),0) as new_sub_qty
, ifnull(count(distinct case when sma.reactivation_flag = 0 then sma.RECURLY_SUBSCRIPTION_ID end),0) as new_sub_ids
, ifnull(sum(case when sma.reactivation_flag = 1 then sma.quantity end),0) as reactivation_sub_qty
, ifnull(count(distinct case when sma.reactivation_flag = 1 then sma.RECURLY_SUBSCRIPTION_ID end),0) as reactivation_sub_ids
--- DS-01
, ifnull(sum(case when sma.first_product = 'DS-01' then sma.quantity end),0) as ds01_total_sub_qty
, ifnull(count(distinct case when sma.first_product = 'DS-01' then sma.RECURLY_SUBSCRIPTION_ID end),0) as ds01_total_sub_ids
, ifnull(sum(case when sma.first_product = 'DS-01' and sma.reactivation_flag = 0 then sma.quantity end),0) as ds01_new_sub_qty
, ifnull(count(distinct case when sma.first_product = 'DS-01' and sma.reactivation_flag = 0 then sma.RECURLY_SUBSCRIPTION_ID end),0) as ds01_new_sub_ids
, ifnull(sum(case when sma.first_product = 'DS-01' and sma.reactivation_flag = 1 then sma.quantity end),0) as ds01_reactivation_sub_qty
, ifnull(count(distinct case when sma.first_product = 'DS-01' and sma.reactivation_flag = 1 then sma.RECURLY_SUBSCRIPTION_ID end),0) as ds01_reactivation_sub_ids
--- PDS-08
, ifnull(sum(case when sma.first_product = 'PDS-08' then sma.quantity end),0) as pds08_total_sub_qty
, ifnull(count(distinct case when sma.first_product = 'PDS-08' then sma.RECURLY_SUBSCRIPTION_ID end),0) as pds08_total_sub_ids
, ifnull(sum(case when sma.first_product = 'PDS-08' and sma.reactivation_flag = 0 then sma.quantity end),0) as pds08_new_sub_qty
, ifnull(count(distinct case when sma.first_product = 'PDS-08' and sma.reactivation_flag = 0 then sma.RECURLY_SUBSCRIPTION_ID end),0) as pds08_new_sub_ids
, ifnull(sum(case when sma.first_product = 'PDS-08' and sma.reactivation_flag = 1 then sma.quantity end),0) as pds08_reactivation_sub_qty
, ifnull(count(distinct case when sma.first_product = 'PDS-08' and sma.reactivation_flag = 1 then sma.RECURLY_SUBSCRIPTION_ID end),0) as pds08_reactivation_sub_ids
from subscription_master_attribution_combined as sma
where 
to_date(sma.activated_at) <= to_date(current_date()-1)
group by 1,2,3,4,5,6
)

select * from build

--select 
--sum(total_sub_qty)
--from build where activated_date = '2023-07-18'
;"
"V_SUBSCRIPTION_ACTIVATION_LTA_DETAIL","create or replace view SEED_DATA.DEV.V_SUBSCRIPTION_ACTIVATION_LTA_DETAIL as 
with customer_attribution_event_date as 
(
select
  email_user_prop as customer_email,
  event_date,
  channel_grouping,
  channel_platform,
  channel_bucket,
  channel,
  utm_source,
  row_number() over (partition by email_user_prop order by event_date desc) as row_number
from PROD_DB.GROWTH.V_EVENTS_ORDER_COMPLETE
order by 1
)

, customer_attribution_cleanup_event_date as 
(
select *
from customer_attribution_event_date
where row_number = 1
)

, customer_attribution_event_monthdate as 
(
select
  email_user_prop as customer_email,
  event_monthdate,
  channel_grouping as channel_grouping_op2,
  channel_platform as channel_platform_op2,
  channel_bucket as channel_bucket_op2,
  channel as channel_op2,
  utm_source,
  row_number() over (partition by email_user_prop order by event_monthdate desc) as row_number
from PROD_DB.GROWTH.V_EVENTS_ORDER_COMPLETE
order by 1
)

, customer_attribution_cleanup_event_monthdate as 
(
select *
from customer_attribution_event_monthdate
where row_number = 1
)

, subscription_master as (
select 
  sm.* exclude (channel_grouping, channel_platform, channel_bucket, channel)
  
from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER"" as sm 
)

, subscription_master_attribution as (
select 
  sm.*
, ifnull(cae.channel_grouping,null) as channel_grouping
, ifnull(cae.channel_platform,null) as channel_platform
, ifnull(cae.channel_bucket,null) as channel_bucket
, ifnull(cae.channel,null) as channel

from subscription_master as sm 
---- by event_date
left join customer_attribution_cleanup_event_date as cae
on lower(sm.customer_email) = lower(cae.customer_email)
and to_date(sm.activated_at) = cae.event_date
)

, subscription_master_attribution_null as (
select  
  sm.* exclude (channel_grouping, channel_platform, channel_bucket, channel)
, ifnull(cae.channel_grouping_op2,null) as channel_grouping
, ifnull(cae.channel_platform_op2,null) as channel_platform
, ifnull(cae.channel_bucket_op2,null) as channel_bucket
, ifnull(cae.channel_op2,null) as channel

from subscription_master_attribution as sm 
---- by event_date
left join customer_attribution_cleanup_event_monthdate as cae
on lower(sm.customer_email) = lower(cae.customer_email)
and date_trunc('month',to_date(sm.activated_at)) = cae.event_monthdate

where sm.channel_grouping is null 
)

, subscription_master_attribution_null_plus as (
select  
  sm.* exclude (channel_grouping, channel_platform, channel_bucket, channel)
, ifnull(cae.channel_grouping_op2,null) as channel_grouping
, ifnull(cae.channel_platform_op2,null) as channel_platform
, ifnull(cae.channel_bucket_op2,null) as channel_bucket
, ifnull(cae.channel_op2,null) as channel

from subscription_master_attribution_null as sm 
---- by event_date
left join customer_attribution_cleanup_event_monthdate as cae
on lower(sm.customer_email) = lower(cae.customer_email)

where sm.channel_grouping is null 
)

, subscription_master_attribution_combined as (
select * from subscription_master_attribution where channel_grouping is not null 
union all
select * from subscription_master_attribution_null where channel_grouping is not null 
union all
select * from subscription_master_attribution_null_plus
) 

select * from 
subscription_master_attribution_combined;"
"V_SUBSCRIPTION_PAUSE_HISTORY","create or replace view SEED_DATA.DEV.V_SUBSCRIPTION_PAUSE_HISTORY(
	SUBSCRIPTION_UUID,
	SUBSCRIPTION_STATE,
	UPDATED_PLAN_CODE,
	SUBSCRIPTION_ACTIVATED_DATE,
	SUBSCRIPTION_EXPIRES_DATE,
	FINAL_RANK,
    PAUSED_AT_TS_FROM_SITE,
    PAUSED_AT_FROM_SITE,
	VERSION_STARTED_AT_TS,
	VERSION_ENDED_AT_TS,
	VERSION_STARTED_AT,
	VERSION_ENDED_AT,
	VERSION_ENDED_AT_CLEAN,
    PAUSED_AT_CLEAN,
    PAUSED_AT_CLEAN_TS,
    FLAG
) as 

with subscription_pause_history as		
(		
--- Final code		
    with sub_history_plan_clean as		
    (
            select 
              *
            , case when plan_code ilike 'syn-wk%' and plan_code ilike '%tuc%' then 'syn-wk'
                    else plan_code end as updated_plan_code		
            --, lag(updated_plan_code) over(partition by subscription_uuid order by version_started_at) as lag_plan_code	
            , row_number() over(partition by subscription_uuid,subscription_state,updated_plan_code order by version_started_at) as row_no_agg	
            , row_number() over(partition by subscription_uuid order by version_started_at) as row_no_sub
            , (row_no_sub - row_no_agg) as final_rank
            , to_date(min(subscription_activated_at) over (partition by subscription_uuid)) as subscription_activated_date	
            , to_date(max(subscription_expires_at) over (partition by subscription_uuid)) as subscription_expires_date	
            , coalesce(version_ended_at, '3000-01-01') as version_ended_at_clean -- To account for same plan cancelled over different time		
            
            from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTION_HISTORY""
            --where subscription_uuid = '59314b1626fdf2331a986a4b9fb0a550'		
            --where plan_code not ilike '%pds%'and plan_code not ilike '%ds01-trial%'		
    )		
		
    , final_table as		
    (		
            select
              subscription_uuid	
            , subscription_state
            , updated_plan_code		
            , subscription_activated_date
            , subscription_expires_date		
            , final_rank
            , subscription_api_id
            , min(version_started_at) as version_started_at_ts
            , max(version_ended_at_clean) as version_ended_at_ts
            , to_date(min(version_started_at)) as version_started_at
            , to_date(max(version_ended_at_clean)) as version_ended_at	
            
            
            from sub_history_plan_clean		
            group by 1,2,3,4,5,6,7		
            order by 1,8		
    )		
		
        select 
         *
        , case when version_ended_at like '3000-01-01' then null
                else version_ended_at end as version_ended_at_clean
        , 'executed_pause' as flag
        
        from final_table		
        where subscription_state = 'paused'	and version_started_at_ts < current_date()	----- only paused status
)

, future_pause as 
(
    with last_state as 
    (
    select *, row_number() over(partition by subscription_uuid order by version_started_at desc) as row_no
    from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTION_HISTORY""	
    order by subscription_uuid,subscription_activated_at,version_started_at
    )
    
    select core_sub.subscription_uuid,
            'paused' as subscription_state
            ,case when plan_code ilike 'syn-wk%' and plan_code ilike '%tuc%' then 'syn-wk'
                    else plan_code end as updated_plan_code	
            , to_date(min(subscription_activated_at) over (partition by last_state.subscription_uuid)) as subscription_activated_date	
            , to_date(max(subscription_expires_at) over (partition by last_state.subscription_uuid)) as subscription_expires_date
            , 1000 as final_rank
            ,core_sub.subscription_id as subscription_api_id
            , core_sub.current_period_ends_at as version_started_at_ts
            , Null as version_ended_at_ts
            ,to_date(version_started_at_ts) as version_started_at
            ,NULL as version_ended_at
            ,NULL as version_ended_at_clean
            ,'future_pause' as pause_flag
            
    from ""MARKETING_DATABASE"".""SEED_CORE_PUBLIC"".""SEED_ECOMMERCE_SUBSCRIPTION"" as core_sub
        left join last_state on core_sub.subscription_id = last_state.subscription_api_id
    where last_state.row_no = 1 and core_sub.subscription_state = 'PA' and core_sub.current_period_ends_at >= current_date()

)
, all_pause as 
(
    select * from subscription_pause_history
    union all 
    select * from future_pause
    order by 1,8
)

, paused_at as 
(
    select subscription_id as subscription_api_id,
        max(timestamp) as paused_at_ts,
        to_date(paused_at_ts) as paused_at
    from ""SEGMENT_EVENTS"".""CORE_STAGING"".""SUBSCRIPTION_PAUSED""
    group by 1
)


select  SUBSCRIPTION_UUID,
	SUBSCRIPTION_STATE,
	UPDATED_PLAN_CODE,
	SUBSCRIPTION_ACTIVATED_DATE,
	SUBSCRIPTION_EXPIRES_DATE,
	FINAL_RANK,
    paused_at_ts as paused_at_ts_from_site,
    paused_at as paused_at_from_site,
	VERSION_STARTED_AT_TS,
	VERSION_ENDED_AT_TS,
	VERSION_STARTED_AT,
	VERSION_ENDED_AT,
	VERSION_ENDED_AT_CLEAN,
    coalesce(paused_at,version_started_at) as paused_at_clean,
    coalesce(paused_at_ts,version_started_at_ts) as paused_at_clean_ts,
    FLAG 
    from all_pause 
         left join paused_at on all_pause.subscription_api_id = paused_at.subscription_api_id
        ;"
"V_SUBSCRIPTION_REACTIVATION","create or replace view SEED_DATA.DEV.V_Subscription_reactivation as 

    with subscription_reactivation as 
    (select subscription_uuid,USER_SUBSCRIPTION_ID,
        was_previously_paused,
        row_number() over(partition by user_subscription_id order by activated_at) as sub_rank,
        case when sub_rank > 1 then 'Subscription Reactivation' else 'New Subscription' end as Reactivation_flag
    from marketing_database.seed_core_public.seed_ecommerce_subscription 
    )
    -- This data is only for users from recurly
    
    ,sub_master_reactivation as 
    (
    select sm.customer_email,sm.first_name,sm.last_name,USER_SUBSCRIPTION_ID,
        max(case when sub_rank = 1 then recurly_subscription_id end) as first_sub_subscription_id,
        max(case when sub_rank = 1 then activated_at end) as first_sub_activated_at,
        max(case when sub_rank = 1 then cancelled_at end) as first_sub_cancelled_at,
        max(case when sub_rank = 1 then first_product end) as first_sub_product,
        max(case when sub_rank = 1 then FIRST_DISCOUNT_PERCENTAGE_BASE_PRICE end) as first_sub_discount_percentage,
        max(case when sub_rank = 1 then FIRST_PROMOTION_CODE end) as first_sub_promo_code,
        max(case when sub_rank = 1 then checkout_survey_response end) as first_sub_checkout_survey,
        max(case when sub_rank = 1 then LAST_SKU end) as first_sub_canceled_sku,
        max(case when sub_rank = 1 then CANCELLED_PRIMARY_REASON end) as first_sub_canceled_primary_reason,
        max(case when sub_rank = 1 then CANCELLED_SECONDARY_REASON end) as first_sub_canceled_secondary_reason,
        max(case when sub_rank = 1 then reason_group end) as first_sub_canceled_reason_group,
        max(case when sub_rank = 2 then recurly_subscription_id end) as first_reactivated_sub_subscription_id,
        max(case when sub_rank = 2 then activated_at end) as first_reactivated_sub_activated_at,
        max(case when sub_rank = 2 then cancelled_at end) as first_reactivated_sub_cancelled_at,
        max(case when sub_rank = 2 then first_product end) as first_reactivated_sub_product,
        max(case when sub_rank = 2 then FIRST_DISCOUNT_PERCENTAGE_BASE_PRICE end) as first_reactivated_sub_discount_percentage,
        max(case when sub_rank = 2 then FIRST_PROMOTION_CODE end) as first_reactivated_sub_promo_code,
        max(case when sub_rank = 2 then checkout_survey_response end) as first_reactivated_sub_checkout_survey,
        max(case when sub_rank = 2 then first_sku end) as first_reactivated_sub_activated_sku,
        max(case when sub_rank = 2 then CANCELLED_PRIMARY_REASON end) as first_reactivated_sub_canceled_primary_reason,
        max(case when sub_rank = 2 then CANCELLED_SECONDARY_REASON end) as first_reactivated_sub_canceled_secondary_reason,
        max(case when sub_rank = 2 then reason_group end) as first_reactivated_sub_canceled_reason_group
    from seed_data.dev.subscription_master as sm 
        left join subscription_reactivation as sr 
        on sm.recurly_subscription_id = sr.subscription_uuid
    where recurly_subscription_id is not null
    group by 1,2,3,4
    ),
    
    active_sub_cancel as 
    (
        select sm.customer_email,
            max(case when to_date(activated_at) < to_date(first_sub_cancelled_at) and (cancelled_at is null or to_date(cancelled_at) > to_date(first_sub_cancelled_at)) then 1 else 0 end) as active_sub_at_cancellation_flag
        from seed_data.dev.subscription_master as sm
        left join sub_master_reactivation as re 
        on sm.customer_email = re.customer_email
        where re.first_sub_cancelled_at is not null
        group by 1
        having active_sub_at_cancellation_flag = 1
    ),

    final_raw_data as 
    (
    
    select smr.*,case when (to_date(first_sub_cancelled_at) = '2023-09-06' and sr.was_previously_paused = True) then True else False end as was_previously_paused,
    datediff(day,first_sub_cancelled_at,first_reactivated_sub_activated_at) as first_reactivated_sub_days_since_cancel,
    floor(datediff(day,first_sub_cancelled_at,first_reactivated_sub_activated_at)/30) as first_reactivated_sub_cycle_since_cancel,
    coalesce(asca.ACTIVE_SUB_AT_CANCELLATION_FLAG,0) as active_sub_at_cancel_flag
    from sub_master_reactivation as smr
    left join active_sub_cancel as asca on smr.customer_email = asca.customer_email
    left join subscription_reactivation as sr on smr.first_sub_subscription_id = sr.subscription_uuid
)


    --- Need to clean this cohrt or exclude them

  /*  select to_date(first_sub_cancelled_at),count(*)
    from SEED_DATA.DEV.V_Subscription_reactivation 
    where to_date(first_sub_cancelled_at) >= '2023-09-01'
    group by 1 
    order by 1

select *  
from SEED_DATA.DEV.V_Subscription_reactivation
where ((first_reactivated_sub_days_since_cancel >= 0) or (first_reactivated_sub_days_since_cancel is null)) and first_sub_cancelled_at is not null and date_trunc(""month"",to_date(first_sub_cancelled_at)) = '2023-09-01' and was_previously_paused = False
*/
    
select date_trunc(""month"",to_date(first_sub_cancelled_at)) as cancelled_month_year,
    was_previously_paused,
    first_sub_product,
    first_reactivated_sub_product,
    first_sub_canceled_reason_group,
    first_sub_discount_percentage,
    first_reactivated_sub_discount_percentage,
    first_sub_canceled_sku,
    first_reactivated_sub_activated_sku,
    first_sub_checkout_survey,
    first_reactivated_sub_checkout_survey,
    floor(datediff('days',to_date(first_sub_activated_at),to_date(first_sub_cancelled_at))/30) as customer_age_months,
    first_reactivated_sub_cycle_since_cancel as reactivated_cycle,
    count(distinct user_subscription_id) as churn_subscrption_count,
    count(distinct case when first_reactivated_sub_cycle_since_cancel = 0 then user_subscription_id end) as winback_0_30_days,
    count(distinct case when first_reactivated_sub_cycle_since_cancel = 1 then user_subscription_id end) as winback_30_60_days,
    count(distinct case when first_reactivated_sub_cycle_since_cancel = 2 then user_subscription_id end) as winback_60_90_days,
    count(distinct case when first_reactivated_sub_cycle_since_cancel = 3 then user_subscription_id end) as winback_90_120_days,
    count(distinct case when first_reactivated_sub_cycle_since_cancel = 4 then user_subscription_id end) as winback_120_150_days,
    count(distinct case when first_reactivated_sub_cycle_since_cancel = 5 then user_subscription_id end) as winback_150_180_days,
    count(distinct case when first_reactivated_sub_cycle_since_cancel = 6 then user_subscription_id end) as winback_180_210_days,
    count(distinct case when first_reactivated_sub_cycle_since_cancel = 7 then user_subscription_id end) as winback_210_240_days,
    count(distinct case when first_reactivated_sub_cycle_since_cancel = 8 then user_subscription_id end) as winback_240_270_days,
    count(distinct case when first_reactivated_sub_cycle_since_cancel = 9 then user_subscription_id end) as winback_270_300_days,
    count(distinct case when first_reactivated_sub_cycle_since_cancel = 10 then user_subscription_id end) as winback_300_330_days,
    count(distinct case when first_reactivated_sub_cycle_since_cancel = 11 then user_subscription_id end) as winback_330_360_days,
    count(distinct case when first_reactivated_sub_cycle_since_cancel is not null then user_subscription_id end) as winback_ever

from final_raw_data
where ((first_reactivated_sub_days_since_cancel >= 0) or (first_reactivated_sub_days_since_cancel is null)) and first_sub_cancelled_at is not null
group by 1,2,3,4,5,6,7,8,9,10,11,12,13
order by 1,2 desc"
"V_TEMP_CANCEL_SUBSCRIBER_ANALYSIS","create or replace view SEED_DATA.DEV.V_TEMP_CANCEL_SUBSCRIBER_ANALYSIS as 
--- select * from SEED_DATA.DEV.V_TEMP_CANCEL_SUBSCRIBER_ANALYSIS

with cancel as 
(
select *,
to_date(activated_at) as activated_date,
to_date(first_cancel_date) as first_cancel_date_date,
date_trunc('month',first_cancel_date_date) as first_cancel_month_year,
datediff(days,first_cancel_date,current_date) as days_since_cancel,
to_date(first_subscription_date) as activation_date,
date_trunc(month,activation_date) as activation_month_year,
date_trunc(year,activation_date) as activation_year,
first_discount_percentage as first_discount_percentage,
--datediff(days,first_cancel_date_date,activated_date) as days_since_cancel,
case when days_since_cancel >=0 and days_since_cancel <= 10 then 'cancel-0-10'
        when days_since_cancel >=11 and days_since_cancel <= 20 then 'cancel-11-20'
        when days_since_cancel >=21 and days_since_cancel <= 30 then 'cancel-21-30'
        when days_since_cancel >=31 and days_since_cancel <= 40 then 'cancel-31-40'
        when days_since_cancel >=41 and days_since_cancel <= 50 then 'cancel-41-50'
        when days_since_cancel >=51 and days_since_cancel <= 60 then 'cancel-51-60'
        when days_since_cancel >=60 then 'cancel-60+'
        end as cancel_days_cat,
        case when reactivation_flag = 1 and activated_date >= first_cancel_date_date then 1 end as reactivation_tag
from SEED_DATA.DEV.SUBSCRIPTION_MASTER
where to_date(first_cancel_date) >= '2023-01-01' and to_date(first_cancel_date) < '2023-09-01'
)

select 
distinct RECURLY_SUBSCRIPTION_ID as SUBSCRIPTION_UUID, first_cancel_month_year
from cancel
where 
first_cancel_month_year >= '2023-04-01' and 
ifnull(reactivation_tag,0) <> 0 and first_product = 'DS-01'
"
"V_MARKETING_CHANNEL_SPEND_ALL","create or replace view SEED_DATA.DEV.V_MARKETING_CHANNEL_SPEND_ALL(
	PREV_MTD_FLAG,
	CURR_MTD_FLAG,
	DATE,
	TYPE,
	CATEGORY,
	CHANNEL,
	PRODUCT,
	SOURCE,
	SPEND,
	CONVERSIONS
) as 

with combined_spend as (
SELECT * FROM SEED_DATA.DEV.V_MARKETING_CHANNEL_SPEND_AUTOMATED
UNION ALL
SELECT * FROM SEED_DATA.DEV.V_MARKETING_CHANNEL_SPEND_MANUAL
)

select 
case when date between DATEADD(MONTH, -1, date_trunc('month',current_date())) and DATEADD(MONTH, -1, current_date()-1) then 1 else 0 end as Prev_MTD_Flag,
case when date between DATEADD(MONTH, 0, date_trunc('month',current_date())) and DATEADD(MONTH, 0, current_date()-1) then 1 else 0 end as Curr_MTD_Flag,
*
from combined_spend
where concat(SOURCE,'-',TYPE) <> 'PINTEREST-MANUAL'
and date <= current_date()-1
;"
"V_REHCARGE_ORDER_HISTORY","create or replace view SEED_DATA.DEV.V_REHCARGE_ORDER_HISTORY(
	INVOICE_ID,
	TRANSACTION_ID,
	CUSTOMER_ID,
	CUSTOMER_EMAIL,
	SUBSCRIPTION_ID,
	ORDER_DATE,
	SKU,
    DISCOUNT_CODE,
	QUANTITY,
	BASE_PRICE,
	TOTAL_AMOUNT_PAID,
	TAX,
	DISCOUNT,
	SHIPPING_COST,
	REFUND_AMOUNT
) as 

with recharge_rev as
(
    with recharge_charge_line_item as
    (
        --- We need to normalize the amount of transaction based on the line items on the transaction   
        
        select charge_id,index, subscription_id,quantity,sku, 
            case when sku ilike '%3MO' then quantity*3 else quantity end as adjusted_quantity,
            sum(adjusted_quantity) over(partition by charge_id) as adjusted_quantity_total,
            (adjusted_quantity/adjusted_quantity_total) as norm_factor
        from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM""
        where sku not ilike '12345'
        -- Filtering out what looks like a test SKU
                
    ),

    recharge_discount_code as 
    (
        select charge_id, code as discount_code
        from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_DISCOUNT_CODE"" as cdc
          left join ""MARKETING_DATABASE"".""RECHARGE"".""DISCOUNT"" as d on cdc.discount_id = d.id 
    )
    
    select o.id as invoice_id ,o.processed_at, c.id as transaction_id,c.customer_id as customer_id, c.email as customer_email,cli.subscription_id, 
        to_date(dateadd(hour, -4, c.processed_at)) as order_date,cli.sku as sku, cli.quantity as quantity, 
        (c.total_line_items_price*cli.norm_factor) as base_price,(c.total_price*cli.norm_factor) as total_amount_paid, 
        (c.total_tax*cli.norm_factor) as tax, (c.total_discounts*cli.norm_factor) as discount,
        (csl.price*cli.norm_factor)  as shipping_cost, (c.total_refunds*cli.norm_factor) as refund_amount,
        dc.discount_code
    from ""MARKETING_DATABASE"".""RECHARGE"".""ORDER"" as o
        join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c on c.id = o.charge_id
        join recharge_charge_line_item as cli on cli.charge_id = c.id
        left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" as csl on csl.charge_id = c.id
        left join recharge_discount_code as dc on dc.charge_id = c.id
    where c.processed_at is not null 
    
)
select 
  invoice_id 
, transaction_id
, customer_id
, customer_email
, subscription_id
, order_date
, sku
, discount_code
, ifnull(sum(quantity),0) as quantity
, ifnull(sum(base_price),0) as base_price
, ifnull(sum(total_amount_paid),0) as total_amount_paid
, ifnull(sum(tax),0) as tax
, ifnull(sum(discount),0) as discount
, ifnull(sum(shipping_cost),0) as shipping_cost
, ifnull(sum(refund_amount),0) as refund_amount

from recharge_rev

group by 1,2,3,4,5,6,7,8


--select * from ""MARKETING_DATABASE"".""RECHARGE"".""ORDER"" limit 10
;"
"V_REHCARGE_TRANSACTION_HISTORY","create or replace view SEED_DATA.DEV.V_REHCARGE_TRANSACTION_HISTORY as 

with recharge_charge_line_item as
(
select 
  cli.charge_id
, cli.index
, cli.subscription_id
, cli.quantity
, cli.sku
, case when cli.sku ilike '%3MO' then cli.quantity*3 else cli.quantity end as adjusted_quantity
, sum(adjusted_quantity) over(partition by cli.charge_id) as adjusted_quantity_total
, (adjusted_quantity / adjusted_quantity_total) as norm_factor
from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_LINE_ITEM"" as cli
where sku not ilike '12345'-- Filtering out what looks like a test SKU
)

,recharge_discount_code as
(
select 
  cdc.charge_id
, d.code as discount_code
from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_DISCOUNT_CODE"" as cdc
left join ""MARKETING_DATABASE"".""RECHARGE"".""DISCOUNT"" as d on cdc.discount_id = d.id
)

,recharge_rev as
(
select 
  c.id as transaction_id
, c.customer_id as customer_id
, c.email as customer_email
, cli.subscription_id
--, to_date(dateadd(hour, -4, c.processed_at)) as order_date ---- This is the old code that we can revisit / needs to be UTC
, c.processed_at as order_date_ts
, cli.sku as sku
, cli.quantity as quantity
, (c.total_line_items_price*cli.norm_factor) as base_price
, (c.total_price*cli.norm_factor) as total_amount_paid
, (c.total_tax*cli.norm_factor) as tax
, (c.total_discounts*cli.norm_factor) as discount
, dc.discount_code as promotion_code
, (csl.price*cli.norm_factor)  as shipping_cost
, (c.total_refunds*cli.norm_factor) as refund_amount

from ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE"" as c
join recharge_charge_line_item as cli on cli.charge_id = c.id
left join ""MARKETING_DATABASE"".""RECHARGE"".""CHARGE_SHIPPING_LINE"" as csl on csl.charge_id = c.id
left join recharge_discount_code as dc on dc.charge_id = c.id

where processed_at is not null --- need to have processed date / for recharge, it has to be successfully processed
)

,recharge_final as (
select 
  rc.transaction_id
, rc.customer_id
, rc.subscription_id
, rc.order_date_ts
, to_date(rc.order_date_ts) as order_date
, rc.sku
, rc.promotion_code
, ifnull(sum(rc.quantity),0) as quantity
, ifnull(sum(rc.base_price),0) as base_price ---- look at potentially using differnt price column
, ifnull(sum(rc.total_amount_paid),0) as total_amount_paid
, ifnull(sum(rc.tax),0) as tax
, ifnull(sum(rc.discount),0) as discount
, ifnull(sum(rc.shipping_cost),0) as shipping_cost
, ifnull(sum(rc.refund_amount),0) as refund_amount
from recharge_rev as rc
group by 1,2,3,4,5,6,7 )

select * from recharge_final;"
"V_REVENUE_HISTORY","create or replace view SEED_DATA.DEV.V_REVENUE_HISTORY as 

with all_orders as 
(
    select * from SEED_DATA.DEV.ORDER_HISTORY --- all orders and adjusted orders for SRP
)

 , reactivation as (
select 
  to_date(activated_at) as date
, recharge_subscription_id as subscription_id
, quantity
, 'Y' as Flag
   from
   ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 1 and recharge_subscription_id is not null
   
   union all

   select 
  to_date(activated_at) as date
, recurly_subscription_id as subscription_id
, quantity
, 'Y' as Flag
   from
   ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 1 and Recurly_subscription_id is not null
)

 , New as (
select 
  to_date(activated_at) as date
, recharge_subscription_id as subscription_id
, 'Y' as Flag
   from
   ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 0 and Recharge_subscription_id is not null
   
   union all

   select 
  to_date(activated_at) as date
, recurly_subscription_id as subscription_id
, 'Y' as Flag
   from
   ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 0 and Recurly_subscription_id is not null)

,sub_inv as 
(
    -- joining recharge invoices
    select 
        TO_DATE(O.INVOICE_DATE) as INVOICE_DATE,
        O.CUSTOMER_ID,
        O.SUBSCRIPTION_ID as SUBSCRIPTION_ID,
        O.INVOICE_ID as INVOICE_ID,
        O.INVOICE_NUMBER AS INVOICE_NUMBER,
        O.TRANSACTION_ID,
        O.SKU,
        O.SKU_DESCRIPTION,
        CASE WHEN UPPER(O.SKU) ILIKE '%PDS%' THEN 'PDS-08' 
             WHEN UPPER(O.SKU) ILIKE '%SYN%' THEN 'DS-01'
             WHEN UPPER(O.SKU) ILIKE '%DS%' THEN 'DS-01'
             ELSE 'OTHER' END AS SKU_MASTER_ID,
       CASE WHEN UPPER(O.SKU) ILIKE '%6MO%' THEN 'Y' 
            WHEN UPPER(O.SKU) ILIKE '%3MO%' THEN 'Y' 
            else 'N' END AS SRP_FLAG,
        ifnull(S.FLAG,'N') as REACTIVATION_FLAG,
        ifnull(N.FLAG,'N') as NEW_FLAG,
        O.QUANTITY,
        O.BASE_PRICE,
        O.TOTAL_AMOUNT_PAID,
        O.TAX,
        O.DISCOUNT,
        O.AMOUNT_PAID_BY_TRANSACTION,
        O.TOTAL_SHIPPING_COST,
        O.SHIPPING_COST_WO_TAX,
        O.SHIPPING_COST_TAX,
        O.AMOUNT_REFUNDED,
        O.CREDIT_APPLIED,
         base_price
        - tax 
        - COALESCE(total_shipping_cost,0) 
        + discount 
        + COALESCE(credit_applied, 0) as gross_revenue
        
    , base_price
        - tax 
        - COALESCE(shipping_cost_tax,0) 
        + discount 
        + COALESCE(SHIPPING_COST_WO_TAX, 0) as adj_gross_revenue
        
    , base_price
        + tax 
        + COALESCE(total_shipping_cost,0) 
        - discount 
        - COALESCE(credit_applied, 0) as adj_total_paid
        
    , base_price
        + COALESCE(SHIPPING_COST_WO_TAX,0) 
        - discount 
        - COALESCE(credit_applied, 0) as adj_subtotal_paid
        
    ,gross_revenue/o.quantity as Net_Value
  
  
  
  
    from all_orders as o
    left join reactivation as s
    on o.subscription_id = s.subscription_id and TO_DATE(O.INVOICE_DATE) = s.date
    left join new as n
    on o.subscription_id = n.subscription_id and TO_DATE(O.INVOICE_DATE) = n.date
      
 )

    
  select 
      sub_inv.INVOICE_DATE,
      date_trunc('month',sub_inv.INVOICE_DATE) as INVOICE_MONTH,
      SKU_MASTER_ID as PRODUCT,
      SKU,
      IFNULL(SUM(QUANTITY),0) as TOTAL_SUB_QTY,
      IFNULL(sum(case when (NEW_FLAG = 'Y' or REACTIVATION_FLAG = 'Y') then quantity end),0) as ACTIVATED_SUB_QTY,
      IFNULL(sum(case when NEW_FLAG = 'Y' then quantity end),0) as ACTIVATED_NEW_SUB_QTY,
      IFNULL(sum(case when REACTIVATION_FLAG = 'Y' then quantity end),0) as ACTIVATED_REACTIVATE_SUB_QTY,
      IFNULL(COUNT(distinct SUBSCRIPTION_ID),0) as TOTAL_SUBSCRIBERS,
      IFNULL(COUNT(distinct case when (NEW_FLAG = 'Y' or REACTIVATION_FLAG = 'Y') then SUBSCRIPTION_ID end),0) as ACTIVATED_SUB_ID,
      IFNULL(COUNT(distinct case when NEW_FLAG = 'Y' then SUBSCRIPTION_ID end),0) as ACTIVATED_NEW_SUB_ID,
      IFNULL(COUNT(distinct case when REACTIVATION_FLAG = 'Y' then SUBSCRIPTION_ID end),0) as ACTIVATED_REACTIVATE_SUB_ID,       
      IFNULL(count(distinct CUSTOMER_ID),0) as TOTAL_ACCOUNTS,
      IFNULL(COUNT(distinct case when (NEW_FLAG = 'Y' or REACTIVATION_FLAG = 'Y') then CUSTOMER_ID end),0) as ACTIVATED_ACCOUNT,
      IFNULL(COUNT(distinct case when NEW_FLAG = 'Y' then CUSTOMER_ID end),0) as ACTIVATED_NEW_ACCOUNT,
      IFNULL(COUNT(distinct case when REACTIVATION_FLAG = 'Y' then CUSTOMER_ID end),0) as ACTIVATED_REACTIVATE_ACCOUNT,        
      IFNULL(SUM(TOTAL_AMOUNT_PAID),0) as TOTAL_AMOUNT_PAID,
      IFNULL(sum(case when (NEW_FLAG = 'Y' or REACTIVATION_FLAG = 'Y') then TOTAL_AMOUNT_PAID end),0) as ACTIVATED_TOTAL_AMOUNT_PAID,
      IFNULL(sum(case when NEW_FLAG = 'Y' then TOTAL_AMOUNT_PAID end),0) as ACTIVATED_NEW_TOTAL_AMOUNT_PAID,
      IFNULL(sum(case when REACTIVATION_FLAG = 'Y' then TOTAL_AMOUNT_PAID end),0) as ACTIVATED_REACTIVATE_TOTAL_AMOUNT_PAID,
      IFNULL(SUM(gross_revenue),0) as TOTAL_GROSS_REV,
      IFNULL(sum(case when (NEW_FLAG = 'Y' or REACTIVATION_FLAG = 'Y') then gross_revenue end),0) as ACTIVATED_TOTAL_GROSS_REV,
      IFNULL(sum(case when NEW_FLAG = 'Y' then gross_revenue end),0) as ACTIVATED_NEW_TOTAL_GROSS_REV,
      IFNULL(sum(case when REACTIVATION_FLAG = 'Y' then gross_revenue end),0) as ACTIVATED_REACTIVATE_TOTAL_GROSS_REV,
      IFNULL(SUM(DISCOUNT),0) as TOTAL_DISCOUNT,
      IFNULL(sum(case when (NEW_FLAG = 'Y' or REACTIVATION_FLAG = 'Y') then DISCOUNT end),0) as ACTIVATED_TOTAL_DISCOUNT,
      IFNULL(sum(case when NEW_FLAG = 'Y' then DISCOUNT end),0) as ACTIVATED_NEW_TOTAL_DISCOUNT,
      IFNULL(sum(case when REACTIVATION_FLAG = 'Y' then DISCOUNT end),0) as ACTIVATED_REACTIVATE_TOTAL_DISCOUNT,
      IFNULL(SUM(TOTAL_SHIPPING_COST),0) as TOTAL_SHIPPING_COST,
      IFNULL(sum(case when (NEW_FLAG = 'Y' or REACTIVATION_FLAG = 'Y') then TOTAL_SHIPPING_COST end),0) as ACTIVATED_TOTAL_SHIPPING_COST,
      IFNULL(sum(case when NEW_FLAG = 'Y' then TOTAL_SHIPPING_COST end),0) as ACTIVATED_NEW_TOTAL_SHIPPING_COST,
      IFNULL(sum(case when REACTIVATION_FLAG = 'Y' then TOTAL_SHIPPING_COST end),0) as ACTIVATED_REACTIVATE_TOTAL_SHIPPING_COST,
      IFNULL(SUM(AMOUNT_REFUNDED),0) as TOTAL_REFUNDED,
      IFNULL(sum(case when (NEW_FLAG = 'Y' or REACTIVATION_FLAG = 'Y') then AMOUNT_REFUNDED end),0) as ACTIVATED_TOTAL_REFUNDED,
      IFNULL(sum(case when NEW_FLAG = 'Y' then AMOUNT_REFUNDED end),0) as ACTIVATED_NEW_REFUNDED,
      IFNULL(sum(case when REACTIVATION_FLAG = 'Y' then AMOUNT_REFUNDED end),0) as ACTIVATED_REACTIVATE_TOTAL_REFUNDED,
      IFNULL(SUM(CREDIT_APPLIED),0) as TOTAL_CREDIT,
      IFNULL(sum(case when (NEW_FLAG = 'Y' or REACTIVATION_FLAG = 'Y') then CREDIT_APPLIED end),0) as ACTIVATED_TOTAL_CREDIT,
      IFNULL(sum(case when NEW_FLAG = 'Y' then CREDIT_APPLIED end),0) as ACTIVATED_NEW_TOTAL_CREDIT,
      IFNULL(sum(case when REACTIVATION_FLAG = 'Y' then CREDIT_APPLIED end),0) as ACTIVATED_REACTIVATE_TOTAL_CREDIT
          
    from sub_inv
    group by 1,2,3,4
    ;"
"V_REVENUE_HISTORY_AGG","create or replace view SEED_DATA.DEV.V_REVENUE_HISTORY_AGG(
	INVOICE_DATE,
	INVOICE_MONTH,
	PRODUCT,
	SKU,
	INVOICE_TYPE,
	TOTAL_ACCOUNTS,
	TOTAL_SUBSCRIBERS,
	TOTAL_SUBSCRIPTIONS,
	TOTAL_ORDERS,
	SRP_SUBSCRIBERS,
	TOTAL_BASE_PRICE,
	TOTAL_AMOUNT_PAID,
	TOTAL_TAX,
	TOTAL_DISCOUNT,
	TOTAL_AMOUNT_PAID_BY_TRANSACTION,
	TOTAL_SHIPPING_COST,
	TOTAL_SHIPPING_COST_WO_TAX,
	TOTAL_SHIPPING_COST_TAX,
	TOTAL_AMOUNT_REFUNDED,
	TOTAL_CREDIT_APPLIED,
	TOTAL_GROSS_REVENUE,
	TOTAL_ADJ_GROSS_REVENUE,
	TOTAL_ADJ_TOTAL_PAID,
	TOTAL_ADJ_SUBTOTAL_PAID
) as

select 
INVOICE_DATE,
DATE_TRUNC('MONTH',INVOICE_DATE) as INVOICE_MONTH,
SKU_MASTER_ID as PRODUCT,
SKU,
Case when NEW_FLAG = 'Y' and REACTIVATION_FLAG = 'N' and RENEWAL_FLAG = 'N'  then 'NEW'
     when NEW_FLAG = 'N' and REACTIVATION_FLAG = 'Y' and RENEWAL_FLAG = 'N'  then 'REACTIVATION'
     when NEW_FLAG = 'N' and REACTIVATION_FLAG = 'N' and RENEWAL_FLAG = 'Y'  then 'RENEWAL'
     else 'OTHER'
     end as INVOICE_TYPE,
IFNULL(count(distinct CUSTOMER_ID),0) as TOTAL_ACCOUNTS,
IFNULL(COUNT(distinct SUBSCRIPTION_ID),0) as TOTAL_SUBSCRIBERS,
IFNULL(SUM(QUANTITY),0) as TOTAL_SUBSCRIPTIONS,
IFNULL(COUNT(invoice_number),0) as TOTAL_ORDERS,
ifnull(SUM(case when SRP_FLAG = 'Y' then quantity end),0) SRP_SUBSCRIBERS,
ifnull(SUM(BASE_PRICE),0) as TOTAL_BASE_PRICE,
ifnull(SUM(TOTAL_AMOUNT_PAID),0) as TOTAL_AMOUNT_PAID,
ifnull(SUM(TAX),0) as TOTAL_TAX,
ifnull(SUM(DISCOUNT),0) as TOTAL_DISCOUNT,
ifnull(SUM(AMOUNT_PAID_BY_TRANSACTION),0) as TOTAL_AMOUNT_PAID_BY_TRANSACTION,
ifnull(SUM(TOTAL_SHIPPING_COST),0) as TOTAL_SHIPPING_COST,
ifnull(SUM(SHIPPING_COST_WO_TAX),0) as TOTAL_SHIPPING_COST_WO_TAX,
ifnull(SUM(SHIPPING_COST_TAX),0) as TOTAL_SHIPPING_COST_TAX,
ifnull(SUM(AMOUNT_REFUNDED),0) as TOTAL_AMOUNT_REFUNDED,
ifnull(SUM(CREDIT_APPLIED),0) as TOTAL_CREDIT_APPLIED,
ifnull(SUM(gross_revenue),0) as TOTAL_GROSS_REVENUE,
ifnull(SUM(adj_gross_revenue),0) as TOTAL_ADJ_GROSS_REVENUE,
ifnull(SUM(adj_total_paid),0) as TOTAL_ADJ_TOTAL_PAID,
ifnull(SUM(adj_subtotal_paid),0) as TOTAL_ADJ_SUBTOTAL_PAID

from ""SEED_DATA"".""DEV"".""V_REVENUE_HISTORY"" 
--where INVOICE_DATE = '2023-07-01' 
group by 1,2,3,4,5 order by 1 asc;"
"V_SEED_SUBSCRIPTION_ACTIVITY","create or replace view SEED_DATA.DEV.V_SEED_SUBSCRIPTION_ACTIVITY as 

--- using the date spin to pin all metrics to the date
with date_spine as (
    select 
    *
    from seed_data.dev.dim_date
    where date between '2020-01-01' and to_date(current_date())
)

, cancellation_transaction_history as (
select 
  to_date(cancelation_form_created_at) as date
, reason_group
, ifnull(count(distinct subscription_id),0) as sub_cancellation_cnt
from SEED_DATA.DEV.CANCELLATION_TRANSACTION_HISTORY
where 
to_date(cancelation_form_created_at) between '2020-01-01' and to_date(current_date())
group by 1,2
)

----- add quantity
, pause as 
(
 select 
   to_date(pause_start_date) as date
 , count(distinct subscription_uuid) as sub_pause_cnt
 from (
 ----- pause build
    select subscription_uuid,
        version_started_at as pause_start_date, 
        version_ended_at_clean as pause_end_date,
        row_number() over(partition by subscription_uuid order by version_started_at desc) as pause_rank
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_PAUSE_HISTORY""
    qualify pause_rank = 1 
   ) 
 where pause_start_date is not null
 group by 1
 --order by 1 desc
)

, subscription as (
select 
  to_date(created_at) as date
, ifnull(sum(quantity),0) as sub_created_qty
from SEED_DATA.DEV.SUBSCRIPTION
where 
to_date(created_at) between '2020-01-01' and to_date(current_date())
group by 1
--order by 1 desc
)

, reactivation as (
select 
  to_date(created_at) as date
, ifnull(sum(quantity),0) as sub_reactivation_qty
from SEED_DATA.DEV.REACTIVATION_HISTORY
where 
to_date(created_at) between '2020-01-01' and to_date(current_date())
and reactivation_flag = 1
group by 1
--order by 1 desc
)

, new_sub as (
select 
  to_date(created_at) as date
, ifnull(sum(quantity),0) as sub_new_qty
from SEED_DATA.DEV.REACTIVATION_HISTORY
where 
to_date(created_at) between '2020-01-01' and to_date(current_date())
and reactivation_flag = 0
group by 1
--order by 1 desc
)

, orders as (
select 
  to_date(INVOICE_DATE) as date
, ifnull(sum(quantity),0) as orders
, ifnull(sum(TOTAL_AMOUNT_PAID),0) as revenue
from SEED_DATA.DEV.ORDER_HISTORY
where 
to_date(INVOICE_DATE) between '2020-01-01' and to_date(current_date())
group by 1
--order by 1 desc
)


select 
  ds.date
, DATE_TRUNC('MONTH', ds.date) AS month_date
, sum( case when cth.reason_group = 'Price' then cth.sub_cancellation_cnt end ) as price_sub_cancellation_cnt
, sum( case when cth.reason_group = 'Compliance' then cth.sub_cancellation_cnt end ) as compliance_sub_cancellation_cnt
, sum( case when cth.reason_group = 'No improvement' then cth.sub_cancellation_cnt end ) as noimprove_sub_cancellation_cnt
, sum( case when cth.reason_group = 'Discomfort' then cth.sub_cancellation_cnt end ) as discomfort_sub_cancellation_cnt
, sum( case when cth.reason_group = 'Subscription aversion' then cth.sub_cancellation_cnt end ) as subaver_sub_cancellation_cnt
, sum( case when cth.reason_group = 'Stopped taking probiotics' then cth.sub_cancellation_cnt end ) as stopped_sub_cancellation_cnt
, sum( case when cth.reason_group = 'Switched probiotics' then cth.sub_cancellation_cnt end ) as switchprob_cancellation_cnt
, sum( case when cth.reason_group = 'UX' then cth.sub_cancellation_cnt end ) as ux_sub_cancellation_cnt
, sum( case when cth.reason_group = 'Switched due to price' then cth.sub_cancellation_cnt end ) as switchprice_sub_cancellation_cnt
, sum( case when cth.reason_group = 'Experience' then cth.sub_cancellation_cnt end ) as experience_sub_cancellation_cnt
, sum( case when cth.reason_group = 'Other' then cth.sub_cancellation_cnt end ) as other_sub_cancellation_cnt
, sum(cth.sub_cancellation_cnt) as ttl_sub_cancellation_cnt
, max(sub.sub_created_qty) as sub_created_qty
, max(pau.sub_pause_cnt) as sub_pause_cnt
, max(rtv.sub_reactivation_qty) as sub_reactivation_qty
, max(nsu.sub_new_qty) as sub_new_qty
, max(ord.orders) as orders
, max(ord.revenue) as revenue

from date_spine as ds
---- join to cancellations
left join cancellation_transaction_history as cth
on ds.date = cth.date
---- join to total subs
left join subscription as sub
on ds.date = sub.date
---- join to paused subs
left join pause as pau
on ds.date = pau.date
---- join to reactivation subs
left join reactivation as rtv
on ds.date = rtv.date
---- join to new subs
left join new_sub as nsu
on ds.date = nsu.date
---- join to orders
left join orders as ord
on ds.date = ord.date

group by 1,2
order by 1 desc 

--select * from SEED_DATA.DEV.V_SUBSCRIPTION limit 10"
"V_SUBSCRIPTION_MASTER","create or replace view SEED_DATA.DEV.V_SUBSCRIPTION_MASTER as 
    with orders as 
    (
        with orders_clean as 
        (
            select subscription_id, 
                invoice_date, 
                lower(sku) as sku,
                case when sku ilike '%syn%' or sku ilike 'ds01%' then 'DS-01'
                    when sku ilike '%pds%' then 'PDS-08'
                    else null end as product,
                case when product = 'DS-01' and sku ilike '%wk%' then 'DS-01 Welcome Kit'
                    when product = 'DS-01' and sku ilike '%wk-3mo%' then 'DS-01 Welcome kit - 3 Months'
                    when product = 'DS-01' and sku ilike '%wk-6mo%' then 'DS-01 Welcome kit - 6 Months'
                    when product = 'DS-01' and sku ilike '%rf' then 'DS-01 Refill'
                    when product = 'DS-01' and sku ilike '%2mo%' then 'DS-01 Refill - 2 Months'
                    when product = 'DS-01' and sku ilike '%3mo%' then 'DS-01 SRP Refill - 3 Months'
                    when product = 'DS-01' and sku ilike '%6mo%' then 'DS-01 SRP Refill - 6 Months'
                    when product = 'DS-01' and sku ilike '%trial%' then 'DS-01 Trial'
                    when product = 'PDS-08' and sku ilike '%wk%' then 'PDS-08 Welcome Kit'
                    when product = 'PDS-08' and sku ilike '%rf' then 'PDS-08 Refill'
                    when product = 'PDS-08' and sku ilike '%2mo%' then 'PDS-08 Refill - 2 Months'
                    when product = 'PDS-08' and sku ilike '%3mo%' then 'PDS-08 SRP Refill - 3 Months'
                    when product = 'PDS-08' and sku ilike '%6mo%' then 'PDS-08 SRP Refill - 6 Months'
                    when product = 'PDS-08' and sku ilike '%trial%' then 'PDS-08 Trial'
                    else null                    
                    end as clean_sku, 
                case when clean_sku ilike '%Trial%' then 1 
                    when clean_sku ilike '%Welcome Kit%' then 2 
                    when clean_sku ilike '%Refill - 2 Months' then 3
                    when clean_sku ilike '%Refill' then 4
                    when clean_sku ilike '%Refill - 3 Months' then 5
                    when clean_sku ilike '%Refill - 6 Months' then 6 
                    end as sku_ranking,
                row_number() over(partition by subscription_id,product order by invoice_date,sku_ranking) as first_invoice_product_rank,
                row_number() over (partition by subscription_id,product order by invoice_date desc ,sku_ranking desc) as last_invoice_product_rank,
                row_number() over (partition by subscription_id order by invoice_date,sku_ranking ) as first_invoice_rank,
                row_number() over (partition by subscription_id order by invoice_date desc, sku_ranking desc) as last_invoice_rank,
                case when product = 'DS-01' and first_invoice_product_rank = 1 then invoice_date
                    else null end as first_order_date_ds01,
                case when product = 'PDS-08' and first_invoice_product_rank = 1 then invoice_date
                    else null end as first_order_date_pds08,
                case when first_invoice_rank = 1 then invoice_date 
                    else null end as first_order_date,
                case when product = 'DS-01' and last_invoice_product_rank = 1 then invoice_date
                    else null end as last_order_date_ds01,
                case when product = 'PDS-08' and last_invoice_product_rank = 1 then invoice_date
                    else null end as last_order_date_pds08,
                case when last_invoice_rank = 1 then invoice_date 
                    else null end as last_order_date,
                case when first_invoice_rank = 1 then product
                    else null end as first_product,
                case when first_invoice_rank = 1 then clean_sku
                    else null end as first_sku,
                case when first_invoice_rank = 1 then quantity
                    else null end as first_quantity,
                case when first_invoice_rank = 1 then 
                round(div0((discount*100),(total_amount_paid - tax - total_shipping_cost + discount)),0) else null end as first_discount_percentage,
                ----- adding as part of a test for base price discount
                case when first_invoice_rank = 1 then 
                round(div0((discount*100),(base_price)),0) else null end as first_discount_percentage_base_price,
                case when first_invoice_rank = 1 then promotion_code end as first_promotion_code,
                case when last_invoice_rank = 1 then product 
                    else null end as last_product,
                case when last_invoice_rank = 1 then clean_sku
                    else null end as last_sku,
                case when last_invoice_rank = 1 then quantity
                    else null end as last_quantity,
                case when last_invoice_rank = 1 then round(div0((discount*100),(total_amount_paid - tax - total_shipping_cost +discount)),0) else null end as last_discount_percentage,
                case when last_invoice_rank = 1 then promotion_code end as last_promotion_code,
                case when first_invoice_rank = 1 then (base_price - tax - COALESCE(total_shipping_cost,0) + discount + COALESCE(credit_applied, 0))
                    else null end as first_order_gross_revenue,
                case when first_invoice_rank = 1 then (base_price)
                    else null end as first_order_total_base_price,
                case when first_invoice_rank = 1 then (Discount)
                    else null end as first_order_total_discount
          
      from ""SEED_DATA"".""DEV"".""V_ORDER_HISTORY"" as o 
            where subscription_id is not null 
        ),
    
        order_summary as
        (
            select
                subscription_id, 
                min(first_order_date_ds01) as first_order_date_ds01,
                min(first_order_date_pds08) as first_order_date_pds08,
                min(first_order_date) as first_order_date,
                min(first_product) as first_product,
                min(first_sku) as first_sku,
                min(first_quantity) as first_quantity,
                min(first_discount_percentage) as first_discount_percentage,
                min(first_discount_percentage_base_price) as first_discount_percentage_base_price,
                min(first_promotion_code) as first_promotion_code,
                max(last_order_date_ds01) as last_order_date_ds01,
                max(last_order_date_pds08) as last_order_date_pds08,
                max(last_order_date) as last_order_date,
                max(last_product) as last_product,
                max(last_sku) as last_sku,
                max(last_quantity) as last_quantity,
                max(last_discount_percentage) as last_discount_percentage,
                max(last_promotion_code) as last_promotion_code,
                min(first_order_gross_revenue) as first_order_gross_revenue,
                min(first_order_total_base_price) as first_order_total_base_price,
                min(first_order_total_discount) as first_order_total_discount
            from orders_clean    
            group by subscription_id
        )

        
    
        select recharge_subscription_id,
            recurly_subscription_id,
            min(coalesce(order_recharge.first_order_date_ds01,order_recurly.first_order_date_ds01)) as first_order_date_ds01,
            min(coalesce(order_recharge.first_order_date_pds08,order_recurly.first_order_date_pds08)) as first_order_date_pds08,
            min(coalesce(order_recharge.first_order_date,order_recurly.first_order_date)) as first_order_date,
            min(coalesce(order_recharge.first_product,order_recurly.first_product)) as first_product,
            min(coalesce(order_recharge.first_sku,order_recurly.first_sku)) as first_sku,
            min(coalesce(order_recharge.first_quantity,order_recurly.first_quantity)) as first_quantity,
            min(coalesce(order_recharge.first_discount_percentage,order_recurly.first_discount_percentage)) as first_discount_percentage,
            min(coalesce(order_recharge.first_discount_percentage_base_price,order_recurly.first_discount_percentage_base_price)) as first_discount_percentage_base_price,
            min(coalesce(order_recharge.first_promotion_code,order_recurly.first_promotion_code)) as first_promotion_code,
            max(coalesce(order_recurly.last_order_date_ds01,order_recharge.last_order_date_ds01)) as last_order_date_ds01,
            max(coalesce(order_recurly.last_order_date_pds08,order_recharge.last_order_date_pds08)) as last_order_date_pds08,
            max(coalesce(order_recurly.last_order_date,order_recharge.last_order_date)) as last_order_date,
            max(coalesce(order_recurly.last_product,order_recharge.last_product)) as last_product,
            max(coalesce(order_recurly.last_sku,order_recharge.last_sku)) as last_sku,
            max(coalesce(order_recurly.last_quantity,order_recharge.last_quantity)) as last_quantity,
            max(coalesce(order_recurly.last_discount_percentage,order_recharge.last_discount_percentage)) as last_discount_percentage,
            max(coalesce(order_recurly.last_promotion_code,order_recharge.last_promotion_code)) as last_promotion_code,
            min(coalesce(order_recurly.first_order_gross_revenue,order_recharge.first_order_gross_revenue)) as first_order_gross_revenue,
            min(coalesce(order_recurly.first_order_total_base_price,order_recharge.first_order_total_base_price)) as first_order_total_base_price,
            min(coalesce(order_recurly.first_order_total_discount,order_recharge.first_order_total_discount)) as first_order_total_discount
          
        from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION"" as s 
            left join order_summary as order_recharge on order_recharge.subscription_id = s.recharge_subscription_id
            left join order_summary as order_recurly on order_recurly.subscription_id = s.recurly_subscription_id
        group by recharge_subscription_id,recurly_subscription_id
       
    ),
    
    customer_sub_info as 
    (
        with subscription_product as 
        (
            select customer_id, activated_at,cancelled_at,
                case when sku ilike '%syn%' or sku ilike 'ds01%' then 'DS-01'
                    when sku ilike '%pds%' then 'PDS-08'
                    when sku is null and is_recharge_native = 1 and is_imported = 0 then 'DS-01'
                    else null end as product,
                datediff(month,activated_at,coalesce(cancelled_at,current_date()))+1 as months_active
        from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION""
        )

    select customer_id,
        min(case when product = 'DS-01' then activated_at else null end) as first_subscription_date_ds01,
        min(case when product = 'PDS-08' then activated_at else null end) as first_subscription_date_pds08,
        min(activated_at) as first_subscription_date,
        max(case when product = 'DS-01' then activated_at else null end) as last_subscription_date_ds01,
        max(case when product = 'PDS-08' then activated_at else null end) as last_subscription_date_pds08,
        max(activated_at) as last_subscription_date,
        min(case when product = 'DS-01' then cancelled_at else null end) as first_cancel_date_ds01,
        min(case when product = 'PDS-08' then cancelled_at else null end) as first_cancel_date_pds08,
        min(cancelled_at) as first_cancel_date,
        max(case when product = 'DS-01' then cancelled_at else null end) as last_cancel_date_ds01,
        max(case when product = 'PDS-08' then cancelled_at else null end) as last_cancel_date_pds08,
        max(cancelled_at) as last_cancel_date,
        sum(months_active) as months_active_customer -- overlaps are considered as multiple 
    from subscription_product
    group by customer_id
    )
       
    ,

    cancellation as 
    (
        select recurly_subscription_id,
            to_date(subscription_canceled_at) as cancelled_date,
            primary_reason as cancelled_primary_reason, 
            secondary_reason as cancelled_secondary_reason,
            reason_group
        from ""SEED_DATA"".""DEV"".""V_CANCELLATION_TRANSACTION_HISTORY""
    ),
    
    pause as 
    (
        select subscription_uuid as subscription_id,
            paused_at_clean as pause_start_date, 
            paused_at_clean_ts as pause_start_timestamp,
            version_ended_at_clean as pause_end_date,
            case when pause_end_date is null then 'Y' else 'N' end as Is_Paused,
            row_number() over(partition by subscription_uuid order by version_started_at desc) as pause_rank
        from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION_PAUSE_HISTORY""
        qualify pause_rank = 1
    
    ),
    
    next_bill as 
    (
        select subscription_id, next_bill_date
        from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION_NEXT_BILL_DATE""
    ),
    
    sku_history as 
    (
        select subscription_uuid as subscription_id, 
            min(case when updated_plan_code ilike '%3mo%' then version_started_at else null end) as first_enroll_date_srp_3mo,
            max(case when updated_plan_code ilike '%3mo%' then version_started_at else null end) as last_enroll_date_srp_3mo,
            min(case when updated_plan_code ilike '%6mo%' then version_started_at else null end) as first_enroll_date_srp_6mo,
            min(case when updated_plan_code ilike '%6mo%' then version_started_at else null end) as last_enroll_date_srp_6mo,
            case when first_enroll_date_srp_3mo is not null then 1 else 0 end as SRP_3mo_ever_flag,
            case when first_enroll_date_srp_6mo is not null then 1 else 0 end as SRP_6mo_ever_flag
        from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION_STATUS_HISTORY""
        group by subscription_uuid
    )
 ---------CHECKOUT SURVEY----------
    ,CO_Survey as
      
      (        
select 
  to_date(timestamp) as date
, date_trunc('month',to_date(timestamp)) as month_date
, upper(email) as email
, question
, response
, count(distinct user_id) as user_count
from SEGMENT_EVENTS.SEED_COM.SURVEY_QUESTION_ANSWERED
where question = 'How did you learn about Seed?'
group by 1,2,3,4,5
        )
     , LTA as 
     
     (
       select distinct 
                recurly_subscription_id
              , recharge_subscription_id
              , ifnull(channel,null) as channel
              , ifnull(bucket,null) as bucket
              , ifnull(agency,null) as agency
              , ifnull(spend_type,null) as spend_type
              , ifnull(platform,null) as platform
              , ifnull(erewhon_flag,null) as erewhon_flag
             from PROD_DB.GROWTH.V_SUBSCRIPTION_LTA_MAPPING

     )
 
 -------------
 ,MX_TEAM as (
    select Customer_id, 
           MAX(CONTACTED_MX_TEAM) as CONTACTED_MX_TEAM,
           MAX(SPOKE_W_SCI_CARE) as CONTACTED_SCI_CARE,
           MAX(SPOKE_W_CARE_TEAM) as CONTACTED_CARE
    from SEED_DATA.DEV.V_KUSTOMER_SUBSCRIBER_DETAIL
    where customer_id is not null
    group by 1
   
             )
             
 ----------------------Customer was moved from Pause to Cancel when we removed pause as an option
  ,prev_pause as (
    select
	ses.subscription_uuid,
	case when ses.was_previously_paused = 'TRUE' then 'Y' else 'N' end as was_previously_paused
from MARKETING_DATABASE.SEED_CORE_PUBLIC.SEED_ECOMMERCE_SUBSCRIPTION as ses
where was_previously_paused = True)


------------------------
, marketing_consent as (

select 
       distinct
       email, 
       max(case when consent is not null then 'Y' else 'N' end) as consent_flag
       from SEGMENT_EVENTS.SEED_COM.IDENTIFIES
where not (consent is null)
group by 1 

                        )
                        
, accepts_marketing as (

select 
       distinct
       email, 
       max(case when accepts_marketing ilike '%TRUE%' then 'Y' else 'N' end) as accepts_marketing_flag
       from SEGMENT_EVENTS.SEED_COM.IDENTIFIES
where not (accepts_marketing is null)
group by 1 

                        )                 
                        
, m_and_c_consent as (

select 
       distinct
       email, 
       max(case when accepts_marketing ilike '%TRUE%' or consent is not null then 'Y' else 'N' end) as m_and_c_flag
       from SEGMENT_EVENTS.SEED_COM.IDENTIFIES
where not (consent is null and accepts_marketing is null)
group by 1 
                       )
                       
, coupon_mapping as (
select * from ""MARKETING_DATABASE"".""GOOGLE_SHEETS"".""COUPON_MAPPING""
                    )                             
    
    select s.recharge_subscription_id,
        s.recurly_subscription_id,
        s.customer_id,
        s.customer_email,
        s.first_name,
        s.last_name,
        upper(s.CURRENT_STATUS) as current_sub_status,
        s.activated_at,
        s.quantity,
        s.cancelled_at,
        s.sku,
        s.full_address as address,
        s.billing_country as country,			
        s.billing_CITY as city,			
        s.billing_STATE as state,	
        cancelled_primary_reason,
        cancelled_secondary_reason,
        reason_group,
        case when is_recharge_native = 1 then 'Recharge'
            else 'Recurly'
            end as origination_platform,
        cus_sub.first_subscription_date_ds01,
        cus_sub.first_subscription_date_pds08,
        cus_sub.first_subscription_date,
        date_trunc(month,cus_sub.first_subscription_date) as first_subscription_month,
        cus_sub.last_subscription_date_ds01,
        cus_sub.last_subscription_date_pds08,
        cus_sub.last_subscription_date,
        date_trunc(month,cus_sub.last_subscription_date) as last_subscription_month,
        cus_sub.first_cancel_date_ds01,
        cus_sub.first_cancel_date_pds08,
        cus_sub.first_cancel_date,
        cus_sub.last_cancel_date_ds01,
        cus_sub.last_cancel_date_pds08,
        cus_sub.last_cancel_date,
        o.first_order_date_ds01,
        o.first_order_date_pds08,
        o.first_order_date,
        o.first_product,
        o.first_sku,
        o.first_quantity,
        o.first_discount_percentage,
        o.first_discount_percentage_base_price,
        o.first_promotion_code,
        o.last_order_date_ds01,
        o.last_order_date_pds08,
        o.last_order_date,
        o.last_product,
        o.last_sku,
        o.last_quantity,
        o.last_discount_percentage,
        o.last_promotion_code,
        o.first_order_gross_revenue,
        o.first_order_total_base_price,
        o.first_order_total_discount,
        (datediff(month,activated_at,coalesce(cancelled_at,current_date()))+1) as months_active,
        cus_sub.months_active_customer,
        p.pause_start_date,
        p.pause_start_timestamp,
        p.pause_end_date,
        nb.next_bill_date,
        sku.first_enroll_date_srp_3mo,
        sku.last_enroll_date_srp_3mo,
        sku.first_enroll_date_srp_6mo,
        sku.last_enroll_date_srp_6mo,
        sku.SRP_3mo_ever_flag,
        sku.SRP_6mo_ever_flag,
        case when sku ilike '%3mo%' then 1 else 0 end as SRP_3mo_currently,
        case when sku ilike '%6mo%' then 1 else 0 end as SRP_6mo_currently,
        case when s.activated_at > first_cancel_date then 1
            else 0 end as reactivation_flag,
        ifnull(Is_Paused,'N') as Is_Paused,
        case when p.pause_start_date is not null then 'Y' else 'N' end as Has_Paused,
        case when current_sub_status = 'failed' then 'Y' else 'N' end as In_Payment_Failure,
        case when (current_sub_status in ('ACTIVE','PENDING','FAILED') and Is_Paused is null)  then 'Y' else 'N' end as Is_Active,
        months_active_customer as customer_age,
        cs.date as checkout_survey_date,
        cs.month_date as checkout_survey_month,
        cs.RESPONSE as checkout_survey_response,
        --lta.CHANNEL_PLATFORM, 
        --lta.CHANNEL_GROUPING, 
        --lta.channel_bucket,
        --lta.channel,
        lta.channel,
        lta.bucket,
        lta.agency,
        lta.spend_type,
        lta.platform,
        ifnull(lta.erewhon_flag,'N') as erewhon_flag,
        case when cm.channel = 'INFLUENCER' then 'Influencer' else lta.channel end as channel_modified,
        case when cm.channel = 'INFLUENCER' then 'KOL/Partner' else lta.bucket end as bucket_modified,
        case when cm.channel = 'INFLUENCER' then 'HQ' else lta.agency end as agency_modified,     
        case when cm.channel = 'INFLUENCER' then 'Media' else lta.SPEND_TYPE end as spend_type_modified,  
        case when cm.channel = 'INFLUENCER' then lta.platform end as platform_modified,  

        CONTACTED_MX_TEAM as HAS_CONTACTED_MX,
        CONTACTED_SCI_CARE as HAS_CONTACTED_SCI_CARE,
        CONTACTED_CARE as HAS_CONTACTED_CARE,
        ifnull(was_previously_paused,'N') as was_previously_paused,
        ifnull(consent_flag,'N') as consent_flag,
        ifnull (accepts_marketing_flag,'N') as accepts_marketing_flag,
        ifnull (M_and_C_flag,'N') as MARKETING_AND_CONSENT_FLAG,
        case when (Is_Active = 'Y' and (sku ilike '%3mo%' or sku ilike '%6mo%')) then 'Y' else 'N' end as Is_Active_SRP,
        datediff(day,cus_sub.first_subscription_date,coalesce(cus_sub.last_cancel_date,current_date()))+1 as days_from_first_subscription_date_last_cancel_date,
        datediff(day,pause_start_date,current_date) as days_since_last_pause_date,
        datediff(day,cus_sub.last_cancel_date,current_date())+1 as days_since_last_cancel_date
     
        from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION"" as s
        left join cancellation as cancel on s.recurly_subscription_id = cancel.recurly_subscription_id
        left join customer_sub_info as cus_sub on cus_sub.customer_id = s.customer_id
        left join orders as o on coalesce(s.recurly_subscription_id,'') = coalesce(o.recurly_subscription_id,'') and coalesce(s.recharge_subscription_id,'') = coalesce(o.recharge_subscription_id,'')
        left join pause as p on s.recurly_subscription_id = p.subscription_id
        left join next_bill as nb on s.recurly_subscription_id = nb.subscription_id
        left join sku_history as sku on sku.subscription_id = s.recurly_subscription_id
        left join co_survey as cs on upper(s.customer_email) = upper(cs.email)
        left join lta on coalesce(s.recurly_subscription_id,'') = coalesce(lta.recurly_subscription_id,'') and coalesce(s.recharge_subscription_id,'') = coalesce(lta.recharge_subscription_id,'')
        left join MX_TEAM as cmt on cmt.customer_id = s.customer_id
        left join prev_pause as pp on s.recurly_subscription_id = pp.subscription_uuid
        left join marketing_consent as mc on s.customer_email = mc.email
        left join m_and_c_consent as mcc on s.customer_email = mcc.email
        left join accepts_marketing as am on s.customer_email = am.email
        left join coupon_mapping as cm on upper(o.first_promotion_code) = upper(cm.coupon_code)
        ;"
"V_SUB_RETENTION_VIEWS","create or replace view SEED_DATA.DEV.V_SUB_RETENTION_VIEWS as

with all_orders as 
(
    select * from SEED_DATA.DEV.V_ORDER_HISTORY_COGS_UPDATE
),

consent_flag_tbl as 
(
select email, max(case when accepts_marketing ilike '%TRUE%' or consent is not null then 1 else 0 end) as consent_flag
from SEGMENT_EVENTS.SEED_COM.IDENTIFIES
where not (consent is null and accepts_marketing is null)
group by 1 
),

all_subs as 
(
    select customer_id,
        customer_email,
        recharge_subscription_id,
        recurly_subscription_id,
        concat(coalesce(recharge_subscription_id,','),coalesce(recurly_subscription_id,',')) as subscription_id,
        to_date(first_subscription_date) as customer_cohort_date,
        to_date(activated_at) as subscription_cohort_date,
        to_date(s.cancelled_at) as subscription_cancelled_at, 
        case when srp_3mo_ever_flag = 1 or srp_6mo_ever_flag = 1 then 1 else 0 end as is_srp_ever,
        case when srp_3mo_ever_flag = 1 then 1 else 0 end as is_srp_3mo_ever,
        case when srp_6mo_ever_flag = 1 then 1 else 0 end as is_srp_6mo_ever,
        case when srp_3mo_currently = 1 or srp_6mo_currently = 1 then 1 else 0 end as is_srp_currently,
        case when srp_3mo_currently = 1 then 1 else 0 end as is_srp_3mo_currently,
        case when srp_6mo_currently = 1 then 1 else 0 end as is_srp_6mo_currently,
        case when first_product = 'DS-01' then 1 else 0 end as is_sub_ds01,
        case when first_product = 'PDS-08' then 1 else 0 end as is_sub_pds08,
        case when first_subscription_date_ds01 is null and first_subscription_date_pds08 is not null then 1 else 0 end as is_cus_pds08_only,
        case when first_subscription_date_pds08 is null and first_subscription_date_ds01 is not null then 1 else 0 end as is_cus_ds01_only,
        case when first_subscription_date_pds08 is not null and first_subscription_date_ds01 is not null then 1 else 0 end as is_cus_ds01_pds08,
        case when first_subscription_date_ds01 = first_subscription_date_pds08 then 1 else 0 end as is_cus_dsandpds_sametime,
        case when first_subscription_date_ds01 < first_subscription_date_pds08 then 1 else 0 end as is_cus_dsandps_dsfirst,
        case when first_subscription_date_ds01 > first_subscription_date_pds08 then 1 else 0 end as is_cus_dsandps_pdsfirst,
        case when pause_start_date is not null then 1 else 0 end as is_pause_ever,
        c.consent_flag as is_email_consent_ever,
        case when first_discount_percentage is not null and 
            first_discount_percentage > 0 and 
            first_discount_percentage <= 100 then 1 else 0 end as is_first_order_discounted,
        case when first_discount_percentage is null then 1 else 0 end as is_first_order_not_discounted,
        case when first_discount_percentage = 0 then 1 else 0 end as is_first_discount_0,
        case when first_discount_percentage = 10 then 1 else 0 end as is_first_discount_10,
        case when first_discount_percentage = 15 then 1 else 0 end as is_first_discount_15,
        case when first_discount_percentage = 20 then 1 else 0 end as is_first_discount_20,
        case when first_discount_percentage = 25 then 1 else 0 end as is_first_discount_25,
        case when first_discount_percentage = 30 then 1 else 0 end as is_first_discount_30,
        case when first_discount_percentage = 40 then 1 else 0 end as is_first_discount_40,
        case when first_discount_percentage = 50 then 1 else 0 end as is_first_discount_50,
        case when first_discount_percentage = 100 then 1 else 0 end as is_first_discount_100,
        case when first_discount_percentage > 0 and first_discount_percentage <= 10 then 1 else 0 end as is_first_discount_0to10,
        case when first_discount_percentage > 10 and first_discount_percentage <= 20 then 1 else 0 end as is_first_discount_10to20,
        case when first_discount_percentage > 20 and first_discount_percentage <= 30 then 1 else 0 end as is_first_discount_20to30,
        case when first_discount_percentage > 30 and first_discount_percentage <= 40 then 1 else 0 end as is_first_discount_30to40,
        case when first_discount_percentage > 40 and first_discount_percentage <= 50 then 1 else 0 end as is_first_discount_40to50,
        case when first_discount_percentage > 50 and first_discount_percentage <= 60 then 1 else 0 end as is_first_discount_50to60,
        case when first_discount_percentage > 60 and first_discount_percentage <= 70 then 1 else 0 end as is_first_discount_60to70,
        case when first_discount_percentage > 70 and first_discount_percentage <= 80 then 1 else 0 end as is_first_discount_70to80,
        case when first_discount_percentage > 80 and first_discount_percentage <= 90 then 1 else 0 end as is_first_discount_80to90,
        case when first_discount_percentage > 90 and first_discount_percentage <= 100 then 1 else 0 end as is_first_discount_90to100,
        case when to_date(activated_at) < to_date(cancelled_at) then 1 else 0 end as is_cancelled_before_activation, 
        reactivation_flag,
        case when has_contacted_mx = 'Y' then 1 else 0 end as MX_flag ,
        case when has_contacted_care = 'Y' then 1 else 0 end as Care_flag,
        case when has_contacted_sci_care = 'Y' then 1 else 0 end as SCI_Care_flag,
        --- Adding coupon flags for Bobby, Gwyenth, and Steph
        case when first_promotion_code = 'sss' or first_promotion_code = 'steph25' or first_promotion_code = 'steph30' or first_promotion_code = 'sss20'
            or first_promotion_code = 'savory25' then 'Sweet Savory Steph'
        when first_promotion_code = 'flavcity15' or first_promotion_code = 'bobby15' or first_promotion_code = 'bobby' or first_promotion_code = 'flavcity'
            or first_promotion_code = 'flavcity30' or first_promotion_code = 'flavcity40' or first_promotion_code = 'bobbyapproved' 
            or first_promotion_code = 'flavcity25' then 'Bobby Parish'
        when first_promotion_code = 'gwyneth' or first_promotion_code = 'gwyneth30' then 'Gwyneth'
        when first_promotion_code is not null then 'Other Coupon code'
        else 'No Coupon code' end as coupon_flag
    from ""SEED_DATA"".""DEV"".""V_SUBSCRIPTION_MASTER"" as s
        left join consent_flag_tbl as c on s.customer_email = c.email

),

sub_inv as 
(
    -- joining recharge invoices
    select s.recharge_subscription_id,s.recurly_subscription_id,s.subscription_id,
        floor(datediff(days,s.subscription_cohort_date,o.order_date)/30) as invoice_sub_month,
        floor(datediff(days,s.subscription_cohort_date,s.subscription_cancelled_at)/30) as cancelled_sub_month,
        (Total_amount_paid_less_cogs + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as ltv,
        invoice_refund_flag
    from all_subs as s
        join all_orders as o on s.recharge_subscription_id = o.subscription_id
        
    union all 
    
    --- joining recurly invoices
    select s.recharge_subscription_id,s.recurly_subscription_id,s.subscription_id,
        floor(datediff(days,s.subscription_cohort_date,o.order_date)/30) as invoice_sub_month,
        floor(datediff(days,s.subscription_cohort_date,s.subscription_cancelled_at)/30) as cancelled_sub_month,
        (Total_amount_paid_less_cogs + TOTAL_SHIPPING_COST - AMOUNT_REFUNDED) as ltv,
        invoice_refund_flag
    from all_subs as s
        join all_orders as o on s.recurly_subscription_id = o.subscription_id 
),


active_cylces as 
(
select distinct d1.date,(floor(datediff(days,d1.date,d2.date)/30)-1) as cycle
from dim_date as d1
cross join dim_date as d2 
where d1.date >= '2018-01-01' and d1.date < current_date and d2.date < current_date and cycle >=0 
order by 1,2
),

final_table as 
(
select s.*,c.cycle,
    max(case when cycle = 0 and (invoice_sub_month = -1 or invoice_sub_month = 0) then 1
             when cycle > 0 and cancelled_sub_month >= 0 and cancelled_sub_month <= cycle-1 and invoice_sub_month = cycle then 1
             when cycle > 0 and cancelled_sub_month >= 0 and cancelled_sub_month <= cycle-1 then 0 
             when cycle > 0 and invoice_sub_month = cycle or invoice_sub_month = cycle-1 then 1 
             else 0 end) as active_flag,
    max(case when cycle = 0 and (invoice_sub_month = -1 or invoice_sub_month = 0) then 1
             when cycle > 0 and invoice_sub_month = cycle then 1 
             else 0 end) as active_flag_revenue_retention,
    sum(case when cycle = 0 and (invoice_sub_month = -1 or invoice_sub_month = 0) and invoice_refund_flag = 'not_fully_refunded' then ltv
             when cycle > 0 and  invoice_sub_month = cycle and invoice_refund_flag = 'not_fully_refunded' then ltv
             else 0 end) as ltv
    
from all_subs as s
    left join active_cylces as c on s.subscription_cohort_date = c.date
    left join sub_inv as si on s.subscription_id = si.subscription_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52
order by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52
)


select * EXCLUDE (customer_id, customer_email,recharge_subscription_id,recurly_subscription_id,subscription_id,customer_cohort_date,subscription_cancelled_at,subscription_cohort_date,active_flag_revenue_retention,ltv),
left(subscription_cohort_date,7) as subscription_month_year,
count(*) as subscription_denominator,
sum(active_flag) as subscription_numerator, 
sum(active_flag_revenue_retention) as subscription_numerator_rr,
sum(ltv) as subscription_numerator_ltv
from final_table
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
order by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46;"
"V_TEMP_PAUSED_SUBSCRIBER_ANALYSIS","create or replace view SEED_DATA.DEV.V_TEMP_PAUSED_SUBSCRIBER_ANALYSIS as 
--- select * from SEED_DATA.DEV.V_TEMP_PAUSED_SUBSCRIBER_ANALYSIS

with pause_rank as
(
select *,
row_number() over(partition by subscription_uuid order by version_started_at) as pause_number,
datediff(day,version_started_at,coalesce(version_ended_at_clean,current_date)) as days_on_pause,
date_trunc(year,subscription_activated_date) as activation_year,
date_trunc(month,subscription_activated_date) as activation_month_year,
floor(datediff(day,subscription_activated_date,version_started_at)/30) as months_since_active,
case when months_since_active >=0 and months_since_active < 4 then '0-3'
when months_since_active >=4 and months_since_active <= 12 then '4-12'
when months_since_active >=13 and months_since_active <= 24 then '13-24'
else '24+' end as months_active_category,
case when activation_year = '2018-01-01' then '2018'
when activation_year = '2019-01-01' then '2019'
when activation_year = '2020-01-01' then '2020'
when activation_year = '2021-01-01' then '2021'
when activation_year = '2022-01-01' then '2022'
when activation_year = '2023-01-01' and activation_month_year = '2023-01-01' then '2023-01'
when activation_year = '2023-01-01' and activation_month_year = '2023-02-01' then '2023-02'
when activation_year = '2023-01-01' and activation_month_year = '2023-03-01' then '2023-03'
when activation_year = '2023-01-01' and activation_month_year = '2023-04-01' then '2023-04'
when activation_year = '2023-01-01' and activation_month_year = '2023-05-01' then '2023-05'
when activation_year = '2023-01-01' and activation_month_year = '2023-06-01' then '2023-06'
when activation_year = '2023-01-01' and activation_month_year = '2023-07-01' then '2023-07'
when activation_year = '2023-01-01' and activation_month_year = '2023-08-01' then '2023-08' end as activation_flag,
case when updated_plan_code ilike '%syn%' then 'DS-01' else 'PDS-08' end as product,
datediff(day,version_started_at,current_date) as days_since_pause,
case when days_since_pause >=0 and days_since_pause <= 10 then 'pause-0-10'
when days_since_pause >=11 and days_since_pause <= 20 then 'pause-11-20'
when days_since_pause >=21 and days_since_pause <= 30 then 'pause-21-30'
when days_since_pause >=31 and days_since_pause <= 40 then 'pause-31-40'
when days_since_pause >=41 and days_since_pause <= 50 then 'pause-41-50'
when days_since_pause >=51 and days_since_pause <= 60 then 'pause-51-60'
when days_since_pause >=60 then 'pause-60+'
end as pause_days_cat

from SEED_DATA.DEV.V_SUBSCRIPTION_PAUSE_HISTORY
where version_started_at >= '2023-04-01' and version_started_At < '2023-09-01'
)

select distinct subscription_uuid, date_trunc(month,version_started_at) as pause_month 
from pause_rank
where pause_number = 1
and version_ended_at_clean is not null
and (version_ended_at_clean != subscription_expires_date or subscription_expires_date is null)
and date_trunc(month,version_started_at) >= '2023-04-01'
and product = 'DS-01'
"
"V_SEED_ACQUISITION_PDS08","create or replace view SEED_DATA.DEV.V_SEED_ACQUISITION_PDS08 as 
--- using the date spin to pin all metrics to the date
with date_spine as (
    select 
    *
    from seed_data.dev.dim_date
    where date between '2018-01-01' and to_date(current_date())
),

sub_master as (
    select 
    *
    from ""SEED_DATA"".""DEV"".""SUBSCRIPTION_MASTER""
    where 
    (case when sku ilike '%syn%' or sku ilike 'ds01%' then 'DS-01'
                    when sku ilike '%pds%' then 'PDS-08'
                    else null end) = 'PDS-08'
),

cancellation_transaction_history as
(
    select to_date(cancelled_at) as date,
        reason_group,
        ifnull(sum(quantity),0) as sub_cancellation_qty,
        --------- adding for sub ids on 9/21/23
        ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_cancellation_ids
    from sub_master
    where 
    to_date(cancelled_at) between '2018-01-01' and to_date(current_date())
    group by 1,2

), 

cancellation_transaction_history_net_pp as
(
    select to_date(cancelled_at) as date,
        ifnull(sum(quantity),0) as sub_cancellation_qty,
        --------- adding for sub ids on 9/21/23
        ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_cancellation_ids
    from sub_master
    where 
    to_date(cancelled_at) between '2018-01-01' and to_date(current_date())
    and was_previously_paused = 'N'
    group by 1

), 

cancellation_transaction_history_ds01 as
(
    select to_date(cancelled_at) as date,
        ifnull(sum(quantity),0) as sub_cancellation_qty,
        --------- adding for sub ids on 9/21/23
        ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_cancellation_ids
    from sub_master
    where 
    to_date(cancelled_at) between '2018-01-01' and to_date(current_date())
    group by 1

), 

pause as 
(
    select to_date(pause_start_date) as date,
    ifnull(sum(quantity),0) as sub_pause_cnt,
    --------- adding for sub ids on 9/21/23
    ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_pause_ids
    from sub_master
    where 
    to_date(pause_start_date) between '2018-01-01' and to_date(current_date())
    group by 1

),

subscription as (
select 
  to_date(activated_at) as date
, ifnull(sum(quantity),0) as sub_created_qty
--------- adding for sub ids on 9/21/23
, ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_created_ids
, ifnull(count(distinct case when ifnull(first_discount_percentage_base_price,0) > 0 then recurly_subscription_id end),0) as discounted_sub_created_ids
from sub_master
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
group by 1
)

, reactivation as (
select 
  to_date(activated_at) as date
, ifnull(sum(quantity),0) as sub_reactivation_qty
--------- adding for sub ids on 9/21/23
, ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_reactivation_ids
, ifnull(count(distinct case when ifnull(first_discount_percentage_base_price,0) > 0 then recurly_subscription_id end),0) as discounted_sub_reactivation_ids
from sub_master
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 1
group by 1
)

, product_subs as (
select 
  to_date(activated_at) as date,
----------------------------Adjusted away from First Qty on 9/5/23-------------------------  
--  sum(case when first_subscription_date_ds01 is null then quantity end ) as pdsonly_qty
--, sum(case when first_subscription_date_pds08 is null then quantity end ) as dsonly_qty
  sum(case when sku ilike '%syn%' or sku ilike 'ds01%' then quantity end ) as dsonly_qty
, sum(case when sku ilike '%pds%' then quantity end ) as pdsonly_qty
, sum(case when first_subscription_date_ds01 = first_subscription_date_pds08 then quantity end ) as dsandpds_qty
, sum(case when first_subscription_date_ds01 < first_subscription_date_pds08 then quantity end ) as dsafirst_qty
, sum(case when first_subscription_date_ds01 > first_subscription_date_pds08 then quantity end ) as pdsfirst_qty
--------- adding for sub ids on 9/21/23
, count(distinct case when sku ilike '%syn%' or sku ilike 'ds01%' then RECURLY_SUBSCRIPTION_ID end ) as dsonly_sub_ids
, count(distinct case when sku ilike '%pds%' then quantity end ) as pdsonly_sub_ids
, count(distinct case when first_subscription_date_ds01 = first_subscription_date_pds08 then RECURLY_SUBSCRIPTION_ID end ) as dsandpds_sub_ids
, count(distinct case when first_subscription_date_ds01 < first_subscription_date_pds08 then RECURLY_SUBSCRIPTION_ID end ) as dsafirst_sub_ids
, count(distinct case when first_subscription_date_ds01 > first_subscription_date_pds08 then RECURLY_SUBSCRIPTION_ID end ) as pdsfirst_sub_ids

from sub_master
where to_date(activated_at) between '2018-01-01' and to_date(current_date())
group by 1
)

, new_sub as (
select 
  to_date(activated_at) as date
, ifnull(sum(quantity),0) as sub_new_qty
--------- adding for sub ids on 9/21/23
, ifnull(count(distinct RECURLY_SUBSCRIPTION_ID),0) as sub_new_ids
, ifnull(count(distinct case when ifnull(first_discount_percentage_base_price,0) > 0 then recurly_subscription_id end),0) as discounted_sub_new_ids
from sub_master
where 
to_date(activated_at) between '2018-01-01' and to_date(current_date())
and reactivation_flag = 0
group by 1
)

, orders as (
select 
  to_date(INVOICE_DATE) as date
, ifnull(sum(quantity),0) as orders
, ifnull(sum(TOTAL_AMOUNT_PAID),0) as revenue
from SEED_DATA.DEV.ORDER_HISTORY
where 
to_date(INVOICE_DATE) between '2018-01-01' and to_date(current_date())
and (case when sku ilike '%syn%' or sku ilike 'ds01%' then 'DS-01'
                    when sku ilike '%pds%' then 'PDS-08'
                    else null end) = 'PDS-08'

group by 1
)

, finance as (
select
  date
, sum(case when product = 'PDS-08' and SKU_CLEAN in ('Refill - 3 Months') then TOTAL_CREATED_SUB_IDS end) as three_month_srp_sub_created_ids
, sum(case when product = 'PDS-08' and SKU_CLEAN in ('Refill - 6 Months') then TOTAL_CREATED_SUB_IDS end) as six_month_srp_sub_created_ids
, sum(total_gross_rev) as total_gross_rev
, sum(inv_total_sub_ids) as inv_total_subs
, sum(activated_total_gross_rev) as activated_total_gross_rev
from
SEED_DATA.DEV.FINANCIAL_MODEL 
where product = 'PDS-08'
group by 1
)

, spend as (
select 
  to_date(date) as date
, sum(case when lower(channel_update) = 'tiktok' then spend end ) as  tiktok_spend
, sum(case when lower(channel_update) = 'tapjoy' then spend end ) as  tapjoy_spend
, sum(case when lower(channel_update) = 'spotify' then spend end ) as  spotify_spend
, sum(case when lower(channel_update) = 'iHeart' then spend end ) as  iheart_spend
, sum(case when lower(channel_update) = 'google nonbrand' then spend end ) as  googlenb_spend
, sum(case when lower(channel_update) = 'google brand' then spend end ) as  googlebrand_spend
, sum(case when lower(channel_update) = 'outbrain' then spend end ) as  outbrain_spend
, sum(case when lower(channel_update) = 'meta' then spend end ) as  meta_spend
, sum(case when lower(channel_update) = 'rokt' then spend end ) as  rokt_spend
, sum(case when lower(channel_update) = 'pinterest' then spend end ) as  pinterest_spend
, sum(case when lower(channel_update) = 'reddit' then spend end ) as  reddit_spend
, sum(case when lower(channel_update) = 'public radio' then spend end ) as  public_radio_spend
, sum(case when lower(channel_update) = 'bing nonbrand' then spend end ) as  bingnb_spend
, sum(case when lower(channel_update) = 'bing brand' then spend end ) as  bingbrand_spend
, sum(case when lower(channel_update) = 'tradedesk' then spend end ) as  tradedesk_spend
, sum(case when lower(channel_update) = 'snapchat' then spend end ) as  snapchat_spend
, sum(case when lower(channel_update) = 'influencer' then spend end ) as  influencer_spend
, sum(case when lower(channel_update) = 'partnership' then spend end ) as  partnership_spend
, sum(case when lower(channel_update) = 'affiliate' then spend end ) as  affiliate_spend
, sum(case when lower(channel_update) = 'liveintent' then spend end ) as  liveintent_spend
, sum(case when lower(channel_update) = 'youtube' then spend end ) as  youtube_spend
, ifnull(sum(spend),0) as total_spend
from
PROD_DB.GROWTH.V_MARKETING_CHANNEL_SPEND_ALL_V2
--SEED_DATA.DEV.V_MARKETING_CHANNEL_SPEND_ALL
where 
to_date(date) between '2018-01-01' and to_date(current_date())
and product = 'PDS-08'
group by 1
)

, final as (
select 
  ds.date
, DATE_TRUNC('MONTH', ds.date) AS month_date
, 'PDS-08' as product
, sum( case when cth.reason_group = 'Price' then cth.sub_cancellation_qty end ) as price_sub_cancellation_qty
, sum( case when cth.reason_group = 'Compliance' then cth.sub_cancellation_qty end ) as compliance_sub_cancellation_qty
, sum( case when cth.reason_group = 'No improvement' then cth.sub_cancellation_qty end ) as noimprove_sub_cancellation_qty
, sum( case when cth.reason_group = 'Discomfort' then cth.sub_cancellation_qty end ) as discomfort_sub_cancellation_qty
, sum( case when cth.reason_group = 'Subscription aversion' then cth.sub_cancellation_qty end ) as subaver_sub_cancellation_qty
, sum( case when cth.reason_group = 'Stopped taking probiotics' then cth.sub_cancellation_qty end ) as stopped_sub_cancellation_qty
, sum( case when cth.reason_group = 'Switched probiotics' then cth.sub_cancellation_qty end ) as switchprob_cancellation_cnt
, sum( case when cth.reason_group = 'UX' then cth.sub_cancellation_qty end ) as ux_sub_cancellation_qty
, sum( case when cth.reason_group = 'Switched due to price' then cth.sub_cancellation_qty end ) as switchprice_sub_cancellation_qty
, sum( case when cth.reason_group = 'Experience' then cth.sub_cancellation_qty end ) as experience_sub_cancellation_qty
, sum( case when cth.reason_group = 'Other' then cth.sub_cancellation_qty end ) as other_sub_cancellation_qty
, sum( case when cth.reason_group is null then cth.sub_cancellation_qty end ) as null_sub_cancellation_qty
, sum(cth.sub_cancellation_qty) as ttl_sub_cancellation_qty
, sum(cth.sub_cancellation_ids) as ttl_sub_cancellation_ids
, max(cthnpp.sub_cancellation_qty) as netpp_sub_cancellation_qty
, max(cthnpp.sub_cancellation_ids) as netpp_sub_cancellation_ids
, max(sub.sub_created_qty) as sub_created_qty
, max(sub.sub_created_ids) as sub_created_ids
, max(sub.discounted_sub_created_ids) as discounted_sub_created_ids
, max(psub.pdsonly_qty) as sub_created_pdsonly_qty
, max(psub.pdsonly_sub_ids) as sub_created_pdsonly_sub_ids
, max(psub.dsonly_qty) as sub_created_dsonly_qty
, max(psub.dsonly_sub_ids) as sub_created_dsonly_sub_ids
, max(psub.dsandpds_qty) as sub_created_dsandpds_qty
, max(psub.dsandpds_sub_ids) as sub_created_dsandpds_sub_ids
, max(psub.dsafirst_qty) as sub_created_dsafirst_qty
, max(psub.dsafirst_sub_ids) as sub_created_dsafirst_sub_ids
, max(psub.pdsfirst_qty) as sub_created_pdsfirst_qty
, max(psub.pdsfirst_sub_ids) as sub_created_pdsfirst_sub_ids
, max(pau.sub_pause_cnt) as sub_pause_cnt
, max(pau.sub_pause_ids) as sub_pause_ids
, max(rtv.sub_reactivation_qty) as sub_reactivation_qty
, max(rtv.sub_reactivation_ids) as sub_reactivation_ids
, max(rtv.discounted_sub_reactivation_ids) as discounted_sub_reactivation_ids
, max(nsu.sub_new_qty) as sub_new_qty
, max(nsu.sub_new_ids) as sub_new_ids
, max(nsu.discounted_sub_new_ids) as discounted_sub_new_ids
, max(ord.orders) as orders
, max(ord.revenue) as revenue
, max(fin.total_gross_rev) as total_gross_rev
, max(fin.activated_total_gross_rev) as activated_total_gross_rev
, max(fin.inv_total_subs) as inv_total_subs
, max(fin.three_month_srp_sub_created_ids) as three_month_srp_sub_created_ids
, max(fin.six_month_srp_sub_created_ids) as six_month_srp_sub_created_ids
---- spend
, max(tiktok_spend) as tiktok_spend
, max(tapjoy_spend) as tapjoy_spend
, max(spotify_spend) as spotify_spend
, max(iheart_spend) as iheart_spend
, max(googlenb_spend) as googlenb_spend
, max(googlebrand_spend) as googlebrand_spend
, max(bingnb_spend) as bingnb_spend
, max(bingbrand_spend) as bingbrand_spend
, max(outbrain_spend) as outbrain_spend
, max(meta_spend) as meta_spend
, max(rokt_spend) as rokt_spend
, max(pinterest_spend) as pinterest_spend
, max(reddit_spend) as reddit_spend
, max(public_radio_spend) as public_radio_spend
, max(tradedesk_spend) as tradedesk_spend
, max(snapchat_spend) as snapchat_spend
, max(influencer_spend) as influencer_spend
, max(partnership_spend) as partnership_spend
, max(affiliate_spend) as affiliate_spend
, max(liveintent_spend) as liveintent_spend
, max(youtube_spend) as youtube_spend
, max(total_spend) as total_spend

from date_spine as ds
---- join to cancellations
left join cancellation_transaction_history as cth
on ds.date = cth.date
---- join to total subs
left join subscription as sub
on ds.date = sub.date
---- join to paused subs
left join pause as pau
on ds.date = pau.date
---- join to reactivation subs
left join reactivation as rtv
on ds.date = rtv.date
---- join to new subs
left join new_sub as nsu
on ds.date = nsu.date
---- join to orders
left join orders as ord
on ds.date = ord.date
---- join to finance
left join finance as fin
on ds.date = fin.date
---- join to product subs
left join product_subs as psub
on ds.date = psub.date
---- join to spend by channel
left join spend as spd
on ds.date = spd.date
---- join to cancellations net previously paused
left join cancellation_transaction_history_net_pp as cthnpp
on ds.date = cthnpp.date

group by 1,2,3 )

select * from final order by 1 desc;"
"V_SRP_INVOICE_BUCKETS","create or replace view SEED_DATA.DEV.V_SRP_INVOICE_BUCKETS(
	INVOICE_DATE,
	SKU,
	INVOICED_FROM_PRIOR_COHORT,
	UPGRADE_FROM_SYNWK,
	UPGRADE_FROM_SYNRF
) as 
 
with other_orders as								
(						
with orders as								
(    select
  TO_DATE(INVOICE_DATE) as INVOICE_DATE,
        CUSTOMER_ID,
        SUBSCRIPTION_ID as SUBSCRIPTION_ID,
        INVOICE_ID as INVOICE_ID,
        INVOICE_NUMBER AS INVOICE_NUMBER,
        TRANSACTION_ID,
       case when sku is null then 'MISSING SKU' else sku end as sku,
        case when sku ilike '%wk' then 'Welcome Kit'								
        when sku ilike '%wk-3mo%' then 'Welcome kit - 3 Months'								
        when sku ilike '%wk-6mo%' then 'Welcome kit - 6 Months'								
        when sku ilike '%rf' then 'Refill'								
        when sku ilike '%2mo%' then 'Refill - 2 Months'								
        when sku ilike '%3mo%' then 'Refill - 3 Months'								
        when SKU ilike '%6mo%' then 'Refill - 6 Months'								
        else null end as sku_clean,								
        'Billed' as bill_flag,								
         case when bill_flag = 'Billed' and sku_clean ilike '%2 Months' then dateadd(day,60,invoice_date)								
              when bill_flag = 'Billed' and sku_clean ilike '%3 Months' then dateadd(day,90,invoice_date)								
              when bill_flag = 'Billed' and sku_clean ilike '%6 Months' then dateadd(day,180,invoice_date)								
              when bill_flag = 'Billed' then dateadd(day,30,invoice_date)								
              else null end as potential_bill_date
    from SEED_DATA.DEV.ORDER_HISTORY --- all orders and adjusted orders for SRP 
         where sku_clean is not null -- removing non mainstream sku
            and subscription_id is not null 
--  where subscription_id = '63e00920fb808d3f873f1448469b2197'
   --invoice_number = '2593891' 2743296 	
),								
								
recursive_months AS (								
SELECT	DATEADD(day,1*30,invoice_date),								
        CUSTOMER_ID,
        SUBSCRIPTION_ID as SUBSCRIPTION_ID,
        INVOICE_ID as INVOICE_ID,
        INVOICE_NUMBER AS INVOICE_NUMBER,
        TRANSACTION_ID,
        case when sku is null then 'MISSING SKU' else sku end as sku,												
        sku_clean,								
        'Proxy' as bill_flag,								
        '2099-01-01' as potential_bill_date								
FROM orders								
WHERE (sku_clean ilike '%2 Months%' or sku_clean ilike '%3 Months%' or sku_clean ilike '%6 Months%') and (DATEADD(day,1*30,invoice_date) <= current_date())								
								
UNION ALL								
								
SELECT								
DATEADD(day,2*30,invoice_date),								
        CUSTOMER_ID,
        SUBSCRIPTION_ID as SUBSCRIPTION_ID,
        INVOICE_ID as INVOICE_ID,
        INVOICE_NUMBER AS INVOICE_NUMBER,
        TRANSACTION_ID,
        case when sku is null then 'MISSING SKU' else sku end as sku,								
        sku_clean,								
        'Proxy' as bill_flag,								
        '2099-01-01' as potential_bill_date								
FROM orders								
WHERE (sku_clean ilike '%3 Months%' or sku_clean ilike '%6 Months%') and (DATEADD(day,2*30,invoice_date) <= current_date())								
								
UNION ALL								
								
SELECT								
        DATEADD(day,3*30,invoice_date),								
        CUSTOMER_ID,
        SUBSCRIPTION_ID as SUBSCRIPTION_ID,
        INVOICE_ID as INVOICE_ID,
        INVOICE_NUMBER AS INVOICE_NUMBER,
        TRANSACTION_ID,
        case when sku is null then 'MISSING SKU' else sku end as sku,									
        sku_clean,								
        'Proxy' as bill_flag,								
        '2099-01-01' as potential_bill_date	
FROM orders								
WHERE sku_clean ilike '%6 Months%' and (DATEADD(day,3*30,invoice_date) <= current_date())								
								
UNION ALL								
								
SELECT								
DATEADD(day,4*30,invoice_date),								
        CUSTOMER_ID,
        SUBSCRIPTION_ID as SUBSCRIPTION_ID,
        INVOICE_ID as INVOICE_ID,
        INVOICE_NUMBER AS INVOICE_NUMBER,
        TRANSACTION_ID,
        case when sku is null then 'MISSING SKU' else sku end as sku,								
        sku_clean,								
        'Proxy' as bill_flag,								
        '2099-01-01' as potential_bill_date								
FROM orders								
WHERE sku_clean ilike '%6 Months%' and (DATEADD(day,4*30,invoice_date) <= current_date())								
								
UNION ALL								
								
SELECT								
        DATEADD(day,5*30,invoice_date),								
        CUSTOMER_ID,
        SUBSCRIPTION_ID as SUBSCRIPTION_ID,
        INVOICE_ID as INVOICE_ID,
        INVOICE_NUMBER AS INVOICE_NUMBER,
        TRANSACTION_ID,
        case when sku is null then 'MISSING SKU' else sku end as sku,
        sku_clean,								
        'Proxy' as bill_flag,								
        '2099-01-01' as potential_bill_date	
FROM orders								
WHERE sku_clean ilike '%6 Months%' and (DATEADD(day,5*30,invoice_date) <= current_date())								
)								
								
								
SELECT *								
FROM orders								
UNION ALL								
select *								
from recursive_months								
)

,other_order_final as (
select *,
       case when bill_flag = 'Billed' then dense_rank() over (partition by subscription_id, bill_flag order by invoice_date desc) end as invoice_rank
from other_orders
                    )
                    		
,transactions as (
								
select 
o.*, 
case when date_trunc('month',to_date(s.activated_at)) = date_trunc('month',to_date(invoice_date)) then 'New' else 'Recurring' end as sub_flag,
invoice_rank,  
invoice_rank + 1  as prev_invoice_rank    
from other_order_final as o										
left join seed_data.dev.subscription_master as s on o.subscription_id = s.recurly_subscription_id		  

				
)																											

, previous_transactions as (
         select
           so.subscription_id,
           so.invoice_date,
           so.sku,
           so.sku_clean,
           o.sku_clean as prev_sku
          from transactions so
          left join other_ORDER_final o on so.subscription_id = o.subscription_id
                                 and so.prev_invoice_rank = o.invoice_rank 
                    )
 ,combined_transactions as (                       

select 
       distinct t.*,
                ps.prev_sku as prev_sku_clean
                
       from transactions t
       left join previous_transactions ps
       using (subscription_id, invoice_date)

                    )


        select invoice_date
               ,upper(sku) as SKU 
       ,count(distinct case when bill_flag = 'Billed' and sub_flag = 'Recurring' and sku_clean =  prev_sku_clean then subscription_id end) as invoiced_From_Prior_Cohort
       ,count(distinct case when prev_sku_clean = 'Welcome Kit' and bill_flag = 'Billed' and sub_flag = 'Recurring' and sku_clean in ('Refill - 6 Months', 'Refill - 3 Months') then subscription_id end) as upgrade_from_synwk
       ,count(distinct case when prev_sku_clean = 'Refill' and bill_flag = 'Billed' and sub_flag = 'Recurring' and sku_clean in ('Refill - 6 Months', 'Refill - 3 Months')then subscription_id end) as upgrade_from_synrf

       from combined_transactions group by 1,2;"
"V_SUBSCRIPTION","create or replace view SEED_DATA.DEV.V_SUBSCRIPTION(
	RECHARGE_SUBSCRIPTION_ID,
	RECURLY_SUBSCRIPTION_ID,
	IS_RECHARGE_NATIVE,
	IS_RECURLY_NATIVE,
	IS_IMPORTED,
	CUSTOMER_ID,
	CUSTOMER_EMAIL,
	FIRST_NAME,
	LAST_NAME,
	CURRENT_STATUS,
	CREATED_AT,
	ACTIVATED_AT,
	CANCELLED_AT,
	PRICE,
	QUANTITY,
	FULL_ADDRESS,
	BILLING_COUNTRY,
	BILLING_CITY,
	BILLING_STATE,
	SKU
) as 

with all_subs as			
(			
-- Get all (UNIMPORTED) Rechage-Only Subscriptions			
select to_varchar(recharge_s.id) as recharge_subscription_id,			
null as recurly_subscription_id,			
1 as is_recharge_native,			
0 as is_recurly_native,			
0 as is_imported,			
to_varchar(recharge_c.id) as customer_id,			
recharge_c.email as customer_email,			
recharge_c.first_name as first_name,			
recharge_c.last_name as last_name,			
recharge_s.status as current_status,			
recharge_s.created_at as created_at,			
recharge_s.created_at as activated_at,	--- Updating to account for activated_at discreperancy 		
recharge_s.cancelled_at as cancelled_at,			
recharge_s.price as price,			
recharge_s.quantity as quantity,			
recharge_c.BILLING_ADDRESS_1 as full_address,			
recharge_c.billing_country,			
recharge_c.billing_city as billing_city,			
recharge_c.billing_province as billing_state,			
recharge_s.sku			
from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s			
join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id			
where to_varchar(recharge_s.id) not in (			
select distinct _RECHARGE_SUBSCRIPTION_ID			
from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_MAPPING_CONSOLIDATED""	----- let's update this table into SEED Data and confirm validity		
)			
			
union all			
			
-- Get all (IMPORTED & MAPPED) Subscriptions			
select to_varchar(mapping._recharge_subscription_id) as recharge_subscription_id,			
to_varchar(mapping._recurly_subscription_id) as recurly_subscription_id,			
1 as is_recharge_native,			
0 as is_recurly_native,			
1 as is_imported,			
to_varchar(recurly.account_code) as customer_id,			
recurly.email as customer_email,			
a.account_first_name as first_name,			
a.account_last_name as last_name,			
recurly.state as current_status,			
recharge_s.created_at as created_at,			
recharge_s.created_at as activated_at, -- precaution: we dont know the exact ""activated at"" for imporated subscriptions			
-- recurly.activated_at as activated_at,			
recurly.canceled_at as cancelled_at,			
recurly.total_recurring_amount as price,			
recurly.quantity as quantity,			
ship_address_street1 as full_address,			
ship_address_country,			
SHIP_ADDRESS_CITY,			
SHIP_ADDRESS_STATE,			
recurly.plan_code as sku			
from ""MARKETING_DATABASE"".""RECHARGE"".""SUBSCRIPTION"" recharge_s			
join ""MARKETING_DATABASE"".""RECHARGE"".""CUSTOMER"" recharge_c on recharge_c.id = recharge_s.customer_id			
join			
(			
select distinct _RECHARGE_SUBSCRIPTION_ID, _RECURLY_SUBSCRIPTION_ID			
from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_MAPPING_CONSOLIDATED"" ----- let's update this table into SEED Data and confirm validity			
) as mapping on to_varchar(mapping._recharge_subscription_id) = to_varchar(recharge_s.id)			
join ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" as recurly on mapping._recurly_subscription_id = recurly.uuid			
LEFT JOIN ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS"" a ON recurly.account_code = a.account_code			
			
union all			
			
-- Get all (UNIMPORTED) Recurly-Only Subscriptions			
select null as recharge_subscription_id,			
to_varchar(uuid) as recurly_subscription_id,			
0 as is_recharge_native,			
1 as is_recurly_native,			
0 as is_imported,			
to_varchar(s.account_code) as customer_id,			
email as customer_email,			
a.account_first_name as first_name,			
a.account_last_name as last_name,			
state as current_status,			
created_at as created_at,			
activated_at as activated_at,			
canceled_at as cancelled_at,			
total_recurring_amount as price,			
quantity as quantity,			
ship_address_street1 as full_address,			
ship_address_country,			
SHIP_ADDRESS_CITY,			
SHIP_ADDRESS_STATE,			
s.plan_code as sku			
from ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""SUBSCRIPTIONS"" s			
LEFT JOIN ""IO06230_RECURLY_SEED_SHARE"".""CLASSIC"".""ACCOUNTS"" a ON s.account_code = a.account_code			
where  uuid not in (			
select distinct _RECURLY_SUBSCRIPTION_ID			
from ""MARKETING_DATABASE"".""PRODUCTION_VIEWS"".""V_MAPPING_CONSOLIDATED"" ----- let's update this table into SEED Data and confirm validity	
)			
)

select * from all_subs;"
